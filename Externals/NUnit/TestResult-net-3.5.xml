<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="D:\Dev\NUnit\nunit-2.6\builds\net\3.5\release\NUnitTests.nunit" total="3152" errors="0" failures="0" not-run="8" inconclusive="19" ignored="0" skipped="8" invalid="0" date="2014-12-16" time="19:27:38">
  <environment nunit-version="2.6.4.14350" clr-version="2.0.50727.5485" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="D:\Dev\NUnit\nunit-2.6\builds\net\3.5\release" machine-name="CHARLIE-LAPTOP" user="charlie" user-domain="charlie-laptop" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Project" name="D:\Dev\NUnit\nunit-2.6\builds\net\3.5\release\NUnitTests.nunit" executed="True" result="Success" success="True" time="73.866" asserts="0">
    <results>
      <test-suite type="Assembly" name="D:\Dev\NUnit\nunit-2.6\builds\net\3.5\release\tests/nunit.framework.tests.dll" executed="True" result="Success" success="True" time="5.651" asserts="0">
        <results>
          <test-suite type="Namespace" name="NUnit" executed="True" result="Success" success="True" time="5.651" asserts="0">
            <results>
              <test-suite type="Namespace" name="Framework" executed="True" result="Success" success="True" time="5.651" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Constraints" executed="True" result="Success" success="True" time="0.570" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="EmptyConstraintTest" executed="True" result="Success" success="True" time="0.052" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.FailsWithBadValues(System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.InvalidDataThrowsArgumentException(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.ProvidesProperFailureMessage(System.Object[],&quot;&lt; 1, 2, 3 &gt;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(System.Collections.Generic.List`1[System.Int32])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EqualConstraintTests" executed="True" result="Success" success="True" time="0.182" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDates" executed="True" result="Success" success="True" time="0.024" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinDays" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinHours" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinMilliseconds" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinMinutes" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinSeconds" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinTicks" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinTimeSpan" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDictionaries_DifferentOrder" executed="True" result="Success" success="True" time="0.036" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDictionaries_Failure" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDictionaries_SameOrder" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-suite type="ParameterizedTest" name="CanMatchDoublesWithRelativeTolerance" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithRelativeTolerance(9500.0d)" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithRelativeTolerance(10000.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithRelativeTolerance(10500.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanMatchDoublesWithUlpTolerance" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithUlpTolerance(2E+16.0d)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithUlpTolerance(2E+16.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchHashtables_DifferentOrder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchHashtables_Failure" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchHashtables_SameOrder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchHashtableWithDictionary" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="ParameterizedTest" name="CanMatchSinglesWithRelativeTolerance" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithRelativeTolerance(9500.0f)" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithRelativeTolerance(10000.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithRelativeTolerance(10500.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanMatchSinglesWithUlpTolerance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithUlpTolerance(2E+07.0f)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithUlpTolerance(2E+07.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanMatchSpecialFloatingPointValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(double.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(float.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(double.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(float.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(double.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(float.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchTimeSpanWithinMinutes" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchUsingIsEqualToWithinTimeSpan" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfDaysPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfHoursPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfMillisecondsPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfMinutesPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfPercentPrecedesWithin" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfSecondsPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfTicksPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnDecimal" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="ParameterizedTest" name="ErrorIfUlpsIsUsedOnIntegralType" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnIntegralType(1000UL,1010UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnIntegralType(1000L,1010L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnIntegralType(1000,1010)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnIntegralType(1000,1010)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsPrecedesWithin" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorWithPercentAndUlpsToleranceModes" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorWithUlpsAndPercentToleranceModes" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-suite type="ParameterizedTest" name="FailsOnDoublesOutsideOfRelativeTolerance" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnDoublesOutsideOfRelativeTolerance(11500.0d)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnDoublesOutsideOfRelativeTolerance(8500.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="FailsOnDoublesOutsideOfUlpTolerance" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnDoublesOutsideOfUlpTolerance(2E+16.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnDoublesOutsideOfUlpTolerance(2E+16.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="FailsOnSinglesOutsideOfRelativeTolerance" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnSinglesOutsideOfRelativeTolerance(8500.0f)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnSinglesOutsideOfRelativeTolerance(11500.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="FailsOnSinglesOutsideOfUlpTolerance" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnSinglesOutsideOfUlpTolerance(2E+07.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnSinglesOutsideOfUlpTolerance(2E+07.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(double.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(double.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(5,&quot;5&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(double.NaN,&quot;NaN&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(double.PositiveInfinity,&quot;Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.SucceedsWithGoodValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.SucceedsWithGoodValues(4.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.SucceedsWithGoodValues(4.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.SucceedsWithGoodValues(4.0000m)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedArrayComparer" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.007" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedEqualityComparer" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedEqualityComparerOfT" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedLambda_IntArgs" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedLambda_StringArgs" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedListComparer" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EqualConstraintTests+DateTimeOffSetEquality" executed="True" result="Success" success="True" time="0.012" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDates" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinDays" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinMilliseconds" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinMinutes" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinSeconds" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinTicks" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinTimeSpan" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchUsingIsEqualToWithinTimeSpan" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.DTimeOffsetCanMatchDatesWithinHours" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EqualityComparerTests" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.CanCompareArrayContainingSelfToSelf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.CrossReferencingRecursiveEnumerablesAreNotEqual" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.IEquatableDifferentTypesSuccess_WhenActualImplementsIEquatable" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.IEquatableDifferentTypesSuccess_WhenExpectedImplementsIEquatable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.IEquatableHasPrecedenceOverDefaultEquals" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.IEquatableSuccess" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.RecursionCheckDoesNotRelyOnValueEquality" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.ReferenceEqualityHasPrecedenceOverIEquatable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.SelfContainingRecursiveEnumerablesAreNotEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EqualTest" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualTest.FailedStringMatchShowsFailurePosition" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualTest.LongStringsAreTruncated" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualTest.LongStringsAreTruncatedAtBothEndsIfNecessary" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualTest.LongStringsAreTruncatedAtFrontEndIfNecessary" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualTest.TestPropertyWithPrivateSetter" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FalseConstraintTest" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(True,&quot;True&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(True,&quot;True&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.SucceedsWithGoodValues(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.SucceedsWithGoodValues(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FloatingPointNumericsTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.DoubleEqualityWithUlps" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.FloatEqualityWithUlps" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredDoubleReinterpretation" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredFloatReinterpretation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredIntegerReinterpretation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredLongReinterpretation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MsgUtilTests" executed="True" result="Success" success="True" time="0.017" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipExpectedAndActual_StringsDoNotFitInLine" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipExpectedAndActual_StringsFitInLine" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipExpectedAndActual_StringTailsFitInLine" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="EscapeControlCharsTest" executed="True" result="Success" success="True" time="0.010" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\v&quot;,&quot;\\v&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\a&quot;,&quot;\\a&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n&quot;,&quot;\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n\n&quot;,&quot;\\n\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n\n\n&quot;,&quot;\\n\\n\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r&quot;,&quot;\\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\f&quot;,&quot;\\f&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\t\n&quot;,&quot;\\t\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\x2029&quot;,&quot;\\x2029&quot;)" description="Paragraph separator character" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n\r&quot;,&quot;\\n\\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;This is a\rtest message&quot;,&quot;This is a\\rtest message&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(null,null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\t&quot;,&quot;\\t&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r\n&quot;,&quot;\\r\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\\r\\n&quot;,&quot;\\\\r\\\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\b&quot;,&quot;\\b&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r\r\r&quot;,&quot;\\r\\r\\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r\r&quot;,&quot;\\r\\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\x0085&quot;,&quot;\\x0085&quot;)" description="Next line character" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\x2028&quot;,&quot;\\x2028&quot;)" description="Line separator character" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="TestClipString" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipAtStartAndEnd" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.NoClippingNeeded" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipAtEnd" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipAtStart" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NaNConstraintTest" executed="True" result="Success" success="True" time="0.011" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(double.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(double.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(float.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(float.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(42,&quot;42&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(double.PositiveInfinity,&quot;Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(double.NegativeInfinity,&quot;-Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(float.PositiveInfinity,&quot;Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(float.NegativeInfinity,&quot;-Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.SucceedsWithGoodValues(double.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.SucceedsWithGoodValues(float.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NullConstraintTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NullConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NullConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NullConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NullConstraintTest.SucceedsWithGoodValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NullOrEmptyStringConstraintTest" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.InvalidDataThrowsArgumentException(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.SucceedsWithGoodValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.SucceedsWithGoodValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NumericsTest" executed="True" result="Success" success="True" time="0.022" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchDecimalWithoutToleranceMode" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchDecimalWithPercentage" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-suite type="ParameterizedTest" name="CanMatchIntegralsWithPercentage" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000UL)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanMatchWithoutToleranceMode" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(1234.568f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(1234.5678d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnDecimalAbovePercentage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnDecimalBelowPercentage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsOnIntegralsOutsideOfPercentage" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PredicateConstraintTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PredicateConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PredicateConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.PredicateConstraintTests.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.PredicateConstraintTests.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.PredicateConstraintTests.SucceedsWithGoodValues(0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.PredicateConstraintTests.SucceedsWithGoodValues(-5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertyExistsTest" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.FailsWithBadValues(42)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.FailsWithBadValues(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.FailsWithBadValues(System.Int32)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="InvalidDataThrowsException" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.InvalidDataThrowsException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ProvidesProperFailureMessage(42,&quot;&lt;System.Int32&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ProvidesProperFailureMessage(System.Collections.ArrayList,&quot;&lt;System.Collections.ArrayList&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ProvidesProperFailureMessage(System.Int32,&quot;&lt;System.Int32&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.SucceedsWithGoodValues(System.Int32[])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.SucceedsWithGoodValues(System.Array)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertyTest" executed="True" result="Success" success="True" time="0.011" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.PropertyTest.FailsWithBadValues(System.Int32[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.PropertyTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="InvalidDataThrowsException" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.PropertyTest.InvalidDataThrowsException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.PropertyTest.InvalidDataThrowsException(42)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.PropertyTest.InvalidDataThrowsException(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.PropertyEqualToValueWithTolerance" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.PropertyTest.ProvidesProperFailureMessage(System.Int32[],&quot;3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.PropertyTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;7&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.PropertyTest.SucceedsWithGoodValues(System.Int32[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.PropertyTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ReusableConstraintTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanCreateReusableConstraintByImplicitConversion" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-suite type="Theory" name="CanReuseReusableConstraintMultipleTimes" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;not &lt;empty&gt;&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;not &lt;null&gt;&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;property Length &lt;greaterthan 3&gt;&gt;)" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                              <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;and &lt;property Length &lt;equal 4&gt;&gt; &lt;startswith &quot;te&quot;&gt;&gt;)" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SameAsTest" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SameAsTest.FailsWithBadValues(System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SameAsTest.FailsWithBadValues(3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SameAsTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SameAsTest.ProvidesProperFailureMessage(System.Object,&quot;&lt;System.Object&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SameAsTest.ProvidesProperFailureMessage(3,&quot;3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SameAsTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SameAsTest.SucceedsWithGoodValues(System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SamePathOrUnderTest_Linux" executed="True" result="Success" success="True" time="0.017" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/Folder1/Folder2&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/Folder2&quot;,&quot;\&quot;/Folder1/Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/folder3&quot;,&quot;\&quot;/folder1/folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../folder3&quot;,&quot;\&quot;/folder1/./folder2/../folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1&quot;,&quot;\&quot;/folder1\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SamePathOrUnderTest_Windows" executed="True" result="Success" success="True" time="0.011" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\folder3&quot;,&quot;\&quot;C:\\folder1\\folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\Folder1\\Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2\\temp\\..\\Folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SamePathTest_Linux" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/folder2/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;folder1/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;//folder1/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../file.temp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/Folder1/File.TMP&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./folder2/../File.TMP&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/folder2/file.tmp&quot;,&quot;\&quot;/folder2/file.tmp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;folder1/file.tmp&quot;,&quot;\&quot;folder1/file.tmp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;//folder1/file.tmp&quot;,&quot;\&quot;//folder1/file.tmp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../file.temp&quot;,&quot;\&quot;/folder1/./folder2/../file.temp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/File.TMP&quot;,&quot;\&quot;/Folder1/File.TMP\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./folder2/../File.TMP&quot;,&quot;\&quot;/FOLDER1/./folder2/../File.TMP\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.RootPathEquality" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/../file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/../file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SamePathTest_Windows" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.FailsWithBadValues(&quot;C:\\folder2\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder2\\file.tmp&quot;,&quot;\&quot;C:\\folder2\\file.tmp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.RootPathEquality" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\Folder1\\File.TMP&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\..\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\folder2\\..\\File.TMP&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubPathTest_Linux" executed="True" result="Success" success="True" time="0.018" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/Folder1/Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/junk/../folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;\\folder1\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/Folder2&quot;,&quot;\&quot;/Folder1/Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/folder3&quot;,&quot;\&quot;/folder1/folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../folder3&quot;,&quot;\&quot;/folder1/./folder2/../folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1&quot;,&quot;\&quot;/folder1\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/folder2&quot;,&quot;\&quot;/folder1/folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2&quot;,&quot;\&quot;/folder1/./folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/junk/../folder2&quot;,&quot;\&quot;/folder1/junk/../folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;\\folder1\\folder2&quot;,&quot;\&quot;\\folder1\\folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.SubPathOfRoot" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubPathTest_Windows" executed="True" result="Success" success="True" time="0.017" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\Folder1\\Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\junk\\..\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:/folder1/folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\folder3&quot;,&quot;\&quot;C:\\folder1\\folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\folder2&quot;,&quot;\&quot;C:\\folder1\\folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\Folder1\\Folder2&quot;,&quot;\&quot;C:\\Folder1\\Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\junk\\..\\folder2&quot;,&quot;\&quot;C:\\folder1\\junk\\..\\folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2&quot;,&quot;\&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:/folder1/folder2&quot;,&quot;\&quot;C:/folder1/folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.SubPathOfRoot" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2\\temp\\..\\Folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ThrowsConstraintTest_ExactType" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ApplicationException&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ThrowsConstraintTest_InstanceOfType" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ArgumentException&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ThrowsConstraintTest_WithConstraint" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ApplicationException&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ToStringTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ToStringTests.CanDisplayPrefixConstraints_Resolved" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ToStringTests.CanDisplaySimpleConstraints_Resolved" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ToStringTests.CanDisplaySimpleConstraints_Unresolved" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ToStringTests.DisplayBinaryConstraints_Resolved" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ToStringTests.DisplayBinaryConstraints_UnResolved" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ToStringTests.DisplayPrefixConstraints_Unresolved" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TrueConstraintTest" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.SucceedsWithGoodValues(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.SucceedsWithGoodValues(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Syntax" executed="True" result="Success" success="True" time="4.043" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AfterSyntaxUsingActualPassedByRef" executed="True" result="Success" success="True" time="1.420" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.EqualToTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.GreaterTest" executed="True" result="Success" success="True" time="0.202" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.HasMemberTest" executed="True" result="Success" success="True" time="0.202" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.NullTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.SameAsTest" executed="True" result="Success" success="True" time="0.202" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.TextTest" executed="True" result="Success" success="True" time="0.202" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.TrueTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AfterSyntaxUsingAnonymousDelegates" executed="True" result="Success" success="True" time="1.526" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.EqualToTest" executed="True" result="Success" success="True" time="0.199" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.GreaterTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.HasMemberTest" executed="True" result="Success" success="True" time="0.202" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.NullTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.SameAsTest" executed="True" result="Success" success="True" time="0.202" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.TextTest" executed="True" result="Success" success="True" time="0.202" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.ThrowsTest" executed="True" result="Success" success="True" time="0.108" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.TrueTest" executed="True" result="Success" success="True" time="0.202" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AfterTest_AndOperator" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AfterTest_AndOperator.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterTest_AndOperator.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterTest_AndOperator.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AfterTest_ProperyTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AfterTest_SimpleConstraint" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AllTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AllTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AllTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AllTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AndIsEvaluatedBeforeFollowingOr" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AndIsEvaluatedBeforePrecedingOr" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AndOperatorOverride" description="Test" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.AndOperatorCanCombineConstraintAndResolvableConstraintExpression" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.AndOperatorCanCombineResolvableConstraintExpressionAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.AndOperatorCanCombineTwoResolvableConstraintExpressions" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AndTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AndTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AndTest_ThreeAndsWithNot" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ArbitraryConstraintMatching" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.ApplyMatchesToProperty" executed="True" result="Success" success="True" time="0.002" asserts="5" />
                          <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraintAfterPrefix" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraintsUnderAndOperator" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchLambda" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchPredicate" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssignableFromTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AssignableFromTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableFromTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableFromTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssignableFromTest_Generic" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssignableToTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AssignableToTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableToTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableToTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssignableToTest_Generic" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AssignableToTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableToTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableToTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AtLeastTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AtLeastTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AtLeastTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AtLeastTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AtMostTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AtMostTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AtMostTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AtMostTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AttributeTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AttributeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AttributeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AttributeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AttributeTest_Generic" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AttributeTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AttributeTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AttributeTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AttributeTestWithFollowingConstraint" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="BinarySerializableTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.BinarySerializableTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.BinarySerializableTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.BinarySerializableTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionContainsTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionContainsTest_Comparer" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.ComparerIsCalled" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.ComparerIsCalledInExpression" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionContainsTest_Comparer_String" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.ComparerIsCalled" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.ComparerIsCalledInExpression" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionContainsTest_String" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_String.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_String.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_String.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionEquivalentTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionEquivalentTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionEquivalentTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionEquivalentTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionMemberTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionMemberTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionMemberTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionMemberTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionMemberTest_Comparer" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionMemberTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionMemberTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionMemberTest_Comparer.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionOrderedByTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionOrderedByTest_Comparer" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionOrderedByTest_Comparer_Descending" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionOrderedByTest_Descending" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionOrderedTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionOrderedTest_Comparer" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionOrderedTest_Comparer_Descending" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionOrderedTest_Descending" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionSubsetTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionSubsetTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionSubsetTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionSubsetTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CountTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CountTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CountTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CountTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EmptyTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EmptyTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EmptyTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EmptyTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EndsWithTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EndsWithTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EndsWithTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EndsWithTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EndsWithTest_IgnoreCase" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EqualityTests" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsUsingDefaultFloatingPointTolerance" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance" executed="True" result="Success" success="True" time="0.002" asserts="8" />
                          <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance_MixedFloatAndDouble" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                          <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance_MixingTypesGenerally" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                          <test-case name="NUnit.Framework.Syntax.EqualityTests.SimpleEqualityTests" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EqualToTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EqualToTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EqualToTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EqualToTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EqualToTest_IgnoreCase" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EqualToTest_WithinTolerance" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ExactTypeTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.ExactTypeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ExactTypeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ExactTypeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ExactTypeTest_Generic" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FalseTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.FalseTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.FalseTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.FalseTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GreaterThanOrEqualTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GreaterThanTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.GreaterThanTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.GreaterThanTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.GreaterThanTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="InstanceOfTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="InstanceOfTest_Generic" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="InstanceOfTypeTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="InstanceOfTypeTest_Generic" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="InvalidCodeTests" executed="True" result="Success" success="True" time="0.677" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="CodeShouldNotCompile" executed="True" result="Success" success="True" time="0.455" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Not.Null.GreaterThan(10))&quot;)" executed="True" result="Success" success="True" time="0.181" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.All&quot;)" executed="True" result="Success" success="True" time="0.063" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.And.Throws&quot;)" executed="True" result="Success" success="True" time="0.051" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.All.And.And&quot;)" executed="True" result="Success" success="True" time="0.052" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.Not&quot;)" executed="True" result="Success" success="True" time="0.051" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.And&quot;)" executed="True" result="Success" success="True" time="0.053" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CodeShouldNotCompileAsFinishedConstraint" executed="True" result="Success" success="True" time="0.220" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.Not&quot;)" executed="True" result="Success" success="True" time="0.055" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.All.Not&quot;)" executed="True" result="Success" success="True" time="0.052" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.Not.All&quot;)" executed="True" result="Success" success="True" time="0.055" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.All&quot;)" executed="True" result="Success" success="True" time="0.055" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LengthTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.LengthTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.LengthTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.LengthTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LessThanOrEqualTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.LessThanOrEqualTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.LessThanOrEqualTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.LessThanOrEqualTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LessThanTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.LessThanTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.LessThanTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.LessThanTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MessageTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.MessageTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.MessageTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.MessageTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MixedOperatorOverrides" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.MixedOperatorOverrides.ComplexTests" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NaNTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NaNTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NaNTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NaNTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NegativeTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NegativeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NegativeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NegativeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NoneTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NoneTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NoneTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NoneTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NotOperatorOverride" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.NotOperatorCanApplyToResolvableConstraintExpression" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NotSamePathOrUnderTest_IgnoreCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NotSamePathOrUnderTest_RespectCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NotSamePathTest_IgnoreCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NotSamePathTest_RespectCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NotTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NotTest_Cascaded" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotTest_Cascaded.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotTest_Cascaded.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotTest_Cascaded.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NullTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NullTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NullTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NullTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="OperatorPrecedenceTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.OperatorPrecedenceTests.SomeTests" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Syntax.OperatorPrecedenceTests.WithTests" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="OrOperatorOverride" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.OrOperatorCanCombineConstraintAndResolvableConstraintExpression" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.OrOperatorCanCombineResolvableConstraintExpressionAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.OrOperatorCanCombineTwoResolvableConstraintExpressions" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="OrTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.OrTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="OrTest_ThreeOrs" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PositiveTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.PositiveTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PositiveTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PositiveTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertyExistsTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.PropertyExistsTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyExistsTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyExistsTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertyExistsTest_AndFollows" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertySyntaxVariations" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.PropertySyntaxVariations.ExistenceTest" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Syntax.PropertySyntaxVariations.SeparateConstraintTest" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertyTest_ConstraintFollows" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertyTest_NotFollows" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RegexTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.RegexTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.RegexTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.RegexTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RegexTest_IgnoreCase" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SamePathOrUnderTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SamePathOrUnderTest_IgnoreCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SamePathOrUnderTest_RespectCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SamePathTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SamePathTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SamePathTest_IgnoreCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SamePathTest_RespectCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SomeTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SomeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SomeTest_BeforeBinaryOperators" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SomeTest_NestedSome" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SomeTest_NestedSome.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest_NestedSome.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest_NestedSome.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SomeTest_UseOfAndSome" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="StartsWithTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.StartsWithTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.StartsWithTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.StartsWithTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="StartsWithTest_IgnoreCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubstringTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SubstringTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SubstringTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SubstringTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubstringTest_IgnoreCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TextContains" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.TextContains.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextContains.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextContains.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TextEndsWithTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.TextEndsWithTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextEndsWithTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextEndsWithTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TextMatchesTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.TextMatchesTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextMatchesTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextMatchesTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TextStartsWithTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.TextStartsWithTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextStartsWithTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextStartsWithTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ThrowsTests" executed="True" result="Success" success="True" time="0.018" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.DelegateThrowsException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.LambdaThrowsException" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.LambdaThrowsExceptionWithMessage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.LambdaThrowsNothing" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsArgumentException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionInstanceOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionTypeOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionTypeOfAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionWithConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionWithInnerException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInnerException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInstanceOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInvalidOperationException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTargetInvocationExceptionWithInnerException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfWithConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfWithInnerException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeofWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TrueTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.TrueTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TrueTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TrueTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="UniqueTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.UniqueTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.UniqueTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.UniqueTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="XmlSerializableTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.XmlSerializableTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.XmlSerializableTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.XmlSerializableTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.943" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ArrayEqualsFailureMessageFixture" executed="True" result="Success" success="True" time="0.018" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ActualArrayIsLonger" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArrayAndCollection_Failure" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysDeclaredAsDifferentTypes" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysHaveDifferentRanks" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysWithDifferentDimensionsAsCollection" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysWithDifferentRanksAsCollection" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.DifferentArrayTypesEqualFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.DoubleDimensionedArrays" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ExpectedArrayIsLonger" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.FailureOnSingleDimensionedArrays" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.FiveDimensionedArrays" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.JaggedArrayComparedToSimpleArray" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.JaggedArrays" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.SameLengthDifferentContent" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.TripleDimensionedArrays" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ArrayEqualsFixture" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayAndCollection" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayIsEqualToItself" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayOfIntAndArrayOfDouble" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysDeclaredAsDifferentTypes" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfArrays" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfDecimal" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfDouble" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfInt" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfMixedTypes" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfString" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysPassedAsObjects" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysWithDifferentDimensionsMatchedAsCollection" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysWithDifferentRanksComparedAsCollection" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.DoubleDimensionedArrays" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.FiveDimensionedArrays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.JaggedArrays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.TripleDimensionedArrays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ArrayNotEqualFixture" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ArrayNotEqualFixture.ArraysDeclaredAsDifferentTypes" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.ArrayNotEqualFixture.DifferentLengthArrays" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayNotEqualFixture.SameLengthDifferentContent" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssertThrowsTests" executed="True" result="Success" success="True" time="0.018" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.BaseExceptionThrown" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchExceptionOfDerivedType" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchExceptionOfExactType" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchUnspecifiedException" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CorrectExceptionIsReturnedToMethod" executed="True" result="Success" success="True" time="0.002" asserts="16" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CorrectExceptionThrown" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.DerivedExceptionThrown" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.DoesNotThrowFails" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.DoesNotThrowSuceeds" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.NoExceptionThrown" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.UnrelatedExceptionThrown" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssumeThatTests" executed="True" result="Success" success="True" time="0.021" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_Boolean" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_BooleanWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_BooleanWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraint" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraint" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraint" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_Boolean" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_BooleanWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_BooleanWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraint" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionAssertTest" executed="True" result="Success" success="True" time="0.163" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_HandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingIterator" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingIterator_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingLinqQuery" executed="True" result="Success" success="True" time="0.108" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingLinqQuery_Fails" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqualFail" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqualFailCount" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEquivalentHandlesNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual_HandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Contains_ICollection" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Contains_IList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_EmptyICollection" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_EmptyIList" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_ICollection" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_ILIst" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsNull_ICollection" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsNull_IList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain_Empty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain_Fails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.EnsureComparerIsUsed" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Equivalent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.EquivalentFailOne" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.EquivalentFailTwo" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOf" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOf_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOfHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Allows_adjacent_equal_values" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_ContainedTypesMustBeCompatible" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_custom_comparison" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_custom_comparison2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_null" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_TypesMustImplementIComparable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOf" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOf_Fails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOfHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsNotNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsNotNullFailure" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsOfType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsOfTypeFailure" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalent_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalentHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithObjects" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithStrings" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.UniqueFailure" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.UniqueFailure_WithTwoNulls" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ConditionAssertTests" executed="True" result="Success" success="True" time="0.018" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNonEmptyArray" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNonEmptyIEnumerable" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNullString" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnString" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsFalseFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNaN" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNaNFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmpty" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyArray" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyArrayList" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyHashTable" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyIEnumerable" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyString" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotNullFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNullFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsTrueFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DirectoryAssertTests" executed="True" result="Success" success="True" time="0.154" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWhenOneDoesNotExist" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWhenOneIsNull" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWithDirectoryInfos" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWithStringPath" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWhenBothAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWithDirectoryInfos" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWithStringPath" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWhenBothAreNull" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWithDirectoryInfos" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWithStringPath" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesIfOneIsNull" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesWhenOneDoesNotExist" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesWithStringPath" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithInvalidDirectory" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithNonEmptyDirectoryUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithNonEmptyDirectoryUsingStringPath" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyPassesWithEmptyDirectoryUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyPassesWithEmptyDirectoryUsingStringPath" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyThrowsUsingNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithEmptyDirectoryUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithEmptyDirectoryUsingStringPath" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithInvalidDirectory" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyPassesWithNonEmptyDirectoryUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyPassesWithNonEmptyDirectoryUsingStringPath" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyThrowsUsingNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinFailsWithDirectoryInfo" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinFailsWithStringPath" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinPassesWhenOutsidePathUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinPassesWhenOutsidePathUsingStringPath" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinThrowsWhenBothAreNull" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinFailsWhenOutsidePathUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinFailsWhenOutsidePathUsingStringPath" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithDirectoryInfo" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithStringPath" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithTempPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinThrowsWhenBothAreNull" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EqualsFixture" executed="True" result="Success" success="True" time="0.056" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Bug575936Int32Int64Comparison" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Byte" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DateTimeEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DateTimeNotEqual" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Decimal" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DirectoryInfoEquality" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DirectoryInfoEqualityIgnoresTrailingDirectorySeparator" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualMessageDisplaysAllDigits" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualMessageDisplaysDefaultTolerance" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualMessageDisplaysTolerance" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualWithNanDoesNotDisplayDefaultTolerance" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EnumsEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EnumsNotEqual" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Equals" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsFail" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsNaNFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsSameTypes" executed="True" result="Success" success="True" time="0.024" asserts="31" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsThrowsException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Float" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.FloatNotEqualMessageDisplaysAllDigits" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.FloatNotEqualMessageDisplaysTolerance" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.IEquatableSuccess_ConstraintSyntax" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.IEquatableSuccess_OldSyntax" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Int" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.IntegerEquals" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.IntegerLongComparison" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.NanEqualsFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.NanEqualsNaNSucceeds" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.NegInfinityEqualsInfinity" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.PosInfinityEqualsInfinity" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.PosInfinityNotEquals" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.PosInfinityNotEqualsNegInfinity" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.ReferenceEqualsThrowsException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Short" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.SinglePosInfinityNotEqualsNegInfinity" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.String" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.UInt" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FileAssertTests" executed="True" result="Success" success="True" time="0.189" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWhenOneIsNull" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithFileInfos" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithFiles" executed="True" result="Success" success="True" time="0.007" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithStreams" executed="True" result="Success" success="True" time="0.007" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithTextFilesAfterReadingBothFiles" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesUsingSameFileTwice" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWhenBothAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithEqualStreams" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithFileInfos" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithFiles" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithSameStream" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithTextFiles" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWhenBothAreNull" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWithFileInfos" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWithFiles" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWithStreams" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualIteratesOverTheEntireFile" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualIteratesOverTheEntireFileAndFails" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesIfOneIsNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesWithFileInfos" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesWithFiles" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesWithStreams" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.NonReadableStreamGivesException" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.NonSeekableStreamGivesException" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GreaterEqualFixture" executed="True" result="Success" success="True" time="0.055" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.FailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Decimal" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Double" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Float" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Int32" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Long" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_UInt32" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_ULong" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.MixedTypes" executed="True" result="Success" success="True" time="0.003" asserts="42" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.NotGreaterEqualIComparable" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.NotGreaterOrEqual" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GreaterFixture" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.GreaterFixture.FailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterFixture.Greater" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                          <test-case name="NUnit.Framework.Tests.GreaterFixture.MixedTypes" executed="True" result="Success" success="True" time="0.003" asserts="42" />
                          <test-case name="NUnit.Framework.Tests.GreaterFixture.NotGreater" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterFixture.NotGreaterIComparable" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterFixture.NotGreaterWhenEqual" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LessEqualFixture" executed="True" result="Success" success="True" time="0.011" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.LessEqualFixture.FailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.LessEqualFixture.LessOrEqual" executed="True" result="Success" success="True" time="0.004" asserts="42" />
                          <test-case name="NUnit.Framework.Tests.LessEqualFixture.MixedTypes" executed="True" result="Success" success="True" time="0.002" asserts="42" />
                          <test-case name="NUnit.Framework.Tests.LessEqualFixture.NotLessEqualIComparable" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.LessEqualFixture.NotLessOrEqual" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LessFixture" executed="True" result="Success" success="True" time="0.011" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.LessFixture.FailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.LessFixture.Less" executed="True" result="Success" success="True" time="0.003" asserts="18" />
                          <test-case name="NUnit.Framework.Tests.LessFixture.MixedTypes" executed="True" result="Success" success="True" time="0.002" asserts="42" />
                          <test-case name="NUnit.Framework.Tests.LessFixture.NotLess" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.LessFixture.NotLessIComparable" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.LessFixture.NotLessWhenEqual" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ListContentsTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.ArrayFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.ArrayListFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.ArrayListSucceeds" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.ArraySucceeds" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.DifferentTypesMayBeEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.EmptyArrayFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.NullArrayIsError" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NotEqualFixture" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.ArraysNotEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.ArraysNotEqualFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.NotEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.NotEqualFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.NotEqualSameTypes" executed="True" result="Success" success="True" time="0.002" asserts="21" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.NullEqualsNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.NullNotEqualToNonNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.UInt" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NotSameFixture" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.NotSameFixture.NotSame" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.NotSameFixture.NotSameFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NullableTypesTests" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <categories>
                          <category name="Generics" />
                        </categories>
                        <results>
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableEnums" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableMixedNumerics" executed="True" result="Success" success="True" time="0.003" asserts="36" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableStructs" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareWithTolerance" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanTestForNaN" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanTestForNull" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RandomizerTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomDoublesAreUnique" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomIntsAreUnique" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomizersWithDifferentSeedsReturnDifferentValues" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomizersWithSameSeedsReturnSameValues" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomSeedsAreUnique" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.ReturnsDifferentRandomizersForDifferentMethods" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.ReturnsSameRandomizerForDifferentParametersOfSameMethod" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.ReturnsSameRandomizerForSameMethod" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.ReturnsSameRandomizerForSameParameter" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RangeTests" executed="True" result="Success" success="True" time="0.041" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.RangeTests.InRangeFails" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.RangeTests.InRangeSucceeds" executed="True" result="Success" success="True" time="0.032" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.RangeTests.NotInRangeFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.RangeTests.NotInRangeSucceeds" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-suite type="ParameterizedTest" name="RangeBoundaryConditions" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.RangeTests.RangeBoundaryConditions(9,9,10)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Tests.RangeTests.RangeBoundaryConditions(9,9,9)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Tests.RangeTests.RangeBoundaryConditions(10,9,10)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Framework.Tests.RangeTests.ShouldThrowExceptionIfFromIsLessThanTo" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SameFixture" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.SameFixture.Same" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.SameFixture.SameFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.SameFixture.SameValueTypes" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="StringAssertTests" executed="True" result="Success" success="True" time="0.017" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.CaseInsensitiveCompare" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.CaseInsensitiveCompareFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.Contains" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.ContainsFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DifferentEncodingsOfSameStringAreNotEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotContain" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotContainFails" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotEndWith" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotEndWithFails" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotStartWith" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotStartWithFails" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.EndsWith" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.EndsWithFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.IsMatch" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.IsMatchFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.StartsWith" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.StartsWithFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestFixtureAttributeTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithCombinedArgs" executed="True" result="Success" success="True" time="0.000" asserts="2">
                            <categories>
                              <category name="Generics" />
                            </categories>
                          </test-case>
                          <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithFixtureArgs" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithFixtureArgsAndSetTypeArgs" executed="True" result="Success" success="True" time="0.000" asserts="2">
                            <categories>
                              <category name="Generics" />
                            </categories>
                          </test-case>
                          <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithJustTypeArgs" executed="True" result="Success" success="True" time="0.000" asserts="2">
                            <categories>
                              <category name="Generics" />
                            </categories>
                          </test-case>
                          <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithNoArgumentsAndSetTypeArgs" executed="True" result="Success" success="True" time="0.000" asserts="2">
                            <categories>
                              <category name="Generics" />
                            </categories>
                          </test-case>
                          <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithoutArguments" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TextMessageWriterTests" executed="True" result="Success" success="True" time="0.011" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.ConnectorIsWrittenWithSurroundingSpaces" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DateTimeTest" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DecimalIsWrittenToTwentyNineDigits" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DecimalIsWrittenWithTrailingM" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DisplayStringDifferences" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DisplayStringDifferences_NoClipping" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DoubleIsWrittenToSeventeenDigits" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DoubleIsWrittenWithTrailingD" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.FloatIsWrittenToNineDigits" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.FloatIsWrittenWithTrailingF" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.IntegerIsWrittenAsIs" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.PredicateIsWrittenWithTrailingSpace" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.StringIsWrittenWithQuotes" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TypeAssertTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.ExactType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.ExactTypeFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsAssignableFrom" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsAssignableFromFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsInstanceOf" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsInstanceOfFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsNotAssignableFrom" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsNotAssignableFromFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsNotInstanceOf" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsNotInstanceOfFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ValuesAttributeTests" executed="True" result="Success" success="True" time="0.039" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="CanConverDoubleToDecimal" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConverDoubleToDecimal(12.5m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertDoubleRangeToDecimal" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertDoubleRangeToDecimal(1m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertDoubleRangeToDecimal(1.1m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertDoubleRangeToDecimal(1.2m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertDoubleRangeToDecimal(1.3m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertIntRangeToByte" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToByte(1)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToByte(2)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToByte(3)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertIntRangeToDecimal" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToDecimal(1m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToDecimal(2m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToDecimal(3m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertIntRangeToSByte" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToSByte(1)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToSByte(2)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToSByte(3)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertIntRangeToShort" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToShort(1)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToShort(2)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToShort(3)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertIntToDecimal" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntToDecimal(12m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertRandomDoubleToDecimal" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomDoubleToDecimal(2.90023731761623m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomDoubleToDecimal(8.48630809899713m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomDoubleToDecimal(1.66915311322974m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertRandomIntToByte" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToByte(2)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToByte(7)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToByte(3)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertRandomIntToDecimal" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToDecimal(4m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToDecimal(8m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToDecimal(1m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertRandomIntToSByte" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToSByte(9)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToSByte(8)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToSByte(4)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertRandomIntToShort" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToShort(4)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToShort(4)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToShort(4)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertSmallIntsToByte" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertSmallIntsToByte(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertSmallIntsToSByte" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertSmallIntsToSByte(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertSmallIntsToShort" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertSmallIntsToShort(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertStringToDecimal" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertStringToDecimal(12.5m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithDoubleRangeAndStep" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithFloatRangeAndStep" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithIntRange" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithIntRangeAndStep" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithLongRangeAndStep" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.ValuesAttributeProvidesSpecifiedValues" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="D:\Dev\NUnit\nunit-2.6\builds\net\3.5\release\tests/nunit.core.tests.dll" executed="True" result="Success" success="True" time="9.342" asserts="0">
        <results>
          <test-suite type="Namespace" name="NUnit" executed="True" result="Success" success="True" time="9.342" asserts="0">
            <results>
              <test-suite type="Namespace" name="Core" executed="True" result="Success" success="True" time="9.342" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="9.341" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ActionAttributeExceptionTests" executed="True" result="Success" success="True" time="0.338" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.ActionAttributeExceptionTests.AfterTestException" executed="True" result="Success" success="True" time="0.008" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ActionAttributeExceptionTests.BeforeTestException" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ActionAttributeTests" executed="True" result="Success" success="True" time="0.021" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.ActionAttributeTests.ExpectedOutput_InCorrectOrder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ActionAttributeTests.TestsRunsSuccessfully" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssemblyHelperTests" executed="True" result="Success" success="True" time="0.039" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="GetAssemblyPathFromEscapedCodeBase_Linux" executed="False" result="Skipped">
                            <reason>
                              <message><![CDATA[Only supported on Linux]]></message>
                            </reason>
                            <results>
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Linux(&quot;file:///path/to/assembly.dll&quot;)" executed="False" result="Skipped">
                                <reason>
                                  <message><![CDATA[Only supported on Linux]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Linux(&quot;file://path/to/assembly.dll&quot;)" executed="False" result="Skipped">
                                <reason>
                                  <message><![CDATA[Only supported on Linux]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Linux(&quot;file:///dev/C#/assembly.dll&quot;)" executed="False" result="Skipped">
                                <reason>
                                  <message><![CDATA[Only supported on Linux]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Linux(&quot;file:///dev/funnychars?:=/assembly.dll&quot;)" executed="False" result="Skipped">
                                <reason>
                                  <message><![CDATA[Only supported on Linux]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Linux(&quot;file:///my path/to my/assembly.dll&quot;)" executed="False" result="Skipped">
                                <reason>
                                  <message><![CDATA[Only supported on Linux]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Linux(&quot;file://my path/to my/assembly.dll&quot;)" executed="False" result="Skipped">
                                <reason>
                                  <message><![CDATA[Only supported on Linux]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetAssemblyPathFromEscapedCodeBase_Windows" executed="True" result="Success" success="True" time="0.029" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Windows(&quot;file:///C:/dev/C%23/assembly.dll&quot;,&quot;C:\\dev\\C#\\assembly.dll&quot;)" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Windows(&quot;file:///dev/funnychars?:=/assembly.dll&quot;,&quot;/dev/funnychars?:=/assembly.dll&quot;)" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Windows(&quot;file:///dev/C%23/assembly.dll&quot;,&quot;/dev/C#/assembly.dll&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Windows(&quot;file://C:/my%20path/to%20my/assembly.dll&quot;,&quot;C:\\my path\\to my\\assembly.dll&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Windows(&quot;file:///my%20path/to%20my/assembly.dll&quot;,&quot;/my path/to my/assembly.dll&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Windows(&quot;file:///C:/path/to/assembly.dll&quot;,&quot;C:\\path\\to\\assembly.dll&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Windows(&quot;file://C:/path/to/assembly.dll&quot;,&quot;C:\\path\\to\\assembly.dll&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Windows(&quot;file:///C:/dev/funnychars?:=/assembly.dll&quot;,&quot;C:\\dev\\funnychars?:=\\assembly.dll&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Windows(&quot;file:///path/to/assembly.dll&quot;,&quot;/path/to/assembly.dll&quot;)" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                              <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetAssemblyPathFromEscapedCodeBase_Windows(&quot;file://server/path/to/assembly.dll&quot;,&quot;\\\\server\\path\\to\\assembly.dll&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetPathForAssembly" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.AssemblyHelperTests.GetPathForType" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssemblyReaderTests" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AssemblyReaderTests.CreateFromAssembly" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyReaderTests.CreateFromPath" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyReaderTests.ImageRuntimeVersion" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyReaderTests.IsDotNetFile" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyReaderTests.IsValidPeFile" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyReaderTests.IsValidPeFile_Fails" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssemblyResolverTests" executed="True" result="Success" success="True" time="0.194" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AssemblyResolverTests.AddFile" executed="True" result="Success" success="True" time="0.191" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssemblyTests" executed="True" result="Success" success="True" time="0.604" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AssemblyTests.AppSettingsLoaded" executed="True" result="Success" success="True" time="0.040" asserts="3" />
                          <test-case name="NUnit.Core.Tests.AssemblyTests.LoadAssembly" executed="True" result="Success" success="True" time="0.369" asserts="2" />
                          <test-case name="NUnit.Core.Tests.AssemblyTests.LoadAssemblyNotFound" executed="True" result="Success" success="True" time="0.105" asserts="0" />
                          <test-case name="NUnit.Core.Tests.AssemblyTests.LoadAssemblyWithoutTestFixtures" executed="True" result="Success" success="True" time="0.072" asserts="3" />
                          <test-case name="NUnit.Core.Tests.AssemblyTests.LoadTestFixtureFromAssembly" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyTests.RunSetsCurrentDirectory" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssemblyVersionFixture" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AssemblyVersionFixture.Version" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssertInconclusiveFixture" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AssertInconclusiveFixture.AssertInconclusiveThrowsException" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssertPassFixture" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AssertPassFixture.AssertPassReturnsSuccess" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <reason>
                              <message><![CDATA[This test is OK!]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.AssertPassFixture.SubsequentFailureIsIrrelevant" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <reason>
                              <message><![CDATA[This test is OK!]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AttributeInheritance" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AttributeInheritance.InheritedExplicitAttributeIsRecognized" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.AttributeInheritance.InheritedFixtureAttributeIsRecognized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AttributeInheritance.InheritedIgnoreAttributeIsRecognized" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.AttributeInheritance.InheritedTestAttributeIsRecognized" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CallContextTests" executed="True" result="Success" success="True" time="0.076" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.CallContextTests.GenericPrincipalTest" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CallContextTests.ILogicalThreadAffinativeTest" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CallContextTests.ILogicalThreadAffinativeTest_Bug1167805_AccessEvidence" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CallContextTests.ILogicalThreadAffinativeTest_Bug1167805_ReadSchema" executed="True" result="Success" success="True" time="0.070" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CallContextTests.ILogicalThreadAffinativeTestConsole" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CallContextTests.SetCustomPrincipalOnThread" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CallContextTests.SetGenericPrincipalOnThread" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CallContextTests.UseCustomIdentity" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CategoryAttributeTests" executed="True" result="Success" success="True" time="0.019" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.CategoryAttributeTests.CanDeriveFromCategoryAttribute" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.CategoryAttributeTests.CategoryOnFixture" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.CategoryAttributeTests.CategoryOnTestCase" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-suite type="ParameterizedTest" name="CountTestsUsingCategoryFilter" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CategoryAttributeTests.CountTestsUsingCategoryFilter(&quot;Critical&quot;)" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CategoryAttributeTests.CountTestsUsingCategoryFilter(&quot;Long&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CategoryAttributeTests.CountTestsUsingCategoryFilter(&quot;Database&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.CategoryAttributeTests.CountTestsWithoutCategoryFilter" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.CategoryAttributeTests.DerivedCategoryMayBeInherited" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CombinatorialTests" executed="True" result="Success" success="True" time="0.038" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="RandomArgsAreIndependent" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RandomArgsAreIndependent(0.582928929749377d,0.459451481448231d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="RandomTest" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RandomTest(182,0.0516881249154397d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RandomTest(169,0.450952351768945d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RandomTest(124,0.562843524647338d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RandomTest(170,0.911337272688438d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RandomTest(204,0.307106927180247d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="RangeTest" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.2d,10)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.2d,15)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.2d,20)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.4d,10)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.4d,15)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.4d,20)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.6d,10)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.6d,15)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.6d,20)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SingleArgument" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.SingleArgument(1.3d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.SingleArgument(1.7d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.SingleArgument(1.5d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ThreeArguments_Combinatorial" executed="True" result="Success" success="True" time="0.010" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(1,10,&quot;Charlie&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(1,10,&quot;Joe&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(1,10,&quot;Frank&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(1,20,&quot;Charlie&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(1,20,&quot;Joe&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(1,20,&quot;Frank&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(2,10,&quot;Charlie&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(2,10,&quot;Joe&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(2,10,&quot;Frank&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(2,20,&quot;Charlie&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(2,20,&quot;Joe&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(2,20,&quot;Frank&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(3,10,&quot;Charlie&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(3,10,&quot;Joe&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(3,10,&quot;Frank&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(3,20,&quot;Charlie&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(3,20,&quot;Joe&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(3,20,&quot;Frank&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ThreeArguments_Sequential" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Sequential(1,10,&quot;Charlie&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Sequential(2,20,&quot;Joe&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Sequential(3,null,&quot;Frank&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="TwoArguments_Combinatorial" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Combinatorial(1,10)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Combinatorial(1,20)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Combinatorial(2,10)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Combinatorial(2,20)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Combinatorial(3,10)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Combinatorial(3,20)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="TwoArguments_Sequential" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Sequential(1,10)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Sequential(2,20)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Sequential(3,null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CoreExtensionsTests" executed="True" result="Success" success="True" time="0.927" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.CanAddDecorator" executed="True" result="Success" success="True" time="0.778" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.CanAddEventListener" executed="True" result="Success" success="True" time="0.117" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.CanAddSuiteBuilder" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.CanAddTestCaseBuilder" executed="True" result="Success" success="True" time="0.005" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.CanAddTestCaseBuilder2" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.DecoratorsRunInOrderOfPriorities" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.HasEventListenerExtensionPoint" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.HasSuiteBuildersExtensionPoint" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.HasTestCaseBuildersExtensionPoint" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.HasTestDecoratorsExtensionPoint" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.HasTestFrameworkRegistry" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CultureSettingAndDetectionTests" executed="True" result="Success" success="True" time="0.049" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.CanMatchAttributeWithExclude" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.CanMatchAttributeWithInclude" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.CanMatchAttributeWithIncludeAndExclude" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.CanMatchStrings" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.LoadWithFrenchCanadianCulture" executed="True" result="Success" success="True" time="0.003" asserts="5" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.LoadWithFrenchCulture" executed="True" result="Success" success="True" time="0.002" asserts="5" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.LoadWithRussianCulture" executed="True" result="Success" success="True" time="0.002" asserts="5" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.SettingInvalidCultureGivesError" executed="True" result="Success" success="True" time="0.034" asserts="3" />
                          <test-suite type="ParameterizedTest" name="UseWithParameterizedTest" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.UseWithParameterizedTest()" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CultureSettingAndDetectionTests+NestedFixture" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests+NestedFixture.CanSetCultureOnFixture" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DatapointTests" executed="True" result="Success" success="True" time="0.034" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.DatapointTests.WorksOnArray" executed="True" result="Success" success="True" time="0.006" asserts="3" />
                          <test-case name="NUnit.Core.Tests.DatapointTests.WorksOnField" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                          <test-case name="NUnit.Core.Tests.DatapointTests.WorksOnIEnumerableOfT" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                          <test-case name="NUnit.Core.Tests.DatapointTests.WorksOnIteratorReturningIEnumerableOfT" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.DatapointTests.WorksOnMethodReturningArray" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.DatapointTests.WorksOnMethodReturningIEnumerableOfT" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.DatapointTests.WorksOnPropertyReturningArray" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                          <test-case name="NUnit.Core.Tests.DatapointTests.WorksOnPropertyReturningIEnumerableOfT" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DirectoryChangeTests" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.DirectoryChangeTests.ChangingCurrentDirectoryGivesWarning" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DirectorySwapperTests" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.DirectorySwapperTests.ChangeAndRestore" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Core.Tests.DirectorySwapperTests.SwapAndRestore" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EventQueueTests" executed="True" result="Success" success="True" time="0.268" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.EventQueueTests.DequeueEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.EventQueueTests.PumpAutoStopsOnRunFinished" executed="True" result="Success" success="True" time="0.104" asserts="3" />
                          <test-case name="NUnit.Core.Tests.EventQueueTests.PumpEvents" executed="True" result="Success" success="True" time="0.007" asserts="12">
                            <properties>
                              <property name="Timeout" value="3000" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.EventQueueTests.PumpEventsWithAutoStop" executed="True" result="Success" success="True" time="0.003" asserts="1">
                            <properties>
                              <property name="Timeout" value="2000" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.EventQueueTests.PumpPendingEventsAfterAutoStop" executed="True" result="Success" success="True" time="0.112" asserts="2">
                            <properties>
                              <property name="Timeout" value="2000" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.EventQueueTests.PumpSynchronousAndAsynchronousEvents" executed="True" result="Success" success="True" time="0.004" asserts="6">
                            <properties>
                              <property name="Timeout" value="1000" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.EventQueueTests.QueueEvents" executed="True" result="Success" success="True" time="0.000" asserts="9" />
                          <test-case name="NUnit.Core.Tests.EventQueueTests.SendEvents" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                          <test-case name="NUnit.Core.Tests.EventQueueTests.StartAndStopPumpOnEmptyQueue" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.EventQueueTests.TracingEventListenerDoesNotDeadlock" executed="True" result="Success" success="True" time="0.024" asserts="0">
                            <properties>
                              <property name="Timeout" value="1000" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EventQueueTests+DequeueBlocking_StopTest" executed="True" result="Success" success="True" time="0.026" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.EventQueueTests+DequeueBlocking_StopTest.DequeueBlocking_Stop" executed="True" result="Success" success="True" time="0.025" asserts="3">
                            <properties>
                              <property name="Timeout" value="1000" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EventQueueTests+SetWaitHandle_Enqueue_AsynchronousTest" executed="True" result="Success" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.EventQueueTests+SetWaitHandle_Enqueue_AsynchronousTest.SetWaitHandle_Enqueue_Asynchronous" executed="True" result="Success" success="True" time="0.030" asserts="4">
                            <properties>
                              <property name="Timeout" value="1000" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EventQueueTests+SetWaitHandle_Enqueue_SynchronousTest" executed="True" result="Success" success="True" time="0.061" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.EventQueueTests+SetWaitHandle_Enqueue_SynchronousTest.SetWaitHandle_Enqueue_Synchronous" executed="True" result="Success" success="True" time="0.060" asserts="5">
                            <properties>
                              <property name="Timeout" value="1000" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EventTestFixture" description="Tests that proper events are generated when running  test" executed="True" result="Success" success="True" time="0.087" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.EventTestFixture.CheckEventListening" executed="True" result="Success" success="True" time="0.042" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ExpectExceptionTest" executed="True" result="Success" success="True" time="0.066" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.AssertFailBeforeException" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.CanExpectUnspecifiedException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ExceptionHandlerIsCalledWhenExceptionMatches" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ExceptionHandlerIsCalledWhenExceptionMatches_AlternateHandler" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ExceptionHandlerIsNotCalledWhenExceptionDoesNotMatch" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ExceptionHandlerIsNotCalledWhenExceptionDoesNotMatch_AlternateHandler" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.MethodThrowsArgumentOutOfRange" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.MethodThrowsException" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.MethodThrowsRightExceptionMessage" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.MethodThrowsWrongExceptionMessage" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.SetUpThrowsSameException" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TearDownThrowsSameException" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestExceptionNameNotThrown" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestExceptionNameNotThrownWithUserMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestExceptionTypeNotThrown" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestExceptionTypeNotThrownWithUserMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestFailsWhenBaseExceptionIsThrown" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestFailsWhenDerivedExceptionIsThrown" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestIsNotRunnableWhenAlternateHandlerIsNotFound" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionMessageWithUserMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionName" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionNameWithUserMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionType" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionTypeAsNamedParameter" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionTypeWithUserMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWhenSpecifiedExceptionNameAndContainsMatch" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWhenSpecifiedExceptionNameAndRegexMatch" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionName" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionNameAndExactMatch" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionNameAndMessage_NewFormat" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionNameAsNamedParameter" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionType" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionTypeAndContainsMatch" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionTypeAndExactMatch" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionTypeAndMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionTypeAndRegexMatch" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionTypeAndStartsWithMatch" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionTypeAsNamedParameter" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestUnspecifiedExceptionNotThrown" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestUnspecifiedExceptionNotThrownWithUserMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ThrowingMyAppException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ThrowingMyAppExceptionWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ThrowNUnitException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FailFixture" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.FailFixture.BadStackTraceIsHandled" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Core.Tests.FailFixture.CustomExceptionIsHandled" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FailFixture.FailInheritsFromSystemException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.FailFixture.FailRecordsInnerException" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FailFixture.FailThrowsAssertionException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.FailFixture.VerifyFailWorks" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureSetupTearDownTest" executed="True" result="Success" success="True" time="0.058" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.BaseSetUpCalledFirstAndTearDownCalledLast" executed="True" result="Success" success="True" time="0.004" asserts="6" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.CheckInheritedSetUpAndTearDownAreCalled" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.DisposeCalledWhenFixtureImplementsIDisposable" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.FixtureWithNoTestsCallsFixtureSetUpAndTearDown" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.HandleErrorInFixtureSetup" executed="True" result="Success" success="True" time="0.003" asserts="11" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.HandleErrorInFixtureTearDown" executed="True" result="Success" success="True" time="0.002" asserts="9" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.HandleExceptionInFixtureConstructor" executed="True" result="Success" success="True" time="0.002" asserts="9" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.HandleIgnoreInFixtureSetup" executed="True" result="Success" success="True" time="0.003" asserts="7" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.HandleSetUpAndTearDownWithTestInName" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.IgnoredFixtureShouldNotCallFixtureSetUpOrTearDown" executed="True" result="Success" success="True" time="0.002" asserts="6" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.MakeSureSetUpAndTearDownAreCalled" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.MakeSureSetUpAndTearDownAreCalledOnExplicitFixture" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.OverriddenSetUpAndTearDownAreNotCalled" executed="True" result="Success" success="True" time="0.003" asserts="4" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.RerunFixtureAfterSetUpFixed" executed="True" result="Success" success="True" time="0.004" asserts="4" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.RerunFixtureAfterTearDownFixed" executed="True" result="Success" success="True" time="0.004" asserts="4" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.RunningSingleMethodCallsSetUpAndTearDown" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.StaticBaseSetUpCalledFirstAndTearDownCalledLast" executed="True" result="Success" success="True" time="0.002" asserts="6" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.StaticClassSetUpAndTearDownAreCalled" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.StaticSetUpAndTearDownAreCalled" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureSetupTearDownTest+ChangesMadeInFixtureSetUp" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest+ChangesMadeInFixtureSetUp.TestThatChangesPersistUsingSameThread" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest+ChangesMadeInFixtureSetUp.TestThatChangesPersistUsingSeparateThread" executed="True" result="Success" success="True" time="0.001" asserts="3">
                            <properties>
                              <property name="RequiresThread" value="True" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Generic" executed="True" result="Success" success="True" time="0.028" asserts="0">
                        <results>
                          <test-suite type="GenericFixture" name="DeduceTypeArgsFromArgs&lt;T1,T2&gt;" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="DeduceTypeArgsFromArgs&lt;Double,Int32&gt;(100.0d,42)" executed="True" result="Success" success="True" time="0.002" asserts="0">
                                <categories>
                                  <category name="Generics" />
                                </categories>
                                <results>
                                  <test-suite type="ParameterizedTest" name="TestMyArgTypes" executed="True" result="Success" success="True" time="0.001" asserts="0">
                                    <results>
                                      <test-case name="NUnit.Core.Tests.Generic.DeduceTypeArgsFromArgs&lt;Double,Int32&gt;(100.0d,42).TestMyArgTypes(5,7)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="DeduceTypeArgsFromArgs&lt;Int32,Double&gt;(42,100.0d)" executed="True" result="Success" success="True" time="0.002" asserts="0">
                                <categories>
                                  <category name="Generics" />
                                </categories>
                                <results>
                                  <test-suite type="ParameterizedTest" name="TestMyArgTypes" executed="True" result="Success" success="True" time="0.001" asserts="0">
                                    <results>
                                      <test-case name="NUnit.Core.Tests.Generic.DeduceTypeArgsFromArgs&lt;Int32,Double&gt;(42,100.0d).TestMyArgTypes(5,7)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="GenericFixture" name="SimpleGenericFixture&lt;TList&gt;" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="SimpleGenericFixture&lt;ArrayList&gt;" executed="True" result="Success" success="True" time="0.001" asserts="0">
                                <categories>
                                  <category name="Generics" />
                                </categories>
                                <results>
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericFixture&lt;ArrayList&gt;.TestCollectionCount" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="SimpleGenericFixture&lt;List&lt;Int32&gt;&gt;" executed="True" result="Success" success="True" time="0.001" asserts="0">
                                <categories>
                                  <category name="Generics" />
                                </categories>
                                <results>
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericFixture&lt;List&lt;Int32&gt;&gt;.TestCollectionCount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="SimpleGenericMethods" executed="True" result="Success" success="True" time="0.013" asserts="0">
                            <categories>
                              <category name="Generics" />
                            </categories>
                            <results>
                              <test-suite type="ParameterizedTest" name="GenericTestMethodWithOneTypeParameter" executed="True" result="Success" success="True" time="0.004" asserts="0">
                                <results>
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithOneTypeParameter&lt;Double&gt;(5.0d,2.0d,&quot;ABC&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithOneTypeParameter&lt;Double&gt;(5.0d,2.0d,&quot;ABC&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithOneTypeParameter&lt;Double&gt;(5.0d,2.0d,&quot;ABC&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithOneTypeParameter&lt;Int32&gt;(5,2,&quot;ABC&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                                </results>
                              </test-suite>
                              <test-suite type="ParameterizedTest" name="GenericTestMethodWithTwoTypeParameters" executed="True" result="Success" success="True" time="0.003" asserts="0">
                                <results>
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters&lt;Double,Int64&gt;(5.0d,2L,&quot;ABC&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters&lt;Int32,Int32&gt;(5,2,&quot;ABC&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters&lt;Double,Double&gt;(5.0d,2.0d,&quot;ABC&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters&lt;Int32,Double&gt;(5,2.0d,&quot;ABC&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                                </results>
                              </test-suite>
                              <test-suite type="ParameterizedTest" name="GenericTestMethodWithTwoTypeParameters_Reversed" executed="True" result="Success" success="True" time="0.003" asserts="0">
                                <results>
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters_Reversed&lt;Double,Int32&gt;(5,2.0d,&quot;ABC&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters_Reversed&lt;Int32,Int32&gt;(5,2,&quot;ABC&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters_Reversed&lt;Double,Double&gt;(5.0d,2.0d,&quot;ABC&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters_Reversed&lt;Int64,Double&gt;(5.0d,2L,&quot;ABC&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="GenericFixture" name="TypeParameterUsedWithTestMethod&lt;T&gt;" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="TypeParameterUsedWithTestMethod&lt;Double&gt;" executed="True" result="Success" success="True" time="0.002" asserts="0">
                                <categories>
                                  <category name="Generics" />
                                </categories>
                                <results>
                                  <test-suite type="ParameterizedTest" name="TestMyArgType" executed="True" result="Success" success="True" time="0.001" asserts="0">
                                    <results>
                                      <test-case name="NUnit.Core.Tests.Generic.TypeParameterUsedWithTestMethod&lt;Double&gt;.TestMyArgType(1.23d)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                                      <test-case name="NUnit.Core.Tests.Generic.TypeParameterUsedWithTestMethod&lt;Double&gt;.TestMyArgType(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="IgnoreFixture" executed="True" result="Success" success="True" time="0.013" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreTakesPrecedenceOverExpectedException" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreThrowsIgnoreException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWithUserMessage" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWithUserMessage_ArrayOfArgs" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWithUserMessage_OneArg" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWithUserMessage_ThreeArgs" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWorksForTestCase" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWorksForTestSuite" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWorksFromSetUp" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LegacySuiteTests" executed="True" result="Success" success="True" time="0.057" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.LegacySuiteTests.SetUpAndTearDownAreCalled" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.LegacySuiteTests.SuitePropertyWithInvalidType" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Core.Tests.LegacySuiteTests.SuiteReturningFixtures" executed="True" result="Success" success="True" time="0.037" asserts="3" />
                          <test-case name="NUnit.Core.Tests.LegacySuiteTests.SuiteReturningFixtureWithArguments" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                          <test-case name="NUnit.Core.Tests.LegacySuiteTests.SuiteReturningTestSuite" executed="True" result="Success" success="True" time="0.006" asserts="3" />
                          <test-case name="NUnit.Core.Tests.LegacySuiteTests.SuiteReturningTypes" executed="True" result="Success" success="True" time="0.005" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MaxTimeTests" executed="True" result="Success" success="True" time="0.086" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.MaxTimeTests.ErrorReport" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <properties>
                              <property name="MaxTime" value="1000" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.MaxTimeTests.ErrorReportHasPriorityOverMaxTime" executed="True" result="Success" success="True" time="0.021" asserts="3" />
                          <test-case name="NUnit.Core.Tests.MaxTimeTests.FailureReport" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <properties>
                              <property name="MaxTime" value="1000" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.MaxTimeTests.FailureReportHasPriorityOverMaxTime" executed="True" result="Success" success="True" time="0.030" asserts="3" />
                          <test-case name="NUnit.Core.Tests.MaxTimeTests.MaxTimeExceeded" executed="True" result="Success" success="True" time="0.030" asserts="2" />
                          <test-case name="NUnit.Core.Tests.MaxTimeTests.MaxTimeNotExceeded" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <properties>
                              <property name="MaxTime" value="1000" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NameFilterTest" executed="True" result="Success" success="True" time="0.083" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.NameFilterTest.ExplicitTestCaseDoesNotMatchWhenNotSelectedDirectly" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.ExplicitTestCaseMatchesWhenSelectedDirectly" executed="True" result="Success" success="True" time="0.008" asserts="2" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.ExplicitTestSuiteDoesNotMatchWhenNotSelectedDirectly" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.ExplicitTestSuiteMatchesWhenSelectedDirectly" executed="True" result="Success" success="True" time="0.008" asserts="3" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.HighLevelSuite" executed="True" result="Success" success="True" time="0.008" asserts="3" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.MultipleNameMatch" executed="True" result="Success" success="True" time="0.008" asserts="3" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.SingleNameMatch" executed="True" result="Success" success="True" time="0.008" asserts="4" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.SuiteNameMatch" executed="True" result="Success" success="True" time="0.008" asserts="3" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.TestDoesNotMatch" executed="True" result="Success" success="True" time="0.008" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NamespaceAssemblyTests" executed="True" result="Success" success="True" time="0.092" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.NamespaceAssemblyTests.Hierarchy" executed="True" result="Success" success="True" time="0.040" asserts="17" />
                          <test-case name="NUnit.Core.Tests.NamespaceAssemblyTests.LoadTestFixtureFromAssembly" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="NUnit.Core.Tests.NamespaceAssemblyTests.NoNamespaceInAssembly" executed="True" result="Success" success="True" time="0.008" asserts="5" />
                          <test-case name="NUnit.Core.Tests.NamespaceAssemblyTests.TestRoot" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NUnitTestCaseBuilderTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="TestCases" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.NUnitTestCaseBuilderTests.TestCases(Void VoidTestCaseWithExpectedResult(Int32),NotRunnable)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="Tests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.NUnitTestCaseBuilderTests.Tests(Int32 NonVoidTest(),NotRunnable)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PairwiseTest" executed="True" result="Success" success="True" time="0.011" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="Test" executed="True" result="Success" success="True" time="0.010" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 2x4" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 2x2x2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 3x2x2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 3x2x2x2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 3x2x2x2x2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 3x2x2x2x2x2" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 3x3x3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 4x4x4" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 5x5x5" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PairwiseTest+LiveTest" executed="True" result="Success" success="True" time="0.005" asserts="1">
                        <results>
                          <test-suite type="ParameterizedTest" name="Test" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;a&quot;,&quot;-&quot;,&quot;x&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;b&quot;,&quot;+&quot;,&quot;y&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;c&quot;,&quot;+&quot;,&quot;x&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;b&quot;,&quot;-&quot;,&quot;x&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;a&quot;,&quot;-&quot;,&quot;y&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;c&quot;,&quot;-&quot;,&quot;y&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;a&quot;,&quot;+&quot;,&quot;x&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedFixture" name="ParameterizedTestFixture" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="ParameterizedTestFixture(&quot;hello&quot;,&quot;hello&quot;,&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixture(&quot;hello&quot;,&quot;hello&quot;,&quot;goodbye&quot;).TestEquality" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixture(&quot;hello&quot;,&quot;hello&quot;,&quot;goodbye&quot;).TestInequality" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ParameterizedTestFixture(&quot;zip&quot;,&quot;zip&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixture(&quot;zip&quot;,&quot;zip&quot;).TestEquality" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixture(&quot;zip&quot;,&quot;zip&quot;).TestInequality" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ParameterizedTestFixture(42,42,99)" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixture(42,42,99).TestEquality" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixture(42,42,99).TestInequality" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ParameterizedTestFixtureNamingTests" executed="True" result="Success" success="True" time="0.019" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureNamingTests.FixtureInstancesAreNamedCorrectly" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureNamingTests.MethodWithoutParamsIsNamedCorrectly" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureNamingTests.MethodWithParamsIsNamedCorrectly" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureNamingTests.SuiteHasCorrectNumberOfInstances" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureNamingTests.TopLevelSuiteIsNamedCorrectly" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ParameterizedTestFixtureTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureTests.CanSpecifyCategory" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureTests.CanSpecifyMultipleCategories" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedFixture" name="ParameterizedTestFixtureWithDataSources" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="ParameterizedTestFixtureWithDataSources(42)" executed="True" result="Success" success="True" time="0.009" asserts="0">
                            <results>
                              <test-suite type="ParameterizedTest" name="CanAccessTestCaseSource" executed="True" result="Success" success="True" time="0.001" asserts="0">
                                <results>
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanAccessTestCaseSource(6,7)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanAccessTestCaseSource(3,14)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="ParameterizedTest" name="CanAccessValueSource" executed="True" result="Success" success="True" time="0.001" asserts="0">
                                <results>
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanAccessValueSource(1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanAccessValueSource(2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanAccessValueSource(3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="ParameterizedTest" name="CanGenerateDataFromParameter" executed="True" result="Success" success="True" time="0.004" asserts="0">
                                <results>
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanGenerateDataFromParameter(1,42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanGenerateDataFromParameter(2,21)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanGenerateDataFromParameter(3,14)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanGenerateDataFromParameter(6,7)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanGenerateDataFromParameter(7,6)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanGenerateDataFromParameter(14,3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanGenerateDataFromParameter(21,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources(42).CanGenerateDataFromParameter(42,1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedFixture" name="ParameterizedTestFixtureWithNullArguments" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="ParameterizedTestFixtureWithNullArguments(&quot;A&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithNullArguments(&quot;A&quot;,null).TestMethod" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ParameterizedTestFixtureWithNullArguments(null,&quot;A&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithNullArguments(null,&quot;A&quot;).TestMethod" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ParameterizedTestFixtureWithNullArguments(null,null)" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithNullArguments(null,null).TestMethod" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedFixture" name="ParameterizedTestFixtureWithTypeAsArgument" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="ParameterizedTestFixtureWithTypeAsArgument(System.Int32)" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithTypeAsArgument(System.Int32).MakeSureTypeIsInSystemNamespace" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ParameterizedTestFixtureWithTypeAsArgument(System.String)" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithTypeAsArgument(System.String).MakeSureTypeIsInSystemNamespace" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PlatformDetectionTests" executed="True" result="Success" success="True" time="0.034" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.ArrayOfPlatforms" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectExactVersion" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectMacOSX" executed="True" result="Success" success="True" time="0.003" asserts="25" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectMono10" executed="True" result="Success" success="True" time="0.002" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectMono20" executed="True" result="Success" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectMono30" executed="True" result="Success" success="True" time="0.000" asserts="14" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectMono35" executed="True" result="Success" success="True" time="0.000" asserts="13" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectMono40" executed="True" result="Success" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNet10" executed="True" result="Success" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNet11" executed="True" result="Success" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNet20" executed="True" result="Success" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNet30" executed="True" result="Success" success="True" time="0.000" asserts="14" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNet35" executed="True" result="Success" success="True" time="0.000" asserts="13" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNet40" executed="True" result="Success" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNet45" executed="True" result="Success" success="True" time="0.000" asserts="14" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNetCF" executed="True" result="Success" success="True" time="0.000" asserts="16" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNT3" executed="True" result="Success" success="True" time="0.000" asserts="22" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNT4" executed="True" result="Success" success="True" time="0.000" asserts="22" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectSSCLI" executed="True" result="Success" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectUnixUnderMicrosoftDotNet" executed="True" result="Success" success="True" time="0.000" asserts="24" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectUnixUnderMono" executed="False" result="Skipped">
                            <reason>
                              <message><![CDATA[Not supported on Net]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectVista" executed="True" result="Success" success="True" time="0.000" asserts="21" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWin2003Server" executed="True" result="Success" success="True" time="0.000" asserts="21" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWin2008ServerOriginal" executed="True" result="Success" success="True" time="0.000" asserts="21" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWin2008ServerR2" executed="True" result="Success" success="True" time="0.000" asserts="20" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWin2K" executed="True" result="Success" success="True" time="0.000" asserts="21" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWin95" executed="True" result="Success" success="True" time="0.001" asserts="22" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWin98" executed="True" result="Success" success="True" time="0.000" asserts="22" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWinCE" executed="True" result="Success" success="True" time="0.000" asserts="23" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWindows7" executed="True" result="Success" success="True" time="0.000" asserts="21" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWinMe" executed="True" result="Success" success="True" time="0.000" asserts="22" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWinXP" executed="True" result="Success" success="True" time="0.000" asserts="21" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWinXPProfessionalX64" executed="True" result="Success" success="True" time="0.000" asserts="21" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectXbox" executed="True" result="Success" success="True" time="0.000" asserts="25" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.PlatformAttribute_Exclude" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.PlatformAttribute_Include" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.PlatformAttribute_IncludeAndExclude" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.PlatformAttribute_InvalidPlatform" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertyAttributeTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.PropertyAttributeTests.CanDeriveFromPropertyAttribute" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Core.Tests.PropertyAttributeTests.PropertiesWithNumericValues" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.PropertyAttributeTests.PropertyWithStringValue" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.PropertyAttributeTests.PropertyWorksOnFixtures" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ReflectTests" executed="True" result="Success" success="True" time="0.013" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.ReflectTests.CanDetectAttributes" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.CanDetectInheritedAttributes" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.Construct" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetAttribute" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetAttributes" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetConstructor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetInheritedAttribute" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetInheritedAttributes" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetMethodsWithAttribute" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetNamedMethod" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetNamedMethodWithArgs" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetNamedProperty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetPropertyValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetPropertyWithAttribute" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.HasInterface" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.InheritsFrom" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.InvokeMethod" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RemoteRunnerTests" executed="True" result="Success" success="True" time="0.391" asserts="1">
                        <results>
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.CheckRunnerID" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.CountTestCases" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.CountTestCasesAcrossMultipleAssemblies" executed="True" result="Success" success="True" time="0.035" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.LoadAndReloadAssembly" executed="True" result="Success" success="True" time="0.052" asserts="2" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.LoadAssemblyWithFixture" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.LoadAssemblyWithoutNamespaces" executed="True" result="Success" success="True" time="0.026" asserts="4" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.LoadAssemblyWithSuite" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.LoadMultipleAssemblies" executed="True" result="Success" success="True" time="0.032" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.LoadMultipleAssembliesWithFixture" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.LoadMultipleAssembliesWithSuite" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.RunAssembly" executed="True" result="Success" success="True" time="0.035" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.RunAssemblyUsingBeginAndEndRun" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.RunMultipleAssemblies" executed="True" result="Success" success="True" time="0.045" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.BasicRunnerTests.RunMultipleAssembliesUsingBeginAndEndRun" executed="True" result="Success" success="True" time="0.041" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RepeatedTestFixture" executed="True" result="Success" success="True" time="0.017" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.RepeatedTestFixture.CategoryWorksWithRepeatedTest" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.RepeatedTestFixture.IgnoreWorksWithRepeatedTest" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.RepeatedTestFixture.RepeatFailOnFirst" executed="True" result="Success" success="True" time="0.003" asserts="4" />
                          <test-case name="NUnit.Core.Tests.RepeatedTestFixture.RepeatFailOnThird" executed="True" result="Success" success="True" time="0.003" asserts="4" />
                          <test-case name="NUnit.Core.Tests.RepeatedTestFixture.RepeatSuccess" executed="True" result="Success" success="True" time="0.003" asserts="6" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RuntimeFrameworkTests" executed="True" result="Success" success="True" time="0.182" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="AnyFrameworkSupportsItself" executed="True" result="Success" success="True" time="0.011" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(net-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(net-1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(net-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(net-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(net-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(net-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(net-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(mono-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(mono-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(mono-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(mono-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(mono-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(mono-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(v1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(v1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(v2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(v3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(v3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(v4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.AnyFrameworkSupportsItself(v4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanCreateUsingClrVersion" executed="True" result="Success" success="True" time="0.012" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Net,1.0,1.0.3705&gt;)" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Net,1.1,1.1.4322&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Net,2.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Net,3.0,2.0.50727&gt;)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Net,3.5,2.0.50727&gt;)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Net,4.0,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Net,4.5,4.0.30319&gt;)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Net,0.0,0.0&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Mono,1.0,1.1.4322&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Mono,2.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Mono,3.5,2.0.50727&gt;)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Mono,4.0,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Mono,0.0,0.0&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Any,1.1,1.1.4322&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Any,2.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Any,3.5,2.0.50727&gt;)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Any,4.0,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingClrVersion(&lt;Any,0.0,0.0&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanCreateUsingFrameworkVersion" executed="True" result="Success" success="True" time="0.011" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Net,1.0,1.0.3705&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Net,1.1,1.1.4322&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Net,2.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Net,3.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Net,3.5,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Net,4.0,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Net,4.5,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Net,0.0,0.0&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Mono,1.0,1.1.4322&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Mono,2.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Mono,3.5,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Mono,4.0,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Mono,0.0,0.0&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Any,1.1,1.1.4322&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Any,2.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Any,3.5,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Any,4.0,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanCreateUsingFrameworkVersion(&lt;Any,0.0,0.0&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanDisplayFrameworkAsString" executed="True" result="Success" success="True" time="0.010" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Net,1.0,1.0.3705&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Net,1.1,1.1.4322&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Net,2.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Net,3.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Net,3.5,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Net,4.0,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Net,4.5,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Net,0.0,0.0&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Mono,1.0,1.1.4322&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Mono,2.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Mono,3.5,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Mono,4.0,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Mono,0.0,0.0&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Any,1.1,1.1.4322&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Any,2.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Any,3.5,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Any,4.0,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanDisplayFrameworkAsString(&lt;Any,0.0,0.0&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanGetCurrentFramework" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanListAvailableFrameworks" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                          <test-suite type="ParameterizedTest" name="CanParseRuntimeFramework" executed="True" result="Success" success="True" time="0.011" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Net,1.0,1.0.3705&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Net,1.1,1.1.4322&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Net,2.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Net,3.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Net,3.5,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Net,4.0,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Net,4.5,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Net,0.0,0.0&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Mono,1.0,1.1.4322&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Mono,2.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Mono,3.5,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Mono,4.0,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Mono,0.0,0.0&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Any,1.1,1.1.4322&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Any,2.0,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Any,3.5,2.0.50727&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Any,4.0,4.0.30319&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanParseRuntimeFramework(&lt;Any,0.0,0.0&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CurrentFrameworkHasBuildSpecified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CurrentFrameworkMustBeAvailable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="DifferentRuntimes_NotSupported" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.DifferentRuntimes_NotSupported(mono-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.DifferentRuntimes_NotSupported(mono-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.DifferentRuntimes_NotSupported(mono-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.DifferentRuntimes_NotSupported(mono-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.DifferentRuntimes_NotSupported(mono-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.DifferentRuntimes_NotSupported(mono-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.Mono11IsSynonymousWithMono10" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                          <test-suite type="ParameterizedTest" name="SameRuntime_HigherVersion_NotSupported" executed="True" result="Success" success="True" time="0.028" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-1.0,net-1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-1.0,net-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-1.0,net-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-1.0,net-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-1.0,net-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-1.0,net-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-1.1,net-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-1.1,net-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-1.1,net-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-1.1,net-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-1.1,net-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-2.0,net-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-2.0,net-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-2.0,net-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-2.0,net-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-3.0,net-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-3.0,net-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-3.0,net-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-3.5,net-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-3.5,net-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(net-4.0,net-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-1.0,mono-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-1.0,mono-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-1.0,mono-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-1.0,mono-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-1.0,mono-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-2.0,mono-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-2.0,mono-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-2.0,mono-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-2.0,mono-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-3.0,mono-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-3.0,mono-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-3.0,mono-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-3.5,mono-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-3.5,mono-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(mono-4.0,mono-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v1.0,v1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v1.0,v2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v1.0,v3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v1.0,v3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v1.0,v4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v1.0,v4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v1.1,v2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v1.1,v3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v1.1,v3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v1.1,v4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v1.1,v4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v2.0,v3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v2.0,v3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v2.0,v4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v2.0,v4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v3.0,v3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v3.0,v4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v3.0,v4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v3.5,v4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v3.5,v4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_HigherVersion_NotSupported(v4.0,v4.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SameRuntime_LowerVersion_DifferentCLR_NotSupported" executed="True" result="Success" success="True" time="0.023" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-1.1,net-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-2.0,net-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-3.0,net-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-3.5,net-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-4.0,net-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-4.5,net-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-2.0,net-1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-3.0,net-1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-3.5,net-1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-4.0,net-1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-4.5,net-1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-4.0,net-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-4.5,net-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-4.0,net-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-4.5,net-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-4.0,net-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(net-4.5,net-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(mono-2.0,mono-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(mono-3.0,mono-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(mono-3.5,mono-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(mono-4.0,mono-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(mono-4.5,mono-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(mono-4.0,mono-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(mono-4.5,mono-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(mono-4.0,mono-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(mono-4.5,mono-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(mono-4.0,mono-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(mono-4.5,mono-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v1.1,v1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v2.0,v1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v3.0,v1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v3.5,v1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v4.0,v1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v4.5,v1.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v2.0,v1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v3.0,v1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v3.5,v1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v4.0,v1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v4.5,v1.1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v4.0,v2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v4.5,v2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v4.0,v3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v4.5,v3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v4.0,v3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_DifferentCLR_NotSupported(v4.5,v3.5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SameRuntime_LowerVersion_SameCLR_Supported" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_SameCLR_Supported(net-3.0,net-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_SameCLR_Supported(net-3.5,net-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_SameCLR_Supported(net-3.5,net-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_SameCLR_Supported(net-4.5,net-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_SameCLR_Supported(mono-3.0,mono-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_SameCLR_Supported(mono-3.5,mono-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_SameCLR_Supported(mono-3.5,mono-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_SameCLR_Supported(mono-4.5,mono-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_SameCLR_Supported(v3.0,v2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_SameCLR_Supported(v3.5,v2.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_SameCLR_Supported(v3.5,v3.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntime_LowerVersion_SameCLR_Supported(v4.5,v4.0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.SameRuntimes_DifferentBuilds_NotSupported" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-suite type="ParameterizedTest" name="UnspecifiedRuntime_SameVersion_Supported" executed="True" result="Success" success="True" time="0.008" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(mono-1.0)" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(mono-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(mono-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(mono-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(mono-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(mono-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(net-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(net-1.1)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(net-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(net-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(net-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(net-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntime_SameVersion_Supported(net-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="UnspecifiedRuntimeAndVersion_Supported" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(net-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(net-1.1)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(net-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(net-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(net-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(net-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(net-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(mono-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(mono-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(mono-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(mono-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(mono-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedRuntimeAndVersion_Supported(mono-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="UnspecifiedVersion_SameRuntime_Supported" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(mono-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(mono-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(mono-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(mono-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(mono-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(mono-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(net-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(net-1.1)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(net-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(net-3.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(net-3.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(net-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.UnspecifiedVersion_SameRuntime_Supported(net-4.5)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="WellKnownClrVersions_SupportEquivalentFrameworkVersions" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.WellKnownClrVersions_SupportEquivalentFrameworkVersions(&quot;net-1.1.4322&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.WellKnownClrVersions_SupportEquivalentFrameworkVersions(&quot;net-1.0.3705&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.WellKnownClrVersions_SupportEquivalentFrameworkVersions(&quot;net-2.0.50727&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.WellKnownClrVersions_SupportEquivalentFrameworkVersions(&quot;net-4.0.30319&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SerializationBug" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SerializationBug.SaveAndLoad" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SetCultureAttributeTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetBothCulturesToFrench" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetBothCulturesToFrenchCanadian" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetBothCulturesToRussian" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetMixedCulturesToFrenchAndUIFrenchCanadian" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetMixedCulturesToRussianAndUIEnglishUS" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetUICultureOnlyToFrench" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetUICultureOnlyToFrenchCanadian" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetUICultureOnlyToRussian" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SetCultureAttributeTests+NestedBehavior" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests+NestedBehavior.InheritedRussian" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests+NestedBehavior.InheritedRussianWithUIFrench" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SetUpFixtureTests" executed="True" result="Success" success="True" time="0.706" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.AssemblySetUpFixtureReplacesAssemblyNodeInTree" executed="True" result="Success" success="True" time="0.314" asserts="4" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.AssemblySetupFixtureWrapsExecutionOfTest" executed="True" result="Success" success="True" time="0.306" asserts="5" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.NamespaceSetUpFixtureReplacesNamespaceNodeInTree" executed="True" result="Success" success="True" time="0.012" asserts="14" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.NamespaceSetUpFixtureWrapsExecutionOfSingleTest" executed="True" result="Success" success="True" time="0.012" asserts="8" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.NamespaceSetUpFixtureWrapsExecutionOfTwoTests" executed="True" result="Success" success="True" time="0.015" asserts="13" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.NamespaceSetUpFixtureWrapsNestedNamespaceSetUpFixture" executed="True" result="Success" success="True" time="0.015" asserts="15" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.NamespaceSetUpMethodsMayBeStatic" executed="True" result="Success" success="True" time="0.015" asserts="8" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.WithTwoSetUpFixtuesOnlyOneIsUsed" executed="True" result="Success" success="True" time="0.013" asserts="8" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SetUpTest" executed="True" result="Success" success="True" time="0.022" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SetUpTest.BaseSetUpIsCalledFirstTearDownLast" executed="True" result="Success" success="True" time="0.003" asserts="6" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.CheckInheritedSetUpAndTearDownAreCalled" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.CheckOverriddenSetUpAndTearDownAreNotCalled" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.MakeSureSetUpAndTearDownAreCalled" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.MultipleSetUpAndTearDownMethodsAreCalled" executed="True" result="Success" success="True" time="0.002" asserts="5" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.SetUpAndTearDownCounter" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.SetupRecordsOriginalExceptionThownByTestCase" executed="True" result="Success" success="True" time="0.003" asserts="4" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.TearDownRecordsOriginalExceptionThownByTestCase" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SetUpTest+SetupCallDerived" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SetUpTest+SetupCallDerived.AssertCount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SimpleNameFilterTests" executed="True" result="Success" success="True" time="0.041" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.ExplicitTestCaseDoesNotMatchWhenNotSelectedDirectly" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.ExplicitTestCaseMatchesWhenSelectedDirectly" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.ExplicitTestSuiteDoesNotMatchWhenNotSelectedDirectly" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.ExplicitTestSuiteMatchesWhenSelectedDirectly" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.HighLevelSuite" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.MultipleNameMatch" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.SingleNameMatch" executed="True" result="Success" success="True" time="0.004" asserts="4" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.SuiteNameMatch" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.TestDoesNotMatch" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SimpleTestRunnerTests" executed="True" result="Success" success="True" time="0.360" asserts="1">
                        <results>
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.CheckRunnerID" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.CountTestCases" executed="True" result="Success" success="True" time="0.028" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.CountTestCasesAcrossMultipleAssemblies" executed="True" result="Success" success="True" time="0.033" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.LoadAndReloadAssembly" executed="True" result="Success" success="True" time="0.052" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.LoadAssemblyWithFixture" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.LoadAssemblyWithoutNamespaces" executed="True" result="Success" success="True" time="0.024" asserts="4" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.LoadAssemblyWithSuite" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.LoadMultipleAssemblies" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.LoadMultipleAssembliesWithFixture" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.LoadMultipleAssembliesWithSuite" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.RunAssembly" executed="True" result="Success" success="True" time="0.029" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.RunAssemblyUsingBeginAndEndRun" executed="True" result="Success" success="True" time="0.031" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.RunMultipleAssemblies" executed="True" result="Success" success="True" time="0.037" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.BasicRunnerTests.RunMultipleAssembliesUsingBeginAndEndRun" executed="True" result="Success" success="True" time="0.039" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="StackOverflowTestFixture" executed="False" result="Skipped">
                        <reason>
                          <message><![CDATA[Cannot handle StackOverflowException in managed code]]></message>
                        </reason>
                        <results>
                          <test-case name="NUnit.Core.Tests.StackOverflowTestFixture.SimpleOverflow" executed="False" result="Skipped">
                            <reason>
                              <message><![CDATA[Cannot handle StackOverflowException in managed code]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SuiteBuilderTests" executed="True" result="Success" success="True" time="1.303" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.DiscoverSuite" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.FileNotFound" executed="True" result="Success" success="True" time="0.042" asserts="0" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.FixtureNotFound" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.InvalidAssembly" executed="True" result="Success" success="True" time="0.024" asserts="0" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.LoadAssembly" executed="True" result="Success" success="True" time="0.386" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.LoadAssemblyWithoutNamespaces" executed="True" result="Success" success="True" time="0.396" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.LoadFixture" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.LoadNamespaceAsSuite" executed="True" result="Success" success="True" time="0.389" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.LoadSuite" executed="True" result="Success" success="True" time="0.015" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.WrongReturnTypeSuite" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SuiteBuilderTests_Multiple" executed="True" result="Success" success="True" time="0.148" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests_Multiple.BuildSuite" executed="True" result="Success" success="True" time="0.032" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests_Multiple.LoadFixture" executed="True" result="Success" success="True" time="0.049" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests_Multiple.RootNode" executed="True" result="Success" success="True" time="0.033" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests_Multiple.TestCaseCount" executed="True" result="Success" success="True" time="0.032" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestAttributeFixture" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.Description" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.DescriptionInResult" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.FixtureDescription" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.FixtureDescriptionInResult" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.NoDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.ReflectionTest" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.SeparateDescriptionAttribute" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.SeparateDescriptionInResult" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestCaseAttributeTests" executed="True" result="Success" success="True" time="0.056" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="ArgumentsAreCoalescedInObjectArray" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.ArgumentsAreCoalescedInObjectArray(&quot;a&quot;,&quot;b&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ArgumentsOfDifferentTypeAreCoalescedInObjectArray" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.ArgumentsOfDifferentTypeAreCoalescedInObjectArray(1,&quot;b&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertDoubleToDecimal" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanConvertDoubleToDecimal(2.2m,3.3m)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertIntToDecimal" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanConvertIntToDecimal(5m,2m)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertIntToDouble" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanConvertIntToDouble(2,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertSmallIntsToByte" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanConvertSmallIntsToByte(5,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertSmallIntsToSByte" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanConvertSmallIntsToSByte(5,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertSmallIntsToShort" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanConvertSmallIntsToShort(5,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertStringToDateTime" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanConvertStringToDateTime(10/12/1942 00:00:00)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanConvertStringToDecimal" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanConvertStringToDecimal(2.2m,3.3m)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanIgnoreIndividualTestCases" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanMarkIndividualTestCasesExplicit" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-suite type="ParameterizedTest" name="CanPassArrayAsArgument" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanPassArrayAsArgument(&quot;a&quot;,&quot;b&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanPassNullAsArgument" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanPassNullAsArgument(null,null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanPassNullAsSoleArgument" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanPassNullAsSoleArgument(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanPassObjectArrayAsFirstArgument" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanPassObjectArrayAsFirstArgument(1,&quot;two&quot;,3.0d)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanPassObjectArrayAsFirstArgument(&quot;zip&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyCategory" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="ParameterizedTest" name="CanSpecifyExceptionMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyExceptionMessage(42)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanSpecifyExceptionMessageAndMatchType" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyExceptionMessageAndMatchType(42)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyExpectedException" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyExpectedException_NoneThrown" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyExpectedException_WrongException" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyExpectedException_WrongMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyMultipleCategories" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyTestName" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.ConversionOverflowMakesTestNonRunnable" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="ParameterizedTest" name="ExpectedResultCanBeNull" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.ExpectedResultCanBeNull()" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="HandlesParamsArrayAsLastArgument" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.HandlesParamsArrayAsLastArgument(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="HandlesParamsArrayAsLastArgumentWithNoValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.HandlesParamsArrayAsLastArgumentWithNoValues(&quot;a&quot;,&quot;b&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="HandlesParamsArrayAsSoleArgument" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.HandlesParamsArrayAsSoleArgument(&quot;a&quot;,&quot;b&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="HandlesParamsArrayWithOneItemAsLastArgument" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.HandlesParamsArrayWithOneItemAsLastArgument(&quot;a&quot;,&quot;b&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="HandlesParamsArrayWithOneItemAsSoleArgument" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.HandlesParamsArrayWithOneItemAsSoleArgument(System.String[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IgnoreTakesPrecedenceOverExpectedException" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-suite type="ParameterizedTest" name="IntegerDivisionWithResultCheckedByNUnit" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultCheckedByNUnit(12,0)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.DivisionByZeroThrowsException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultCheckedByNUnit(12,3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultCheckedByNUnit(12,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultCheckedByNUnit(12,4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IntegerDivisionWithResultPassedToTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultPassedToTest(12,4,3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultPassedToTest(12,3,4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultPassedToTest(12,0,0)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultPassedToTest(12,0,0)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultPassedToTest(12,2,6)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestCaseResultFixture" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestCaseResultFixture.TestCaseDefault" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestCaseResultFixture.TestCaseFailure" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestCaseResultFixture.TestCaseNotRun" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseResultFixture.TestCaseSuccess" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestCaseSourceTests" executed="True" result="Success" success="True" time="0.046" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.CanIgnoreIndividualTestCases" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.CanMarkIndividualTestCasesExplicit" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.CanSpecifyExpectedException" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.CanSpecifyExpectedException_NoneThrown" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.CanSpecifyExpectedException_NoneThrown_ExpectedResultReturned" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.CanSpecifyExpectedException_WrongException" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-suite type="ParameterizedTest" name="ExpectedResultCanBeNull" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.ExpectedResultCanBeNull()" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.HandlesExceptionInTestCaseSource" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.IgnoreTakesPrecedenceOverExpectedException" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-suite type="ParameterizedTest" name="MethodTakingTwoStringArrays" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.MethodTakingTwoStringArrays(System.String[],System.String[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceCanBeInstanceField" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceCanBeInstanceField(&quot;InstanceField&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceCanBeInstanceMethod" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceCanBeInstanceMethod(&quot;InstanceMethod&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceCanBeInstanceProperty" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceCanBeInstanceProperty(&quot;InstanceProperty&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceCanBeStaticField" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceCanBeStaticField(&quot;StaticField&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceCanBeStaticMethod" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceCanBeStaticMethod(&quot;StaticMethod&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceCanBeStaticProperty" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceCanBeStaticProperty(&quot;StaticProperty&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceIsInvokedWithCorrectCurrentDirectory" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceIsInvokedWithCorrectCurrentDirectory(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceMayBeInAnotherClass" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <categories>
                              <category name="Top" />
                            </categories>
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.ThisOneShouldThrow" description="Demonstrates use of ExpectedException" executed="True" result="Success" success="True" time="0.000" asserts="0">
                                <categories>
                                  <category name="Junk" />
                                </categories>
                                <properties>
                                  <property name="MyProp" value="zip" />
                                </properties>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayBeInAnotherClass(100,20,5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayBeInAnotherClass(100,4,25)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceMayBeInAnotherClassWithExpectedResult" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayBeInAnotherClassWithExpectedResult(12,0)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TC1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TC2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TC3" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceMayReturnArgumentsAsIntArray" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsIntArray(12,3,4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsIntArray(12,4,3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsIntArray(12,6,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceMayReturnArgumentsAsObjectArray" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsObjectArray(12,3,4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsObjectArray(12,4,3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsObjectArray(12,6,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceMayReturnArgumentsAsParamSet" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsParamSet(24,3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsParamSet(24,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SourceMayReturnSinglePrimitiveArgumentAlone" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnSinglePrimitiveArgumentAlone(2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnSinglePrimitiveArgumentAlone(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnSinglePrimitiveArgumentAlone(6)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnSinglePrimitiveArgumentAlone(8)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="TestAttributeIsOptional" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestAttributeIsOptional(12,3,4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestAttributeIsOptional(12,4,3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestAttributeIsOptional(12,6,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="TestMayUseMultipleSourceAttributes" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestMayUseMultipleSourceAttributes(12,3,4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestMayUseMultipleSourceAttributes(12,4,3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestMayUseMultipleSourceAttributes(12,6,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestMayUseMultipleSourceAttributes(12,1,12)" executed="True" result="Success" success="True" time="0.000" asserts="1">
                                <categories>
                                  <category name="Extra" />
                                </categories>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestMayUseMultipleSourceAttributes(12,2,6)" executed="True" result="Success" success="True" time="0.000" asserts="1">
                                <categories>
                                  <category name="Extra" />
                                </categories>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestMayUseMultipleSourceAttributes(12,0,0)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="TestWithFourArguments" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestWithFourArguments(12,3,4,0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestWithFourArguments(12,4,3,0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestWithFourArguments(12,5,2,2)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestCaseTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestCaseTest.CreateIgnoredTestCase" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestCaseTest.LoadMethodCategories" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestCaseTest.RunIgnoredTestCase" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestConsole" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestConsole.ConsoleWrite" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                          <test-case name="NUnit.Core.Tests.TestConsole.ConsoleWriteLine" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestContextTests" executed="True" result="Success" success="True" time="0.029" asserts="4">
                        <properties>
                          <property name="Question" value="Why?" />
                        </properties>
                        <results>
                          <test-case name="NUnit.Core.Tests.TestContextTests.CanAccessTestContextFromThreadSpawnedWithinTest" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.CanAccessTestContextWhenRunningTestOnSeparateThread" executed="True" result="Success" success="True" time="0.001" asserts="3">
                            <properties>
                              <property name="RequiresThread" value="True" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.TestContextTests.FixtureSetUpCanAccessFixtureFullName" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.FixtureSetUpCanAccessFixtureName" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.FixtureSetUpCanAccessFixtureProperties" executed="True" result="Success" success="True" time="0.000" asserts="3">
                            <properties>
                              <property name="Answer" value="37" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.TestContextTests.FixtureSetUpCanAccessFixtureResultState" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.FixtureSetUpCanAccessTestDirectory" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.FixtureSetUpCanAccessWorkDirectory" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.SetUpCanAccessTestDirectory" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.SetUpCanAccessTestFullName" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.SetUpCanAccessTestName" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.SetUpCanAccessTestProperties" executed="True" result="Success" success="True" time="0.000" asserts="3">
                            <properties>
                              <property name="Answer" value="99" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.TestContextTests.SetUpCanAccessTestResultState" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.SetUpCanAccessWorkDirectory" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.TestCanAccessItsOwnFullName" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.TestCanAccessItsOwnName" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.TestCanAccessItsOwnProperties" executed="True" result="Success" success="True" time="0.000" asserts="3">
                            <properties>
                              <property name="Answer" value="42" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.TestContextTests.TestCanAccessItsOwnResultState" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.TestCanAccessTestDirectory" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.TestCanAccessTestState_FailingTest" executed="True" result="Success" success="True" time="0.003" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.TestCanAccessTestState_FailureInSetUp" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.TestCanAccessTestState_IgnoredInSetUp" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.TestCanAccessTestState_PassingTest" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.TestCanAccessWorkDirectory" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestDelegateFixture" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestDelegateFixture.DelegateTest" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestExecutionContextTests" executed="True" result="Success" success="True" time="0.011" asserts="3">
                        <properties>
                          <property name="Question" value="Why?" />
                        </properties>
                        <results>
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.FixtureSetUpCanAccessFixtureFullName" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.FixtureSetUpCanAccessFixtureName" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.FixtureSetUpCanAccessFixtureProperties" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.SetAndRestoreCurrentCulture" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.SetAndRestoreCurrentDirectory" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.SetAndRestoreCurrentPrincipal" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.SetAndRestoreCurrentUICulture" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.SetUpCanAccessTestFullName" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.SetUpCanAccessTestName" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.SetUpCanAccessTestProperties" executed="True" result="Success" success="True" time="0.000" asserts="2">
                            <properties>
                              <property name="Answer" value="42" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.TestCanAccessItsOwnFullName" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.TestCanAccessItsOwnName" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestExecutionContextTests.TestCanAccessItsOwnProperties" executed="True" result="Success" success="True" time="0.000" asserts="2">
                            <properties>
                              <property name="Answer" value="42" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestFixtureBuilderTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestFixtureBuilderTests.GoodSignature" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureBuilderTests.LoadCategories" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestFixtureExtension" executed="True" result="Success" success="True" time="0.050" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestFixtureExtension.CheckMultipleSetUp" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureExtension.DerivedTest" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureExtension.InheritSetup" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureExtension.InheritTearDown" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestFixtureTests" executed="True" result="Success" success="True" time="0.232" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunBadConstructor" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunConstructorWithArgsNotSupplied" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunFixtureSetupWithParameters" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunFixtureSetupWithReturnValue" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunFixtureTearDownWithParameters" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunFixtureTearDownWithReturnValue" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunGenericFixtureDerivedFromAbstractFixtureWithNoArgsProvided" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunGenericFixtureWithNoArgsProvided" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunGenericFixtureWithNoTestFixtureAttribute" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunGenericFixtureWithOpenTypeAsArgument" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunIgnoredFixture" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunPrivateFixtureSetUp" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunPrivateFixtureTearDown" executed="True" result="Success" success="True" time="0.048" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunPrivateSetUp" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunPrivateTearDown" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunSetupWithParameters" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunSetupWithReturnValue" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunTearDownWithParameters" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunTearDownWithReturnValue" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunConstructorWithArgsSupplied" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunFixtureDerivedFromAbstractDerivedTestFixture" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunFixtureDerivedFromAbstractFixture" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunGenericFixtureDerivedFromAbstractFixtureWithArgsProvided" executed="True" result="Success" success="True" time="0.006" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunGenericFixtureWithProperArgsProvided" executed="True" result="Success" success="True" time="0.006" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunMultipleSetUp" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunMultipleTearDown" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunMultipleTestFixtureSetUp" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunMultipleTestFixtureTearDown" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunProtectedFixtureSetUp" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunProtectedFixtureTearDown" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunProtectedSetUp" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunProtectedTearDown" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunStaticFixture" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunStaticFixtureSetUp" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunStaticFixtureTearDown" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunStaticSetUp" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunStaticTearDown" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromDoublyNestedType" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromNestedType" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromStaticTypeWithoutTestFixtureAttribute" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromType" executed="True" result="Success" success="True" time="0.008" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromTypeWithoutNamespace" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromTypeWithoutTestFixtureAttributeContainingTest" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromTypeWithoutTestFixtureAttributeContainingTestCase" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromTypeWithoutTestFixtureAttributeContainingTestCaseSource" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromTypeWithoutTestFixtureAttributeContainingTheory" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.FixtureInheritingTwoTestFixtureAttributesIsLoadedOnlyOnce" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestFixtureTests+InternalTestFixture" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestFixtureTests+InternalTestFixture.CanRunTestInInternalTestFixture" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestFixtureTests+PrivateTestFixture" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestFixtureTests+PrivateTestFixture.CanRunTestInPrivateTestFixture" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestFixtureTests+ProtectedTestFixture" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestFixtureTests+ProtectedTestFixture.CanRunTestInProtectedTestFixture" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestFrameworkTests" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestFrameworkTests.NUnitFrameworkIsKnownAndReferenced" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestIDTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestIDTests.ClonedTestIDsAreEqual" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestIDTests.DifferentTestIDsAreNotEqual" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestIDTests.DifferentTestIDsDisplayDifferentStrings" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestInfoTests" executed="True" result="Success" success="True" time="0.019" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestInfoTests.ConstructFromFixture" executed="True" result="Success" success="True" time="0.007" asserts="10" />
                          <test-case name="NUnit.Core.Tests.TestInfoTests.ConstructFromSuite" executed="True" result="Success" success="True" time="0.005" asserts="9" />
                          <test-case name="NUnit.Core.Tests.TestInfoTests.ConstructFromTestCase" executed="True" result="Success" success="True" time="0.006" asserts="9" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestMethodSignatureTests" executed="True" result="Success" success="True" time="0.172" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.InstanceTestMethodIsRunnable" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.PrivateTestMethodIsNotRunnable" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.ProtectedTestMethodIsNotRunnable" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.RunningTestsThroughFixtureGivesCorrectResults" executed="True" result="Success" success="True" time="0.010" asserts="6" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.StaticTestMethodIsRunnable" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.StaticTestMethodWithArgumentsNotProvidedIsNotRunnable" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.StaticTestMethodWithArgumentsProvidedIsRunnable" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.StaticTestMethodWithWrongArgumentTypesProvidedGivesError" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.StaticTestMethodWithWrongNumberOfArgumentsProvidedIsNotRunnable" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithArgumentsNotProvidedIsNotRunnable" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithArgumentsProvidedIsRunnable" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithConvertibleArgumentsIsRunnable" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithMultipleTestCasesExecutesMultipleTimes" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithMultipleTestCasesUsesCorrectNames" executed="True" result="Success" success="True" time="0.007" asserts="7" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithNonConvertibleArgumentsGivesError" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithoutParametersWithArgumentsProvidedIsNotRunnable" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithParamsArgumentIsRunnable" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithReturnTypeIsNotRunnable" executed="True" result="Success" success="True" time="0.007" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithWrongArgumentTypesProvidedGivesError" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithWrongNumberOfArgumentsProvidedIsNotRunnable" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                          <test-suite type="ParameterizedTest" name="TestParams" executed="True" result="Success" success="True" time="0.032" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestParams()" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestParams(&quot;one&quot;,&quot;two&quot;)" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestParams(&quot;one&quot;,&quot;two&quot;,&quot;three&quot;)" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestParams(System.String[])" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestParams(&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;)" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestNameTests" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanCompareStrongTestNames" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanCompareWeakAndStrongTestNames" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanCompareWeakTestNames" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanDisplayUniqueNames" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanParseSimpleTestNames" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanParseStrongTestNames" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanParseWeakTestNames" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.ClonedTestNamesAreEqual" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.TestNamesWithDifferentRunnerIDsAreNotEqual" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestNodeTests" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestNodeTests.ConstructFromMultipleTests" executed="True" result="Success" success="True" time="0.005" asserts="8" />
                          <test-case name="NUnit.Core.Tests.TestNodeTests.ConstructFromSuite" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestNodeTests.ConstructFromTestCase" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestRunnerThreadTests" executed="True" result="Success" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestRunnerThreadTests.RunMultipleTests" executed="True" result="Success" success="True" time="0.027" asserts="0" />
                          <test-case name="NUnit.Core.Tests.TestRunnerThreadTests.RunNamedTest" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                          <test-case name="NUnit.Core.Tests.TestRunnerThreadTests.RunTestSuite" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestSuiteTest" executed="True" result="Success" success="True" time="0.147" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.CanSortUsingExternalComparer" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.CountTestCasesFilteredByName" executed="True" result="Success" success="True" time="0.005" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.DefaultSortIsByName" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.ExcludingCategoryDoesNotRunExplicitTestCases" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.ExcludingCategoryDoesNotRunExplicitTestFixtures" executed="True" result="Success" success="True" time="0.038" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.InheritedTestCount" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunExplicitTestByCategory" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunExplicitTestByName" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunExplicitTestDirectly" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunNoTestSuite" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunSingleTest" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunSuiteByCategory" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunSuiteByName" executed="True" result="Success" success="True" time="0.007" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunTestByCategory" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunTestByName" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunTestExcludingCategory" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunTestsInFixture" executed="True" result="Success" success="True" time="0.007" asserts="6" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.SuiteRunInitialized" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.SuiteWithNoTests" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TheoryTests" executed="True" result="Success" success="True" time="0.022" asserts="0">
                        <results>
                          <test-suite type="Theory" name="ArrayWithDatapointsAttributeIsUsed" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TheoryTests.ArrayWithDatapointsAttributeIsUsed(&quot;xyz1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.ArrayWithDatapointsAttributeIsUsed(&quot;xyz2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.ArrayWithDatapointsAttributeIsUsed(&quot;xyz3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TheoryTests.BooleanArgumentsAreSuppliedAutomatically" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TheoryTests.EnumArgumentsAreSuppliedAutomatically" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-suite type="Theory" name="NullDatapointIsOK" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TheoryTests.NullDatapointIsOK(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TheoryTests.SimpleTestIgnoresDataPoints" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="Theory" name="SquareRootWithAllGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithAllGoodValues(12.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithAllGoodValues(4.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithAllGoodValues(9.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="Theory" name="SquareRootWithOneBadValue" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithOneBadValue(12.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithOneBadValue(-4.0d)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithOneBadValue(9.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TheoryTests.TheoryFailsIfAllTestsAreInconclusive" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TheoryTests.TheoryWithDatapointsIsRunnable" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TheoryTests.TheoryWithNoArgumentsIsTreatedAsTest" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TheoryTests.TheoryWithNoDatapointsIsNotRunnable" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TheoryTests+SqrtTests_DisplayResults" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-suite type="Theory" name="SqrtTimesItselfGivesOriginal" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TheoryTests+SqrtTests_DisplayResults.SqrtTimesItselfGivesOriginal(0.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TheoryTests+SqrtTests_DisplayResults.SqrtTimesItselfGivesOriginal(1.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TheoryTests+SqrtTests_DisplayResults.SqrtTimesItselfGivesOriginal(-1.0d)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.TheoryTests+SqrtTests_DisplayResults.SqrtTimesItselfGivesOriginal(double.MaxValue)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.TheoryTests+SqrtTests_DisplayResults.SqrtTimesItselfGivesOriginal(double.PositiveInfinity)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ThreadedTestRunnerTests" executed="True" result="Success" success="True" time="0.364" asserts="1">
                        <results>
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.CheckRunnerID" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.CountTestCases" executed="True" result="Success" success="True" time="0.025" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.CountTestCasesAcrossMultipleAssemblies" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.LoadAndReloadAssembly" executed="True" result="Success" success="True" time="0.052" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.LoadAssemblyWithFixture" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.LoadAssemblyWithoutNamespaces" executed="True" result="Success" success="True" time="0.026" asserts="4" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.LoadAssemblyWithSuite" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.LoadMultipleAssemblies" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.LoadMultipleAssembliesWithFixture" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.LoadMultipleAssembliesWithSuite" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.RunAssembly" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.RunAssemblyUsingBeginAndEndRun" executed="True" result="Success" success="True" time="0.031" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.RunMultipleAssemblies" executed="True" result="Success" success="True" time="0.039" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.BasicRunnerTests.RunMultipleAssembliesUsingBeginAndEndRun" executed="True" result="Success" success="True" time="0.038" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ThreadingTests" executed="True" result="Success" success="True" time="0.224" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.SetUpWithInfiniteLoopTimesOut" executed="True" result="Success" success="True" time="0.066" asserts="3" />
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestOnSeparateThreadReportsAssertCountCorrectly" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithInfiniteLoopTimesOut" executed="True" result="Success" success="True" time="0.076" asserts="3" />
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithMTAThreadRunsInMTA" executed="True" result="Success" success="True" time="0.000" asserts="2">
                            <properties>
                              <property name="APARTMENT_STATE" value="MTA" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithRequiresMTARunsInMTA" executed="True" result="Success" success="True" time="0.000" asserts="2">
                            <properties>
                              <property name="APARTMENT_STATE" value="MTA" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithRequiresSTARunsInSTA" executed="True" result="Success" success="True" time="0.001" asserts="1">
                            <properties>
                              <property name="APARTMENT_STATE" value="STA" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithRequiresThreadRunsInSeparateThread" executed="True" result="Success" success="True" time="0.001" asserts="1">
                            <properties>
                              <property name="RequiresThread" value="True" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithRequiresThreadRunsSetUpAndTestOnSameThread" executed="True" result="Success" success="True" time="0.001" asserts="1">
                            <properties>
                              <property name="RequiresThread" value="True" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithRequiresThreadWithMTAArgRunsOnSeparateThreadInMTA" executed="True" result="Success" success="True" time="0.001" asserts="2">
                            <properties>
                              <property name="RequiresThread" value="True" />
                              <property name="APARTMENT_STATE" value="MTA" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithRequiresThreadWithSTAArgRunsOnSeparateThreadInSTA" executed="True" result="Success" success="True" time="0.001" asserts="2">
                            <properties>
                              <property name="RequiresThread" value="True" />
                              <property name="APARTMENT_STATE" value="STA" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithSTAThreadRunsInSTA" executed="True" result="Success" success="True" time="0.001" asserts="1">
                            <properties>
                              <property name="APARTMENT_STATE" value="STA" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithTimeoutRunsOnSeparateThread" executed="True" result="Success" success="True" time="0.001" asserts="1">
                            <properties>
                              <property name="Timeout" value="50" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithTimeoutRunsSetUpAndTestOnSameThread" executed="True" result="Success" success="True" time="0.001" asserts="1">
                            <properties>
                              <property name="Timeout" value="50" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TimeoutCanBeSetOnTestFixture" executed="True" result="Success" success="True" time="0.068" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ThreadingTests+FixtureRequiresMTA" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <properties>
                          <property name="APARTMENT_STATE" value="MTA" />
                        </properties>
                        <results>
                          <test-case name="NUnit.Core.Tests.ThreadingTests+FixtureRequiresMTA.RequiresMTACanBeSetOnTestFixture" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ThreadingTests+FixtureRequiresSTA" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <properties>
                          <property name="APARTMENT_STATE" value="STA" />
                        </properties>
                        <results>
                          <test-case name="NUnit.Core.Tests.ThreadingTests+FixtureRequiresSTA.RequiresSTACanBeSetOnTestFixture" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ThreadingTests+FixtureRequiresThread" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <properties>
                          <property name="RequiresThread" value="True" />
                        </properties>
                        <results>
                          <test-case name="NUnit.Core.Tests.ThreadingTests+FixtureRequiresThread.RequiresThreadCanBeSetOnTestFixture" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TypeHelperTests" executed="True" result="Success" success="True" time="0.011" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="GetDisplayName" executed="True" result="Success" success="True" time="0.011" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.ListTester`1[System.Collections.Generic.List`1[System.Collections.Generic.List`1[System.Int32]]],&quot;ListTester&lt;List&lt;List&lt;Int32&gt;&gt;&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.ContainerClass+NestedGeneric`1+DoublyNestedGeneric`1[System.String,System.Int32],&quot;ContainerClass+NestedGeneric+DoublyNestedGeneric&lt;String,Int32&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.ContainerClass+NestedClass+DoublyNestedClass,&quot;ContainerClass+NestedClass+DoublyNestedClass&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.GenericContainerClass`1+NestedClass+DoublyNestedGeneric`1[System.String,System.Boolean],&quot;GenericContainerClass+NestedClass+DoublyNestedGeneric&lt;String,Boolean&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.GenericContainerClass`1+NestedGeneric`1[System.String,System.Int32],&quot;GenericContainerClass+NestedGeneric&lt;String,Int32&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.GenericContainerClass`1+NestedGeneric`1+DoublyNestedClass[System.String,System.Int32],&quot;GenericContainerClass+NestedGeneric+DoublyNestedClass&lt;String,Int32&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.GenericContainerClass`1+NestedGeneric`1+DoublyNestedGeneric`1[System.String,System.Int32,System.Boolean],&quot;GenericContainerClass+NestedGeneric+DoublyNestedGeneric&lt;String,Int32,Boolean&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.ListTester`1[System.Collections.Generic.List`1[System.Int32]],&quot;ListTester&lt;List&lt;Int32&gt;&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(System.Int32,&quot;Int32&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.SimpleClass,&quot;SimpleClass&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.ContainerClass+NestedClass+DoublyNestedGeneric`1[System.Int32],&quot;ContainerClass+NestedClass+DoublyNestedGeneric&lt;Int32&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.ContainerClass+NestedGeneric`1[System.Int32],&quot;ContainerClass+NestedGeneric&lt;Int32&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.ContainerClass+NestedGeneric`1+DoublyNestedClass[System.Int32],&quot;ContainerClass+NestedGeneric+DoublyNestedClass&lt;Int32&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(MyNoNamespaceClass,&quot;MyNoNamespaceClass&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.GenericContainerClass`1+NestedClass+DoublyNestedClass[System.String],&quot;GenericContainerClass+NestedClass+DoublyNestedClass&lt;String&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.GenericContainerClass`1+NestedClass[System.String],&quot;GenericContainerClass+NestedClass&lt;String&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.GenericClass`3[System.Int32,System.Decimal,System.String],&quot;GenericClass&lt;Int32,Decimal,String&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.GenericClass`3[System.Int32[],System.Decimal[],System.String[]],&quot;GenericClass&lt;Int32[],Decimal[],String[]&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TypeHelperTests.GetDisplayName(NUnit.TestData.TypeHelperFixture.ContainerClass+NestedClass,&quot;ContainerClass+NestedClass&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ValueSourceTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="MultipleArguments" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.MultipleArguments(12,3,4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.MultipleArguments(12,4,3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.MultipleArguments(12,6,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ValueSourceCanBeInstanceField" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceCanBeInstanceField(&quot;InstanceField&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ValueSourceCanBeInstanceMethod" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceCanBeInstanceMethod(&quot;InstanceMethod&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ValueSourceCanBeInstanceProperty" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceCanBeInstanceProperty(&quot;InstanceProperty&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ValueSourceCanBeStaticField" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceCanBeStaticField(&quot;StaticField&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ValueSourceCanBeStaticMethod" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceCanBeStaticMethod(&quot;StaticMethod&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ValueSourceCanBeStaticProperty" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceCanBeStaticProperty(&quot;StaticProperty&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ValueSourceIsInvokedWithCorrectCurrentDirectory" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceIsInvokedWithCorrectCurrentDirectory(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ValueSourceMayBeGeneric" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceMayBeGeneric(1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceMayBeGeneric(2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceMayBeGeneric(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceMayBeGeneric(8)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ValueSourceMayBeInAnotherClass" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceMayBeInAnotherClass(12,3,4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceMayBeInAnotherClass(12,4,3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceMayBeInAnotherClass(12,6,2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="XmlTest" executed="True" result="Success" success="True" time="0.989" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.XmlTest.removeTime" executed="True" result="Success" success="True" time="0.158" asserts="1" />
                          <test-case name="NUnit.Core.Tests.XmlTest.TestSchemaValidatorFrenchCulture" executed="True" result="Success" success="True" time="0.306" asserts="1" />
                          <test-case name="NUnit.Core.Tests.XmlTest.TestSchemaValidatorInvariantCulture" executed="True" result="Success" success="True" time="0.159" asserts="1" />
                          <test-case name="NUnit.Core.Tests.XmlTest.TestSchemaValidatorUnitedStatesCulture" executed="True" result="Success" success="True" time="0.163" asserts="1" />
                          <test-case name="NUnit.Core.Tests.XmlTest.TestStream" executed="True" result="Success" success="True" time="0.200" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="D:\Dev\NUnit\nunit-2.6\builds\net\3.5\release\tests/nunit.util.tests.dll" executed="True" result="Success" success="True" time="33.534" asserts="0">
        <results>
          <test-suite type="Namespace" name="NUnit" executed="True" result="Success" success="True" time="33.533" asserts="0">
            <results>
              <test-suite type="Namespace" name="Util" executed="True" result="Success" success="True" time="33.533" asserts="0">
                <results>
                  <test-suite type="SetUpFixture" name="Tests" executed="True" result="Success" success="True" time="33.533" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AssemblyListTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.AddFiresChangedEvent" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.CanAddAssemblies" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.CanRemoveAssemblies" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.EmptyList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.MustAddAbsolutePath" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.RemoveAtFiresChangedEvent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.RemoveFiresChangedEvent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.SettingFullPathFiresChangedEvent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AssemblyWatcherTests" executed="True" result="Success" success="True" time="0.927" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.AssemblyWatcherTests.ChangingAttributesDoesNotTriggerWatcher" executed="True" result="Success" success="True" time="0.225" asserts="1" />
                          <test-case name="NUnit.Util.Tests.AssemblyWatcherTests.ChangingFileTriggersWatcher" executed="True" result="Success" success="True" time="0.201" asserts="2" />
                          <test-case name="NUnit.Util.Tests.AssemblyWatcherTests.CopyingFileDoesNotTriggerWatcher" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                          <test-case name="NUnit.Util.Tests.AssemblyWatcherTests.MultipleCloselySpacedChangesTriggerWatcherOnlyOnce" executed="True" result="Success" success="True" time="0.296" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CategoryManagerTest" executed="True" result="Success" success="True" time="0.072" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.CategoryManagerTest.CanAddAllAvailableCategoriesInTestTree" executed="True" result="Success" success="True" time="0.041" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryManagerTest.CanAddStrings" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryManagerTest.CanAddStringsWithoutDuplicating" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryManagerTest.CanAddTestCategories" executed="True" result="Success" success="True" time="0.025" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryManagerTest.CanClearEntries" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CategoryParseTests" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.CanParseCompoundCategory" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.CanParseExcludedCategories" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.CanParseMultipleAlternatives" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.CanParseMultipleCategoriesWithAnd" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.CanParseSimpleCategory" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.EmptyStringReturnsEmptyFilter" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.OrAndMinusCombined" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.PlusAndMinusCombined" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.PrecedenceTest" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.PrecedenceTestWithParentheses" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DomainManagerTests" executed="True" result="Success" success="True" time="0.011" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.DomainManagerTests.GetCommonAppBase_OneElement" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.DomainManagerTests.GetCommonAppBase_ThreeElements_DiferentDirectories" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.DomainManagerTests.GetCommonAppBase_TwoElements_DifferentDirectories" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.DomainManagerTests.GetCommonAppBase_TwoElements_SameDirectory" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.DomainManagerTests.GetPrivateBinPath" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Util.Tests.DomainManagerTests.UnloadUnloadedDomain" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EventDispatcherTests" executed="True" result="Success" success="True" time="0.023" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.ProjectLoaded" executed="True" result="Success" success="True" time="0.005" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.ProjectLoadFailed" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.ProjectLoading" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.ProjectUnloaded" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.ProjectUnloadFailed" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.ProjectUnloading" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.RunFailed" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.RunFinished" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.RunStarting" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.SuiteFinished" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.SuiteStarting" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestFinished" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestLoaded" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestLoadFailed" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestLoading" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestReloaded" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestReloadFailed" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestReloading" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestStarting" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestUnloaded" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestUnloadFailed" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestUnloading" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FileWatcherTests" executed="True" result="Success" success="True" time="0.901" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.FileWatcherTests.ChangingAttributesDoesNotTriggerWatcher" executed="True" result="Success" success="True" time="0.199" asserts="1" />
                          <test-case name="NUnit.Util.Tests.FileWatcherTests.ChangingFileTriggersWatcher" executed="True" result="Success" success="True" time="0.201" asserts="2" />
                          <test-case name="NUnit.Util.Tests.FileWatcherTests.CopyingFileDoesNotTriggerWatcher" executed="True" result="Success" success="True" time="0.202" asserts="1" />
                          <test-case name="NUnit.Util.Tests.FileWatcherTests.MultipleCloselySpacedChangesTriggerWatcherOnlyOnce" executed="True" result="Success" success="True" time="0.295" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MemorySettingsStorageTests" executed="True" result="Success" success="True" time="0.012" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.MemorySettingsStorageTests.MakeStorage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.MemorySettingsStorageTests.MakeSubStorages" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Util.Tests.MemorySettingsStorageTests.RemoveSettings" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Util.Tests.MemorySettingsStorageTests.SaveAndLoadSettings" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Util.Tests.MemorySettingsStorageTests.SubstorageSettings" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                          <test-case name="NUnit.Util.Tests.MemorySettingsStorageTests.TypeSafeSettings" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NUnitProjectLoad" executed="True" result="Success" success="True" time="0.042" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.NUnitProjectLoad.FromAssembly" executed="True" result="Success" success="True" time="0.008" asserts="5" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectLoad.LoadEmptyConfigs" executed="True" result="Success" success="True" time="0.012" asserts="3" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectLoad.LoadEmptyProject" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectLoad.LoadNormalProject" executed="True" result="Success" success="True" time="0.005" asserts="7" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectLoad.LoadProjectWithManualBinPath" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectLoad.SaveClearsAssemblyWrapper" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NUnitProjectSave" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.NUnitProjectSave.SaveEmptyConfigs" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectSave.SaveEmptyProject" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectSave.SaveNormalProject" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NUnitProjectTests" executed="True" result="Success" success="True" time="0.034" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.AddConfigMakesProjectDirty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.CanAddAssemblies" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.CanAddConfigs" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.CanSetActiveConfig" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.CanSetAppBase" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.ConfigurationFileFromAssemblies" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.ConfigurationFileFromAssembly" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.DefaultActiveConfig" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.DefaultApplicationBase" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.DefaultConfigurationFile" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.DefaultProjectName" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.IsProjectFile" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.LoadMakesProjectNotDirty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.NewProjectDefaultPath" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.NewProjectIsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.NewProjectIsNotDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.NewProjectNotLoadable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.RemoveActiveConfig" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.RemoveConfigMakesProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.RenameActiveConfig" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.RenameConfigMakesProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.SaveAndLoadConfigsWithAssemblies" executed="True" result="Success" success="True" time="0.002" asserts="8" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.SaveAndLoadEmptyConfigs" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.SaveAndLoadEmptyProject" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.SaveMakesProjectNotDirty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.SaveSetsProjectPath" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.SettingActiveConfigMakesProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NUnitRegistryTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.NUnitRegistryTests.CurrentUser" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitRegistryTests.CurrentUserTestMode" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitRegistryTests.TestClearRoutines" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PathUtilTests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.PathUtilTests.CheckDefaults" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PathUtilTests_Unix" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Unix.Canonicalize" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Unix.IsAssemblyFileType" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Unix.PathFromUri" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Unix.RelativePath" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Unix.SamePath" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Unix.SamePathOrUnder" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PathUtilTests_Windows" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Windows.Canonicalize" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Windows.IsAssemblyFileType" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Windows.PathFromUri" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Windows.RelativePath" executed="True" result="Success" success="True" time="0.000" asserts="12" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Windows.SamePath" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Windows.SamePathOrUnder" executed="True" result="Success" success="True" time="0.000" asserts="9" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ProcessRunnerTests" executed="True" result="Success" success="True" time="10.195" asserts="1">
                        <properties>
                          <property name="Timeout" value="30000" />
                        </properties>
                        <results>
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.CheckRunnerID" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.CountTestCases" executed="True" result="Success" success="True" time="1.236" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.CountTestCasesAcrossMultipleAssemblies" executed="True" result="Success" success="True" time="0.587" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.LoadAndReloadAssembly" executed="True" result="Success" success="True" time="1.178" asserts="2" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.LoadAssemblyWithFixture" executed="True" result="Success" success="True" time="0.524" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.LoadAssemblyWithoutNamespaces" executed="True" result="Success" success="True" time="0.563" asserts="4" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.LoadAssemblyWithSuite" executed="True" result="Success" success="True" time="0.487" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.LoadMultipleAssemblies" executed="True" result="Success" success="True" time="0.646" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.LoadMultipleAssembliesWithFixture" executed="True" result="Success" success="True" time="0.618" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.LoadMultipleAssembliesWithSuite" executed="True" result="Success" success="True" time="0.586" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.RunAssembly" executed="True" result="Success" success="True" time="0.648" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.RunAssemblyUsingBeginAndEndRun" executed="True" result="Success" success="True" time="0.592" asserts="2" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.RunMultipleAssemblies" executed="True" result="Success" success="True" time="0.687" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.BasicRunnerTests.RunMultipleAssembliesUsingBeginAndEndRun" executed="True" result="Success" success="True" time="0.685" asserts="2" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.TestProcessIsReused" executed="True" result="Success" success="True" time="1.102" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ProjectConfigTests" executed="True" result="Success" success="True" time="0.033" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AbsoluteBasePath" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AbsoluteConfigurationFile" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddingConfigMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddingInitialConfigRequiresReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddingSubsequentConfigDoesNotRequireReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddToActiveConfigMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddToActiveConfigRequiresReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddToInactiveConfigDoesNotRequireReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddToInactiveConfigMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.CanAddAssemblies" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.DefaultConfigurationFile" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.EmptyConfig" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.ManualPrivateBinPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.NoBasePathSet" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.NoPrivateBinPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RelativeBasePath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RelativeConfigurationFile" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RemoveActiveConfigMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RemoveActiveConfigRequiresReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RemoveInactiveConfigDoesNotRequireReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RemoveInactiveConfigMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RenameActiveConfigMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RenameActiveConfigRequiresReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RenameInactiveConfigDoesNotRequireReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RenameInctiveConfigMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigApplicationBaseMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigApplicationBaseRequiresReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigBinPathTypeMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigBinPathTypeRequiresReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigConfigurationFileMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigConfigurationFileRequiresReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigPrivateBinPathMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigPrivateBinPathRequiresReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigApplicationBaseDoesNotRequireReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigApplicationBaseMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigBinPathTypeDoesNotRequireReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigBinPathTypeMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigConfigurationFileDoesNotRequireReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigConfigurationFileMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigPrivateBinPathDoesNotRequireReload" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigPrivateBinPathMarksProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.ToArray" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RecentFileEntryTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.CanCreateFromFileNameAndVersion" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.CanCreateFromSimpleFileName" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.CanParseFileNamePlusVersionString" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.CanParseFileNameWithCommaPlusVersionString" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.CanParseSimpleFileName" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.CanParseSimpleFileNameWithComma" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.EntryCanDisplayItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RecentFilesTests" executed="True" result="Success" success="True" time="0.018" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.AddMaxItems" executed="True" result="Success" success="True" time="0.003" asserts="7" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.AddSingleItem" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.AddTooManyItems" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.CountAtMax" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.CountAtMin" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.CountDefault" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.CountOverMax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.CountUnderMin" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.EmptyList" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.IncreaseSize" executed="True" result="Success" success="True" time="0.000" asserts="12" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.IncreaseSizeAfterAdd" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReduceSize" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReduceSizeAfterAdd" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.RemoveFirstProject" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.RemoveLastProject" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.RemoveMultipleProjects" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.RemoveOneProject" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReorderLastProject" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReorderMultipleProjects" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReorderSameProject" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReorderSingleProject" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReorderWithListNotFull" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RegistrySettingsStorageTests" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.RegistrySettingsStorageTests.MakeSubStorages" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                          <test-case name="NUnit.Util.Tests.RegistrySettingsStorageTests.RemoveSettings" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                          <test-case name="NUnit.Util.Tests.RegistrySettingsStorageTests.SaveAndLoadSettings" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                          <test-case name="NUnit.Util.Tests.RegistrySettingsStorageTests.StorageHasCorrectKey" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RegistrySettingsStorageTests.SubstorageSettings" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                          <test-case name="NUnit.Util.Tests.RegistrySettingsStorageTests.TypeSafeSettings" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RemoteTestAgentTests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.RemoteTestAgentTests.AgentReturnsProcessId" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RemoteTestResultTest" executed="True" result="Success" success="True" time="0.353" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.RemoteTestResultTest.ResultStillValidAfterDomainUnload" executed="True" result="Success" success="True" time="0.353" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RuntimeFrameworkSelectorTests" executed="True" result="Success" success="True" time="0.019" asserts="0">
                        <results>
                          <test-suite type="Theory" name="RequestForSpecificFrameworkIsHonored" executed="True" result="Success" success="True" time="0.010" asserts="0">
                            <results>
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificFrameworkIsHonored(net-1.0)" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificFrameworkIsHonored(net-1.1)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificFrameworkIsHonored(net-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificFrameworkIsHonored(net-4.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificFrameworkIsHonored(mono-1.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificFrameworkIsHonored(mono-2.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificFrameworkIsHonored(v1.1)" executed="True" result="Inconclusive" success="False" time="0.002" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: not Any
  But was:  Any
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificFrameworkIsHonored(v2.0)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: not Any
  But was:  Any
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificFrameworkIsHonored(v4.0)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: not Any
  But was:  Any
]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="Theory" name="RequestForSpecificVersionIsHonored" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <results>
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificVersionIsHonored(net-1.0)" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: Any
  But was:  Net
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificVersionIsHonored(net-1.1)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: Any
  But was:  Net
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificVersionIsHonored(net-2.0)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: Any
  But was:  Net
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificVersionIsHonored(net-4.0)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: Any
  But was:  Net
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificVersionIsHonored(mono-1.0)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: Any
  But was:  Mono
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificVersionIsHonored(mono-2.0)" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                                <reason>
                                  <message><![CDATA[  Expected: Any
  But was:  Mono
]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificVersionIsHonored(v1.1)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificVersionIsHonored(v2.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Util.Tests.RuntimeFrameworkSelectorTests.RequestForSpecificVersionIsHonored(v4.0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ServerUtilityTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.ServerUtilityTests.CanGetTcpChannelOnSpecifiedPort" executed="True" result="Success" success="True" time="0.002" asserts="5" />
                          <test-case name="NUnit.Util.Tests.ServerUtilityTests.CanGetTcpChannelOnUnpecifiedPort" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SettingsGroupTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.SettingsGroupTests.BadSetting" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.SettingsGroupTests.DefaultSettings" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Util.Tests.SettingsGroupTests.SubGroupSettings" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                          <test-case name="NUnit.Util.Tests.SettingsGroupTests.TopLevelSettings" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.SettingsGroupTests.TypeSafeSettings" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SummaryResultFixture" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.SummaryResultFixture.SummaryMatchesResult" executed="True" result="Success" success="True" time="0.007" asserts="9" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestAgencyTests" executed="True" result="Success" success="True" time="2.196" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestAgencyTests.CanConnectToAgency" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Util.Tests.TestAgencyTests.CanLaunchAndConnectToAgent" executed="True" result="Success" success="True" time="2.191" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestDomainFixture" executed="True" result="Success" success="True" time="0.353" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestDomainFixture.AppDomainIsSetUpCorrectly" executed="True" result="Success" success="True" time="0.002" asserts="8" />
                          <test-case name="NUnit.Util.Tests.TestDomainFixture.AssemblyIsLoadedCorrectly" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.TestDomainFixture.CanRunMockAssemblyTests" executed="True" result="Success" success="True" time="0.059" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestDomainRunnerTests" executed="True" result="Success" success="True" time="5.626" asserts="1">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.CheckRunnerID" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.CountTestCases" executed="True" result="Success" success="True" time="0.310" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.CountTestCasesAcrossMultipleAssemblies" executed="True" result="Success" success="True" time="0.367" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.LoadAndReloadAssembly" executed="True" result="Success" success="True" time="0.663" asserts="2" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.LoadAssemblyWithFixture" executed="True" result="Success" success="True" time="0.291" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.LoadAssemblyWithoutNamespaces" executed="True" result="Success" success="True" time="0.364" asserts="4" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.LoadAssemblyWithSuite" executed="True" result="Success" success="True" time="0.592" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.LoadMultipleAssemblies" executed="True" result="Success" success="True" time="0.355" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.LoadMultipleAssembliesWithFixture" executed="True" result="Success" success="True" time="0.330" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.LoadMultipleAssembliesWithSuite" executed="True" result="Success" success="True" time="0.299" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.RunAssembly" executed="True" result="Success" success="True" time="0.456" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.RunAssemblyUsingBeginAndEndRun" executed="True" result="Success" success="True" time="0.352" asserts="2" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.RunMultipleAssemblies" executed="True" result="Success" success="True" time="0.541" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.BasicRunnerTests.RunMultipleAssembliesUsingBeginAndEndRun" executed="True" result="Success" success="True" time="0.657" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestDomainTests" executed="True" result="Success" success="True" time="3.037" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestDomainTests.BasePathOverrideIsHonored" executed="True" result="Success" success="True" time="0.941" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests.BinPathOverrideIsHonored" executed="True" result="Success" success="True" time="0.344" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests.ConfigFileOverrideIsHonored" executed="True" result="Success" success="True" time="0.254" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests.FileNotFound" executed="True" result="Success" success="True" time="0.580" asserts="0" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests.InvalidTestFixture" executed="True" result="Success" success="True" time="0.429" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests.SpecificTestFixture" executed="True" result="Success" success="True" time="0.295" asserts="4" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests.TurnOffShadowCopy" executed="True" result="Success" success="True" time="0.188" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestDomainTests_Multiple" executed="True" result="Success" success="True" time="0.432" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestDomainTests_Multiple.AssemblyNodes" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests_Multiple.BuildSuite" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests_Multiple.RootNode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests_Multiple.RunMultipleAssemblies" executed="True" result="Success" success="True" time="0.062" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests_Multiple.TestCaseCount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestDomainTests_MultipleFixture" executed="True" result="Success" success="True" time="0.305" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestDomainTests_MultipleFixture.LoadFixture" executed="True" result="Success" success="True" time="0.305" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestLoaderAssemblyTests" executed="True" result="Success" success="True" time="1.992" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.AssemblyWithNoTests" executed="True" result="Success" success="True" time="0.366" asserts="4" />
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.FileNotFound" executed="True" result="Success" success="True" time="0.003" asserts="5" />
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.LoadProject" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.LoadTest" executed="True" result="Success" success="True" time="0.355" asserts="6" />
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.RunTest" executed="True" result="Success" success="True" time="0.848" asserts="9" />
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.UnloadProject" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.UnloadTest" executed="True" result="Success" success="True" time="0.413" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestLoaderWatcherTests" executed="True" result="Success" success="True" time="2.039" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestLoaderWatcherTests.LoadShouldStartWatcher" executed="True" result="Success" success="True" time="0.290" asserts="3" />
                          <test-case name="NUnit.Util.Tests.TestLoaderWatcherTests.LoadShouldStartWatcherDependingOnSettings" executed="True" result="Success" success="True" time="0.367" asserts="2" />
                          <test-case name="NUnit.Util.Tests.TestLoaderWatcherTests.ReloadShouldStartWatcher" executed="True" result="Success" success="True" time="0.519" asserts="3" />
                          <test-case name="NUnit.Util.Tests.TestLoaderWatcherTests.ReloadShouldStartWatcherDependingOnSettings" executed="True" result="Success" success="True" time="0.581" asserts="2" />
                          <test-case name="NUnit.Util.Tests.TestLoaderWatcherTests.UnloadShouldStopWatcherAndFreeResources" executed="True" result="Success" success="True" time="0.279" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestRunnerFactoryTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestRunnerFactoryTests.DifferentRuntimeUsesProcessRunner" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestRunnerFactoryTests.DifferentVersionUsesProcessRunner" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestRunnerFactoryTests.SameFrameworkUsesTestDomain" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="VisualStudioConverterTests" executed="True" result="Success" success="True" time="3.087" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromCppProject" executed="True" result="Success" success="True" time="0.194" asserts="5" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromCSharpProject" executed="True" result="Success" success="True" time="0.133" asserts="5" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromJsharpProject" executed="True" result="Success" success="True" time="0.124" asserts="5" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromMakefileProject" executed="True" result="Success" success="True" time="0.127" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromProjectWithHebrewFileIncluded" executed="True" result="Success" success="True" time="0.127" asserts="5" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromSolutionWithDisabledProject" executed="True" result="Success" success="True" time="0.382" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromVBProject" executed="True" result="Success" success="True" time="0.123" asserts="5" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromVSSolution2003" executed="True" result="Success" success="True" time="0.623" asserts="5" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromVSSolution2005" executed="True" result="Success" success="True" time="0.623" asserts="5" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromWebApplication" executed="True" result="Success" success="True" time="0.253" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.WithUnmanagedCpp" executed="True" result="Success" success="True" time="0.368" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="VSProjectTests" executed="True" result="Success" success="True" time="1.524" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.VSProjectTests.FileNotFoundError" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.GenerateCorrectExtensionsFromVCProjectVS2005" executed="True" result="Success" success="True" time="0.125" asserts="4" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.InvalidProjectFormat" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.InvalidXmlFormat" executed="True" result="Success" success="True" time="0.005" asserts="0" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadCppProject" executed="True" result="Success" success="True" time="0.124" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadCppProjectVS2005" executed="True" result="Success" success="True" time="0.123" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadCppProjectWithMacros" executed="True" result="Success" success="True" time="0.128" asserts="4" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadCsharpProject" executed="True" result="Success" success="True" time="0.125" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadCsharpProjectVS2005" executed="True" result="Success" success="True" time="0.127" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadInvalidFileType" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadJsharpProject" executed="True" result="Success" success="True" time="0.127" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadJsharpProjectVS2005" executed="True" result="Success" success="True" time="0.127" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadProjectWithHebrewFileIncluded" executed="True" result="Success" success="True" time="0.123" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadProjectWithMissingOutputPath" executed="True" result="Success" success="True" time="0.121" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadVbProject" executed="True" result="Success" success="True" time="0.125" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadVbProjectVS2005" executed="True" result="Success" success="True" time="0.124" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.MissingAttributes" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.NoConfigurations" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.NotWebProject" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.ProjectExtensions" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.SolutionExtension" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="XmlResultWriterTest" executed="True" result="Success" success="True" time="0.051" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.DemonstrateIllegalSequenceAtEndOfSuccessMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <reason>
                              <message><![CDATA[The CDATA was: <![CDATA[ My <xml> ]]]]><![CDATA[>]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.DemonstrateIllegalSequenceInSuccessMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <reason>
                              <message><![CDATA[Deliberate failure to illustrate ]]]]><![CDATA[> in message ]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.FailingTestHasCorrectInformation" executed="True" result="Success" success="True" time="0.003" asserts="7" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.HasMultipleCategories" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.HasMultipleProperties" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.HasSingleCategory" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.HasSingleProperty" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.IgnoredTestHasCorrectInformation" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.InconclusiveTestHasCorrectInformation" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.PassingTestHasCorrectInformation" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.SuiteResultHasCategories" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.TestHasCultureInfo" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.TestHasEnvironmentInfo" executed="True" result="Success" success="True" time="0.000" asserts="9" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="D:\Dev\NUnit\nunit-2.6\builds\net\3.5\release\tests/nunit.mocks.tests.dll" executed="True" result="Success" success="True" time="0.049" asserts="0">
        <results>
          <test-suite type="Namespace" name="NUnit" executed="True" result="Success" success="True" time="0.049" asserts="0">
            <results>
              <test-suite type="Namespace" name="Mocks" executed="True" result="Success" success="True" time="0.049" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.048" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DynamicMockTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.CallMethod" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.CallMethodWithArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.CreateMockForMBRClass" executed="True" result="Success" success="True" time="0.003" asserts="13" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.CreateMockForNonMBRClassFails" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.DefaultReturnValues" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.ExpectedMethod" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.ExpectedMethodNotCalled" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.MethodWithReturnValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.MockHasDefaultName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.MockHasNonDefaultName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.OverrideMethodOnDynamicMock" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.RefParameter" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.WrongReturnType" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MockTests" executed="True" result="Success" success="True" time="0.030" asserts="0">
                        <results>
                          <test-case name="NUnit.Mocks.Tests.MockTests.CallMultipleMethodsInDifferentOrder" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.CallMultipleMethodsSomeWithoutExpectations" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ChangeExpectAndReturnToFixedReturn" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ChangeFixedReturnToExpectAndReturn" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ConstraintArgumentSucceeds" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ConstraintArgumentThatFails" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectAndReturn" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectAndReturnNull" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectAndReturnWithArgument" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectAndReturnWithWrongArgument" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectAndThrowException" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectNoCallFails" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectNoCallSucceeds" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.FailWithParametersSpecified" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.IgnoreArguments" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.MethodNotCalled" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.MockHasName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.MultipleCallsToSameMethod" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.MultipleExpectAndReturn" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.MultipleExpectations" executed="True" result="Success" success="True" time="0.000" asserts="12" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.NotEnoughCalls" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.OneExpectation" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.RequireArguments" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.SetReturnValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.SetReturnValueMultipleTimesOnMultipleMethods" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.SetReturnValueRepeatedCalls" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.SetReturnValueWithoutCalling" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.StrictDefaultsToFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.StrictMode" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.StrictMode_ExceptionsCaught" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.TooManyCalls" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.UnexpectedCallsIgnored" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.VerifyNewMock" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="D:\Dev\NUnit\nunit-2.6\builds\net\3.5\release\tests/nunit-console.tests.dll" executed="True" result="Success" success="True" time="10.639" asserts="0">
        <results>
          <test-suite type="Namespace" name="NUnit" executed="True" result="Success" success="True" time="10.639" asserts="0">
            <results>
              <test-suite type="Namespace" name="ConsoleRunner" executed="True" result="Success" success="True" time="10.639" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="10.639" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CommandLineTests" executed="True" result="Success" success="True" time="0.071" asserts="0">
                        <results>
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.AllowForwardSlashDefaultsCorrectly" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.AssemblyAloneIsValid" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.AssemblyName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="BooleanOptionAreRecognized" executed="True" result="Success" success="True" time="0.014" asserts="0">
                            <results>
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.BooleanOptionAreRecognized(&quot;labels&quot;,&quot;labels&quot;)" executed="True" result="Success" success="True" time="0.004" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.BooleanOptionAreRecognized(&quot;help&quot;,&quot;help&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.BooleanOptionAreRecognized(&quot;help&quot;,&quot;?&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.BooleanOptionAreRecognized(&quot;xmlConsole&quot;,&quot;xmlConsole&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.BooleanOptionAreRecognized(&quot;wait&quot;,&quot;wait&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.BooleanOptionAreRecognized(&quot;nologo&quot;,&quot;nologo&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.BooleanOptionAreRecognized(&quot;noshadow&quot;,&quot;noshadow&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.BooleanOptionAreRecognized(&quot;nothread&quot;,&quot;nothread&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="EnumOptionsAreRecognized" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.EnumOptionsAreRecognized(&quot;domain&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.EnumOptionsAreRecognized(&quot;trace&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.FileNameWithoutXmlParameterLooksLikeParameter" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.FixtureNamePlusAssemblyIsValid" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.HelpTextUsesCorrectDelimiterForPlatform" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.InvalidCommandLineParms" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.InvalidOption" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.NoFixtureNameProvided" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.NoParametersCount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="StringOptionsAreRecognized" executed="True" result="Success" success="True" time="0.013" asserts="0">
                            <results>
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;output&quot;,&quot;output&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;exclude&quot;,&quot;exclude&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;runlist&quot;,&quot;runlist&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;basepath&quot;,&quot;basepath&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;privatebinpath&quot;,&quot;privatebinpath&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;config&quot;,&quot;config&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;result&quot;,&quot;result&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;run&quot;,&quot;run&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;result&quot;,&quot;xml&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;fixture&quot;,&quot;fixture&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;output&quot;,&quot;out&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;err&quot;,&quot;err&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                              <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.StringOptionsAreRecognized(&quot;include&quot;,&quot;include&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.XmlParameter" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.XmlParameterWithFullPath" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.XmlParameterWithFullPathUsingEqualSign" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.XmlParameterWithoutFileNameIsInvalid" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CommandLineTests_MultipleAssemblies" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests_MultipleAssemblies.CheckParameters" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests_MultipleAssemblies.FixtureParameters" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests_MultipleAssemblies.FixtureValidate" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests_MultipleAssemblies.MultipleAssemblyValidate" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests_MultipleAssemblies.ParameterCount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ConsoleRunnerTest" executed="True" result="Success" success="True" time="10.540" asserts="0">
                        <results>
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.AssemblyNotFound" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.Bug1073539Test" executed="True" result="Success" success="True" time="0.555" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.Bug1311644Test" executed="True" result="Success" success="True" time="0.457" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanRunWithMultipleTestDomains" executed="True" result="Success" success="True" time="1.195" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanRunWithMultipleTestDomains_NoThread" executed="True" result="Success" success="True" time="1.119" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanRunWithoutTestDomain" executed="True" result="Success" success="True" time="0.044" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanRunWithoutTestDomain_NoThread" executed="True" result="Success" success="True" time="0.116" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanRunWithSingleTestDomain" executed="True" result="Success" success="True" time="0.577" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanRunWithSingleTestDomain_NoThread" executed="True" result="Success" success="True" time="0.631" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanSpecifyBasePathAndPrivateBinPath" executed="True" result="Success" success="True" time="1.057" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.DoesNotFailIfRunListHasEmptyLines" executed="True" result="Success" success="True" time="0.875" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.DoesNotFailWithEmptyRunList" executed="True" result="Success" success="True" time="0.449" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.FailsGracefullyIfRunListPointsToNonExistingDirectory" executed="True" result="Success" success="True" time="0.288" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.FailsGracefullyIfRunListPointsToNonExistingFile" executed="True" result="Success" success="True" time="0.288" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.FailureFixture" executed="True" result="Success" success="True" time="0.616" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.InvalidFixture" executed="True" result="Success" success="True" time="0.255" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.MultiFailureFixture" executed="True" result="Success" success="True" time="0.499" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.OneOfTwoAssembliesNotFound" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.SuccessFixture" executed="True" result="Success" success="True" time="0.523" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.XmlResult" executed="True" result="Success" success="True" time="0.451" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.XmlToConsole" executed="True" result="Success" success="True" time="0.506" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestNameParserTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="SingleName" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.SingleName(&quot;  Test.Namespace.Fixture.Method  &quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.SingleName(&quot;Test.Namespace.Fixture.Method&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.SingleName(&quot;  Test.Namespace.Fixture.Method  ,&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.SingleName(&quot;Test.Namespace.Fixture.Method(\&quot;)\&quot;)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.SingleName(&quot;Test.Namespace.Fixture.Method,&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.SingleName(&quot;Test.Namespace.Fixture.Method()&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.SingleName(&quot;Test.Namespace.Fixture.Method(\&quot;string,argument\&quot;)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.SingleName(&quot;Test.Namespace.Fixture.Method(1,2,3)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.SingleName(&quot;Test.Namespace.Fixture.Method&lt;int,int&gt;()&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="TwoNames" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.TwoNames(&quot;Test.Namespace.Fixture.Method1(1,2)&quot;,&quot;Test.Namespace.Fixture.Method2(3,4)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.TwoNames(&quot;Test.Namespace.Fixture.Method1&quot;,&quot;Test.Namespace.Fixture.Method2,&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.TwoNames(&quot;Test.Namespace.Fixture.Method1(\&quot;(\&quot;)&quot;,&quot;Test.Namespace.Fixture.Method2(\&quot;&lt;\&quot;)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.ConsoleRunner.Tests.TestNameParserTests.TwoNames(&quot;Test.Namespace.Fixture.Method1&quot;,&quot;Test.Namespace.Fixture.Method2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="D:\Dev\NUnit\nunit-2.6\builds\net\3.5\release\tests/nunit.uiexception.tests.dll" executed="True" result="Success" success="True" time="8.941" asserts="0">
        <results>
          <test-suite type="Namespace" name="NUnit" executed="True" result="Success" success="True" time="8.941" asserts="0">
            <results>
              <test-suite type="Namespace" name="UiException" executed="True" result="Success" success="True" time="8.940" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="8.940" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="CodeFormatters" executed="True" result="Success" success="True" time="0.806" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="TestCodeFormatterCollection" executed="True" result="Success" success="True" time="0.017" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Clear" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.ContainsFormatterFromExtension" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Indexer_Can_Throw_UnknownExtensionException" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.ItemIndexer_Can_Throw_NullExtensionException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Register_Can_Throw_NullExtensionException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Register_Can_Throw_NullFormatterException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Register_Check_Extension_Case" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Register_Check_Extension_Is_Not_Empty" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Register_Check_Extension_Not_Contain_Dot_Character" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Register_Check_Multiple_Extension_Definition" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Remove" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Remove_Is_Not_Case_Sensitive" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.StringIndexer_Can_Throw_NullExtensionException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Test_Default" executed="True" result="Success" success="True" time="0.002" asserts="10" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestCSharpCodeFormatter" executed="True" result="Success" success="True" time="0.049" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Format_Can_Throw_CSharpNullException" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Test_Conserve_Intermediary_Spaces" executed="True" result="Success" success="True" time="0.040" asserts="9" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Test_Default" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Test_Format" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Test_Format_2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Test_Format_3" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Test_PreProcess" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestFormattedCode" executed="True" result="Success" success="True" time="0.017" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.CheckData_Can_Throw_NullDataException" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.CheckData_IndexArray_And_TagArray_Count_Must_Match" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.CheckData_LineArray_Values_Must_Always_Grow_Up" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.CheckData_LineArray_Values_Must_Be_In_IndexArray_Count" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.Empty" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.Test_ComplexCollection" executed="True" result="Success" success="True" time="0.004" asserts="22" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.Test_Equals" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.Test_MaxLength" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.Test_SimpleCollection" executed="True" result="Success" success="True" time="0.001" asserts="17" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestGeneralCodeFormatter" executed="True" result="Success" success="True" time="0.648" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.All_Formatters_Have_Unique_Language_Value" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.All_Formatters_Should_Have_Overwrite_Behavior" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.All_Formatters_Should_PreProcess_Tab_Character" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.Any_Formatter_Should_Format_Any_Text" executed="True" result="Success" success="True" time="0.382" asserts="6" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.DefaultFormatter" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.DefaultFormatter_Can_Throw_FormatterNullException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.Format" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.Format_Can_Throw_CodeNullException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.Format_Can_Throw_LanguageNameNullException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.Format_Pick_Best_Formatter" executed="True" result="Success" success="True" time="0.246" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.FormatFromExtension_Can_Throw_CodeNullException" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.FormatFromExtension_Can_Throw_ExtensionNullException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.GetFormatterFromExtension_Can_Throw_ExtensionNullException" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.GetFormatterFromLanguage_Can_Throw_LanguageNullException" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.GetFormatterFroms" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.LanguageFromExtension" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.Test_Default" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestLexer" executed="True" result="Success" success="True" time="0.015" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Default" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Dot_Character" executed="True" result="Success" success="True" time="0.002" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_SetText_Throws_NullArgumentException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_ColonCharacter" executed="True" result="Success" success="True" time="0.001" asserts="20" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_CommentC" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_CommentCpp" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_DoubleQuote" executed="True" result="Success" success="True" time="0.001" asserts="19" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_Equals" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_New_Line" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_NumberSign" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_SingleQuote" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_WhiteSpaces" executed="True" result="Success" success="True" time="0.002" asserts="35" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_Words" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestPlainTextCodeFormatter" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestPlainTextCodeFormatter.Format_Can_Throw_CodeNullException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestPlainTextCodeFormatter.Format_HelloWorld" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestPlainTextCodeFormatter.Format_Lines" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestPlainTextCodeFormatter.Test_Language" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestPlainTextCodeFormatter.Test_PreProcess" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestToken" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestToken.Test_Equals" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestTokenClassifier" executed="True" result="Success" success="True" time="0.027" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.test_AcceptToken" executed="True" result="Success" success="True" time="0.003" asserts="60" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Classification_Cases" executed="True" result="Success" success="True" time="0.002" asserts="32" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Classify" executed="True" result="Success" success="True" time="0.003" asserts="60" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Classify_As_Keyword" executed="True" result="Success" success="True" time="0.003" asserts="81" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Classify_Can_Throw_ArgumentNullException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Classify_Throw_NullArgException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Escaping_sequence" executed="True" result="Success" success="True" time="0.005" asserts="61" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_NewState" executed="True" result="Success" success="True" time="0.004" asserts="40" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Reset" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestTokenDictionary" executed="True" result="Success" success="True" time="0.017" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.Add_can_throw_AlreadyDefinedException" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.Add_can_throw_EmptySequenceException" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.Add_can_throw_InvalidSortException" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.Add_can_throw_NullValueException" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.add_token" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.PopulateTokenStartingWith" executed="True" result="Success" success="True" time="0.002" asserts="14" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.PopulateTokenStartingWith_can_throw_NullOutputException" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.PopulateTokenStartingWith_can_throw_NullStarterException" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.test_default" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.TryMatch_can_throw_NullPredictionException" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.TryMatch_can_throw_NullTextException" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.TryMatch_no_prediction" executed="True" result="Success" success="True" time="0.001" asserts="146" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.TryMatch_prediction" executed="True" result="Success" success="True" time="0.001" asserts="19" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Controls" executed="True" result="Success" success="True" time="6.914" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="TestCodeBox" executed="True" result="Success" success="True" time="0.606" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.Can_Disable_ShowCurrentLine" executed="True" result="Success" success="True" time="0.569" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.Can_Set_Back_And_Fore_Colors" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.Changing_Font_Causes_Reformatting" executed="True" result="Success" success="True" time="0.007" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.Changing_Language_Causes_Reformatting" executed="True" result="Success" success="True" time="0.005" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.CurrentLine" executed="True" result="Success" success="True" time="0.007" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.DefaultState" executed="True" result="Success" success="True" time="0.002" asserts="11" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.Format_Text_With_Language" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.OnPaint" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestCodeRenderingContext" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeRenderingContext.Can_Change_Colors" executed="True" result="Success" success="True" time="0.005" asserts="43" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeRenderingContext.DefaultState" executed="True" result="Success" success="True" time="0.002" asserts="38" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestDefaultCodeRenderer" executed="True" result="Success" success="True" time="0.014" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultCodeRenderer.DrawToGraphics_Can_Raise_ArgumentNullException" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultCodeRenderer.GetDocumentSize" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultCodeRenderer.GetDocumentSize_Can_Raise_ArgumentNullException" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultCodeRenderer.LineIndexToYCoordinate" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultCodeRenderer.LineIndexToYCoordinate_Can_Raise_ArgumentNullException" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultCodeRenderer.ViewportLines" executed="True" result="Success" success="True" time="0.005" asserts="32" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestDefaultErrorListRenderer" executed="True" result="Success" success="True" time="0.089" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultErrorListRenderer.DefaultState" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultErrorListRenderer.DrawToGraphics_Can_Throw_ArgumentNullException" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultErrorListRenderer.GetDocumentSize" executed="True" result="Success" success="True" time="0.002" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultErrorListRenderer.IsDirty" executed="True" result="Success" success="True" time="0.062" asserts="7" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultErrorListRenderer.ItemAt" executed="True" result="Success" success="True" time="0.003" asserts="7" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultErrorListRenderer.MeasureItem" executed="True" result="Success" success="True" time="0.003" asserts="6" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestErrorBrowser" executed="True" result="Success" success="True" time="0.398" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorBrowser.Can_Raise_ErrorSourceChanged" executed="True" result="Success" success="True" time="0.171" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorBrowser.Cannot_Register_Null_Display" executed="True" result="Success" success="True" time="0.037" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorBrowser.DefaultState" executed="True" result="Success" success="True" time="0.019" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorBrowser.ErrorDisplay_Plugins_life_cycle_events" executed="True" result="Success" success="True" time="0.113" asserts="13" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorBrowser.LayoutPanel_Auto_Resizes_When_Parent_Sizes_Change" executed="True" result="Success" success="True" time="0.055" asserts="4" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestErrorList" executed="True" result="Success" success="True" time="0.048" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.AutoSelectFirstItem" executed="True" result="Success" success="True" time="0.011" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.CanReportInvalidItems" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.Click_Can_Select_Item" executed="True" result="Success" success="True" time="0.004" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.CurrentSelection" executed="True" result="Success" success="True" time="0.002" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.DefaultState" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.DrawItem" executed="True" result="Success" success="True" time="0.014" asserts="9" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.Invoking_DrawToGraphics" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.ListOrderPolicy" executed="True" result="Success" success="True" time="0.004" asserts="22" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.Populate_StackTraceSource" executed="True" result="Success" success="True" time="0.002" asserts="6" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestErrorPanelLayout" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorPanelLayout.Can_Layout_Child_Controls_When_Size_Changed" executed="True" result="Success" success="True" time="0.001" asserts="16" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorPanelLayout.DefaultState" executed="True" result="Success" success="True" time="0.001" asserts="13" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorPanelLayout.Setting_Content" executed="True" result="Success" success="True" time="0.001" asserts="21" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorPanelLayout.Setting_Toolbar" executed="True" result="Success" success="True" time="0.001" asserts="14" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestErrorToolbar" executed="True" result="Success" success="True" time="0.261" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.Cannot_Register_Null_Display" executed="True" result="Success" success="True" time="0.018" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.Cannot_Select_UnRegistered_Display" executed="True" result="Success" success="True" time="0.018" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.DefaultState" executed="True" result="Success" success="True" time="0.015" asserts="8" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.NewStripButton" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.PluginItem_Click_Raises_SelectedRenderedChanged" executed="True" result="Success" success="True" time="0.047" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.Registering_displays_adds_ToolStripItem" executed="True" result="Success" success="True" time="0.070" asserts="8" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.SelectedDisplay" executed="True" result="Success" success="True" time="0.024" asserts="9" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.Set_Or_Unset_Check_Flag_On_Selection" executed="True" result="Success" success="True" time="0.049" asserts="6" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestSourceCodeDisplay" executed="True" result="Success" success="True" time="0.175" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestSourceCodeDisplay.CanReportFileException" executed="True" result="Success" success="True" time="0.021" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSourceCodeDisplay.DefaultState" executed="True" result="Success" success="True" time="0.004" asserts="15" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSourceCodeDisplay.ListOrderPolicy" executed="True" result="Success" success="True" time="0.008" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSourceCodeDisplay.SelectedItemChanged" executed="True" result="Success" success="True" time="0.133" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSourceCodeDisplay.SplitOrientation" executed="True" result="Success" success="True" time="0.004" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSourceCodeDisplay.SplitterDistance" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestSplitterBox" executed="True" result="Success" success="True" time="0.018" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.CanChangeDefaultControl1" executed="True" result="Success" success="True" time="0.002" asserts="48" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.CanChangeDefaultControl2" executed="True" result="Success" success="True" time="0.001" asserts="48" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.ChangingSizeInvokeDoLayout" executed="True" result="Success" success="True" time="0.000" asserts="28" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.CollapseControl" executed="True" result="Success" success="True" time="0.004" asserts="82" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.DefaultState" executed="True" result="Success" success="True" time="0.001" asserts="51" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.MouseActions" executed="True" result="Success" success="True" time="0.004" asserts="6" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.OrientationAffectsLayout" executed="True" result="Success" success="True" time="0.000" asserts="25" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.PointToSplit" executed="True" result="Success" success="True" time="0.001" asserts="75" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.SplitterDistance" executed="True" result="Success" success="True" time="0.001" asserts="81" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestStackTraceDisplay" executed="True" result="Success" success="True" time="5.282" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestStackTraceDisplay.CopyToClipBoard" executed="True" result="Success" success="True" time="5.272" asserts="4">
                                <properties>
                                  <property name="APARTMENT_STATE" value="STA" />
                                </properties>
                              </test-case>
                              <test-case name="NUnit.UiException.Tests.Controls.TestStackTraceDisplay.DefaultState" executed="True" result="Success" success="True" time="0.003" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestStackTraceDisplay.FeedingDisplayWithGarbageDoesNotMakeItCrash" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestStackTraceDisplay.OnStackTraceChanged" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="StackTraceAnalyzers" executed="True" result="Success" success="True" time="0.041" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="TestFunctionParser" executed="True" result="Success" success="True" time="0.011" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestFunctionParser.Test_Ability_To_Parse_Mono_Stack_Trace" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestFunctionParser.Test_Ability_To_Parse_Regular_Function_Values" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestFunctionParser.Test_Fail_To_Parse_Odd_Function_Values" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestFunctionParser.TestIErrorParser.Test_IErrorParser_Can_Throw_ArgsNullException" executed="True" result="Success" success="True" time="0.002" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestFunctionParser.TestIErrorParser.Test_IErrorParser_Can_Throw_ParserNullException" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestIErrorParser" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestIErrorParser.Test_IErrorParser_Can_Throw_ArgsNullException" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestIErrorParser.Test_IErrorParser_Can_Throw_ParserNullException" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestLineNumberParser" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestLineNumberParser.Test_Ability_To_Parse_Regular_Line_Number_Values" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestLineNumberParser.Test_Ability_To_Reject_Odd_Line_Number_Values" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestLineNumberParser.TestIErrorParser.Test_IErrorParser_Can_Throw_ArgsNullException" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestLineNumberParser.TestIErrorParser.Test_IErrorParser_Can_Throw_ParserNullException" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestPathParser" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestPathParser.Test_Ability_To_Handle_Unix_Path_Like_Values" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestPathParser.Test_Ability_To_Handle_Windows_Path_Like_Values" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestPathParser.TestIErrorParser.Test_IErrorParser_Can_Throw_ArgsNullException" executed="True" result="Success" success="True" time="0.000" asserts="12" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestPathParser.TestIErrorParser.Test_IErrorParser_Can_Throw_ParserNullException" executed="True" result="Success" success="True" time="0.000" asserts="12" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestUnixPathParser" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestUnixPathParser.Test_Ability_To_Parse_Regular_Unix_Like_Path_Values" executed="True" result="Success" success="True" time="0.001" asserts="21" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestUnixPathParser.Test_Inability_To_Parse_Non_Unix_Like_Path_Values" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestUnixPathParser.TestIErrorParser.Test_IErrorParser_Can_Throw_ArgsNullException" executed="True" result="Success" success="True" time="0.000" asserts="11" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestUnixPathParser.TestIErrorParser.Test_IErrorParser_Can_Throw_ParserNullException" executed="True" result="Success" success="True" time="0.000" asserts="11" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TestWindowsPathParser" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestWindowsPathParser.Test_Ability_To_Parse_Regular_Windows_Path" executed="True" result="Success" success="True" time="0.001" asserts="21" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestWindowsPathParser.Test_Inability_To_Parse_Non_Windows_Like_Path_Values" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestWindowsPathParser.TestIErrorParser.Test_IErrorParser_Can_Throw_ArgsNullException" executed="True" result="Success" success="True" time="0.000" asserts="11" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestWindowsPathParser.TestIErrorParser.Test_IErrorParser_Can_Throw_ParserNullException" executed="True" result="Success" success="True" time="0.000" asserts="11" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestDefaultTextManager" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.UiException.Tests.TestDefaultTextManager.Test_CodeBlockCollection" executed="True" result="Success" success="True" time="0.002" asserts="15" />
                          <test-case name="NUnit.UiException.Tests.TestDefaultTextManager.Test_Default" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.UiException.Tests.TestDefaultTextManager.Test_MaxLength" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestErrorItem" executed="True" result="Success" success="True" time="0.131" asserts="0">
                        <results>
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Can_Set_Properties" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Ctor_2" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Ctor_Throws_NullPathException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Ctor_With_Line_0" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.ReadFile" executed="True" result="Success" success="True" time="0.122" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.ReadFile_Throws_FileNotExistException" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Test_Equals" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Test_FileExtension" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Test_MethodName" executed="True" result="Success" success="True" time="0.001" asserts="15" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestErrorItemCollection" executed="True" result="Success" success="True" time="0.993" asserts="0">
                        <results>
                          <test-case name="NUnit.UiException.Tests.TestErrorItemCollection.Test_Add_Throws_NullItemException" executed="True" result="Success" success="True" time="0.248" asserts="0" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItemCollection.Test_Clear" executed="True" result="Success" success="True" time="0.249" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItemCollection.Test_Contains" executed="True" result="Success" success="True" time="0.242" asserts="3" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItemCollection.Test_TraceItems" executed="True" result="Success" success="True" time="0.251" asserts="7" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestPaintLineLocation" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.UiException.Tests.TestPaintLineLocation.Test_Equals" executed="True" result="Success" success="True" time="0.002" asserts="8" />
                          <test-case name="NUnit.UiException.Tests.TestPaintLineLocation.Test_PaintLineLocation" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.UiException.Tests.TestPaintLineLocation.Test_SetText_Throws_NullTextException" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestStackTraceParser" executed="True" result="Success" success="True" time="0.011" asserts="0">
                        <results>
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Ability_To_Handle_Different_Path_System_Syntaxes" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Ability_To_Handle_Files_With_Unknown_Extension" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Analysis_Does_Not_Depend_Upon_File_Extension" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Default" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_English_Stack" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Missing_Line_Number" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Parse" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Parse_MultipleExtension" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Parse_Null" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Parse_With_Real_Life_Samples" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Trace_When_Missing_File" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="D:\Dev\NUnit\nunit-2.6\builds\net\3.5\release\tests/nunit.uikit.tests.dll" executed="True" result="Success" success="True" time="2.276" asserts="0">
        <results>
          <test-suite type="Namespace" name="NUnit" executed="True" result="Success" success="True" time="2.276" asserts="0">
            <results>
              <test-suite type="Namespace" name="UiKit" executed="True" result="Success" success="True" time="2.275" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="2.275" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AddConfigurationDialogTests" executed="True" result="Success" success="True" time="0.428" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.AddConfigurationDialogTests.CheckComboBox" executed="True" result="Success" success="True" time="0.288" asserts="5" />
                          <test-case name="NUnit.UiKit.Tests.AddConfigurationDialogTests.CheckForControls" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.UiKit.Tests.AddConfigurationDialogTests.CheckTextBox" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.UiKit.Tests.AddConfigurationDialogTests.TestComplexEntry" executed="True" result="Success" success="True" time="0.111" asserts="2" />
                          <test-case name="NUnit.UiKit.Tests.AddConfigurationDialogTests.TestSimpleEntry" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ErrorDisplayTests" executed="True" result="Success" success="True" time="0.114" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.ErrorDisplayTests.ControlsArePositionedCorrectly" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.UiKit.Tests.ErrorDisplayTests.ControlsExist" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LongRunningOperationDisplayTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.LongRunningOperationDisplayTests.CreateDisplay" executed="True" result="Success" success="True" time="0.015" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ProgressBarTests" executed="True" result="Success" success="True" time="0.042" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.ProgressBarTests.TestProgressDisplay" executed="True" result="Success" success="True" time="0.042" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="StatusBarTests" executed="True" result="Success" success="True" time="0.155" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.StatusBarTests.TestConstruction" executed="True" result="Success" success="True" time="0.042" asserts="5" />
                          <test-case name="NUnit.UiKit.Tests.StatusBarTests.TestFinalDisplay" executed="True" result="Success" success="True" time="0.042" asserts="5" />
                          <test-case name="NUnit.UiKit.Tests.StatusBarTests.TestInitialization" executed="True" result="Success" success="True" time="0.030" asserts="10" />
                          <test-case name="NUnit.UiKit.Tests.StatusBarTests.TestProgressDisplay" executed="True" result="Success" success="True" time="0.038" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestSuiteTreeNodeTests" executed="True" result="Success" success="True" time="0.102" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.CanConstructFromTestCase" executed="True" result="Success" success="True" time="0.011" asserts="2" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.CanConstructFromTestFixture" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.CanConstructFromTestSuite" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                          <test-suite type="ParameterizedTest" name="WhenResultIsCleared_IndexReflectsRunState" executed="True" result="Success" success="True" time="0.014" asserts="0">
                            <results>
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsCleared_IndexReflectsRunState(&quot;MockTest4&quot;,3)" executed="True" result="Success" success="True" time="0.005" asserts="5" />
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsCleared_IndexReflectsRunState(&quot;MockTest1&quot;,0)" executed="True" result="Success" success="True" time="0.004" asserts="5" />
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsCleared_IndexReflectsRunState(&quot;NotRunnableTest&quot;,1)" executed="True" result="Success" success="True" time="0.003" asserts="5" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsCleared_NestedResultsAreAlsoCleared" executed="True" result="Success" success="True" time="0.014" asserts="8" />
                          <test-suite type="ParameterizedTest" name="WhenResultIsNotSet_IndexReflectsRunState" executed="True" result="Success" success="True" time="0.015" asserts="0">
                            <results>
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsNotSet_IndexReflectsRunState(&quot;NotRunnableTest&quot;,1)" executed="True" result="Success" success="True" time="0.007" asserts="2" />
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsNotSet_IndexReflectsRunState(&quot;MockTest1&quot;,0)" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsNotSet_IndexReflectsRunState(&quot;MockTest4&quot;,3)" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="WhenResultIsSet_IndexReflectsResultState" executed="True" result="Success" success="True" time="0.034" asserts="0">
                            <results>
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsSet_IndexReflectsResultState(Success,2)" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsSet_IndexReflectsResultState(Cancelled,1)" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsSet_IndexReflectsResultState(Skipped,0)" executed="True" result="Success" success="True" time="0.005" asserts="3" />
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsSet_IndexReflectsResultState(NotRunnable,1)" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsSet_IndexReflectsResultState(Ignored,3)" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsSet_IndexReflectsResultState(Inconclusive,4)" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsSet_IndexReflectsResultState(Failure,1)" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                              <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.WhenResultIsSet_IndexReflectsResultState(Error,1)" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestSuiteTreeViewReloadTests" executed="True" result="Success" success="True" time="0.552" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterChangingOrder" executed="True" result="Success" success="True" time="0.140" asserts="178" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterDeletingBranch" executed="True" result="Success" success="True" time="0.039" asserts="137" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterDeletingOneTestCase" executed="True" result="Success" success="True" time="0.041" asserts="175" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterDeletingThreeTestCases" executed="True" result="Success" success="True" time="0.037" asserts="169" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterInsertingTestCase" executed="True" result="Success" success="True" time="0.038" asserts="181" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterInsertingTestFixture" executed="True" result="Success" success="True" time="0.039" asserts="182" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterMultipleChanges" executed="True" result="Success" success="True" time="0.039" asserts="179" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterTurningOffAutoNamespaces" executed="True" result="Success" success="True" time="0.064" asserts="159" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadWithoutChange" executed="True" result="Success" success="True" time="0.039" asserts="177" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.ReloadTreeWithWrongTest" executed="True" result="Success" success="True" time="0.036" asserts="0" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.VerifyCheckTreeWorks" executed="True" result="Success" success="True" time="0.034" asserts="177" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestSuiteTreeViewTests" executed="True" result="Success" success="True" time="0.194" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewTests.BuildFromResult" executed="True" result="Success" success="True" time="0.044" asserts="15" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewTests.BuildTreeView" executed="True" result="Success" success="True" time="0.037" asserts="5" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewTests.ClearTree" executed="True" result="Success" success="True" time="0.033" asserts="1" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewTests.ProcessChecks" executed="True" result="Success" success="True" time="0.041" asserts="7" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewTests.SetTestResult" executed="True" result="Success" success="True" time="0.037" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TestTreeTests" executed="True" result="Success" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.TestTreeTests.SameCategoryShouldNotBeSelectedMoreThanOnce" executed="True" result="Success" success="True" time="0.031" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="VisualStateTests" executed="True" result="Success" success="True" time="0.630" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.VisualStateTests.SaveAndRestoreVisualState" executed="True" result="Success" success="True" time="0.629" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="D:\Dev\NUnit\nunit-2.6\builds\net\3.5\release\tests/nunit-gui.tests.dll" executed="True" result="Success" success="True" time="0.092" asserts="0">
        <results>
          <test-suite type="Namespace" name="NUnit" executed="True" result="Success" success="True" time="0.092" asserts="0">
            <results>
              <test-suite type="Namespace" name="Gui" executed="True" result="Success" success="True" time="0.092" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.088" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CommandLineTests" executed="True" result="Success" success="True" time="0.045" asserts="0">
                        <results>
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.AssemblyName" executed="True" result="Success" success="True" time="0.037" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.Help" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.HelpTextUsesCorrectDelimiterForPlatform" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.InvalidArgs" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.InvalidCommandLineParms" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.NoNameValuePairs" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.NoParametersCount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.ShortHelp" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.ValidateSuccessful" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ExceptionDetailsFormTests" executed="True" result="Success" success="True" time="0.035" asserts="0">
                        <results>
                          <test-case name="NUnit.Gui.Tests.ExceptionDetailsFormTests.ControlsArePositionedCorrectly" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Gui.Tests.ExceptionDetailsFormTests.ControlsExist" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Gui.Tests.ExceptionDetailsFormTests.MessageDisplaysCorrectly" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RecentFileMenuHandlerTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.Gui.Tests.RecentFileMenuHandlerTests.DisableOnLoadWhenEmpty" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.RecentFileMenuHandlerTests.EnableOnLoadWhenNotEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.RecentFileMenuHandlerTests.LoadMenuItems" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="D:\Dev\NUnit\nunit-2.6\builds\net\3.5\release\tests/nunit-editor.tests.dll" executed="True" result="Success" success="True" time="2.029" asserts="0">
        <results>
          <test-suite type="Namespace" name="NUnit" executed="True" result="Success" success="True" time="2.029" asserts="0">
            <results>
              <test-suite type="Namespace" name="ProjectEditor" executed="True" result="Success" success="True" time="2.028" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="2.028" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Model" executed="True" result="Success" success="True" time="0.108" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="AssemblyListTests" executed="True" result="Success" success="True" time="0.014" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Model.AssemblyListTests.CanAddAssemblies" executed="True" result="Success" success="True" time="0.006" asserts="3" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.AssemblyListTests.CanInsertAssemblies" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.AssemblyListTests.CanInsertAssemblyAtEnd" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.AssemblyListTests.CanInsertAssemblyAtStart" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.AssemblyListTests.CanRemoveAssemblies" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.AssemblyListTests.EmptyList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="NUnitProjectSave" executed="True" result="Success" success="True" time="0.028" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Model.NUnitProjectSave.EmptyConfigs" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.NUnitProjectSave.EmptyProject" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.NUnitProjectSave.NormalProject" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.NUnitProjectSave.NormalProject_RoundTrip" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.NUnitProjectSave.ProjectWithComplexSettings" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.NUnitProjectSave.ProjectWithComplexSettings_RoundTrip" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.NUnitProjectSave.ProjectWithComplexSettings_RoundTripWithChanges" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ProjectCreationTests" executed="True" result="Success" success="True" time="0.027" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.AddConfigFiresChangedEvent" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.AddConfigMakesProjectDirty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.CanAddConfigs" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.CanSetAppBase" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.DefaultProjectName" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.IsNotDirty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.LoadMakesProjectNotDirty" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.NameIsUnique" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.NewProjectHasNoConfigs" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.ProjectNodeHasNoAttributes" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.ProjectNodeHasNoChildren" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.ProjectPathIsSameAsName" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.RootElementIsNUnitProject" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.SaveMakesProjectNotDirty" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectCreationTests.SaveSetsProjectPathAndName" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ProjectDocumentTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectDocumentTests.AddingAttributeFiresChangedEvent" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectDocumentTests.AddingAttributeMakesProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectDocumentTests.AddingElementFiresChangedEvent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectDocumentTests.AddingElementMakesProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ProjectModelChangeTests" executed="True" result="Success" success="True" time="0.014" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelChangeTests.AddingAssemblyFiresChangedEvent" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelChangeTests.CanAddAssemblies" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelChangeTests.CanSetActiveConfig" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelChangeTests.RemoveAssemblyFiresChangedEvent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelChangeTests.RemoveConfigFiresChangedEvent" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelChangeTests.RemoveConfigMakesProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelChangeTests.RemovingActiveConfigRemovesActiveConfigNameAttribute" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelChangeTests.RenameConfigFiresChangedEvent" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelChangeTests.RenameConfigMakesProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelChangeTests.RenamingActiveConfigChangesActiveConfigName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelChangeTests.SettingActiveConfigFiresChangedEvent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelChangeTests.SettingActiveConfigMakesProjectDirty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ProjectModelLoadtests" executed="True" result="Success" success="True" time="0.015" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelLoadtests.CanSaveAndReloadProject" executed="True" result="Success" success="True" time="0.003" asserts="8" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelLoadtests.LoadEmptyConfigs" executed="True" result="Success" success="True" time="0.002" asserts="10" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelLoadtests.LoadEmptyProject" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelLoadtests.LoadNormalProject" executed="True" result="Success" success="True" time="0.002" asserts="14" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelLoadtests.LoadProjectWithComplexSettings" executed="True" result="Success" success="True" time="0.003" asserts="16" />
                              <test-case name="NUnit.ProjectEditor.Tests.Model.ProjectModelLoadtests.LoadProjectWithManualBinPath" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Presenters" executed="True" result="Success" success="True" time="1.457" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="AddConfigurationPresenterTests" executed="True" result="Success" success="True" time="0.043" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.AddConfigurationPresenterTests.AddButton_AddExistingConfig_FailsWithErrorMessage" executed="True" result="Success" success="True" time="0.028" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.AddConfigurationPresenterTests.AddButton_AddNewConfig_IsAddedToList" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.AddConfigurationPresenterTests.ConfigList_LoadFromModel_SetsViewCorrectly" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.AddConfigurationPresenterTests.ConfigToCopy_WhenNotSpecified_ConfigIsEmpty" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.AddConfigurationPresenterTests.ConfigToCopy_WhenSpecified_ConfigIsCopied" executed="True" result="Success" success="True" time="0.005" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ConfigurationEditorTests" executed="True" result="Success" success="True" time="0.103" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.ActiveButton_OnLoad_IsDisabled" executed="True" result="Success" success="True" time="0.024" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.ActiveButton_OnLoad_IsSubscribed" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.ActiveButton_WhenClicked_MakesConfigActive" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.AddButton_OnLoad_IsEnabled" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.AddButton_OnLoad_IsSubscribed" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.AddButton_WhenClicked_AddsNewConfig" executed="True" result="Success" success="True" time="0.009" asserts="2" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.ConfigList_OnLoad_IsCorrectlyInitialized" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.ConfigList_OnLoad_SelectionChangedIsSubscribed" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.RemoveButton_OnLoad_IsEnabled" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.RemoveButton_OnLoad_IsSubscribed" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.RemoveButton_WhenClicked_RemovesConfig" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.RenameButton_OnLoad_IsEnabled" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.RenameButton_OnLoad_IsSubscribed" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.ConfigurationEditorTests.RenameButton_WhenClicked_PerformsRename" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="MainPresenterTests" executed="True" result="Success" success="True" time="0.945" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.ActiveViewChanged_WhenNoProjectIsOpen_TabViewsRemainHidden" executed="True" result="Success" success="True" time="0.072" asserts="4" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.ActiveViewChanged_WhenProjectIsOpen_TabViewsAreVisible" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.CloseProject_AfterCreatingNewProject_IsEnabled" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.CloseProject_AfterOpeningGoodProject_IsEnabled" executed="True" result="Success" success="True" time="0.156" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.CloseProject_OnLoad_IsDisabled" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.NewProject_OnLoad_IsEnabled" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.NewProject_WhenClicked_CreatesNewProject" executed="True" result="Success" success="True" time="0.011" asserts="2" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.OpenProject_OnLoad_IsEnabled" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.OpenProject_WhenClickedAndProjectDoesNotExist_DisplaysError" executed="True" result="Success" success="True" time="0.040" asserts="2" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.OpenProject_WhenClickedAndProjectIsValid_OpensProject" executed="True" result="Success" success="True" time="0.155" asserts="3" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.OpenProject_WhenClickedAndProjectXmlIsNotValid_OpensProject" executed="True" result="Success" success="True" time="0.135" asserts="4" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.SaveProject_AfterCreatingNewProject_IsEnabled" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.SaveProject_AfterOpeningGoodProject_IsEnabled" executed="True" result="Success" success="True" time="0.137" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.SaveProject_OnLoad_IsDisabled" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.SaveProjectAs_AfterCreatingNewProject_IsEnabled" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.SaveProjectAs_AfterOpeningGoodProject_IsEnabled" executed="True" result="Success" success="True" time="0.136" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.MainPresenterTests.SaveProjectAs_OnLoad_IsDisabled" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="PropertyPresenterTests" executed="True" result="Success" success="True" time="0.328" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.ActiveConfigName_LoadFromModel_SetsViewCorrectly" executed="True" result="Success" success="True" time="0.017" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.ApplicationBase_LoadFromModel_SetsViewCorrectly" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.AssemblyList_LoadFromModel_SetsListCorrectly" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.AssemblyList_WhenEmpty_AddIsEnabled" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.AssemblyList_WhenEmpty_AssemblyPathBrowseIsDisabled" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.AssemblyList_WhenEmpty_RemoveIsDisabled" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.AssemblyPath_LoadFromModel_SetsViewCorrectly" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.BinPathType_LoadFromModel_SetsViewCorrectly" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.ConfigList_LoadFromModel_SelectsFirstConfig" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.ConfigList_LoadFromModel_SetsListCorrectly" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.ConfigurationFile_LoadFromModel_SetsViewCorrectly" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.DomainUsage_LoadFromModel_SelectsDefaultEntry" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.DomainUsage_LoadFromModel_SetsOptionsCorrectly" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.DomainUsage_WhenChanged_UpdatesProject" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.PrivateBinPath_LoadFromModel_SetsViewCorrectly" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.ProcessModel_LoadFromModel_SelectsDefaultEntry" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.ProcessModel_LoadFromModel_SetsOptionsCorrectly" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.ProcessModel_WhenChanged_UpdatesDomainUsageOptions" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.ProcessModel_WhenChanged_UpdatesProject" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.ProjectBase_LoadFromModel_SetsViewCorrectly" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.ProjectBase_WhenChanged_UpdatesProject" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.ProjectPath_LoadFromModel_SetsViewCorrectly" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.Runtime_LoadFromModel_SelectsAnyRuntime" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.Runtime_LoadFromModel_SetsOptionsCorrectly" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.Runtime_WhenChanged_UpdatesProject" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.RuntimeVersion_LoadFromModel_SetsOptionsCorretly" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.PropertyPresenterTests.RuntimeVersion_WhenSelectionChanged_UpdatesProject" executed="True" result="Success" success="True" time="0.011" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="RenameConfigurationPresenterTests" executed="True" result="Success" success="True" time="0.019" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.RenameConfigurationPresenterTests.ConfigurationName_OnLoad_IsSetToOriginalName" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.RenameConfigurationPresenterTests.ConfigurationName_OnLoad_OriginalNameIsSelected" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.RenameConfigurationPresenterTests.ConfigurationName_WhenCleared_OkButtonIsDisabled" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.RenameConfigurationPresenterTests.ConfigurationName_WhenSetToNewName_OkButtonIsEnabled" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.RenameConfigurationPresenterTests.ConfigurationName_WhenSetToOriginalName_OkButtonIsDisabled" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.RenameConfigurationPresenterTests.Dialog_WhenClosedWithoutClickingOK_LeavesConfigsUnchanged" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.RenameConfigurationPresenterTests.OkButton_OnLoad_IsDisabled" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.RenameConfigurationPresenterTests.OkButton_WhenClicked_PerformsRename" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="XmlPresenterTests" executed="True" result="Success" success="True" time="0.008" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.XmlPresenterTests.BadXmlSetsException" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.XmlPresenterTests.XmlText_OnLoad_IsInitializedCorrectly" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="NUnit.ProjectEditor.Tests.Presenters.XmlPresenterTests.XmlText_WhenChanged_ModelIsUpdated" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Views" executed="True" result="Success" success="True" time="0.447" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="AddConfigurationDialogTests" executed="True" result="Success" success="True" time="0.032" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Views.AddConfigurationDialogTests.CheckForControls" executed="True" result="Success" success="True" time="0.005" asserts="0" />
                              <test-case name="NUnit.ProjectEditor.Tests.Views.AddConfigurationDialogTests.ComboBox_OnLoad_IsInitializedCorrectly" executed="True" result="Success" success="True" time="0.007" asserts="5" />
                              <test-case name="NUnit.ProjectEditor.Tests.Views.AddConfigurationDialogTests.TestComplexEntry" executed="True" result="Success" success="True" time="0.009" asserts="2" />
                              <test-case name="NUnit.ProjectEditor.Tests.Views.AddConfigurationDialogTests.TestSimpleEntry" executed="True" result="Success" success="True" time="0.008" asserts="2" />
                              <test-case name="NUnit.ProjectEditor.Tests.Views.AddConfigurationDialogTests.TextBox_OnLoad_IsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ConfigurationEditorViewTests" executed="True" result="Success" success="True" time="0.291" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Views.ConfigurationEditorViewTests.AllViewElementsAreWrapped" executed="True" result="Success" success="True" time="0.290" asserts="5" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="PropertyViewTests" executed="True" result="Success" success="True" time="0.122" asserts="0">
                            <results>
                              <test-case name="NUnit.ProjectEditor.Tests.Views.PropertyViewTests.AllViewElementsAreInitialized" executed="True" result="Success" success="True" time="0.121" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>