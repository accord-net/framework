<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Accord.Statistics</name>
    </assembly>
    <members>
        <member name="T:Accord.Statistics.Analysis.NamespaceDoc">
            <summary>
             Contains many statistical analysis, such as <see cref="T:Accord.Statistics.Analysis.PrincipalComponentAnalysis">PCA</see>,
             <see cref="T:Accord.Statistics.Analysis.LinearDiscriminantAnalysis">LDA</see>, <see cref="T:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis">
             KPCA</see>, <see cref="T:Accord.Statistics.Analysis.KernelDiscriminantAnalysis">KDA</see>, <see cref="T:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis">
             PLS</see>, <see cref="T:Accord.Statistics.Analysis.IndependentComponentAnalysis">ICA</see>, <see cref="T:Accord.Statistics.Analysis.LogisticRegressionAnalysis">
             Logistic Regression</see> and <see cref="T:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis">Stepwise Logistic Regression 
             Analyses</see>. Also contains performance assessment analysis such as <see cref="T:Accord.Statistics.Analysis.GeneralConfusionMatrix">
             contingency tables</see> and <see cref="T:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic">ROC curves</see>.
            </summary>
            
            <para>
              The namespace class diagram is shown below. </para>
              <img src="..\diagrams\classes\Accord.Statistics.Analysis.png"/>
              
            <seealso cref="N:Accord.Statistics"/>
            <seealso cref="N:Accord.Statistics.Analysis.ContrastFunctions"/>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IAnalysisComponent">
            <summary>
              Common interface for information components. Those are
              present in multivariate analysis, such as <see cref="T:Accord.Statistics.Analysis.PrincipalComponentAnalysis"/>
              and <see cref="T:Accord.Statistics.Analysis.LinearDiscriminantAnalysis"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IAnalysisComponent.Index">
            <summary>
              Gets the index for this component.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IAnalysisComponent.Proportion">
            <summary>
              Gets the proportion, or amount of information explained by this component.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IAnalysisComponent.CumulativeProportion">
            <summary>
              Gets the cumulative proportion of all discriminants until this component.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.AnalysisMethod">
            <summary>
              Determines the method to be used in a statistical analysis.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Analysis.AnalysisMethod.Center">
            <summary>
              By choosing Center, the method will be run on the mean-centered data.
            </summary>
            
            <remarks>
              In Principal Component Analysis this means the method will operate
              on the Covariance matrix of the given data.
            </remarks>
             
        </member>
        <member name="F:Accord.Statistics.Analysis.AnalysisMethod.Standardize">
            <summary>
               By choosing Standardize, the method will be run on the mean-centered and
               standardized data.
            </summary>
            
            <remarks>
               In Principal Component Analysis this means the method
               will operate on the Correlation matrix of the given data. One should always
               choose to standardize when dealing with different units of variables.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IAnalysis">
            <summary>
              Common interface for statistical analysis.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IAnalysis.Compute">
            <summary>
              Computes the analysis using given source data and parameters.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IDescriptiveMeasures">
            <summary>
              Common interface for descriptive measures, such as
              <see cref="T:Accord.Statistics.Analysis.DescriptiveMeasures"/> and 
              <see cref="T:Accord.Statistics.Analysis.CircularDescriptiveMeasures"/>.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Analysis.DescriptiveAnalysis"/>
            <seealso cref="T:Accord.Statistics.Analysis.CircularDescriptiveAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IDescriptiveMeasures.GetConfidenceInterval(System.Double)">
            <summary>
              Gets a confidence interval for the <see cref="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Mean"/>
              within the given confidence level percentage.
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IDescriptiveMeasures.GetDevianceInterval(System.Double)">
            <summary>
              Gets a deviance interval for the <see cref="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Mean"/>
              within the given confidence level percentage (i.e. uses
              the standard deviation rather than the standard error to
              compute the range interval for the variable).
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Index">
            <summary>
              Gets the variable's index.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Name">
            <summary>
              Gets the variable's name
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Sum">
            <summary>
              Gets the variable's total sum.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Mean">
            <summary>
              Gets the variable's mean.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.StandardDeviation">
            <summary>
              Gets the variable's standard deviation.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Median">
            <summary>
              Gets the variable's median.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.OuterFence">
            <summary>
              Gets the variable's outer fences range.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.InnerFence">
            <summary>
              Gets the variable's inner fence range.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Quartiles">
            <summary>
              Gets the variable's interquartile range.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Mode">
            <summary>
              Gets the variable's mode.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Variance">
            <summary>
              Gets the variable's variance.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Skewness">
            <summary>
              Gets the variable's skewness.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Kurtosis">
            <summary>
              Gets the variable's kurtosis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.StandardError">
            <summary>
              Gets the variable's standard error of the mean.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Max">
            <summary>
              Gets the variable's maximum value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Min">
            <summary>
              Gets the variable's minimum value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Length">
            <summary>
              Gets the variable's length.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Distinct">
            <summary>
              Gets the number of distinct values for the variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Count">
            <summary>
              Gets the number of samples for the variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Confidence">
            <summary>
              Gets the 95% confidence interval around the <see cref="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Mean"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Deviance">
            <summary>
              Gets the 95% deviance interval around the <see cref="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Mean"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDescriptiveMeasures.Samples">
            <summary>
              Gets the variable's observations.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IProjectionAnalysis">
            <summary>
              Common interface for projective statistical analysis.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IMultivariateAnalysis">
            <summary>
              Common interface for multivariate statistical analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IMultivariateAnalysis.Source">
            <summary>
              Source data used in the analysis.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IProjectionAnalysis.Transform(System.Double[0:,0:])">
            <summary>
              Projects new data into latent space.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IProjectionAnalysis.Transform(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects new data into latent space with
              given number of dimensions.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IMultivariateRegressionAnalysis">
            <summary>
              Common interface for multivariate regression analysis.
            </summary>
            
            <remarks>
            <para>
              Regression analysis attempt to express many numerical dependent
              variables as a combinations of other features or measurements.</para>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IMultivariateRegressionAnalysis.Output">
            <summary>
              Gets the dependent variables' values
              for each of the source input points.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IRegressionAnalysis">
            <summary>
              Common interface for regression analysis.
            </summary>
            
            <remarks>
            <para>
              Regression analysis attempt to express one numerical dependent variable
              as a combinations of other features or measurements.</para>
            <para>
              When the dependent variable is a category label, the class of analysis methods
              is known as <see cref="T:Accord.Statistics.Analysis.IDiscriminantAnalysis">discriminant analysis</see>.</para>  
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IRegressionAnalysis.Outputs">
            <summary>
              Gets the dependent variable value
              for each of the source input points.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IDiscriminantAnalysis">
            <summary>
              Common interface for discriminant analysis.
            </summary>
            
            <remarks>
            <para>
              Discriminant analysis attempt to express one categorical dependent variable
              as a combinations of other features or measurements.</para>
            <para>
              When the dependent variable is a numerical quantity, the class of analysis methods
              is known as <see cref="T:Accord.Statistics.Analysis.IRegressionAnalysis">regression analysis</see>.</para>  
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDiscriminantAnalysis.Classifications">
            <summary>
              Gets the classification labels (the dependent variable)
              for each of the source input points.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.ContrastFunctions.Exponential">
             <summary>
               Exponential contrast function.
             </summary>
             
             <remarks>
               According to Hyvärinen, the Exponential contrast function may be
               used when the independent components are highly super-Gaussian or
               when robustness is very important.
             </remarks>
            
             <seealso cref="T:Accord.Statistics.Analysis.IndependentComponentAnalysis"/>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.ContrastFunctions.IContrastFunction">
             <summary>
               Common interface for contrast functions.
             </summary>
             
             <remarks>
               Contrast functions are used as objective functions in
               neg-entropy calculations.
             </remarks>
             
             <seealso cref="T:Accord.Statistics.Analysis.IndependentComponentAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.IContrastFunction.Evaluate(System.Double[],System.Double[],System.Double[])">
            <summary>
              Contrast function.
            </summary>
            
            <param name="x">The vector of observations.</param>
            <param name="output">At method's return, this parameter
              should contain the evaluation of function over the vector
              of observations <paramref name="x"/>.</param>
            <param name="derivative">At method's return, this parameter
              should contain the evaluation of function derivative over 
              the vector of observations <paramref name="x"/>.</param>
              
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Exponential.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Analysis.ContrastFunctions.Exponential"/> class.
            </summary>
            <param name="alpha">The exponential alpha constant. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Exponential.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Analysis.ContrastFunctions.Exponential"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Exponential.Evaluate(System.Double[],System.Double[],System.Double[])">
            <summary>
              Contrast function.
            </summary>
            
            <param name="x">The vector of observations.</param>
            <param name="output">At method's return, this parameter
            should contain the evaluation of function over the vector
            of observations <paramref name="x"/>.</param>
            <param name="derivative">At method's return, this parameter
            should contain the evaluation of function derivative over
            the vector of observations <paramref name="x"/>.</param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ContrastFunctions.Exponential.Alpha">
            <summary>
              Gets the exponential alpha constant.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.ContrastFunctions.Kurtosis">
             <summary>
               Kurtosis contrast function.
             </summary>
             <remarks>
               According to using to Hyvärinen, the kurtosis contrast function is
               justified on statistical grounds only for estimating sub-Gaussian
               independent components when there are no outliers.
             </remarks>
            
             <seealso cref="T:Accord.Statistics.Analysis.IndependentComponentAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Kurtosis.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Analysis.ContrastFunctions.Kurtosis"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Kurtosis.Evaluate(System.Double[],System.Double[],System.Double[])">
            <summary>
              Contrast function.
            </summary>
            
            <param name="x">The vector of observations.</param>
            <param name="output">At method's return, this parameter
            should contain the evaluation of function over the vector
            of observations <paramref name="x"/>.</param>
            <param name="derivative">At method's return, this parameter
            should contain the evaluation of function derivative over
            the vector of observations <paramref name="x"/>.</param>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.ContrastFunctions.Logcosh">
            <summary>
              Log-cosh (Hyperbolic Tangent) contrast function.
            </summary>
            
            <remarks>
              According to Hyvärinen, the Logcosh contrast function
              is a good general-purpose contrast function.
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Analysis.IndependentComponentAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Logcosh.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Analysis.ContrastFunctions.Logcosh"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Logcosh.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Analysis.ContrastFunctions.Logcosh"/> class.
            </summary>
            
            <param name="alpha">The log-cosh alpha constant. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Logcosh.Evaluate(System.Double[],System.Double[],System.Double[])">
            <summary>
              Contrast function.
            </summary>
            
            <param name="x">The vector of observations.</param>
            <param name="output">At method's return, this parameter
            should contain the evaluation of function over the vector
            of observations <paramref name="x"/>.</param>
            <param name="derivative">At method's return, this parameter
            should contain the evaluation of function derivative over
            the vector of observations <paramref name="x"/>.</param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ContrastFunctions.Logcosh.Alpha">
            <summary>
              Gets the exponential log-cosh constant.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.CircularDescriptiveAnalysis">
             <summary>
               Descriptive statistics analysis for circular data.
             </summary>
             
             
             <seealso cref="T:Accord.Statistics.Tools"/>
             <seealso cref="T:Accord.Statistics.Analysis.DescriptiveAnalysis"/>
             <seealso cref="T:Accord.Statistics.Analysis.DescriptiveMeasures"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.#ctor(System.Double[],System.Double,System.String,System.Boolean)">
            <summary>
              Constructs the Circular Descriptive Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis.</param>
            <param name="length">The length of each circular variable (i.e. 24 for hours).</param>
            <param name="columnName">The names for the analyzed variable.</param>
            <param name="inPlace">
              Whether the analysis should conserve memory by doing 
              operations over the original <paramref name="data"/> array.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.#ctor(System.Double[],System.Double,System.Boolean)">
            <summary>
              Constructs the Circular Descriptive Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis.</param>
            <param name="length">The length of each circular variable (i.e. 24 for hours).</param>
            <param name="inPlace">
              Whether the analysis should conserve memory by doing 
              operations over the original <paramref name="data"/> array.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.#ctor(System.Double[0:,0:],System.Double[])">
            <summary>
              Constructs the Circular Descriptive Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis.</param>
            <param name="length">The length of each circular variable (i.e. 24 for hours).</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.#ctor(System.Double[0:,0:],System.Double[],System.String[])">
            <summary>
              Constructs the Circular Descriptive Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis.</param>
            <param name="length">The length of each circular variable (i.e. 24 for hours).</param>
            <param name="columnNames">Names for the analyzed variables.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.#ctor(System.Double[][],System.Double[])">
            <summary>
              Constructs the Circular Descriptive Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis.</param>
            <param name="length">The length of each circular variable (i.e. 24 for hours).</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.#ctor(System.Double[][],System.Double[],System.String[])">
            <summary>
              Constructs the Circular Descriptive Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis.</param>
            <param name="length">The length of each circular variable (i.e. 24 for hours).</param>
            <param name="columnNames">Names for the analyzed variables.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Compute">
            <summary>
              Computes the analysis using given source data and parameters.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.GetConfidenceInterval(System.Int32,System.Double)">
            <summary>
              Gets a confidence interval for the <see cref="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Means"/>
              within the given confidence level percentage.
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            <param name="index">The index of the data column whose confidence
              interval should be calculated.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.GetDevianceInterval(System.Int32,System.Double)">
            <summary>
              Gets a deviance interval for the <see cref="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Means"/>
              within the given confidence level percentage (i.e. uses
              the standard deviation rather than the standard error to
              compute the range interval for the variable).
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            <param name="index">The index of the data column whose confidence
              interval should be calculated.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.UseStrictRanges">
            <summary>
              Gets or sets whether all reported statistics should respect the circular 
              interval. For example, setting this property to <c>false</c> would allow
              the <see cref="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Confidence"/>, <see cref="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Deviance"/>, <see cref="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.InnerFences"/>
              and <see cref="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.OuterFences"/> properties report minimum and maximum values 
              outside the variable's allowed circular range. Default is <c>true</c>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Source">
            <summary>
              Gets the source matrix from which the analysis was run.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Array">
            <summary>
              Gets the source matrix from which the analysis was run.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Angles">
            <summary>
              Gets the source matrix from which the analysis was run.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.ColumnNames">
            <summary>
              Gets the column names from the variables in the data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Lengths">
            <summary>
              Gets a vector containing the length of
              the circular domain for each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Means">
            <summary>
              Gets a vector containing the Mean of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Modes">
            <summary>
              Gets a vector containing the Mode of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.StandardDeviations">
            <summary>
              Gets a vector containing the Standard Deviation of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.StandardErrors">
            <summary>
              Gets a vector containing the Standard Error of the Mean of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Confidence">
            <summary>
              Gets the 95% confidence intervals for the <see cref="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Means"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Deviance">
            <summary>
              Gets the 95% deviance intervals for the <see cref="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Means"/>.
            </summary>
            
            <remarks>
              A deviance interval uses the standard deviation rather 
              than the standard error to compute the range interval 
              for a variable.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Medians">
            <summary>
              Gets a vector containing the Median of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Variances">
            <summary>
              Gets a vector containing the Variance of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Distinct">
            <summary>
              Gets a vector containing the number of distinct elements for each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Ranges">
            <summary>
              Gets an array containing the Ranges of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Quartiles">
            <summary>
              Gets an array containing the interquartile range of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.InnerFences">
            <summary>
              Gets an array containing the inner fences of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.OuterFences">
            <summary>
              Gets an array containing the outer fences of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Sums">
            <summary>
              Gets an array containing the sum of each data column. If 
              the analysis has been computed in place, this will contain 
              the sum of the transformed angle values instead.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.CosineSum">
            <summary>
              Gets an array containing the sum of cosines for each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.SineSum">
            <summary>
              Gets an array containing the sum of sines for each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Concentration">
            <summary>
              Gets an array containing the circular concentration for each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Skewness">
            <summary>
              Gets an array containing the skewness for of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Kurtosis">
            <summary>
              Gets an array containing the kurtosis for of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Samples">
            <summary>
              Gets the number of samples (or observations) in the data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Variables">
            <summary>
              Gets the number of variables (or features) in the data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveAnalysis.Measures">
            <summary>
            Gets a collection of DescriptiveMeasures objects that can be bound to a DataGridView.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.CircularDescriptiveMeasures">
            <summary>
              Circular descriptive measures for a variable.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Analysis.CircularDescriptiveAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.CircularDescriptiveMeasures.GetConfidenceInterval(System.Double)">
            <summary>
              Gets a confidence interval for the <see cref="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Mean"/>
              within the given confidence level percentage.
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.CircularDescriptiveMeasures.GetDevianceInterval(System.Double)">
            <summary>
              Gets a deviance interval for the <see cref="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Mean"/>
              within the given confidence level percentage (i.e. uses
              the standard deviation rather than the standard error to
              compute the range interval for the variable).
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Analysis">
            <summary>
              Gets the circular analysis 
              that originated this measure.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Index">
            <summary>
              Gets the variable's index.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Name">
            <summary>
              Gets the variable's name
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Sum">
            <summary>
              Gets the variable's total sum.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Mean">
            <summary>
              Gets the variable's mean.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.StandardDeviation">
            <summary>
              Gets the variable's standard deviation.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Median">
            <summary>
              Gets the variable's median.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Mode">
            <summary>
              Gets the variable's mode.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.OuterFence">
            <summary>
              Gets the variable's outer fences range.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.InnerFence">
            <summary>
              Gets the variable's inner fence range.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Quartiles">
            <summary>
              Gets the variable's interquartile range.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Variance">
            <summary>
              Gets the variable's variance.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Max">
            <summary>
              Gets the variable's maximum value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Min">
            <summary>
              Gets the variable's minimum value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Length">
            <summary>
              Gets the variable's length.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Distinct">
            <summary>
              Gets the number of distinct values for the variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Count">
            <summary>
              Gets the number of samples for the variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.CosineSum">
            <summary>
              Gets the sum of cosines for the variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.SineSum">
            <summary>
              Gets the sum of sines for the variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Angles">
            <summary>
              Gets the transformed variable's observations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.StandardError">
            <summary>
              Gets the variable's standard error of the mean.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Confidence">
            <summary>
              Gets the 95% confidence interval around the <see cref="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Mean"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Deviance">
            <summary>
              Gets the 95% deviance interval around the <see cref="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Mean"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Samples">
            <summary>
              Gets the variable's observations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Skewness">
            <summary>
              Gets the variable <see cref="M:Accord.Statistics.Circular.Skewness(System.Double[])">skewness</see>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.CircularDescriptiveMeasures.Kurtosis">
            <summary>
              Gets the variable <see cref="M:Accord.Statistics.Circular.Skewness(System.Double[])">kurtosis</see>.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.CircularDescriptiveMeasureCollection">
            <summary>
              Collection of descriptive measures.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Analysis.CircularDescriptiveMeasures"/>
            <seealso cref="T:Accord.Statistics.Analysis.CircularDescriptiveAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.CircularDescriptiveMeasureCollection.GetKeyForItem(Accord.Statistics.Analysis.CircularDescriptiveMeasures)">
            <summary>
              Gets the key for item.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.DistributionAnalysis">
            <summary>
              Distribution fitness analysis.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DistributionAnalysis.#ctor(System.Double[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Analysis.DistributionAnalysis"/> class.
            </summary>
            
            <param name="observations">The observations to be fitted against candidate distributions.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DistributionAnalysis.Compute">
            <summary>
              Computes the analysis.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DistributionAnalysis.GetUnivariateDistributions">
            <summary>
              Gets all univariate distributions (types implementing
              <see cref="T:Accord.Statistics.Distributions.IUnivariateDistribution"/>) loaded in the 
              current domain.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DistributionAnalysis.GetMultivariateDistributions">
            <summary>
              Gets all multivariate distributions (types implementing
              <see cref="T:Accord.Statistics.Distributions.IMultivariateDistribution"/>) loaded in the 
              current domain.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DistributionAnalysis.GetName(System.Type)">
            <summary>
              Gets a distribution's name in a human-readable form.
            </summary>
            
            <param name="distribution">The distribution whose name must be obtained.</param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DistributionAnalysis.DistributionNames">
            <summary>
              Gets the tested distribution names.
            </summary>
            
            <value>
              The distribution names.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DistributionAnalysis.Distributions">
            <summary>
              Gets the estimated distributions.
            </summary>
            
            <value>
              The estimated distributions.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DistributionAnalysis.KolmogorovSmirnov">
            <summary>
              Gets the <see cref="T:Accord.Statistics.Testing.KolmogorovSmirnovTest">Kolmogorov-Smirnov tests</see>
              performed against each of the candidate distributions.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DistributionAnalysis.ChiSquare">
            <summary>
              Gets the <see cref="T:Accord.Statistics.Testing.ChiSquareTest">Chi-Square tests</see>
              performed against each of the candidate distributions.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DistributionAnalysis.AndersonDarling">
            <summary>
              Gets the <see cref="T:Accord.Statistics.Testing.AndersonDarlingTest">Anderson-Darling tests</see>
              performed against each of the candidate distributions.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DistributionAnalysis.KolmogorovSmirnovRank">
            <summary>
              Gets the rank of each distribution according to the Kolmogorov-Smirnov
              test statistic. A value of 0 means the distribution is the most likely.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DistributionAnalysis.ChiSquareRank">
            <summary>
              Gets the rank of each distribution according to the Chi-Square
              test statistic. A value of 0 means the distribution is the most likely.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DistributionAnalysis.AndersonDarlingRank">
            <summary>
              Gets the rank of each distribution according to the Anderson-Darling
              test statistic. A value of 0 means the distribution is the most likely.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DistributionAnalysis.GoodnessOfFit">
            <summary>
              Gets the goodness of fit for each candidate distribution.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.GoodnessOfFit">
            <summary>
              Goodness-of-fit result for a given distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.GoodnessOfFit.CompareTo(Accord.Statistics.Analysis.GoodnessOfFit)">
            <summary>
              Compares the current object with another object of the same type.
            </summary>
            
            <param name="other">An object to compare with this object.</param>
            
            <returns>
              A value that indicates the relative order of the objects being compared. The return value
              has the following meanings: Value Meaning Less than zero This object is less than the 
              <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />.
              Greater than zero This object is greater than <paramref name="other" />.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.GoodnessOfFit.CompareTo(System.Object)">
            <summary>
              Compares the current instance with another object of the same type and returns an
              integer that indicates whether the current instance precedes, follows, or occurs in
              the same position in the sort order as the other object.
            </summary>
            
            <param name="obj">An object to compare with this instance.</param>
            
            <returns>
              A value that indicates the relative order of the objects being compared. The return
              value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" />
              in the sort order. Zero This instance occurs in the same position in the sort order as
              <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> 
              in the sort order.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GoodnessOfFit.Analysis">
            <summary>
              Gets the analysis that has produced this measure.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GoodnessOfFit.Index">
            <summary>
              Gets the variable's index.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GoodnessOfFit.Name">
            <summary>
              Gets the distribution name
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GoodnessOfFit.Distribution">
            <summary>
              Gets the measured distribution.
            </summary>
            
            <value>
              The distribution associated with this good-of-fit measure.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GoodnessOfFit.KolmogorovSmirnov">
            <summary>
              Gets the value of the Kolmogorov-Smirnov statistic.
            </summary>
            
            <value>
              The Kolmogorov-Smirnov for the <see cref="P:Accord.Statistics.Analysis.GoodnessOfFit.Distribution"/>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GoodnessOfFit.KolmogorovSmirnovRank">
            <summary>
              Gets the rank of this distribution according to the
              <see cref="T:Accord.Statistics.Testing.KolmogorovSmirnovTest">Kolmogorov-Smirnov test</see>.
            </summary>
            
            <value>
              An integer value where 0 indicates most probable.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GoodnessOfFit.ChiSquare">
            <summary>
              Gets the value of the Chi-Square statistic.
            </summary>
            
            <value>
              The Chi-Square for the <see cref="P:Accord.Statistics.Analysis.GoodnessOfFit.Distribution"/>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GoodnessOfFit.ChiSquareRank">
            <summary>
              Gets the rank of this distribution according to the
              <see cref="T:Accord.Statistics.Testing.ChiSquareTest">Chi-Square test</see>.
            </summary>
            
            <value>
              An integer value where 0 indicates most probable.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GoodnessOfFit.AndersonDarling">
            <summary>
              Gets the value of the Anderson-Darling statistic.
            </summary>
            
            <value>
              The Anderson-Darling for the <see cref="P:Accord.Statistics.Analysis.GoodnessOfFit.Distribution"/>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GoodnessOfFit.AndersonDarlingRank">
            <summary>
              Gets the rank of this distribution according to the
              <see cref="T:Accord.Statistics.Testing.AndersonDarlingTest">Anderson-Darling test</see>.
            </summary>
            
            <value>
              An integer value where 0 indicates most probable.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.GoodnessOfFitCollection">
            <summary>
              Collection of goodness-of-fit measures.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Analysis.DistributionAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.GoodnessOfFitCollection.GetKeyForItem(Accord.Statistics.Analysis.GoodnessOfFit)">
            <summary>
              Gets the key for item.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis">
            <summary>
              Multinomial Logistic Regression Analysis
            </summary>
            
            <remarks>
            <para>
              In statistics, multinomial logistic regression is a classification method that 
              generalizes logistic regression to multiclass problems, i.e. with more than two 
              possible discrete outcomes.[1] That is, it is a model that is used to predict the
              probabilities of the different possible outcomes of a categorically distributed 
              dependent variable, given a set of independent variables (which may be real-valued,
              binary-valued, categorical-valued, etc.).</para>
              
            <para>
              Multinomial logistic regression is known by a variety of other names, including
              multiclass LR, multinomial regression,[2] softmax regression, multinomial logit,
              maximum entropy (MaxEnt) classifier, conditional maximum entropy model.</para>para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia contributors. "Multinomial logistic regression." Wikipedia, The Free Encyclopedia, 1st April, 2015.
                  Available at: https://en.wikipedia.org/wiki/Multinomial_logistic_regression </description></item>
             </list></para>  
            </remarks>
            
            // TODO: Write example
            
        </member>
        <member name="M:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.#ctor(System.Double[][],System.Int32[])">
            <summary>
              Constructs a Multinomial Logistic Regression Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output data for the analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.#ctor(System.Double[][],System.Double[][])">
            <summary>
              Constructs a Multinomial Logistic Regression Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output data for the analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.#ctor(System.Double[][],System.Int32[],System.String[],System.String[])">
            <summary>
              Constructs a Multiple Linear Regression Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output data for the analysis.</param>
            <param name="inputNames">The names of the input variables.</param>
            <param name="outputNames">The names of the output variables.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.#ctor(System.Double[][],System.Double[][],System.String[],System.String[])">
            <summary>
              Constructs a Multiple Linear Regression Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output data for the analysis.</param>
            <param name="inputNames">The names of the input variables.</param>
            <param name="outputNames">The names of the output variables.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Compute">
            <summary>
              Computes the Multiple Linear Regression Analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Array">
            <summary>
              Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Source">
            <summary>
              Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Output">
            <summary>
              Gets the dependent variable value
              for each of the source input points.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Outputs">
            <summary>
              Gets the dependent variable value
              for each of the source input points.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Results">
            <summary>
              Gets the resulting values obtained by the regression model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Iterations">
            <summary>
              Gets or sets the maximum number of iterations to be
              performed by the regression algorithm. Default is 50.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Tolerance">
            <summary>
              Gets or sets the difference between two iterations of the regression 
              algorithm when the algorithm should stop. The difference is calculated
              based on the largest absolute parameter change of the regression. Default
              is 1e-5.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.OutputCount">
            <summary>
             Gets the number of outputs in the regression problem.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.StandardErrors">
            <summary>
              Gets the Standard Error for each coefficient
              found during the logistic regression.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Regression">
            <summary>
              Gets the Regression model created
              and evaluated by this analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.CoefficientValues">
            <summary>
              Gets the value of each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.LogLikelihood">
            <summary>
              Gets the Log-Likelihood for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.ChiSquare">
            <summary>
              Gets the Chi-Square (Likelihood Ratio) Test for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Deviance">
            <summary>
              Gets the Deviance of the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.WaldTests">
            <summary>
              Gets the Wald Tests for each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Inputs">
            <summary>
              Gets the name of the input variables for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.OutputNames">
            <summary>
              Gets the name of the output variable for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Confidences">
            <summary>
              Gets the Confidence Intervals (C.I.)
              for each coefficient found in the regression.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis.Coefficients">
            <summary>
              Gets the collection of coefficients of the model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.MultinomialCoefficient">
            <summary>
            <para>
              Represents a Multinomial Logistic Regression coefficient found in the 
              <see cref="T:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis">multinomial logistic
              regression analysis</see> allowing it to be bound to controls like the 
              DataGridView. </para>
              
            <para>
              This class cannot be instantiated.</para>   
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.MultinomialCoefficient.#ctor(Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis,System.Int32,System.Int32)">
            <summary>
              Creates a regression coefficient representation.
            </summary>
            
            <param name="analysis">The analysis to which this coefficient belongs.</param>
            <param name="index">The coefficient's index.</param>
            <param name="category">The coefficient's category.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.MultinomialCoefficient.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialCoefficient.Index">
            <summary>
              Gets the Index of this coefficient on the original analysis coefficient collection.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialCoefficient.Analysis">
            <summary>
              Returns a reference to the parent analysis object.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialCoefficient.Class">
            <summary>
              Gets the name of the category that this coefficient belongs to.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialCoefficient.Name">
            <summary>
              Gets the name for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialCoefficient.Value">
            <summary>
              Gets the coefficient value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialCoefficient.StandardError">
            <summary>
              Gets the Standard Error for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialCoefficient.Confidence">
            <summary>
              Gets the confidence interval (C.I.) for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialCoefficient.ConfidenceUpper">
            <summary>
              Gets the upper limit for the confidence interval.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultinomialCoefficient.ConfidenceLower">
            <summary>
              Gets the lower limit for the confidence interval.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.MultinomialCoefficientCollection">
            <summary>
              Represents a Collection of Multinomial Logistic Regression Coefficients found in the 
              <see cref="T:Accord.Statistics.Analysis.MultinomialLogisticRegressionAnalysis"/>. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.WeightedConfusionMatrix">
            <summary>
              Weighted confusion matrix for multi-class decision problems.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description>
                  <a href="http://uwf.edu/zhu/evr6930/2.pdf">
                  R.  G.  Congalton. A Review  of Assessing  the Accuracy  of Classifications 
                  of Remotely  Sensed  Data. Available on: http://uwf.edu/zhu/evr6930/2.pdf </a></description></item>
                <item><description>
                  <a href="http://www.iiasa.ac.at/Admin/PUB/Documents/IR-98-081.pdf">
                  G. Banko. A Review of Assessing the Accuracy of Classiﬁcations of Remotely Sensed Data and
                  of Methods Including Remote Sensing Data in Forest Inventory. Interim report. Available on:
                  http://www.iiasa.ac.at/Admin/PUB/Documents/IR-98-081.pdf </a></description></item>
                </list></para>  
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.GeneralConfusionMatrix">
            <summary>
              General confusion matrix for multi-class decision problems.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description>
                  <a href="http://uwf.edu/zhu/evr6930/2.pdf">
                  R.  G.  Congalton. A Review  of Assessing  the Accuracy  of Classifications 
                  of Remotely  Sensed  Data. Available on: http://uwf.edu/zhu/evr6930/2.pdf </a></description></item>
                <item><description>
                  <a href="http://www.iiasa.ac.at/Admin/PUB/Documents/IR-98-081.pdf">
                  G. Banko. A Review of Assessing the Accuracy of Classiﬁcations of Remotely Sensed Data and
                  of Methods Including Remote Sensing Data in Forest Inventory. Interim report. Available on:
                  http://www.iiasa.ac.at/Admin/PUB/Documents/IR-98-081.pdf </a></description></item>
                </list></para>  
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.GeneralConfusionMatrix.#ctor(System.Double[0:,0:],System.Int32)">
            <summary>
              Creates a new Confusion Matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.GeneralConfusionMatrix.#ctor(System.Int32[0:,0:])">
            <summary>
              Creates a new Confusion Matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.GeneralConfusionMatrix.#ctor(System.Int32,System.Int32[],System.Int32[])">
            <summary>
              Creates a new Confusion Matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.GeneralConfusionMatrix.Combine(Accord.Statistics.Analysis.GeneralConfusionMatrix[])">
            <summary>
              Combines several confusion matrices into one single matrix.
            </summary>
            
            <param name="matrices">The matrices to combine.</param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Matrix">
            <summary>
              Gets the confusion matrix, in which each element e_ij 
              represents the number of elements from class i classified
              as belonging to class j.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Samples">
            <summary>
              Gets the number of samples.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Classes">
            <summary>
              Gets the number of classes.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.RowTotals">
            <summary>
              Gets the row totals.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.ColumnTotals">
            <summary>
              Gets the column totals.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.RowProportions">
            <summary>
              Gets the row marginals (proportions).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.ColumnProportions">
            <summary>
              Gets the column marginals (proportions).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Diagonal">
            <summary>
              Gets the diagonal of the confusion matrix.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Max">
            <summary>
              Gets the maximum number of correct 
              matches (the maximum over the diagonal)
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Min">
            <summary>
              Gets the minimum number of correct 
              matches (the minimum over the diagonal)
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.ProportionMatrix">
            <summary>
              Gets the confusion matrix in
              terms of cell percentages.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Kappa">
            <summary>
              Gets the Kappa coefficient of performance.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.StandardError">
            <summary>
              Gets the standard error of the <see cref="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Kappa"/>
              coefficient of performance. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Variance">
            <summary>
              Gets the variance of the <see cref="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Kappa"/>
              coefficient of performance. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.VarianceUnderNull">
            <summary>
              Gets the variance of the <see cref="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Kappa"/>
              under the null hypothesis that the underlying
              Kappa value is 0. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.StandardErrorUnderNull">
            <summary>
              Gets the standard error of the <see cref="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Kappa"/>
              under the null hypothesis that the underlying Kappa
              value is 0. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Tau">
            <summary>
              Gets the Tau coefficient of performance.
            </summary>
            
            <remarks>
            <para>
              Tau-b statistic, unlike tau-a, makes adjustments for ties and
              is suitable for square tables. Values of tau-b range from −1 
              (100% negative association, or perfect inversion) to +1 (100% 
              positive association, or perfect agreement). A value of zero 
              indicates the absence of association.</para>
             
            <para>
              References:
              <list type="bullet">
                <item><description>
                  http://en.wikipedia.org/wiki/Kendall_tau_rank_correlation_coefficient </description></item>
                <item><description>
                  LEVADA, Alexandre Luis Magalhães. Combinação de modelos de campos aleatórios markovianos
                  para classificação contextual de imagens multiespectrais [online]. São Carlos : Instituto 
                  de Física de São Carlos, Universidade de São Paulo, 2010. Tese de Doutorado em Física Aplicada. 
                  Disponível em: http://www.teses.usp.br/teses/disponiveis/76/76132/tde-11052010-165642/. </description></item>
                <item><description>
                  MA, Z.; REDMOND, R. L. Tau coefficients for accuracy assessment of
                  classification of remote sensing data. </description></item>
                </list></para>  
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Phi">
            <summary>
              Phi coefficient.
            </summary>
            
            <remarks>
            <para>
              The Pearson correlation coefficient (phi) ranges from −1 to +1, where
              a value of +1 indicates perfect agreement, a value of -1 indicates perfect
              disagreement and a value 0 indicates no agreement or relationship. </para>
            <para>
              References:
                http://en.wikipedia.org/wiki/Phi_coefficient,
                http://www.psychstat.missouristate.edu/introbook/sbk28m.htm </para>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.ChiSquare">
            <summary>
              Gets the Chi-Square statistic for the contingency table.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Tschuprow">
            <summary>
              Tschuprow's T association measure.
            </summary>
            
            <remarks>
            <para>
              Tschuprow's T is a measure of association between two nominal variables, giving 
              a value between 0 and 1 (inclusive). It is closely related to <see cref="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Cramer">
              Cramér's V</see>, coinciding with it for square contingency tables. </para>
            <para>
              References:
                http://en.wikipedia.org/wiki/Tschuprow's_T </para>  
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Pearson">
            <summary>
              Pearson's contingency coefficient C.
            </summary>
            
            <remarks>
            <para>
              Pearson's C measures the degree of association between the two variables. However,
              C suffers from the disadvantage that it does not reach a maximum of 1 or the minimum 
              of -1; the highest it can reach in a 2 x 2 table is .707; the maximum it can reach in
              a 4 × 4 table is 0.870. It can reach values closer to 1 in contingency tables with more
              categories. It should, therefore, not be used to compare associations among tables with
              different numbers of categories. For a improved version of C, see <see cref="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Sakoda"/>.</para>
              
            <para>
              References:
                http://en.wikipedia.org/wiki/Contingency_table </para>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Sakoda">
            <summary>
              Sakoda's contingency coefficient V.
            </summary>
            
            <remarks>
            <para>
              Sakoda's V is an adjusted version of <see cref="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Pearson">Pearson's C</see>
              so it reaches a maximum of 1 when there is complete association in a table
              of any number of rows and columns. </para>
            <para>
              References:
                http://en.wikipedia.org/wiki/Contingency_table </para>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.Cramer">
            <summary>
              Cramer's V association measure.
            </summary>
            
            <remarks>
            <para>
              Cramér's V varies from 0 (corresponding to no association between the variables)
              to 1 (complete association) and can reach 1 only when the two variables are equal
              to each other. In practice, a value of 0.1 already provides a good indication that
              there is substantive relationship between the two variables.</para>
              
            <para>
              References:
               http://en.wikipedia.org/wiki/Cram%C3%A9r%27s_V,
               http://www.acastat.com/Statbook/chisqassoc.htm </para>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.OverallAgreement">
            <summary>
              Overall agreement.
            </summary>
            
            <remarks>
              The overall agreement is the sum of the diagonal elements
              of the contingency table divided by the number of samples.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.GeometricAgreement">
            <summary>
              Geometric agreement.
            </summary>
            
            <remarks>
              The geometric agreement is the geometric mean of the
              diagonal elements of the confusion matrix.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.ChanceAgreement">
            <summary>
              Chance agreement.
            </summary>
            
            <remarks>
              The chance agreement tells how many samples
              were correctly classified by chance alone.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.GeneralConfusionMatrix.ExpectedValues">
            <summary>
              Expected values, or values that could
              have been generated just by chance.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.WeightedConfusionMatrix.#ctor(System.Double[0:,0:],System.Double[0:,0:],System.Int32)">
            <summary>
              Creates a new Confusion Matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.WeightedConfusionMatrix.#ctor(System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
              Creates a new Confusion Matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.WeightedConfusionMatrix.#ctor(System.Double[0:,0:],System.Int32[],System.Int32[])">
            <summary>
              Creates a new Confusion Matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.WeightedConfusionMatrix.LinearWeighting(System.Int32[0:,0:])">
            <summary>
              Creates a new Weighted Confusion Matrix with linear weighting.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.WeightedConfusionMatrix.QuadraticWeighting(System.Int32[0:,0:])">
            <summary>
              Creates a new Weighted Confusion Matrix with linear weighting.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.Weights">
            <summary>
              Gets the Weights matrix.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedRowProportions">
            <summary>
              Gets the row marginals (proportions).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedColumnProportions">
            <summary>
              Gets the column marginals (proportions).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedKappa">
            <summary>
              Gets the Kappa coefficient of performance.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedStandardError">
            <summary>
              Gets the standard error of the <see cref="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedKappa"/>
              coefficient of performance. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedVariance">
            <summary>
              Gets the variance of the <see cref="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedKappa"/>
              coefficient of performance. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedVarianceUnderNull">
            <summary>
              Gets the variance of the <see cref="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedKappa"/>
              under the null hypothesis that the underlying
              Kappa value is 0. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedStandardErrorUnderNull">
            <summary>
              Gets the standard error of the <see cref="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedKappa"/>
              under the null hypothesis that the underlying Kappa
              value is 0. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedOverallAgreement">
            <summary>
              Overall agreement.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.WeightedConfusionMatrix.WeightedChanceAgreement">
            <summary>
              Chance agreement.
            </summary>
            
            <remarks>
              The chance agreement tells how many samples
              were correctly classified by chance alone.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.ProportionalHazardsAnalysis">
            <summary>
              Cox's Proportional Hazards Survival Analysis.
            </summary>
            
            <remarks>
            <para>
              Proportional hazards models are a class of survival models in statistics. Survival models
              relate the time that passes before some event occurs to one or more covariates that may be
              associated with that quantity. In a proportional hazards model, the unique effect of a unit
              increase in a covariate is multiplicative with respect to the hazard rate.</para>
              
            <para>
              For example, taking a drug may halve one's hazard rate for a stroke occurring, or, changing
              the material from which a manufactured component is constructed may double its hazard rate 
              for failure. Other types of survival models such as accelerated failure time models do not 
              exhibit proportional hazards. These models could describe a situation such as a drug that 
              reduces a subject's immediate risk of having a stroke, but where there is no reduction in 
              the hazard rate after one year for subjects who do not have a stroke in the first year of 
              analysis.</para>
              
            <para>
              This class uses the <see cref="T:Accord.Statistics.Models.Regression.ProportionalHazards"/> to extract more detailed
              information about a given problem, such as confidence intervals, hypothesis tests
              and performance measures. </para>
              
            <para>
              This class can also be bound to standard controls such as the 
              <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx">DataGridView</a>
              by setting their DataSource property to the analysis' <see cref="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Coefficients"/> property.</para>
            </remarks>
            
            <example>
            <code>
            // Consider the following example data, adapted from John C. Pezzullo's
            // example for his great Cox's proportional hazards model example in
            // JavaScript (http://www.sph.emory.edu/~cdckms/CoxPH/prophaz2.html). 
            
            // In this data, we have three columns. The first column denotes the
            // input variables for the problem. The second column, the survival
            // times. And the last one is the output of the experiment (if the
            // subject has died [1] or has survived [0]).
            
            double[,] example =
            {
                // input  time censor
                {   50,    1,    0   },
                {   70,    2,    1   },
                {   45,    3,    0   },
                {   35,    5,    0   },
                {   62,    7,    1   },
                {   50,   11,    0   },
                {   45,    4,    0   },
                {   57,    6,    0   },
                {   32,    8,    0   },
                {   57,    9,    1   },
                {   60,   10,    1   },
            };
            
            // First we will extract the input, times and outputs
            double[,] inputs = example.GetColumns(0);
            double[] times = example.GetColumn(1);
            int[] output = example.GetColumn(2).ToInt32();
            
            // Now we can proceed and create the analysis
            var cox = new ProportionalHazardsAnalysis(inputs, times, output);
            
            cox.Compute(); // compute the analysis
            
            // Now we can show an analysis summary
            DataGridBox.Show(cox.Coefficients);
            </code>
            
            <para>
              The resulting table is shown below.</para>
              <img src="..\images\cox-hazards.png"/>
            
            <code>
            // We can also investigate all parameters individually. For
            // example the coefficients values will be available at
            
            double[] coef = cox.CoefficientValues;
            double[] stde = cox.StandardErrors;
            
            // We can also obtain the hazards ratios
            double[] ratios = cox.HazardRatios;
            
            // And other information such as the partial
            // likelihood, the deviance and also make 
            // hypothesis tests on the parameters
            
            double partial = cox.LogLikelihood;
            double deviance = cox.Deviance;
            
            // Chi-Square for whole model
            ChiSquareTest chi = cox.ChiSquare;
            
            // Wald tests for individual parameters
            WaldTest wald = cox.Coefficients[0].Wald;
            
                        
            // Finally, we can also use the model to predict
            // scores for new observations (without considering time)
            
            double y1 = cox.Regression.Compute(new double[] { 63 });
            double y2 = cox.Regression.Compute(new double[] { 32 });
            
            // Those scores can be interpreted by comparing then
            // to 1. If they are greater than one, the odds are
            // the patient will not survive. If the value is less
            // than one, the patient is likely to survive.
            
            // The first value, y1, gives approximately 86.138,
            // while the second value, y2, gives about 0.00072.
            
            
            // We can also consider instant estimates for a given time:
            double p1 = cox.Regression.Compute(new double[] { 63 }, 2);
            double p2 = cox.Regression.Compute(new double[] { 63 }, 10);
            
            // Here, p1 is the score after 2 time instants, with a 
            // value of 0.0656. The second value, p2, is the time
            // after 10 time instants, with a value of 6.2907.
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.#ctor(System.Double[0:,0:],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])">
            <summary>
              Constructs a new Cox's Proportional Hazards Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="times">The output data for the analysis.</param>
            <param name="censor">The right-censoring indicative values.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.#ctor(System.Double[][],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])">
            <summary>
              Constructs a new Cox's Proportional Hazards Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="times">The output data for the analysis.</param>
            <param name="censor">The right-censoring indicative values.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.#ctor(System.Double[][],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[],System.String[],System.String,System.String)">
            <summary>
              Constructs a new Cox's Proportional Hazards Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="times">The output, binary data for the analysis.</param>
            <param name="censor">The right-censoring indicative values.</param>
            <param name="inputNames">The names of the input variables.</param>
            <param name="timeName">The name of the time variable.</param>
            <param name="censorName">The name of the event indication variable.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.GetLikelihoodRatio(Accord.Statistics.Models.Regression.ProportionalHazards)">
            <summary>
              Gets the Log-Likelihood Ratio between this model and another model.
            </summary>
            
            <param name="model">Another proportional hazards model.</param>
            
            <returns>The Likelihood-Ratio between the two models.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Compute(Accord.Statistics.Models.Regression.ProportionalHazards)">
            <summary>
              Computes the Proportional Hazards Analysis for an already computed regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Compute">
            <summary>
              Computes the Proportional Hazards Analysis.
            </summary>
            
            <returns>
              True if the model converged, false otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Compute(System.Double,System.Int32)">
            <summary>
              Computes the Proportional Hazards Analysis.
            </summary>
            
            <param name="limit">
              The difference between two iterations of the regression algorithm
              when the algorithm should stop. If not specified, the value of
              1e-4 will be used. The difference is calculated based on the largest
              absolute parameter change of the regression.
            </param>
            
            <param name="maxIterations">
              The maximum number of iterations to be performed by the regression
              algorithm.
            </param>
            
            <returns>
              True if the model converged, false otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Accord#Statistics#Analysis#IAnalysis#Compute">
            <summary>
              Computes the analysis using given source data and parameters.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Iterations">
            <summary>
              Gets or sets the maximum number of iterations to be
              performed by the regression algorithm. Default is 50.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Tolerance">
            <summary>
              Gets or sets the difference between two iterations of the regression 
              algorithm when the algorithm should stop. The difference is calculated
              based on the largest absolute parameter change of the regression. Default
              is 1e-5.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Source">
            <summary>
              Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.TimeToEvent">
            <summary>
              Gets the time passed until the event
              occurred or until the observation was
              censored.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Events">
            <summary>
              Gets whether the event of
              interest happened or not.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Outputs">
            <summary>
              Gets the dependent variable value
              for each of the source input points.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Result">
            <summary>
              Gets the resulting probabilities obtained
              by the logistic regression model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Regression">
            <summary>
              Gets the Proportional Hazards model created
              and evaluated by this analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Coefficients">
            <summary>
              Gets the collection of coefficients of the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.LogLikelihood">
            <summary>
              Gets the Log-Likelihood for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.ChiSquare">
            <summary>
              Gets the Chi-Square (Likelihood Ratio) Test for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Deviance">
            <summary>
              Gets the Deviance of the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.InputNames">
            <summary>
              Gets the name of the input variables for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.TimeName">
            <summary>
              Gets the name of the output variable for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.EventName">
            <summary>
              Gets the name of event occurrence variable in the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.HazardRatios">
            <summary>
              Gets the Hazard Ratio for each coefficient
              found during the proportional hazards.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.StandardErrors">
            <summary>
              Gets the Standard Error for each coefficient
              found during the proportional hazards.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.WaldTests">
            <summary>
              Gets the Wald Tests for each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.LikelihoodRatioTests">
            <summary>
              Gets the Likelihood-Ratio Tests for each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.CoefficientValues">
            <summary>
              Gets the value of each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ProportionalHazardsAnalysis.Confidences">
            <summary>
              Gets the 95% Confidence Intervals (C.I.)
              for each coefficient found in the regression.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.HazardCoefficient">
            <summary>
              Represents a Proportional Hazards Coefficient found in the Cox's Hazards model,
              allowing it to be bound to controls like the DataGridView. This class cannot
              be instantiated outside the <see cref="T:Accord.Statistics.Analysis.LogisticRegressionAnalysis"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.HazardCoefficient.Name">
            <summary>
              Gets the name for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.HazardCoefficient.HazardRatio">
            <summary>
              Gets the Odds ratio for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.HazardCoefficient.StandardError">
            <summary>
              Gets the Standard Error for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.HazardCoefficient.Confidence">
            <summary>
              Gets the 95% confidence interval (C.I.) for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.HazardCoefficient.ConfidenceUpper">
            <summary>
              Gets the upper limit for the 95% confidence interval.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.HazardCoefficient.ConfidenceLower">
            <summary>
              Gets the lower limit for the 95% confidence interval.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.HazardCoefficient.Value">
            <summary>
              Gets the coefficient value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.HazardCoefficient.Wald">
            <summary>
              Gets the Wald's test performed for this coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.HazardCoefficient.LikelihoodRatio">
            <summary>
              Gets the Likelihood-Ratio test performed for this coefficient.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.HazardCoefficientCollection">
            <summary>
              Represents a collection of Hazard Coefficients found in the
              <see cref="T:Accord.Statistics.Analysis.ProportionalHazardsAnalysis"/>. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis">
            <summary>
              Multiple Linear Regression Analysis
            </summary>
            
            <remarks>
            <para>
              Linear regression is an approach to model the relationship between 
              a single scalar dependent variable <c>y</c> and one or more explanatory
              variables <c>x</c>. This class uses a <see cref="T:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression"/>
              to extract information about a given problem, such as confidence intervals,
              hypothesis tests and performance measures.</para>
              
            <para>
              This class can also be bound to standard controls such as the 
              <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx">DataGridView</a>
              by setting their DataSource property to the analysis' <see cref="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.Coefficients"/> property.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia contributors. "Linear regression." Wikipedia, The Free Encyclopedia, 4 Nov. 2012.
                  Available at: http://en.wikipedia.org/wiki/Linear_regression </description></item>
             </list></para>  
            </remarks>
            
            <example>
            <code>
            // Consider the following data. An experimenter would
            // like to infer a relationship between two variables
            // A and B and a corresponding outcome variable R.
            
            double[][] example = 
            {
                //                A    B      R
                new double[] {  6.41, 10.11, 26.1 },
                new double[] {  6.61, 22.61, 33.8 },
                new double[] {  8.45, 11.11, 52.7 },
                new double[] {  1.22, 18.11, 16.2 },
                new double[] {  7.42, 12.81, 87.3 },
                new double[] {  4.42, 10.21, 12.5 },
                new double[] {  8.61, 11.94, 77.5 },
                new double[] {  1.73, 13.13, 12.1 },
                new double[] {  7.47, 17.11, 86.5 },
                new double[] {  6.11, 15.13, 62.8 },
                new double[] {  1.42, 16.11, 17.5 },
            };
            
            // For this, we first extract the input and output
            // pairs. The first two columns have values for the
            // input variables, and the last for the output:
            
            double[][] inputs = example.GetColumns(0, 1);
            double[] output = example.GetColumn(2);
            
            // Next, we can create a new multiple linear regression for the variables
            var regression = new MultipleLinearRegressionAnalysis(inputs, output, intercept: true);
            
            regression.Compute(); // compute the analysis
            
            // Now we can show a summary of analysis
            DataGridBox.Show(regression.Coefficients);
            </code>
            
              <img src="..\images\linear-regression.png"/>
            
            <code>
            // We can also show a summary ANOVA
            DataGridBox.Show(regression.Table);
            </code>
            
              <img src="..\images\linear-anova.png"/>
              
            <code>
            // And also extract other useful information, such
            // as the linear coefficients' values and std errors:
            double[] coef = regression.CoefficientValues;
            double[] stde = regression.StandardErrors;
            
            // Coefficients of performance, such as r²
            double rsquared = regression.RSquared;
            
            // Hypothesis tests for the whole model
            ZTest ztest = regression.ZTest;
            FTest ftest = regression.FTest;
            
            // and for individual coefficients
            TTest ttest0 = regression.Coefficients[0].TTest;
            TTest ttest1 = regression.Coefficients[1].TTest;
            
            // and also extract confidence intervals
            DoubleRange ci = regression.Coefficients[0].Confidence;
            </code>
            </example>
            
        </member>
        <member name="T:Accord.Statistics.Testing.IAnova">
            <summary>
              Common interface for analyses of variance.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Testing.OneWayAnova"/>
            <seealso cref="T:Accord.Statistics.Testing.TwoWayAnova"/>
            
        </member>
        <member name="P:Accord.Statistics.Testing.IAnova.Table">
            <summary>
              Gets the ANOVA results in the form of a table.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.#ctor(System.Double[][],System.Double[],System.Boolean)">
            <summary>
              Constructs a Multiple Linear Regression Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output data for the analysis.</param>
            <param name="intercept">True to use an intercept term, false otherwise. Default is false.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.#ctor(System.Double[][],System.Double[],System.String[],System.String,System.Boolean)">
            <summary>
              Constructs a Multiple Linear Regression Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output data for the analysis.</param>
            <param name="intercept">True to use an intercept term, false otherwise. Default is false.</param>
            <param name="inputNames">The names of the input variables.</param>
            <param name="outputName">The name of the output variable.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.Compute">
            <summary>
              Computes the Multiple Linear Regression Analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.Source">
            <summary>
              Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.Array">
            <summary>
              Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.Outputs">
            <summary>
              Gets the dependent variable value
              for each of the source input points.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.Results">
            <summary>
              Gets the resulting values obtained
              by the linear regression model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.StandardError">
            <summary>
              Gets the standard deviation of the errors. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.RSquared">
            <summary>
              Gets the coefficient of determination, as known as R²
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.RSquareAdjusted">
            <summary>
              Gets the adjusted coefficient of determination, as known as R² adjusted
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.FTest">
            <summary>
              Gets a F-Test between the expected outputs and results.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.ZTest">
            <summary>
              Gets a Z-Test between the expected outputs and the results.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.ChiSquareTest">
            <summary>
              Gets a Chi-Square Test between the expected outputs and the results.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.StandardErrors">
            <summary>
              Gets the Standard Error for each coefficient
              found during the logistic regression.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.Regression">
            <summary>
              Gets the Regression model created
              and evaluated by this analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.CoefficientValues">
            <summary>
              Gets the value of each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.Inputs">
            <summary>
              Gets the name of the input variables for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.Output">
            <summary>
              Gets the name of the output variable for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.Confidences">
            <summary>
              Gets the Confidence Intervals (C.I.)
              for each coefficient found in the regression.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.Table">
            <summary>
              Gets the ANOVA table for the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis.Coefficients">
            <summary>
              Gets the collection of coefficients of the model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.LinearRegressionCoefficient">
            <summary>
            <para>
              Represents a Linear Regression coefficient found in the Multiple
              Linear Regression Analysis allowing it to be bound to controls like
              the DataGridView. </para>
            <para>
              This class cannot be instantiated.</para>   
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearRegressionCoefficient.#ctor(Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis,System.Int32)">
            <summary>
              Creates a regression coefficient representation.
            </summary>
            
            <param name="analysis">The analysis to which this coefficient belongs.</param>
            <param name="index">The coefficient index.</param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearRegressionCoefficient.Index">
            <summary>
              Gets the Index of this coefficient on the original analysis coefficient collection.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearRegressionCoefficient.Analysis">
            <summary>
              Returns a reference to the parent analysis object.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearRegressionCoefficient.Name">
            <summary>
              Gets the name for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearRegressionCoefficient.IsIntercept">
            <summary>
              Gets a value indicating whether this coefficient is an intercept term.
            </summary>
            
            <value>
              <c>true</c> if this coefficient is the intercept; otherwise, <c>false</c>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearRegressionCoefficient.Value">
            <summary>
              Gets the coefficient value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearRegressionCoefficient.StandardError">
            <summary>
              Gets the Standard Error for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearRegressionCoefficient.TTest">
            <summary>
              Gets the T-test performed for this coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearRegressionCoefficient.FTest">
            <summary>
              Gets the F-test performed for this coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearRegressionCoefficient.Confidence">
            <summary>
              Gets the confidence interval (C.I.) for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearRegressionCoefficient.ConfidenceUpper">
            <summary>
              Gets the upper limit for the confidence interval.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearRegressionCoefficient.ConfidenceLower">
            <summary>
              Gets the lower limit for the confidence interval.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.LinearRegressionCoefficientCollection">
            <summary>
              Represents a Collection of Linear Regression Coefficients found in the 
              <see cref="T:Accord.Statistics.Analysis.MultipleLinearRegressionAnalysis"/>. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearRegressionCoefficientCollection.ConfidencePercent">
            <summary>
              Gets or sets the size of the confidence
              intervals reported for the coefficients.
              Default is 0.95.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.ConfusionMatrix">
             <summary>
               Binary decision confusion matrix.
             </summary>
             
             <example>
               <code>
               // The correct and expected output values (as confirmed by a Gold
               //  standard rule, actual experiment or true verification)
               int[] expected = { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0 };
               
               // The values as predicted by the decision system or
               //  the test whose performance is being measured.
               int[] predicted = { 0, 0, 0, 1, 1, 0, 0, 0, 0, 1 };
               
               
               // In this test, 1 means positive, 0 means negative
               int positiveValue = 1;
               int negativeValue = 0;
               
               // Create a new confusion matrix using the given parameters
               ConfusionMatrix matrix = new ConfusionMatrix(predicted, expected,
                   positiveValue, negativeValue);
            
               // At this point,
               //   True Positives should be equal to 1;
               //   True Negatives should be equal to 6;
               //   False Negatives should be equal to 1;
               //   False Positives should be equal to 2.
               </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a new Confusion Matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.#ctor(System.Int32[0:,0:])">
            <summary>
              Constructs a new Confusion Matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.#ctor(System.Boolean[],System.Boolean[])">
            <summary>
              Constructs a new Confusion Matrix.
            </summary>
            
            <param name="predicted">The values predicted by the model.</param>
            <param name="expected">The actual, truth values from the data.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.#ctor(System.Int32[],System.Int32[],System.Int32)">
            <summary>
              Constructs a new Confusion Matrix.
            </summary>
            
            <param name="predicted">The values predicted by the model.</param>
            <param name="expected">The actual, truth values from the data.</param>
            <param name="positiveValue">The integer label which identifies a value as positive.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.#ctor(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            <summary>
              Constructs a new Confusion Matrix.
            </summary>
            
            <param name="predicted">The values predicted by the model.</param>
            <param name="expected">The actual, truth values from the data.</param>
            <param name="positiveValue">The integer label which identifies a value as positive.</param>
            <param name="negativeValue">The integer label which identifies a value as negative.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> representing this confusion matrix.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> representing this confusion matrix.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.ToGeneralMatrix">
            <summary>
              Converts this matrix into a <see cref="T:Accord.Statistics.Analysis.GeneralConfusionMatrix"/>.
            </summary>
            
            <returns>
              A <see cref="T:Accord.Statistics.Analysis.GeneralConfusionMatrix"/> with the same contents as this matrix.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.Combine(Accord.Statistics.Analysis.ConfusionMatrix[])">
            <summary>
              Combines several confusion matrices into one single matrix.
            </summary>
            
            <param name="matrices">The matrices to combine.</param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Matrix">
            <summary>
              Gets the confusion matrix in count matrix form.
            </summary>
            
            <remarks>
              The table is listed as true positives, false negatives
              on its first row, false positives and true negatives in
              its second row.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.RowTotals">
            <summary>
              Gets the marginal sums for table rows.
            </summary>
            
            <value>
              Returns a vector with the sum of true positives and 
              false negatives on its first position, and the sum
              of false positives and true negatives on the second.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.ColumnTotals">
            <summary>
              Gets the marginal sums for table columns.
            </summary>
            
            <value>
              Returns a vector with the sum of true positives and
              false positives on its first position, and the sum
              of false negatives and true negatives on the second.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Samples">
            <summary>
              Gets the number of observations for this matrix
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.ActualPositives">
            <summary>
              Gets the number of actual positives.
            </summary>
            
            <remarks>
              The number of positives cases can be computed by
              taking the sum of true positives and false negatives.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.ActualNegatives">
            <summary>
              Gets the number of actual negatives
            </summary>
            
            <remarks>
              The number of negatives cases can be computed by
              taking the sum of true negatives and false positives.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.PredictedPositives">
            <summary>
              Gets the number of predicted positives.
            </summary>
            
            <remarks>
              The number of cases predicted as positive by the
              test. This value can be computed by adding the
              true positives and false positives.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.PredictedNegatives">
            <summary>
              Gets the number of predicted negatives.
            </summary>
            
            <remarks>
              The number of cases predicted as negative by the
              test. This value can be computed by adding the
              true negatives and false negatives.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.TruePositives">
            <summary>
              Cases correctly identified by the system as positives.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.TrueNegatives">
            <summary>
              Cases correctly identified by the system as negatives.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.FalsePositives">
            <summary>
              Cases incorrectly identified by the system as positives.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.FalseNegatives">
            <summary>
              Cases incorrectly identified by the system as negatives.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Sensitivity">
            <summary>
              Sensitivity, also known as True Positive Rate
            </summary>
            
            <remarks>
              The Sensitivity is calculated as <c>TPR = TP / (TP + FN)</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Specificity">
            <summary>
              Specificity, also known as True Negative Rate
            </summary>
            
            <remarks>
              The Specificity is calculated as <c>TNR = TN / (FP + TN)</c>.
              It can also be calculated as: <c>TNR = (1-False Positive Rate)</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Efficiency">
            <summary>
             Efficiency, the arithmetic mean of sensitivity and specificity
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Accuracy">
            <summary>
              Accuracy, or raw performance of the system
            </summary>
            
            <remarks>
              The Accuracy is calculated as 
              <c>ACC = (TP + TN) / (P + N).</c>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Prevalence">
            <summary>
             Prevalence of outcome occurrence.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.PositivePredictiveValue">
            <summary>
              Positive Predictive Value, also known as Positive Precision
            </summary>
            
            <remarks>
            <para>
              The Positive Predictive Value tells us how likely is 
              that a patient has a disease, given that the test for
              this disease is positive.</para>
            <para>
              The Positive Predictive Rate is calculated as
              <c>PPV = TP / (TP + FP)</c>.</para>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.NegativePredictiveValue">
            <summary>
              Negative Predictive Value, also known as Negative Precision
            </summary>
            
            <remarks>
            <para>
              The Negative Predictive Value tells us how likely it is
              that the disease is NOT present for a patient, given that
              the patient's test for the disease is negative.</para>
            <para>
              The Negative Predictive Value is calculated as 
              <c>NPV = TN / (TN + FN)</c>.</para> 
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.FalsePositiveRate">
            <summary>
              False Positive Rate, also known as false alarm rate.
            </summary>
            
            <remarks>
            <para>
              The rate of false alarms in a test.</para>
            <para>
              The False Positive Rate can be calculated as
              <c>FPR = FP / (FP + TN)</c> or <c>FPR = (1-specificity)</c>.
            </para>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.FalseDiscoveryRate">
            <summary>
              False Discovery Rate, or the expected false positive rate.
            </summary>
            
            <remarks>
            <para>
              The False Discovery Rate is actually the expected false positive rate.</para>
            <para>
              For example, if 1000 observations were experimentally predicted to
              be different, and a maximum FDR for these observations was 0.10, then
              100 of these observations would be expected to be false positives.</para>
            <para>
              The False Discovery Rate is calculated as
              <c>FDR = FP / (FP + TP)</c>.</para>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.MatthewsCorrelationCoefficient">
            <summary>
              Matthews Correlation Coefficient, also known as Phi coefficient 
            </summary>
            
            <remarks>
              A coefficient of +1 represents a perfect prediction, 0 an
              average random prediction and −1 an inverse prediction.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.OddsRatio">
            <summary>
              Odds-ratio.
            </summary>
            
            <remarks>
              References: http://www.iph.ufrgs.br/corpodocente/marques/cd/rd/presabs.htm
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Kappa">
             <summary>
               Kappa coefficient.
             </summary>
            
             <remarks>
               References: http://www.iph.ufrgs.br/corpodocente/marques/cd/rd/presabs.htm
             </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.StandardError">
            <summary>
              Gets the standard error of the <see cref="P:Accord.Statistics.Analysis.ConfusionMatrix.Kappa"/>
              coefficient of performance. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Variance">
            <summary>
              Gets the variance of the <see cref="P:Accord.Statistics.Analysis.ConfusionMatrix.Kappa"/>
              coefficient of performance. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.VarianceUnderNull">
            <summary>
              Gets the variance of the <see cref="P:Accord.Statistics.Analysis.ConfusionMatrix.Kappa"/>
              under the null hypothesis that the underlying
              Kappa value is 0. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.StandardErrorUnderNull">
            <summary>
              Gets the standard error of the <see cref="P:Accord.Statistics.Analysis.ConfusionMatrix.Kappa"/>
              under the null hypothesis that the underlying Kappa
              value is 0. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.OverallDiagnosticPower">
            <summary>
              Diagnostic power.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.NormalizedMutualInformation">
            <summary>
              Normalized Mutual Information.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Precision">
            <summary>
              Precision, same as the <see cref="P:Accord.Statistics.Analysis.ConfusionMatrix.PositivePredictiveValue"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Recall">
            <summary>
              Recall, same as the <see cref="P:Accord.Statistics.Analysis.ConfusionMatrix.Sensitivity"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.FScore">
            <summary>
              F-Score, computed as the harmonic mean of
              <see cref="P:Accord.Statistics.Analysis.ConfusionMatrix.Precision"/> and <see cref="P:Accord.Statistics.Analysis.ConfusionMatrix.Recall"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.ExpectedValues">
            <summary>
              Expected values, or values that could
              have been generated just by chance.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.ChiSquare">
            <summary>
              Gets the Chi-Square statistic for the contingency table.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.DescriptiveAnalysis">
             <summary>
               Descriptive statistics analysis.
             </summary>
             
             <remarks>
             <para>
               Descriptive statistics are used to describe the basic features of the data
               in a study. They provide simple summaries about the sample and the measures.
               Together with simple graphics analysis, they form the basis of virtually
               every quantitative analysis of data.</para>
               
             <para>
               This class can also be bound to standard controls such as the 
               <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx">DataGridView</a>
               by setting their DataSource property to the analysis' <see cref="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Measures"/> property.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                    Wikipedia, The Free Encyclopedia. Descriptive Statistics. Available on:
                    http://en.wikipedia.org/wiki/Descriptive_statistics </description></item>
               </list></para>
             </remarks>
            
             <example>
               <code>
               // Suppose we would like to compute descriptive
               // statistics from the following data samples:
               double[,] data =
               {
                   { 1, 52, 5 },
                   { 2, 12, 5 },
                   { 1, 65, 5 },
                   { 1, 25, 5 },
                   { 2, 62, 5 },
               };
            
               // Create the analysis
               DescriptiveAnalysis analysis = new DescriptiveAnalysis(data);
            
               // Compute
               analysis.Compute();
            
               // Retrieve interest measures
               double[] means = analysis.Means; // { 1.4, 43.2, 5.0 }
               double[] modes = analysis.Modes; // { 1.0, 52.0, 5.0 }
               </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Tools"/>
             <seealso cref="T:Accord.Statistics.Analysis.DescriptiveMeasures"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveAnalysis.#ctor(System.Double[])">
            <summary>
              Constructs the Descriptive Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveAnalysis.#ctor(System.Double[0:,0:])">
            <summary>
              Constructs the Descriptive Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveAnalysis.#ctor(System.Double[0:,0:],System.String[])">
            <summary>
              Constructs the Descriptive Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis.</param>
            <param name="columnNames">Names for the analyzed variables.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveAnalysis.#ctor(System.Double[][])">
            <summary>
              Constructs the Descriptive Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveAnalysis.#ctor(System.Double[][],System.String[])">
            <summary>
              Constructs the Descriptive Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis.</param>
            <param name="columnNames">Names for the analyzed variables.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveAnalysis.Compute">
            <summary>
              Computes the analysis using given source data and parameters.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveAnalysis.GetConfidenceInterval(System.Int32,System.Double)">
            <summary>
              Gets a confidence interval for the <see cref="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Means"/>
              within the given confidence level percentage.
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            <param name="index">The index of the data column whose confidence
              interval should be calculated.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveAnalysis.GetDevianceInterval(System.Int32,System.Double)">
            <summary>
              Gets a deviance interval for the <see cref="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Means"/>
              within the given confidence level percentage (i.e. uses
              the standard deviation rather than the standard error to
              compute the range interval for the variable).
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            <param name="index">The index of the data column whose confidence
              interval should be calculated.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Source">
            <summary>
              Gets the source matrix from which the analysis was run.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Array">
            <summary>
              Gets the source matrix from which the analysis was run.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.ColumnNames">
            <summary>
              Gets the column names from the variables in the data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.DeviationScores">
            <summary>
              Gets the mean subtracted data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.StandardScores">
            <summary>
            Gets the mean subtracted and deviation divided data. Also known as Z-Scores.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.CovarianceMatrix">
            <summary>
              Gets the Covariance Matrix
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.CorrelationMatrix">
            <summary>
              Gets the Correlation Matrix
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Means">
            <summary>
              Gets a vector containing the Mean of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.StandardDeviations">
            <summary>
              Gets a vector containing the Standard Deviation of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.StandardErrors">
            <summary>
              Gets a vector containing the Standard Error of the Mean of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Confidence">
            <summary>
              Gets the 95% confidence intervals for the <see cref="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Means"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Deviance">
            <summary>
              Gets the 95% deviance intervals for the <see cref="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Means"/>.
            </summary>
            
            <remarks>
              A deviance interval uses the standard deviation rather 
              than the standard error to compute the range interval 
              for a variable.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Modes">
            <summary>
              Gets a vector containing the Mode of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Medians">
            <summary>
              Gets a vector containing the Median of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Variances">
            <summary>
              Gets a vector containing the Variance of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Distinct">
            <summary>
              Gets a vector containing the number of distinct elements for each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Ranges">
            <summary>
              Gets an array containing the Ranges of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Quartiles">
            <summary>
              Gets an array containing the interquartile range of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.InnerFences">
            <summary>
              Gets an array containing the inner fences of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.OuterFences">
            <summary>
              Gets an array containing the outer fences of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Sums">
            <summary>
              Gets an array containing the sum of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Skewness">
            <summary>
            Gets an array containing the skewness for of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Kurtosis">
            <summary>
            Gets an array containing the kurtosis for of each data column.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Samples">
            <summary>
              Gets the number of samples (or observations) in the data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Variables">
            <summary>
              Gets the number of variables (or features) in the data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Measures">
            <summary>
            Gets a collection of DescriptiveMeasures objects that can be bound to a DataGridView.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.DescriptiveMeasures">
            <summary>
              Descriptive measures for a variable.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Analysis.DescriptiveAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveMeasures.GetConfidenceInterval(System.Double)">
            <summary>
              Gets a confidence interval for the <see cref="P:Accord.Statistics.Analysis.DescriptiveMeasures.Mean"/>
              within the given confidence level percentage.
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveMeasures.GetDevianceInterval(System.Double)">
            <summary>
              Gets a deviance interval for the <see cref="P:Accord.Statistics.Analysis.DescriptiveMeasures.Mean"/>
              within the given confidence level percentage (i.e. uses
              the standard deviation rather than the standard error to
              compute the range interval for the variable).
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Analysis">
            <summary>
              Gets the descriptive analysis 
              that originated this measure.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Index">
            <summary>
              Gets the variable's index.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Name">
            <summary>
              Gets the variable's name
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Sum">
            <summary>
              Gets the variable's total sum.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Mean">
            <summary>
              Gets the variable's mean.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.StandardDeviation">
            <summary>
              Gets the variable's standard deviation.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Median">
            <summary>
              Gets the variable's median.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.OuterFence">
            <summary>
              Gets the variable's outer fences range.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.InnerFence">
            <summary>
              Gets the variable's inner fence range.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Quartiles">
            <summary>
              Gets the variable's interquartile range.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Mode">
            <summary>
              Gets the variable's mode.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Variance">
            <summary>
              Gets the variable's variance.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Skewness">
            <summary>
              Gets the variable's skewness.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Kurtosis">
            <summary>
              Gets the variable's kurtosis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.StandardError">
            <summary>
              Gets the variable's standard error of the mean.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Max">
            <summary>
              Gets the variable's maximum value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Min">
            <summary>
              Gets the variable's minimum value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Length">
            <summary>
              Gets the variable's length.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Distinct">
            <summary>
              Gets the number of distinct values for the variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Count">
            <summary>
              Gets the number of samples for the variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Confidence">
            <summary>
              Gets the 95% confidence interval around the <see cref="P:Accord.Statistics.Analysis.DescriptiveMeasures.Mean"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Deviance">
            <summary>
              Gets the 95% deviance interval around the <see cref="P:Accord.Statistics.Analysis.DescriptiveMeasures.Mean"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Samples">
            <summary>
              Gets the variable's observations.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.DescriptiveMeasureCollection">
            <summary>
              Collection of descriptive measures.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Analysis.DescriptiveMeasures"/>
            <seealso cref="T:Accord.Statistics.Analysis.DescriptiveAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveMeasureCollection.GetKeyForItem(Accord.Statistics.Analysis.DescriptiveMeasures)">
            <summary>
              Gets the key for item.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IndependentComponentAlgorithm">
            <summary>
              FastICA's algorithms to be used in Independent Component Analysis.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Analysis.IndependentComponentAlgorithm.Deflation">
            <summary>
              Deflation algorithm.
            </summary>
            <remarks>
              In the deflation algorithm, components are found one
              at a time through a series of sequential operations.
              It is particularly useful when only a small number of
              components should be computed from the input data set.
            </remarks>
            
        </member>
        <member name="F:Accord.Statistics.Analysis.IndependentComponentAlgorithm.Parallel">
            <summary>
              Symmetric parallel algorithm (default).
            </summary>
            <remarks>
              In the parallel (symmetric) algorithm, all components
              are computed at once. This is the default algorithm for
              <seealso cref="T:Accord.Statistics.Analysis.IndependentComponentAnalysis">Independent
              Component Analysis</seealso>.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IndependentComponentAnalysis">
            <summary>
              Independent Component Analysis (ICA).
            </summary>
            
            <remarks>
            <para>
              Independent Component Analysis is a computational method for separating
              a multivariate signal (or mixture) into its additive subcomponents, supposing
              the mutual statistical independence of the non-Gaussian source signals.</para>
            <para>
              When the independence assumption is correct, blind ICA separation of a mixed
              signal gives very good results. It is also used for signals that are not supposed
              to be generated by a mixing for analysis purposes.</para>  
            <para>
              A simple application of ICA is the "cocktail party problem", where the underlying
              speech signals are separated from a sample data consisting of people talking
              simultaneously in a room. Usually the problem is simplified by assuming no time
              delays or echoes.</para>
            <para>
              An important note to consider is that if N sources are present, at least N
              observations (e.g. microphones) are needed to get the original signals.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Hyvärinen, A (1999). Fast and Robust Fixed-Point Algorithms for Independent Component
                  Analysis. IEEE Transactions on Neural Networks, 10(3),626-634. Available on: 
                  <a href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.50.4731">
                  http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.50.4731 </a></description></item>
                <item><description>
                  E. Bingham and A. Hyvärinen A fast fixed-point algorithm for independent component
                  analysis of complex-valued signals. Int. J. of Neural Systems, 10(1):1-8, 2000. </description></item>
                <item><description>
                  FastICA: FastICA Algorithms to perform ICA and Projection Pursuit. Available on:
                  <a href="http://cran.r-project.org/web/packages/fastICA/index.html">
                  http://cran.r-project.org/web/packages/fastICA/index.html </a></description></item>
                <item><description>
                  Wikipedia, The Free Encyclopedia. Independent component analysis. Available on:
                  http://en.wikipedia.org/wiki/Independent_component_analysis </description></item>
             </list></para>  
            </remarks>
            
            <example>
            <code>
            // Let's create a random dataset containing
            // 5000 samples of two dimensional samples.
            //
            double[,] source = Matrix.Random(5000, 2);
            
            // Now, we will mix the samples the dimensions of the samples.
            // A small amount of the second column will be applied to the
            // first, and vice-versa. 
            //
            double[,] mix =
            {
                {  0.25, 0.25 },
                { -0.25, 0.75 },    
            };
            
            // mix the source data
            double[,] input = source.Multiply(mix);
            
            // Now, we can use ICA to identify any linear mixing between the variables, such
            // as the matrix multiplication we did above. After it has identified it, we will
            // be able to revert the process, retrieving our original samples again
                        
            // Create a new Independent Component Analysis
            var ica = new IndependentComponentAnalysis(input);
            
            
            // Compute it 
            ica.Compute();
            
            // Now, we can retrieve the mixing and demixing matrices that were 
            // used to alter the data. Note that the analysis was able to detect
            // this information automatically:
            
            double[,] mixingMatrix = ica.MixingMatrix; // same as the 'mix' matrix
            double[,] revertMatrix = ica.DemixingMatrix; // inverse of the 'mix' matrix
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.#ctor(System.Double[0:,0:])">
            <summary>
              Constructs a new Independent Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
              variables as columns and observations of each variable as rows.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Analysis.IndependentComponentAlgorithm)">
            <summary>
              Constructs a new Independent Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
              variables as columns and observations of each variable as rows.</param>
            <param name="algorithm">The FastICA algorithm to be used in the analysis. Default
              is <see cref="F:Accord.Statistics.Analysis.IndependentComponentAlgorithm.Parallel"/>.</param>
              
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Analysis.AnalysisMethod)">
            <summary>
              Constructs a new Independent Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
              variables as columns and observations of each variable as rows.</param>
            <param name="method">The analysis method to perform. Default is
              <see cref="F:Accord.Statistics.Analysis.AnalysisMethod.Center"/>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Analysis.AnalysisMethod,Accord.Statistics.Analysis.IndependentComponentAlgorithm)">
            <summary>
              Constructs a new Independent Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
              variables as columns and observations of each variable as rows.</param>
            <param name="method">The analysis method to perform. Default is
              <see cref="F:Accord.Statistics.Analysis.AnalysisMethod.Center"/>.</param>
            <param name="algorithm">The FastICA algorithm to be used in the analysis. Default
              is <see cref="F:Accord.Statistics.Analysis.IndependentComponentAlgorithm.Parallel"/>.</param>
              
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.#ctor(System.Double[][],Accord.Statistics.Analysis.AnalysisMethod,Accord.Statistics.Analysis.IndependentComponentAlgorithm)">
            <summary>
              Constructs a new Independent Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
              variables as columns and observations of each variable as rows.</param>
            <param name="method">The analysis method to perform. Default is
              <see cref="F:Accord.Statistics.Analysis.AnalysisMethod.Center"/>.</param>
            <param name="algorithm">The FastICA algorithm to be used in the analysis. Default
              is <see cref="F:Accord.Statistics.Analysis.IndependentComponentAlgorithm.Parallel"/>.</param>
              
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Compute">
            <summary>
              Computes the Independent Component Analysis algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Compute(System.Int32)">
            <summary>
              Computes the Independent Component Analysis algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Separate(System.Double[0:,0:])">
            <summary>
              Separates a mixture into its components (demixing).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Separate(System.Single[][])">
            <summary>
              Separates a mixture into its components (demixing).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Separate(System.Double[][])">
            <summary>
              Separates a mixture into its components (demixing).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Combine(System.Double[0:,0:])">
            <summary>
              Combines components into a single mixture (mixing).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Combine(System.Single[][])">
            <summary>
              Combines components into a single mixture (mixing).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.deflation(System.Double[0:,0:],System.Int32,System.Double[0:,0:])">
            <summary>
              Deflation iterative algorithm.
            </summary>
            
            <returns>
              Returns a matrix in which each row contains
              the mixing coefficients for each component.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.parallel(System.Double[0:,0:],System.Int32,System.Double[0:,0:])">
            <summary>
              Parallel (symmetric) iterative algorithm.
            </summary>
            
            <returns>
              Returns a matrix in which each row contains
              the mixing coefficients for each component.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Adjust(System.Double[0:,0:],System.Boolean)">
            <summary>
              Adjusts a data matrix, centering and standardizing its values
              using the already computed column's means and standard deviations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Adjust(System.Single[][],System.Boolean)">
            <summary>
              Adjusts a data matrix, centering and standardizing its values
              using the already computed column's means and standard deviations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Adjust(System.Double[][],System.Boolean)">
            <summary>
              Adjusts a data matrix, centering and standardizing its values
              using the already computed column's means and standard deviations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.getMaximumAbsoluteChange(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
              Computes the maximum absolute change between two members of a matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.getMaximumAbsoluteChange(System.Double[],System.Double[])">
            <summary>
              Computes the maximum absolute change between two members of a vector.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Source">
            <summary>
              Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Iterations">
            <summary>
              Gets or sets the maximum number of iterations 
              to perform. If zero, the method will run until
              convergence.
            </summary>
            
            <value>The iterations.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Tolerance">
            <summary>
              Gets or sets the maximum absolute change in
              parameters between iterations that determine
              convergence.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Result">
            <summary>
              Gets the resulting projection of the source
              data given on the creation of the analysis 
              into the space spawned by independent components.
            </summary>
            
            <value>The resulting projection in independent component space.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.MixingMatrix">
            <summary>
              Gets a matrix containing the mixing coefficients for
              the original source data being analyzed. Each column
              corresponds to an independent component.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.DemixingMatrix">
            <summary>
              Gets a matrix containing the demixing coefficients for
              the original source data being analyzed. Each column
              corresponds to an independent component.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.WhiteningMatrix">
            <summary>
              Gets the whitening matrix used to transform
              the original data to have unit variance.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Components">
            <summary>
              Gets the Independent Components in a object-oriented structure.
            </summary>
            
            <value>The collection of independent components.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Overwrite">
            <summary>
              Gets or sets whether calculations will be performed overwriting
              data in the original source matrix, using less memory.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Algorithm">
            <summary>
             Gets or sets the <see cref="T:Accord.Statistics.Analysis.IndependentComponentAlgorithm">
             FastICA</see> algorithm used by the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Contrast">
            <summary>
              Gets or sets the <see cref="T:Accord.Statistics.Analysis.ContrastFunctions.IContrastFunction">
              Contrast function</see> to be used by the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Means">
            <summary>
              Gets the column means of the original data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.StandardDeviation">
            <summary>
              Gets the column standard deviations of the original data.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IndependentComponent">
            <summary>
              Represents an Independent Component found in the Independent Component 
              Analysis, allowing it to be directly bound to controls like the DataGridView.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponent.#ctor(Accord.Statistics.Analysis.IndependentComponentAnalysis,System.Int32)">
            <summary>
              Creates an independent component representation.
            </summary>
            
            <param name="analysis">The analysis to which this component belongs.</param>
            <param name="index">The component index.</param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponent.Index">
            <summary>
              Gets the Index of this component on the original component collection.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponent.Analysis">
            <summary>
              Returns a reference to the parent analysis object.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponent.MixingVector">
            <summary>
              Gets the mixing vector for the current independent component.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponent.DemixingVector">
            <summary>
              Gets the demixing vector for the current independent component.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponent.WhiteningVector">
            <summary>
              Gets the whitening factor for the current independent component.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IndependentComponentCollection">
            <summary>
              Represents a Collection of Independent Components found in the
              Independent Component Analysis. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.KernelDiscriminantAnalysis">
            <summary>
              Kernel (Fisher) Discriminant Analysis.
            </summary>
            
            <remarks>
            <para>
              Kernel (Fisher) discriminant analysis (kernel FDA) is a non-linear generalization
              of linear discriminant analysis (LDA) using techniques of kernel methods. Using a
              kernel, the originally linear operations of LDA are done in a reproducing kernel
              Hilbert space with a non-linear mapping.</para>
            <para>
              The algorithm used is a multi-class generalization of the original algorithm by
              Mika et al. in Fisher discriminant analysis with kernels (1999).</para>  
              
            <para>
              This class can also be bound to standard controls such as the 
              <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx">DataGridView</a>
              by setting their DataSource property to the analysis' <see cref="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Discriminants"/> property.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Mika et al, Fisher discriminant analysis with kernels (1999). Available on
                  <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.9904">
                  http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.9904 </a></description></item>
             </list></para>  
            </remarks>
            
            <example>
            <para>
              The following example creates an analysis for a set of 
              data specified as a jagged (double[][]) array. However,
              the same can also be accomplished using multidimensional
              double[,] arrays.</para>
              
            <code>
            // Create some sample input data instances. This is the same
            // data used in the Gutierrez-Osuna's example available on:
            // http://research.cs.tamu.edu/prism/lectures/pr/pr_l10.pdf
            
            double[][] inputs = 
            {
                // Class 0
                new double[] {  4,  1 }, 
                new double[] {  2,  4 },
                new double[] {  2,  3 },
                new double[] {  3,  6 },
                new double[] {  4,  4 },
            
                // Class 1
                new double[] {  9, 10 },
                new double[] {  6,  8 },
                new double[] {  9,  5 },
                new double[] {  8,  7 },
                new double[] { 10,  8 }
            };
            
            int[] output = 
            {
                0, 0, 0, 0, 0, // The first five are from class 0
                1, 1, 1, 1, 1  // The last five are from class 1
            };
            
            // Now we can chose a kernel function to 
            // use, such as a linear kernel function.
            IKernel kernel = new Linear();
            
            // Then, we will create a KDA using this linear kernel.
            var kda = new KernelDiscriminantAnalysis(inputs, output, kernel);
            
            kda.Compute(); // Compute the analysis
            
            
            // Now we can project the data into KDA space:
            double[][] projection = kda.Transform(inputs);
            
            // Or perform classification using:
            int[] results = kda.Classify(inputs);
            </code>
            </example>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.LinearDiscriminantAnalysis">
            <summary>
              Linear Discriminant Analysis (LDA).
            </summary>
            
            <remarks>
            <para>
              Linear Discriminant Analysis (LDA) is a method of finding such a linear
              combination of variables which best separates two or more classes.</para>
            <para>
              In itself LDA is not a classification algorithm, although it makes use of class
              labels. However, the LDA result is mostly used as part of a linear classifier.
              The other alternative use is making a dimension reduction before using nonlinear
              classification algorithms.</para>
            <para>
              It should be noted that several similar techniques (differing in requirements to the sample)
              go together under the general name of Linear Discriminant Analysis. Described below is one of
              these techniques with only two requirements:</para>  
              <list type="number">
                <item><description>The sample size shall exceed the number of variables, and </description></item>
                <item><description>Classes may overlap, but their centers shall be distant from each other. </description></item>
              </list>
              
            <para>
              Moreover, LDA requires the following assumptions to be true:</para>
              <list type="bullet">
                <item><description>Independent subjects.</description></item>
                <item><description>Normality: the variance-covariance matrix of the
                predictors is the same in all groups.</description></item>
              </list>
              
            <para>
              If the latter assumption is violated, it is common to use quadratic discriminant analysis in
              the same manner as linear discriminant analysis instead.</para>
              
            <para>
              This class can also be bound to standard controls such as the 
              <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx">DataGridView</a>
              by setting their DataSource property to the analysis' <see cref="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Discriminants"/> property.</para>
              
            <para>
               References:
               <list type="bullet">
                 <item><description>
                   R. Gutierrez-Osuna, Linear Discriminant Analysis. Available on:
                   http://research.cs.tamu.edu/prism/lectures/pr/pr_l10.pdf </description></item>
                </list></para>     
            </remarks>
            
            <example>
            <para>
              The following example creates an analysis for a set of 
              data specified as a jagged (double[][]) array. However,
              the same can also be accomplished using multidimensional
              double[,] arrays.</para>
            
            <code>
            // Create some sample input data instances. This is the same
            // data used in the Gutierrez-Osuna's example available on:
            // http://research.cs.tamu.edu/prism/lectures/pr/pr_l10.pdf
            
            double[][] inputs = 
            {
                // Class 0
                new double[] {  4,  1 }, 
                new double[] {  2,  4 },
                new double[] {  2,  3 },
                new double[] {  3,  6 },
                new double[] {  4,  4 },
            
                // Class 1
                new double[] {  9, 10 },
                new double[] {  6,  8 },
                new double[] {  9,  5 },
                new double[] {  8,  7 },
                new double[] { 10,  8 }
            };
            
            int[] output = 
            {
                0, 0, 0, 0, 0, // The first five are from class 0
                1, 1, 1, 1, 1  // The last five are from class 1
            };
            
            // Then, we will create a LDA for the given instances.
            var lda = new LinearDiscriminantAnalysis(inputs, output);
            
            lda.Compute(); // Compute the analysis
            
            
            // Now we can project the data into KDA space:
            double[][] projection = lda.Transform(inputs);
            
            // Or perform classification using:
            int[] results = lda.Classify(inputs);
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.#ctor(System.Double[0:,0:],System.Int32[])">
            <summary>
              Constructs a new Linear Discriminant Analysis object.
            </summary>
            
            <param name="inputs">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="outputs">The labels for each observation row in the input matrix.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.#ctor(System.Double[][],System.Int32[])">
            <summary>
              Constructs a new Linear Discriminant Analysis object.
            </summary>
            
            <param name="inputs">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="outputs">The labels for each observation row in the input matrix.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Compute">
            <summary>
              Computes the Multi-Class Linear Discriminant Analysis algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Transform(System.Double[0:,0:])">
            <summary>
              Projects a given matrix into discriminant space.
            </summary>
            
            <param name="data">The matrix to be projected.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Transform(System.Double[][])">
            <summary>
              Projects a given matrix into discriminant space.
            </summary>
            
            <param name="data">The matrix to be projected.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Transform(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects a given matrix into latent discriminant variable space.
            </summary>
            
            <param name="data">The matrix to be projected.</param>
            <param name="dimensions">
              The number of discriminants to use in the projection.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Transform(System.Double[][],System.Int32)">
            <summary>
              Projects a given matrix into latent discriminant variable space.
            </summary>
            
            <param name="data">The matrix to be projected.</param>
            <param name="dimensions">
              The number of discriminants to use in the projection.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Transform(System.Double[])">
            <summary>
              Projects a given point into discriminant space.
            </summary>
            
            <param name="data">The point to be projected.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Transform(System.Double[],System.Int32)">
            <summary>
              Projects a given point into latent discriminant variable space.
            </summary>
            
            <param name="data">The point to be projected.</param>
            <param name="discriminants">The number of discriminant variables to use in the projection.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.GetNumberOfDimensions(System.Single)">
            <summary>
              Returns the minimum number of discriminant space dimensions (discriminant
              factors) required to represent a given percentile of the data.
            </summary>
            
            <param name="threshold">The percentile of the data requiring representation.</param>
            <returns>The minimal number of dimensions required.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Classify(System.Double[])">
            <summary>
              Classifies a new instance into one of the available classes.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Classify(System.Double[],System.Double[]@)">
            <summary>
              Classifies a new instance into one of the available classes.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Classify(System.Double[][])">
            <summary>
              Classifies new instances into one of the available classes.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.DiscriminantFunction(System.Int32,System.Double[])">
            <summary>
              Gets the discriminant function output for class c.
            </summary>
            
            <param name="c">The class index.</param>
            <param name="projection">The projected input.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.CreateDiscriminants">
            <summary>
              Creates additional information about principal components.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Source">
            <summary>
              Returns the original supplied data to be analyzed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Result">
            <summary>
              Gets the resulting projection of the source data given on
              the creation of the analysis into discriminant space.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Classifications">
            <summary>
              Gets the original classifications (labels) of the source data
              given on the moment of creation of this analysis object.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Means">
            <summary>
              Gets the mean of the original data given at method construction.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.StandardDeviations">
            <summary>
              Gets the standard mean of the original data given at method construction.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ScatterWithinClass">
            <summary>
              Gets the Within-Class Scatter Matrix for the data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ScatterBetweenClass">
            <summary>
              Gets the Between-Class Scatter Matrix for the data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ScatterMatrix">
            <summary>
              Gets the Total Scatter Matrix for the data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.DiscriminantMatrix">
            <summary>
              Gets the Eigenvectors obtained during the analysis,
              composing a basis for the discriminant factor space.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Eigenvalues">
            <summary>
              Gets the Eigenvalues found by the analysis associated
              with each vector of the ComponentMatrix matrix.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.DiscriminantProportions">
            <summary>
              Gets the level of importance each discriminant factor has in
              discriminant space. Also known as amount of variance explained.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.CumulativeProportions">
            <summary>
              The cumulative distribution of the discriminants factors proportions.
              Also known as the cumulative energy of the first dimensions of the discriminant
              space or as the amount of variance explained by those dimensions.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Discriminants">
            <summary>
              Gets the discriminant factors in a object-oriented fashion.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Classes">
            <summary>
              Gets information about the distinct classes in the analyzed data.
            </summary>
              
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ClassScatter">
            <summary>
              Gets the Scatter matrix for each class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ClassMeans">
            <summary>
              Gets the Mean vector for each class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ProjectionMeans">
            <summary>
              Gets the feature space mean of the projected data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ClassStandardDeviations">
            <summary>
              Gets the Standard Deviation vector for each class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ClassCount">
            <summary>
              Gets the observation count for each class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.#ctor(System.Double[0:,0:],System.Int32[],Accord.Statistics.Kernels.IKernel)">
            <summary>
              Constructs a new Kernel Discriminant Analysis object.
            </summary>
            
            <param name="inputs">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="output">The labels for each observation row in the input matrix.</param>
            <param name="kernel">The kernel to be used in the analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.#ctor(System.Double[][],System.Int32[],Accord.Statistics.Kernels.IKernel)">
            <summary>
              Constructs a new Kernel Discriminant Analysis object.
            </summary>
            
            <param name="inputs">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="output">The labels for each observation row in the input matrix.</param>
            <param name="kernel">The kernel to be used in the analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.Compute">
            <summary>
              Computes the Multi-Class Kernel Discriminant Analysis algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.Transform(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects a given matrix into discriminant space.
            </summary>
            
            <param name="data">The matrix to be projected.</param>
            <param name="dimensions">
              The number of discriminant dimensions to use in the projection.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.Transform(System.Double[][],System.Int32)">
            <summary>
              Projects a given matrix into discriminant space.
            </summary>
            
            <param name="data">The matrix to be projected.</param>
            <param name="dimensions">
              The number of discriminant dimensions to use in the projection.
            </param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.Kernel">
            <summary>
              Gets the Kernel used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.Regularization">
            <summary>
              Gets or sets the regularization parameter to
              avoid non-singularities at the solution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.Threshold">
            <summary>
              Gets or sets the minimum variance proportion needed to keep a
              discriminant component. If set to zero, all components will be
              kept. Default is 0.001 (all components which contribute less
              than 0.001 to the variance in the data will be discarded).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis">
             <summary>
               Kernel Principal Component Analysis.
             </summary>
             
             <remarks>
             <para>
               Kernel principal component analysis (kernel PCA) is an extension of principal
               component analysis (PCA) using techniques of kernel methods. Using a kernel,
               the originally linear operations of PCA are done in a reproducing kernel Hilbert
               space with a non-linear mapping.</para>
             
             <para>
               This class can also be bound to standard controls such as the 
               <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx">DataGridView</a>
               by setting their DataSource property to the analysis' <see cref="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Components"/>
               property.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://www.heikohoffmann.de/htmlthesis/hoffmann_diss.html">
                   Heiko Hoffmann, Unsupervised Learning of Visuomotor Associations (Kernel PCA topic).
                   PhD thesis. 2005. Available on: http://www.heikohoffmann.de/htmlthesis/hoffmann_diss.html </a>
                   </description></item>
                 <item><description><a href="http://www.hpl.hp.com/conferences/icml2003/papers/345.pdf">
                   James T. Kwok, Ivor W. Tsang. The Pre-Image Problem in Kernel Methods. 2003. Available on:
                   http://www.hpl.hp.com/conferences/icml2003/papers/345.pdf </a></description></item>
                </list></para>
             </remarks>
             
            <example>
              <para>
                The example below shows a typical usage of the analysis. We will be replicating
                the exact same example which can be found on the <see cref="T:Accord.Statistics.Analysis.PrincipalComponentAnalysis"/>
                documentation page. However, while we will be using a <see cref="T:Accord.Statistics.Kernels.Linear"/> kernel,
                any other kernel function could have been used.</para>
                
              <code>
              // Below is the same data used on the excellent paper "Tutorial
              //   On Principal Component Analysis", by Lindsay Smith (2002).
              
              double[,] sourceMatrix = 
              {
                  { 2.5,  2.4 },
                  { 0.5,  0.7 },
                  { 2.2,  2.9 },
                  { 1.9,  2.2 },
                  { 3.1,  3.0 },
                  { 2.3,  2.7 },
                  { 2.0,  1.6 },
                  { 1.0,  1.1 },
                  { 1.5,  1.6 },
                  { 1.1,  0.9 }
              }; 
             
              // Create a new linear kernel
              IKernel kernel = new Linear();
              
              // Creates the Kernel Principal Component Analysis of the given data
              var kpca = new KernelPrincipalComponentAnalysis(sourceMatrix, kernel);
                
              // Compute the Kernel Principal Component Analysis
              kpca.Compute();
                
              // Creates a projection considering 80% of the information
              double[,] components = kpca.Transform(sourceMatrix, 0.8f);
              </code>
             </example>
             
        </member>
        <member name="T:Accord.Statistics.Analysis.PrincipalComponentAnalysis">
             <summary>
               Principal component analysis (PCA) is a technique used to reduce
               multidimensional data sets to lower dimensions for analysis.
             </summary>
             
             <remarks>
             <para>
               Principal Components Analysis or the Karhunen-Loève expansion is a
               classical method for dimensionality reduction or exploratory data
               analysis.</para>
             <para>
               Mathematically, PCA is a process that decomposes the covariance matrix of a matrix
               into two parts: Eigenvalues and column eigenvectors, whereas Singular Value Decomposition
               (SVD) decomposes a matrix per se into three parts: singular values, column eigenvectors,
               and row eigenvectors. The relationships between PCA and SVD lie in that the eigenvalues 
               are the square of the singular values and the column vectors are the same for both.</para>
               
             <para>
               This class uses SVD on the data set which generally gives better numerical accuracy.</para>
               
             <para>
               This class can also be bound to standard controls such as the 
               <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx">DataGridView</a>
               by setting their DataSource property to the analysis' <see cref="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Components"/> property.</para>
            </remarks>
            
            <example>
              <para>
                The example below shows a typical usage of the analysis. However, users
                often ask why the framework produces different values than other packages
                such as STATA or MATLAB. After the simple introductory example below, we
                will be exploring why those results are often different.</para>
                
              <code>
              // Below is the same data used on the excellent paper "Tutorial
              //   On Principal Component Analysis", by Lindsay Smith (2002).
              
              double[,] sourceMatrix = 
              {
                  { 2.5,  2.4 },
                  { 0.5,  0.7 },
                  { 2.2,  2.9 },
                  { 1.9,  2.2 },
                  { 3.1,  3.0 },
                  { 2.3,  2.7 },
                  { 2.0,  1.6 },
                  { 1.0,  1.1 },
                  { 1.5,  1.6 },
                  { 1.1,  0.9 }
              }; 
             
              // Creates the Principal Component Analysis of the given source
              var pca = new PrincipalComponentAnalysis(sourceMatrix, AnalysisMethod.Center);
                
              // Compute the Principal Component Analysis
              pca.Compute();
                
              // Creates a projection considering 80% of the information
              double[,] components = pca.Transform(sourceMatrix, 0.8f, true);
              </code>
              
             
              <para>
                A question often asked by users is "why my matrices have inverted
                signs" or "why my results differ from [another software]". In short,
                despite any differences, the results are most likely correct (unless
                you firmly believe you have found a bug; in this case, please fill 
                in a bug report). </para>
              <para>
                The example below explores, in the same steps given in Lindsay's
                tutorial, anything that would cause any discrepancies between the
                results given by Accord.NET and results given by other softwares.</para>
                
              <code>
              // Reproducing Lindsay Smith's "Tutorial on Principal Component Analysis"
              // using the framework's default method. The tutorial can be found online
              // at http://www.sccg.sk/~haladova/principal_components.pdf
             
              // Step 1. Get some data
              // ---------------------
              
              double[,] data = 
              {
                  { 2.5,  2.4 },
                  { 0.5,  0.7 },
                  { 2.2,  2.9 },
                  { 1.9,  2.2 },
                  { 3.1,  3.0 },
                  { 2.3,  2.7 },
                  { 2.0,  1.6 },
                  { 1.0,  1.1 },
                  { 1.5,  1.6 },
                  { 1.1,  0.9 }
              };
              
              
              // Step 2. Subtract the mean
              // -------------------------
              //   Note: The framework does this automatically. By default, the framework
              //   uses the "Center" method, which only subtracts the mean. However, it is
              //   also possible to remove the mean *and* divide by the standard deviation
              //   (thus performing the correlation method) by specifying "Standardize"
              //   instead of "Center" as the AnalysisMethod.
              
              AnalysisMethod method = AnalysisMethod.Center; // AnalysisMethod.Standardize
              
              
              // Step 3. Compute the covariance matrix
              // -------------------------------------
              //   Note: Accord.NET does not need to compute the covariance
              //   matrix in order to compute PCA. The framework uses the SVD
              //   method which is more numerically stable, but may require
              //   more processing or memory. In order to replicate the tutorial
              //   using covariance matrices, please see the next example below.
              
              // Create the analysis using the selected method
              var pca = new PrincipalComponentAnalysis(data, method);
              
              // Compute it
              pca.Compute();
              
              
              // Step 4. Compute the eigenvectors and eigenvalues of the covariance matrix
              // -------------------------------------------------------------------------
              //   Note: Since Accord.NET uses the SVD method rather than the Eigendecomposition
              //   method, the Eigenvalues are not directly available. However, it is not the
              //   Eigenvalues themselves which are important, but rather their proportion:
              
              // Those are the expected eigenvalues, in descending order:
              double[] eigenvalues = { 1.28402771, 0.0490833989 };
              
              // And this will be their proportion:
              double[] proportion = eigenvalues.Divide(eigenvalues.Sum());
              
              // Those are the expected eigenvectors,
              // in descending order of eigenvalues:
              double[,] eigenvectors =
              {
                  { -0.677873399, -0.735178656 },
                  { -0.735178656,  0.677873399 }
              };
              
              // Now, here is the place most users get confused. The fact is that
              // the Eigenvalue decomposition (EVD) is not unique, and both the SVD
              // and EVD routines used by the framework produces results which are
              // numerically different from packages such as STATA or MATLAB, but
              // those are correct.
              
              // If v is an eigenvector, a multiple of this eigenvector (such as a*v, with
              // a being a scalar) will also be an eigenvector. In the Lindsay case, the
              // framework produces a first eigenvector with inverted signs. This is the same
              // as considering a=-1 and taking a*v. The result is still correct.
              
              // Retrieve the first expected eigenvector
              double[] v = eigenvectors.GetColumn(0);
              
              // Multiply by a scalar and store it back
              eigenvectors.SetColumn(0, v.Multiply(-1));
              
              // At this point, the eigenvectors should equal the pca.ComponentMatrix,
              // and the proportion vector should equal the pca.ComponentProportions up
              // to the 9 decimal places shown in the tutorial.
              
              
              // Step 5. Deriving the new data set
              // ---------------------------------
              
              double[,] actual = pca.Transform(data);
              
              // transformedData shown in pg. 18
              double[,] expected = new double[,]
              {
                  {  0.827970186, -0.175115307 },
                  { -1.77758033,   0.142857227 },
                  {  0.992197494,  0.384374989 },
                  {  0.274210416,  0.130417207 },
                  {  1.67580142,  -0.209498461 },
                  {  0.912949103,  0.175282444 },
                  { -0.099109437, -0.349824698 },
                  { -1.14457216,   0.046417258 },
                  { -0.438046137,  0.017764629 },
                  { -1.22382056,  -0.162675287 },
              };
              
              // At this point, the actual and expected matrices
              // should be equal up to 8 decimal places.
              </code>
              
             
              <para>
                Some users would like to analyze huge amounts of data. In this case,
                computing the SVD directly on the data could result in memory exceptions
                or excessive computing times. If your data's number of dimensions is much
                less than the number of observations (i.e. your matrix have less columns
                than rows) then it would be a better idea to summarize your data in the
                form of a covariance or correlation matrix and compute PCA using the EVD.</para>
              <para>
                The example below shows how to compute the analysis with covariance
                matrices only.</para>
                
              <code>
              // Reproducing Lindsay Smith's "Tutorial on Principal Component Analysis"
              // using the paper's original method. The tutorial can be found online
              // at http://www.sccg.sk/~haladova/principal_components.pdf
              
              // Step 1. Get some data
              // ---------------------
              
              double[,] data = 
              {
                  { 2.5,  2.4 },
                  { 0.5,  0.7 },
                  { 2.2,  2.9 },
                  { 1.9,  2.2 },
                  { 3.1,  3.0 },
                  { 2.3,  2.7 },
                  { 2.0,  1.6 },
                  { 1.0,  1.1 },
                  { 1.5,  1.6 },
                  { 1.1,  0.9 }
              };
              
              
              // Step 2. Subtract the mean
              // -------------------------
              //   Note: The framework does this automatically 
              //   when computing the covariance matrix. In this
              //   step we will only compute the mean vector.
              
              double[] mean = Accord.Statistics.Tools.Mean(data);
              
              
              // Step 3. Compute the covariance matrix
              // -------------------------------------
              
              double[,] covariance = Accord.Statistics.Tools.Covariance(data, mean);
              
              // Create the analysis using the covariance matrix
              var pca = PrincipalComponentAnalysis.FromCovarianceMatrix(mean, covariance);
              
              // Compute it
              pca.Compute();
              
              
              // Step 4. Compute the eigenvectors and eigenvalues of the covariance matrix
              //--------------------------------------------------------------------------
              
              // Those are the expected eigenvalues, in descending order:
              double[] eigenvalues = { 1.28402771, 0.0490833989 };
              
              // And this will be their proportion:
              double[] proportion = eigenvalues.Divide(eigenvalues.Sum());
              
              // Those are the expected eigenvectors,
              // in descending order of eigenvalues:
              double[,] eigenvectors =
              {
                  { -0.677873399, -0.735178656 },
                  { -0.735178656,  0.677873399 }
              };
              
              // Now, here is the place most users get confused. The fact is that
              // the Eigenvalue decomposition (EVD) is not unique, and both the SVD
              // and EVD routines used by the framework produces results which are
              // numerically different from packages such as STATA or MATLAB, but
              // those are correct.
              
              // If v is an eigenvector, a multiple of this eigenvector (such as a*v, with
              // a being a scalar) will also be an eigenvector. In the Lindsay case, the
              // framework produces a first eigenvector with inverted signs. This is the same
              // as considering a=-1 and taking a*v. The result is still correct.
              
              // Retrieve the first expected eigenvector
              double[] v = eigenvectors.GetColumn(0);
              
              // Multiply by a scalar and store it back
              eigenvectors.SetColumn(0, v.Multiply(-1));
              
              // At this point, the eigenvectors should equal the pca.ComponentMatrix,
              // and the proportion vector should equal the pca.ComponentProportions up
              // to the 9 decimal places shown in the tutorial. Moreover, unlike the
              // previous example, the eigenvalues vector should also be equal to the
              // property pca.Eigenvalues.
              
              
              // Step 5. Deriving the new data set
              // ---------------------------------
              
              double[,] actual = pca.Transform(data);
              
              // transformedData shown in pg. 18
              double[,] expected = new double[,]
              {
                  {  0.827970186, -0.175115307 },
                  { -1.77758033,   0.142857227 },
                  {  0.992197494,  0.384374989 },
                  {  0.274210416,  0.130417207 },
                  {  1.67580142,  -0.209498461 },
                  {  0.912949103,  0.175282444 },
                  { -0.099109437, -0.349824698 },
                  { -1.14457216,   0.046417258 },
                  { -0.438046137,  0.017764629 },
                  { -1.22382056,  -0.162675287 },
              };
              
              // At this point, the actual and expected matrices
              // should be equal up to 8 decimal places.
              </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.#ctor(System.Double[][],Accord.Statistics.Analysis.AnalysisMethod)">
            <summary>
              Constructs a new Principal Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="method">The analysis method to perform. Default is <see cref="F:Accord.Statistics.Analysis.AnalysisMethod.Center"/>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Analysis.AnalysisMethod)">
            <summary>
              Constructs a new Principal Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
              variables as columns and observations of each variable as rows.</param>
            <param name="method">The analysis method to perform. Default is <see cref="F:Accord.Statistics.Analysis.AnalysisMethod.Center"/>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.#ctor(System.Double[0:,0:])">
            <summary>
              Constructs a new Principal Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.#ctor(System.Double[][])">
            <summary>
              Constructs a new Principal Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Compute">
            <summary>
              Computes the Principal Component Analysis algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Transform(System.Double[0:,0:])">
            <summary>
              Projects a given matrix into principal component space.
            </summary>
            
            <param name="data">The matrix to be projected.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Transform(System.Double[])">
            <summary>
              Projects a given matrix into principal component space.
            </summary>
            
            <param name="data">The matrix to be projected.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Transform(System.Double[][])">
            <summary>
              Projects a given matrix into principal component space.
            </summary>
            
            <param name="data">The matrix to be projected.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Transform(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects a given matrix into principal component space.
            </summary>
            
            <param name="data">The matrix to be projected.</param>
            <param name="dimensions">The number of components to consider.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Transform(System.Double[],System.Int32)">
            <summary>
              Projects a given matrix into principal component space.
            </summary>
            
            <param name="data">The matrix to be projected.</param>
            <param name="dimensions">The number of components to consider.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Transform(System.Double[][],System.Int32)">
            <summary>
              Projects a given matrix into principal component space.
            </summary>
            
            <param name="data">The matrix to be projected.</param>
            <param name="dimensions">The number of components to consider.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Revert(System.Double[0:,0:])">
            <summary>
              Reverts a set of projected data into it's original form. Complete reverse
              transformation is only possible if all components are present, and, if the
              data has been standardized, the original standard deviation and means of
              the original matrix are known.
            </summary>
            
            <param name="data">The pca transformed data.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.GetNumberOfComponents(System.Single)">
            <summary>
              Returns the minimal number of principal components
              required to represent a given percentile of the data.
            </summary>
            
            <param name="threshold">The percentile of the data requiring representation.</param>
            <returns>The minimal number of components required.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Adjust(System.Double[0:,0:],System.Boolean)">
            <summary>
              Adjusts a data matrix, centering and standardizing its values
              using the already computed column's means and standard deviations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Adjust(System.Double[][],System.Boolean)">
            <summary>
              Adjusts a data matrix, centering and standardizing its values
              using the already computed column's means and standard deviations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.CreateComponents">
            <summary>
              Creates additional information about principal components.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.FromCovarianceMatrix(System.Double[],System.Double[0:,0:])">
            <summary>
              Constructs a new Principal Component Analysis from a Covariance matrix.
            </summary>
            
            <remarks>
              This method may be more suitable to high dimensional problems in which
              the original data matrix may not fit in memory but the covariance matrix
              will.</remarks>
              
            <param name="mean">The mean vector for the source data.</param>
            <param name="covariance">The covariance matrix of the data.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.FromCorrelationMatrix(System.Double[],System.Double[],System.Double[0:,0:])">
            <summary>
              Constructs a new Principal Component Analysis from a Correlation matrix.
            </summary>
            
            <remarks>
              This method may be more suitable to high dimensional problems in which
              the original data matrix may not fit in memory but the covariance matrix
              will.</remarks>
            
            <param name="mean">The mean vector for the source data.</param>
            <param name="stdDev">The standard deviation vectors for the source data.</param>
            <param name="correlation">The correlation matrix of the data.</param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Source">
            <summary>
              Returns the original data supplied to the analysis.
            </summary>
            
            <value>The original data matrix supplied to the analysis.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Result">
            <summary>
              Gets the resulting projection of the source
              data given on the creation of the analysis 
              into the space spawned by principal components.
            </summary>
            
            <value>The resulting projection in principal component space.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.ComponentMatrix">
            <summary>
              Gets a matrix whose columns contain the principal components. Also known as the Eigenvectors or loadings matrix.
            </summary>
            
            <value>The matrix of principal components.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Components">
            <summary>
              Gets the Principal Components in a object-oriented structure.
            </summary>
            
            <value>The collection of principal components.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.ComponentProportions">
            <summary>
              The respective role each component plays in the data set.
            </summary>
            
            <value>The component proportions.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.CumulativeProportions">
            <summary>
              The cumulative distribution of the components proportion role. Also known
              as the cumulative energy of the principal components.
            </summary>
            
            <value>The cumulative proportions.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.SingularValues">
            <summary>
              Provides access to the Singular Values stored during the analysis.
              If a covariance method is chosen, then it will contain an empty vector.
            </summary>
            
            <value>The singular values.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Eigenvalues">
            <summary>
              Provides access to the Eigenvalues stored during the analysis.
            </summary>
            
            <value>The Eigenvalues.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.StandardDeviations">
            <summary>
              Gets the column standard deviations of the source data given at method construction.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Means">
            <summary>
              Gets the column mean of the source data given at method construction.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Method">
            <summary>
              Gets or sets the method used by this analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Overwrite">
            <summary>
              Gets or sets whether calculations will be performed overwriting
              data in the original source matrix, using less memory.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Kernels.IKernel,Accord.Statistics.Analysis.AnalysisMethod,System.Boolean)">
            <summary>
              Constructs the Kernel Principal Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
              variables as columns and observations of each variable as rows.</param>
            <param name="kernel">The kernel to be used in the analysis.</param>
            <param name="method">The analysis method to perform.</param>
            <param name="centerInFeatureSpace">True to center the data in feature space,
              false otherwise. Default is true.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.#ctor(System.Double[][],Accord.Statistics.Kernels.IKernel,Accord.Statistics.Analysis.AnalysisMethod,System.Boolean)">
            <summary>
              Constructs the Kernel Principal Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
              variables as columns and observations of each variable as rows.</param>
            <param name="kernel">The kernel to be used in the analysis.</param>
            <param name="method">The analysis method to perform.</param>
            <param name="centerInFeatureSpace">True to center the data in feature space,
              false otherwise. Default is true.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Kernels.IKernel,Accord.Statistics.Analysis.AnalysisMethod)">
            <summary>
              Constructs the Kernel Principal Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="kernel">The kernel to be used in the analysis.</param>
            <param name="method">The analysis method to perform.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.#ctor(System.Double[][],Accord.Statistics.Kernels.IKernel,Accord.Statistics.Analysis.AnalysisMethod)">
            <summary>
              Constructs the Kernel Principal Component Analysis.
            </summary>
            
            <param name="data">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="kernel">The kernel to be used in the analysis.</param>
            <param name="method">The analysis method to perform.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Kernels.IKernel)">
            <summary>Constructs the Kernel Principal Component Analysis.</summary>
            
            <param name="data">The source data to perform analysis.</param>
            <param name="kernel">The kernel to be used in the analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.#ctor(System.Double[][],Accord.Statistics.Kernels.IKernel)">
            <summary>Constructs the Kernel Principal Component Analysis.</summary>
            
            <param name="data">The source data to perform analysis.</param>
            <param name="kernel">The kernel to be used in the analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Compute">
            <summary>
              Computes the Kernel Principal Component Analysis algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Compute(System.Int32)">
            <summary>
              Computes the Kernel Principal Component Analysis algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Transform(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects a given matrix into the principal component space.
            </summary>
            
            <param name="data">The matrix to be projected. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="dimensions">The number of components to use in the transformation.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Transform(System.Double[][],System.Int32)">
            <summary>
              Projects a given matrix into the principal component space.
            </summary>
            
            <param name="data">The matrix to be projected. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="dimensions">The number of components to use in the transformation.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Revert(System.Double[0:,0:])">
            <summary>
              Reverts a set of projected data into it's original form. Complete reverse
              transformation is not always possible and is not even guaranteed to exist.
            </summary>
            
            <remarks>
              This method works using a closed-form MDS approach as suggested by
              Kwok and Tsang. It is currently a direct implementation of the algorithm
              without any kind of optimization.
              
              Reference:
              - http://cmp.felk.cvut.cz/cmp/software/stprtool/manual/kernels/preimage/list/rbfpreimg3.html
            </remarks>
            
            <param name="data">The kpca-transformed data.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Revert(System.Double[0:,0:],System.Int32)">
            <summary>
              Reverts a set of projected data into it's original form. Complete reverse
              transformation is not always possible and is not even guaranteed to exist.
            </summary>
            
            <remarks>
            <para>
              This method works using a closed-form MDS approach as suggested by
              Kwok and Tsang. It is currently a direct implementation of the algorithm
              without any kind of optimization.
            </para>
            <para>
              Reference:
              - http://cmp.felk.cvut.cz/cmp/software/stprtool/manual/kernels/preimage/list/rbfpreimg3.html
            </para>
            </remarks>
            
            <param name="data">The kpca-transformed data.</param>
            <param name="neighbors">The number of nearest neighbors to use while constructing the pre-image.</param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Kernel">
            <summary>
              Gets the Kernel used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Center">
            <summary>
              Gets or sets whether the points should be centered in feature space.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Threshold">
            <summary>
              Gets or sets the minimum variance proportion needed to keep a
              principal component. If set to zero, all components will be
              kept. Default is 0.001 (all components which contribute less
              than 0.001 to the variance in the data will be discarded).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.DiscriminantAnalysisClass">
            <summary>
              Represents a class found during Discriminant Analysis, allowing it to
              be bound to controls like the DataGridView.
              
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DiscriminantAnalysisClass.#ctor(Accord.Statistics.Analysis.LinearDiscriminantAnalysis,System.Int32,System.Int32)">
            <summary>
              Creates a new Class representation
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DiscriminantAnalysisClass.DiscriminantFunction(System.Double[])">
            <summary>
              Discriminant function for the class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Index">
            <summary>
              Gets the Index of this class on the original analysis collection.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Number">
            <summary>
              Gets the number labeling this class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Prevalence">
            <summary>
              Gets the prevalence of the class on the original data set.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Mean">
            <summary>
              Gets the class' mean vector.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.ProjectionMean">
            <summary>
              Gets the feature-space means of the projected data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.StandardDeviation">
            <summary>
              Gets the class' standard deviation vector.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Scatter">
            <summary>
              Gets the Scatter matrix for this class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Indices">
            <summary>
              Gets the indices of the rows in the original data which belong to this class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Subset">
            <summary>
              Gets the subset of the original data spawned by this class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Count">
            <summary>
              Gets the number of observations inside this class.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.Discriminant">
            <summary>
            <para>
              Represents a discriminant factor found during Discriminant Analysis,
              allowing it to be bound to controls like the DataGridView.</para>
            <para>
              This class cannot be instantiated.</para>  
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.Discriminant.#ctor(Accord.Statistics.Analysis.LinearDiscriminantAnalysis,System.Int32)">
            <summary>
              Creates a new discriminant factor representation.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.Discriminant.Index">
            <summary>
              Gets the index of this discriminant factor
              on the original analysis collection.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.Discriminant.Eigenvector">
            <summary>
              Gets the Eigenvector for this discriminant factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.Discriminant.Eigenvalue">
            <summary>
              Gets the Eigenvalue for this discriminant factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.Discriminant.Proportion">
            <summary>
              Gets the proportion, or amount of information explained by this discriminant factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.Discriminant.CumulativeProportion">
            <summary>
              Gets the cumulative proportion of all discriminant factors until this factor.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.DiscriminantCollection">
            <summary>
            <para>
              Represents a collection of Discriminants factors found in the Discriminant Analysis.</para>
            <para>
              This class cannot be instantiated.</para>
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.DiscriminantAnalysisClassCollection">
            <summary>
            <para>
              Represents a collection of classes found in the Discriminant Analysis.</para>
            <para>
              This class cannot be instantiated.</para>  
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.LogisticRegressionAnalysis">
            <summary>
              Logistic Regression Analysis.
            </summary>
            
            <remarks>
            <para>
              The Logistic Regression Analysis tries to extract useful
              information about a logistic regression model. </para>
              
            <para>
              This class can also be bound to standard controls such as the 
              <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx">DataGridView</a>
              by setting their DataSource property to the analysis' <see cref="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Coefficients"/> property.</para>
            
            <para>
              References:
              <list type="bullet">
                <item><description>
                  E. F. Connor. Logistic Regression. Available on:
                  http://userwww.sfsu.edu/~efc/classes/biol710/logistic/logisticreg.htm </description></item>
                <item><description>
                  C. Shalizi. Logistic Regression and Newton's Method. Lecture notes. Available on:
                  http://www.stat.cmu.edu/~cshalizi/350/lectures/26/lecture-26.pdf </description></item>
                <item><description>
                  A. Storkey. Learning from Data: Learning Logistic Regressors. Available on:
                  http://www.inf.ed.ac.uk/teaching/courses/lfd/lectures/logisticlearn-print.pdf </description></item>
              </list></para>  
            </remarks>
            
            <example>
            <para>
              The following example shows to create a Logistic regresion analysis using a full
              dataset composed of input vectors and a binary output vector. Each input vector
              has an associated label (1 or 0) in the output vector, where 1 represents a positive
              label (yes, or true) and 0 represents a negative label (no, or false).</para>
              
            <code>
            // Suppose we have the following data about some patients.
            // The first variable is continuous and represent patient
            // age. The second variable is dichotomic and give whether
            // they smoke or not (this is completely fictional data).
            
            double[][] inputs =
            {
                //            Age  Smoking
                new double[] { 55,    0   }, 
                new double[] { 28,    0   }, 
                new double[] { 65,    1   }, 
                new double[] { 46,    0   }, 
                new double[] { 86,    1   }, 
                new double[] { 56,    1   }, 
                new double[] { 85,    0   }, 
                new double[] { 33,    0   }, 
                new double[] { 21,    1   }, 
                new double[] { 42,    1   }, 
            };
            
            // Additionally, we also have information about whether
            // or not they those patients had lung cancer. The array
            // below gives 0 for those who did not, and 1 for those
            // who did.
            
            double[] output =
            {
                0, 0, 0, 1, 1, 1, 0, 0, 0, 1
            };
            
            // Create a Logistic Regression analysis
            var regression = new LogisticRegressionAnalysis(inputs, output);
            
            regression.Compute(); // compute the analysis.
            
            // Now we can show a summary of analysis
            DataGridBox.Show(regression.Coefficients);
            </code>
            
            <para>
              The resulting table is shown below.</para>
              <img src="..\images\logistic-regression.png"/>
            
            <code>
            // We can also investigate all parameters individually. For
            // example the coefficients values will be available at the
            // vector
                        
            double[] coef = regression.CoefficientValues;
            
            // The first value refers to the model's intercept term. We
            // can also retrieve the odds ratios and standard errors:
            
            double[] odds = regression.OddsRatios;
            double[] stde = regression.StandardErrors;
            
                        
            // Finally, we can also use the analysis to classify a new patient
            double y = regression.Regression.Compute(new double[] { 87, 1 });
                        
            // For those inputs, the answer probability is approximately 75%.
            </code>
            
            <para>
              The analysis can also be created from data given in a summary form. Instead of having
              one input vector associated with one positive or negative label, each input vector is
              associated with the proportion of positive to negative labels in the original dataset.
            </para>
            
            <code>
            // Suppose we have a (fictitious) data set about patients who 
            // underwent cardiac surgery. The first column gives the number
            // of arterial bypasses performed during the surgery. The second
            // column gives the number of patients whose surgery went well,
            // while the third column gives the number of patients who had
            // at least one complication during the surgery.
            // 
            int[,] data =
            {
                // # of stents       success     complications
                {       1,             140,           45       },
                {       2,             130,           60       },
                {       3,             150,           31       },
                {       4,              96,           65       }
            };
            
            
            double[][] inputs = data.GetColumn(0).ToDouble().ToArray();
            
            int[] positive = data.GetColumn(1);
            int[] negative = data.GetColumn(2);
            
            // Create a new Logistic Regression Analysis from the summary data
            var regression = LogisticRegressionAnalysis.FromSummary(inputs, positive, negative);
            
            regression.Compute(); // compute the analysis.
            
            // Now we can show a summary of the analysis
            DataGridBox.Show(regression.Coefficients);
            
            
            // We can also investigate all parameters individually. For
            // example the coefficients values will be available at the
            // vector
            
            double[] coef = regression.CoefficientValues;
            
            // The first value refers to the model's intercept term. We
            // can also retrieve the odds ratios and standard errors:
            
            double[] odds = regression.OddsRatios;
            double[] stde = regression.StandardErrors;
            
            
            // Finally, we can use it to estimate risk for a new patient
            double y = regression.Regression.Compute(new double[] { 4 });
            </code>
              
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.#ctor(System.Double[][],System.Double[])">
            <summary>
              Constructs a Logistic Regression Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output data for the analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.#ctor(System.Double[][],System.Double[],System.Double[])">
            <summary>
              Constructs a Logistic Regression Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output data for the analysis.</param>
            <param name="weights">The weights associated with each input vector.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.#ctor(System.Double[][],System.Double[],System.String[],System.String)">
            <summary>
              Constructs a Logistic Regression Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output, binary data for the analysis.</param>
            <param name="inputNames">The names of the input variables.</param>
            <param name="outputName">The name of the output variable.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.#ctor(System.Double[][],System.Double[],System.Double[],System.String[],System.String)">
            <summary>
              Constructs a Logistic Regression Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output, binary data for the analysis.</param>
            <param name="inputNames">The names of the input variables.</param>
            <param name="outputName">The name of the output variable.</param>
            <param name="weights">The weights associated with each input vector.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.GetLikelihoodRatio(Accord.Statistics.Models.Regression.GeneralizedLinearRegression)">
            <summary>
              Gets the Log-Likelihood Ratio between this model and another model.
            </summary>
            
            <param name="model">Another logistic regression model.</param>
            <returns>The Likelihood-Ratio between the two models.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Compute">
            <summary>
              Computes the Logistic Regression Analysis.
            </summary>
            
            <remarks>
              The likelihood surface for the logistic regression learning 
              is convex, so there will be only one peak. Any local maxima 
              will be also a global maxima.
            </remarks>
            
            <returns>
              True if the model converged, false otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Compute(Accord.Statistics.Models.Regression.LogisticRegression)">
            <summary>
              Computes the Logistic Regression Analysis for an already computed regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Compute(System.Double,System.Int32)">
            <summary>
              Computes the Logistic Regression Analysis.
            </summary>
            
            <remarks>The likelihood surface for the
              logistic regression learning is convex, so there will be only one
              peak. Any local maxima will be also a global maxima.
            </remarks>
            
            <param name="limit">
              The difference between two iterations of the regression algorithm
              when the algorithm should stop. If not specified, the value of
              1e-5 will be used. The difference is calculated based on the largest
              absolute parameter change of the regression.
            </param>
            
            <param name="maxIterations">
              The maximum number of iterations to be performed by the regression
              algorithm.
            </param>
            
            <returns>
              True if the model converged, false otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.FromSummary(System.Double[][],System.Int32[],System.Int32[])">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Analysis.LogisticRegressionAnalysis"/> from summarized data.
              In summary data, instead of having a set of inputs and their associated outputs,
              we have the number of times an input vector had a positive label in the data set
              and how many times it had a negative label.
            </summary>
            
            <param name="data">The input data.</param>
            <param name="positives">The number of positives labels for each input vector.</param>
            <param name="negatives">The number of negative labels for each input vector.</param>
            
            <returns>
              A <see cref="T:Accord.Statistics.Analysis.LogisticRegressionAnalysis"/> created from the given summary data.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Accord#Statistics#Analysis#IAnalysis#Compute">
            <summary>
              Computes the analysis using given source data and parameters.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Iterations">
            <summary>
              Gets or sets the maximum number of iterations to be
              performed by the regression algorithm. Default is 50.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Tolerance">
            <summary>
              Gets or sets the difference between two iterations of the regression 
              algorithm when the algorithm should stop. The difference is calculated
              based on the largest absolute parameter change of the regression. Default
              is 1e-5.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Regularization">
            <summary>
              Gets or sets the regularization value to be
              added in the objective function. Default is
              1e-10.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Source">
            <summary>
              Gets the source matrix from which the analysis was run.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Array">
            <summary>
              Gets the source matrix from which the analysis was run.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Outputs">
            <summary>
              Gets the dependent variable value
              for each of the source input points.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Result">
            <summary>
              Gets the resulting probabilities obtained
              by the logistic regression model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Weights">
            <summary>
              Gets the sample weight associated with each input vector.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Regression">
            <summary>
              Gets the Logistic Regression model created
              and evaluated by this analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Coefficients">
            <summary>
              Gets the collection of coefficients of the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.LogLikelihood">
            <summary>
              Gets the Log-Likelihood for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.ChiSquare">
            <summary>
              Gets the Chi-Square (Likelihood Ratio) Test for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Deviance">
            <summary>
              Gets the Deviance of the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Inputs">
            <summary>
              Gets the name of the input variables for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Output">
            <summary>
              Gets the name of the output variable for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.OddsRatios">
            <summary>
              Gets the Odds Ratio for each coefficient
              found during the logistic regression.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.StandardErrors">
            <summary>
              Gets the Standard Error for each coefficient
              found during the logistic regression.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.WaldTests">
            <summary>
              Gets the Wald Tests for each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.LikelihoodRatioTests">
            <summary>
              Gets the Likelihood-Ratio Tests for each coefficient.
            </summary>
            
            <remarks>
              Since this operation might be potentially time-consuming, the likelihood-ratio
              tests will be computed on the first time this property is acessed.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.CoefficientValues">
            <summary>
              Gets the value of each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Confidences">
            <summary>
              Gets the 95% Confidence Intervals (C.I.)
              for each coefficient found in the regression.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.LogisticCoefficient">
            <summary>
              Represents a Logistic Regression Coefficient found in the Logistic Regression,
              allowing it to be bound to controls like the DataGridView. This class cannot
              be instantiated outside the <see cref="T:Accord.Statistics.Analysis.LogisticRegressionAnalysis"/>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticCoefficient.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.Name">
            <summary>
              Gets the name for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.OddsRatio">
            <summary>
              Gets the Odds ratio for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.StandardError">
            <summary>
              Gets the Standard Error for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.Confidence">
            <summary>
              Gets the 95% confidence interval (C.I.) for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.ConfidenceUpper">
            <summary>
              Gets the upper limit for the 95% confidence interval.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.ConfidenceLower">
            <summary>
              Gets the lower limit for the 95% confidence interval.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.Value">
            <summary>
              Gets the coefficient value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.Wald">
            <summary>
              Gets the Wald's test performed for this coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.LikelihoodRatio">
            <summary>
              Gets the Likelihood-Ratio test performed for this coefficient.
            </summary>
            
            <remarks>
              Since this operation might be potentially time-consuming, the likelihood-ratio
              tests will be computed on the first time this property is acessed.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.LogisticCoefficientCollection">
            <summary>
              Represents a collection of Logistic Coefficients found in the
              <see cref="T:Accord.Statistics.Analysis.LogisticRegressionAnalysis"/>. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.PartialLeastSquaresAlgorithm">
            <summary>
              The PLS algorithm to use in the Partial Least Squares Analysis.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Analysis.PartialLeastSquaresAlgorithm.SIMPLS">
            <summary>
              Sijmen de Jong's SIMPLS algorithm.
            </summary>
            <remarks>
              The SIMPLS algorithm is considerably faster than NIPALS, especially when the number of
              input variables increases; but gives slightly different results in the case of multiple
              outputs.
            </remarks>
            
        </member>
        <member name="F:Accord.Statistics.Analysis.PartialLeastSquaresAlgorithm.NIPALS">
            <summary>
              Traditional NIPALS algorithm.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis">
             <summary>
               Partial Least Squares Regression/Analysis (a.k.a Projection To Latent Structures)
             </summary>
             
             <remarks>
             <para>
               Partial least squares regression (PLS-regression) is a statistical method that bears
               some relation to principal components regression; instead of finding hyperplanes of 
               maximum variance between the response and independent variables, it finds a linear 
               regression model by projecting the predicted variables and the observable variables 
               to a new space. Because both the X and Y data are projected to new spaces, the PLS 
               family of methods are known as bilinear factor models.</para>
            
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Abdi, H. (2010). Partial least square regression, projection on latent structure regression,
                   PLS-Regression. Wiley Interdisciplinary Reviews: Computational Statistics, 2, 97-106. 
                   Available in: http://www.utdallas.edu/~herve/abdi-wireCS-PLS2010.pdf </description></item>
                 <item><description>
                   Abdi, H. (2007). Partial least square regression (PLS regression). In N.J. Salkind (Ed.):
                   Encyclopedia of Measurement and Statistics. Thousand Oaks (CA): Sage. pp. 740-744.
                   Resource available online in: http://www.utdallas.edu/~herve/Abdi-PLS-pretty.pdf </description></item>
                 <item><description>
                   Martin Anderson, "A comparison of nine PLS1 algorithms". Available on:
                   http://onlinelibrary.wiley.com/doi/10.1002/cem.1248/pdf </description></item>
                 <item><description>
                   Mevik, B-H. Wehrens, R. (2007). The pls Package: Principal Component and Partial Least Squares
                   Regression in R. Journal of Statistical Software, Volume 18, Issue 2.
                   Resource available online in: http://www.jstatsoft.org/v18/i02/paper </description></item>
                 <item><description>
                   Garson, D. Partial Least Squares Regression (PLS).
                   http://faculty.chass.ncsu.edu/garson/PA765/pls.htm </description></item>
                 <item><description>
                   De Jong, S. (1993). SIMPLS: an alternative approach to partial least squares regression.
                   Chemometrics and Intelligent Laboratory Systems, 18: 251–263.
                   http://dx.doi.org/10.1016/0169-7439(93)85002-X </description></item>
                 <item><description>
                   Rosipal, Roman and Nicole Kramer. (2006). Overview and Recent Advances in Partial Least
                   Squares, in Subspace, Latent Structure and Feature Selection Techniques, pp 34–51.
                   http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.85.7735 </description></item>
                 <item><description>
                   Yi Cao. (2008). Partial Least-Squares and Discriminant Analysis: A tutorial and tool
                   using PLS for discriminant analysis.</description></item>
                 <item><description>
                   Wikipedia contributors. Partial least squares regression. Wikipedia, The Free Encyclopedia;
                   2009. Available from: http://en.wikipedia.org/wiki/Partial_least_squares_regression. </description></item>
               </list></para>   
             </remarks>
            
             <example>
               <code>
               // Following the small example by Hervé Abdi (Hervé Abdi, Partial Least Square Regression),
               // we will create a simple example where the goal is to predict the subjective evaluation of
               // a set of 5 wines. The dependent variables that we want to predict for each wine are its 
               // likeability, and how well it goes with meat, or dessert (as rated by a panel of experts).
               // The predictors are the price, the sugar, alcohol, and acidity content of each wine.
             
             
               // Here we will list the inputs, or characteristics we would like to use in order to infer
               // information from our wines. Each row denotes a different wine and lists its corresponding
               // observable characteristics. The inputs are usually denoted by X in the PLS literature.
             
               double[,] inputs = 
               {
                   // Wine | Price | Sugar | Alcohol | Acidity
                   {           7,     7,      13,        7     },
                   {           4,     3,      14,        7     },
                   {          10,     5,      12,        5     },
                   {          16,     7,      11,        3     },
                   {          13,     3,      10,        3     },
                };
             
             
                // Here we will list our dependent variables. Dependent variables are the outputs, or what we
                // would like to infer or predict from our available data, given a new observation. The outputs
                // are usually denoted as Y in the PLS literature.
             
                double[,] outputs = 
                {
                    // Wine | Hedonic | Goes with meat | Goes with dessert
                    {           14,          7,                 8         },
                    {           10,          7,                 6         },
                    {            8,          5,                 5         },
                    {            2,          4,                 7         },
                    {            6,          2,                 4         },
                };
             
             
                // Next, we will create our Partial Least Squares Analysis passing the inputs (values for 
                // predictor variables) and the associated outputs (values for dependent variables).
                         
                // We will also be using the using the Covariance Matrix/Center method (data will only
                // be mean centered but not normalized) and the SIMPLS algorithm. 
                PartialLeastSquaresAnalysis pls = new PartialLeastSquaresAnalysis(inputs, outputs,
                    AnalysisMethod.Center, PartialLeastSquaresAlgorithm.SIMPLS);
             
                // Compute the analysis with all factors. The number of factors
                // could also have been specified in a overload of this method.
             
                pls.Compute();
             
                // After computing the analysis, we can create a linear regression model in order
                // to predict new variables. To do that, we may call the CreateRegression() method.
             
                MultivariateLinearRegression regression = pls.CreateRegression();
             
                // After the regression has been created, we will be able to classify new instances. 
                // For example, we will compute the outputs for the first input sample:
             
                double[] y = regression.Compute(new double[] { 7, 7, 13, 7 });
             
                // The y output will be very close to the corresponding output used as reference.
                // In this case, y is a vector of length 3 with values { 13.98, 7.00, 7.75 }.
                </code>
             </example>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.#ctor(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
              Constructs a new Partial Least Squares Analysis.
            </summary>
            
            <param name="inputs">The input source data to perform analysis.</param>
            <param name="outputs">The output source data to perform analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.#ctor(System.Double[0:,0:],System.Double[0:,0:],Accord.Statistics.Analysis.PartialLeastSquaresAlgorithm)">
            <summary>
              Constructs a new Partial Least Squares Analysis.
            </summary>
            
            <param name="inputs">The input source data to perform analysis.</param>
            <param name="outputs">The output source data to perform analysis.</param>
            <param name="algorithm">The PLS algorithm to use in the analysis. Default is <see cref="F:Accord.Statistics.Analysis.PartialLeastSquaresAlgorithm.NIPALS"/>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.#ctor(System.Double[0:,0:],System.Double[0:,0:],Accord.Statistics.Analysis.AnalysisMethod,Accord.Statistics.Analysis.PartialLeastSquaresAlgorithm)">
            <summary>
              Constructs a new Partial Least Squares Analysis.
            </summary>
            
            <param name="inputs">The input source data to perform analysis.</param>
            <param name="outputs">The output source data to perform analysis.</param>
            <param name="method">The analysis method to perform. Default is <see cref="F:Accord.Statistics.Analysis.AnalysisMethod.Center"/>.</param>
            <param name="algorithm">The PLS algorithm to use in the analysis. Default is <see cref="F:Accord.Statistics.Analysis.PartialLeastSquaresAlgorithm.NIPALS"/>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Compute">
            <summary>
              Computes the Partial Least Squares Analysis.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Compute(System.Int32)">
            <summary>
              Computes the Partial Least Squares Analysis.
            </summary>
            <param name="factors">
              The number of factors to compute. The number of factors
              should be a value between 1 and min(rows-1,cols) where
              rows and columns are the number of observations and
              variables in the input source data matrix. </param>
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Transform(System.Double[0:,0:])">
            <summary>
              Projects a given set of inputs into latent space.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Transform(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects a given set of inputs into latent space.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.TransformOutput(System.Double[0:,0:])">
            <summary>
              Projects a given set of outputs into latent space.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.TransformOutput(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects a given set of outputs into latent space.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.CreateRegression">
            <summary>
              Creates a Multivariate Linear Regression model using
              coefficients obtained by the Partial Least Squares.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.CreateRegression(System.Int32)">
            <summary>
              Creates a Multivariate Linear Regression model using
              coefficients obtained by the Partial Least Squares.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.nipals(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Double)">
            <summary>
              Computes PLS parameters using NIPALS algorithm.
            </summary>
            
            <param name="factors">The number of factors to compute.</param>
            <param name="inputsX">The mean-centered (<see cref="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Adjust(System.Double[0:,0:],System.Double[],System.Double[],System.Boolean)">adjusted</see>) input values X.</param>
            <param name="outputsY">The mean-centered (<see cref="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Adjust(System.Double[0:,0:],System.Double[],System.Double[],System.Boolean)">adjusted</see>) output values Y.</param>
            <param name="tolerance">The tolerance for convergence.</param>
            
            <remarks>
            <para>
              The algorithm implementation follows the original paper by Hervé
              Abdi, with overall structure as suggested in Yi Cao's tutorial.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Abdi, H. (2010). Partial least square regression, projection on latent structure regression,
                  PLS-Regression. Wiley Interdisciplinary Reviews: Computational Statistics, 2, 97-106. 
                  Available in: http://www.utdallas.edu/~herve/abdi-wireCS-PLS2010.pdf </description></item>
                <item><description>
                  Yi Cao. (2008). Partial Least-Squares and Discriminant Analysis: A tutorial and tool
                  using PLS for discriminant analysis.</description></item>
               </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.simpls(System.Double[0:,0:],System.Double[0:,0:],System.Int32)">
             <summary>
               Computes PLS parameters using SIMPLS algorithm.
             </summary>
             
             <param name="factors">The number of factors to compute.</param>
             <param name="inputsX">The mean-centered (<see cref="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Adjust(System.Double[0:,0:],System.Double[],System.Double[],System.Boolean)">adjusted</see>) input values X.</param>
             <param name="outputsY">The mean-centered (<see cref="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Adjust(System.Double[0:,0:],System.Double[],System.Double[],System.Boolean)">adjusted</see>) output values Y.</param>
            
             <remarks>
             <para>
               The algorithm implementation is based on the appendix code by Martin Anderson,
               with modifications for multiple output variables as given in the sources listed
               below.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Martin Anderson, "A comparison of nine PLS1 algorithms". Available on:
                   http://onlinelibrary.wiley.com/doi/10.1002/cem.1248/pdf </description></item>
                 <item><description>
                   Abdi, H. (2010). Partial least square regression, projection on latent structure regression,
                   PLS-Regression. Wiley Interdisciplinary Reviews: Computational Statistics, 2, 97-106. 
                   Available from: http://www.utdallas.edu/~herve/abdi-wireCS-PLS2010.pdf </description></item>
                 <item><description>
                   StatSoft, Inc. (2012). Electronic Statistics Textbook: Partial Least Squares (PLS).
                   Tulsa, OK: StatSoft. Available from: http://www.statsoft.com/textbook/partial-least-squares/#SIMPLS
             </description></item>
                 <item><description>
                   De Jong, S. (1993). SIMPLS: an alternative approach to partial least squares regression.
                   Chemometrics and Intelligent Laboratory Systems, 18: 251–263.
                   http://dx.doi.org/10.1016/0169-7439(93)85002-X </description></item>
                </list></para>
             </remarks>
             
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Adjust(System.Double[0:,0:],System.Double[],System.Double[],System.Boolean)">
            <summary>
              Adjusts a data matrix, centering and standardizing its values
              using the already computed column's means and standard deviations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.largest(System.Double[0:,0:])">
            <summary>
              Returns the index for the column with largest squared sum.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.ComputeVariableImportanceInProjection(System.Int32)">
            <summary>
              Computes the variable importance in projection (VIP).
            </summary>
            
            <returns>
              A predictor factors matrix in which each row represents
              the importance of the variable in a projection considering
              the number of factors indicated by the column's index.
            </returns>
            
            <remarks>
              References:
              <list type="bullet">
                <item><description>
                 Il-Gyo Chong, Chi-Hyuck Jun, Performance of some variable selection methods
                 when multicollinearity is present, Chemometrics and Intelligent Laboratory 
                 Systems, Volume 78, Issues 1-2, 28 July 2005, Pages 103-112, ISSN 0169-7439,
                 DOI: 10.1016/j.chemolab.2004.12.011.</description></item></list>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Source">
            <summary>
              Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Output">
            <summary>
              Gets the dependent variables' values
              for each of the source input points.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Predictors">
            <summary>
              Gets information about independent (input) variables.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Dependents">
            <summary>
              Gets information about dependent (output) variables.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Weights">
            <summary>
              Gets the Weight matrix obtained during the analysis. For the NIPALS algorithm
              this is the W matrix. For the SIMPLS algorithm this is the R matrix.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Factors">
            <summary>
              Gets information about the factors discovered during the analysis in a
              object-oriented structure which can be data-bound directly to many controls.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Algorithm">
            <summary>
              Gets the PLS algorithm used by the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Method">
            <summary>
              Gets the method used by this analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Importance">
            <summary>
              Gets the Variable Importance in Projection (VIP).
            </summary>
            <remarks>
              This method has been implemented considering only PLS
              models fitted using the NIPALS algorithm containing a
              single response (output) variable.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Overwrite">
            <summary>
              Gets or sets whether calculations will be performed overwriting
              data in the original source matrix, using less memory.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.PartialLeastSquaresFactor">
            <summary>
              Represents a Partial Least Squares Factor found in the Partial Least Squares
              Analysis, allowing it to be directly bound to controls like the DataGridView.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresFactor.#ctor(Accord.Statistics.Analysis.PartialLeastSquaresAnalysis,System.Int32)">
            <summary>
              Creates a partial least squares factor representation.
            </summary>
            
            <param name="analysis">The analysis to which this component belongs.</param>
            <param name="index">The component index.</param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.Index">
            <summary>
              Gets the Index of this component on the original factor collection.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.Analysis">
            <summary>
              Returns a reference to the parent analysis object.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.PredictorProportion">
            <summary>
              Gets the proportion of prediction variables
              variance explained by this factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.PredictorCumulativeProportion">
            <summary>
              Gets the cumulative proportion of dependent variables
              variance explained by this factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.DependentProportion">
            <summary>
              Gets the proportion of dependent variable
              variance explained by this factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.DependentCumulativeProportion">
            <summary>
              Gets the cumulative proportion of dependent variable
              variance explained by this factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.IndependentLatentVectors">
            <summary>
              Gets the input variable's latent vectors for this factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.DependentLatentVector">
            <summary>
              Gets the output variable's latent vectors for this factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.VariableImportance">
            <summary>
              Gets the importance of each variable for the given component.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.Accord#Statistics#Analysis#IAnalysisComponent#Proportion">
            <summary>
              Gets the proportion, or amount of information explained by this component.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.Accord#Statistics#Analysis#IAnalysisComponent#CumulativeProportion">
            <summary>
              Gets the cumulative proportion of all discriminants until this component.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.PartialLeastSquaresFactorCollection">
            <summary>
              Represents a Collection of Partial Least Squares Factors found in
              the Partial Least Squares Analysis. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.PartialLeastSquaresVariables">
            <summary>
              Represents source variables used in Partial Least Squares Analysis. Can represent either
              input variables (predictor variables) or output variables (independent variables or regressors).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresVariables.Transform(System.Double[0:,0:])">
            <summary>
              Projects a given dataset into latent space. Can be either input variable's
              latent space or output variable's latent space, depending if the variables
              chosen are predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresVariables.Transform(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects a given dataset into latent space. Can be either input variable's
              latent space or output variable's latent space, depending if the variables
              chosen are predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.Source">
            <summary>
              Source data used in the analysis. Can be either input data
              or output data depending if the variables chosen are predictor
              variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.Result">
            <summary>
              Gets the resulting projection (scores) of the source data
              into latent space. Can be either from input data or output
              data depending if the variables chosen are predictor variables
              or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.Means">
            <summary>
              Gets the column means of the source data. Can be either from
              input data or output data, depending if the variables chosen
              are predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.StandardDeviations">
            <summary>
              Gets the column standard deviations of the source data. Can be either 
              from input data or output data, depending if the variables chosen are
              predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.FactorMatrix">
            <summary>
              Gets the loadings (a.k.a factors or components) for the 
              variables obtained during the analysis. Can be either from
              input data or output data, depending if the variables chosen
              are predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.FactorProportions">
            <summary>
              Gets the amount of variance explained by each latent factor.
              Can be either by input variables' latent factors or output
              variables' latent factors, depending if the variables chosen
              are predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.CumulativeProportions">
            <summary>
              Gets the cumulative variance explained by each latent factor.
              Can be either by input variables' latent factors or output
              variables' latent factors, depending if the variables chosen
              are predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.PrincipalComponent">
            <summary>
            <para>
              Represents a Principal Component found in the Principal Component Analysis,
              allowing it to be bound to controls like the DataGridView. </para>
            <para>
              This class cannot be instantiated.</para>   
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponent.#ctor(Accord.Statistics.Analysis.PrincipalComponentAnalysis,System.Int32)">
            <summary>
              Creates a principal component representation.
            </summary>
            
            <param name="analysis">The analysis to which this component belongs.</param>
            <param name="index">The component index.</param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.Index">
            <summary>
              Gets the Index of this component on the original analysis principal component collection.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.Analysis">
            <summary>
              Returns a reference to the parent analysis object.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.Proportion">
            <summary>
              Gets the proportion of data this component represents.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.CumulativeProportion">
            <summary>
              Gets the cumulative proportion of data this component represents.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.SingularValue">
            <summary>
              If available, gets the Singular Value of this component found during the Analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.Eigenvalue">
            <summary>
              Gets the Eigenvalue of this component found during the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.Eigenvector">
            <summary>
              Gets the Eigenvector of this component.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.PrincipalComponentCollection">
            <summary>
              Represents a Collection of Principal Components found in the 
              <see cref="T:Accord.Statistics.Analysis.PrincipalComponentAnalysis"/>. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.RocAreaMethod">
            <summary>
              Methods for computing the area under <see cref="T:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic">
              Receiver-Operating Characteristic</see> (ROC) curves (also known as the ROC AUC).
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Analysis.RocAreaMethod.DeLong">
            <summary>
              Method of DeLong, E. R., D. M. DeLong, and D. L. Clarke-Pearson. 1988. Comparing 
              the areas under two or more correlated receiver operating characteristic curves:
              a nonparametric approach. Biometrics 44:837–845.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Analysis.RocAreaMethod.HanleyMcNeil">
            <summary>
              Method of Hanley, J.A. and McNeil, B.J. 1983. A method of comparing the areas under
              receiver operating characteristic curves derived from the same cases. Radiology 148:839-843.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic">
            <summary>
              Receiver Operating Characteristic (ROC) Curve.
            </summary>
            
            <remarks>
            <para>
              In signal detection theory, a receiver operating characteristic (ROC), or simply
              ROC curve, is a graphical plot of the sensitivity vs. (1 − specificity) for a 
              binary classifier system as its discrimination threshold is varied. </para>
            <para>
              This package does not attempt to fit a curve to the obtained points. It just
              computes the area under the ROC curve directly using the trapezoidal rule.</para>  
            <para>
              Also note that the curve construction algorithm uses the convention that a 
              higher test value represents a positive for a condition while computing
              sensitivity and specificity values.</para>  
             
            <para>
              References: 
              <list type="bullet">
                <item><description>
                  Wikipedia, The Free Encyclopedia. Receiver Operating Characteristic. Available on:
                  http://en.wikipedia.org/wiki/Receiver_operating_characteristic </description></item>
                <item><description>
                  Anaesthesist. The magnificent ROC. Available on:
                  http://www.anaesthetist.com/mnm/stats/roc/Findex.htm </description></item>
              </list></para>
            </remarks>
            
            <example>
            <para>
              The following example shows how to measure the accuracy
              of a binary classifier using a ROC curve.</para>
            
            <code>
            // This example shows how to measure the accuracy of a 
            // binary classifier using a ROC curve. For this example,
            // we will be creating a Support Vector Machine trained
            // on the following training instances:
            
            double[][] inputs =
            {
                // Those are from class -1
                new double[] { 2, 4, 0 },
                new double[] { 5, 5, 1 },
                new double[] { 4, 5, 0 },
                new double[] { 2, 5, 5 },
                new double[] { 4, 5, 1 },
                new double[] { 4, 5, 0 },
                new double[] { 6, 2, 0 },
                new double[] { 4, 1, 0 },
            
                // Those are from class +1
                new double[] { 1, 4, 5 },
                new double[] { 7, 5, 1 },
                new double[] { 2, 6, 0 },
                new double[] { 7, 4, 7 },
                new double[] { 4, 5, 0 },
                new double[] { 6, 2, 9 },
                new double[] { 4, 1, 6 },
                new double[] { 7, 2, 9 },
            };
            
            int[] outputs =
            {
                -1, -1, -1, -1, -1, -1, -1, -1, // fist eight from class -1
                +1, +1, +1, +1, +1, +1, +1, +1  // last eight from class +1
            };
            
            // Next, we create a linear Support Vector Machine with 4 inputs
            SupportVectorMachine machine = new SupportVectorMachine(inputs: 3);
            
            // Create the sequential minimal optimization learning algorithm
            var smo = new SequentialMinimalOptimization(machine, inputs, outputs);
            
            // We learn the machine
            double error = smo.Run();
            
            // And then extract its predicted labels
            double[] predicted = new double[inputs.Length];
            for (int i = 0; i &lt; predicted.Length; i++)
                predicted[i] = machine.Compute(inputs[i]);
            
            // At this point, the output vector contains the labels which
            // should have been assigned by the machine, and the predicted
            // vector contains the labels which have been actually assigned.
            
            // Create a new ROC curve to assess the performance of the model
            var roc = new ReceiverOperatingCharacteristic(outputs, predicted);
            roc.Compute(100); // Compute a ROC curve with 100 cut-off points
            
            // Generate a connected scatter plot for the ROC curve and show it on-screen
            ScatterplotBox.Show(roc.GetScatterplot(includeRandom: true), nonBlocking: true)
            
                .SetSymbolSize(0)      // do not display data points
                .SetLinesVisible(true) // show lines connecting points
                .SetScaleTight(true)   // tighten the scale to points
                .WaitForClose();
            </code>
            
            <para>
              The resulting graph is shown below.</para>
              
            <img src="..\images\roc-curve.png" />
            
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.#ctor(System.Boolean[],System.Int32[])">
            <summary>
              Constructs a new Receiver Operating Characteristic model
            </summary>
            
            <param name="expected">
              An array of binary values. Typically represented as 0 and 1, or -1 and 1,
              indicating negative and positive cases, respectively. The maximum value
              will be treated as the positive case, and the lowest as the negative.</param>
            <param name="actual">
              An array of continuous values trying to approximate the measurement array.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.#ctor(System.Int32[],System.Double[])">
            <summary>
              Constructs a new Receiver Operating Characteristic model
            </summary>
            
            <param name="expected">
              An array of binary values. Typically represented as 0 and 1, or -1 and 1,
              indicating negative and positive cases, respectively. The maximum value
              will be treated as the positive case, and the lowest as the negative.</param>
            <param name="actual">
              An array of continuous values trying to approximate the measurement array.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.#ctor(System.Double[],System.Double[])">
            <summary>
              Constructs a new Receiver Operating Characteristic model
            </summary>
            
            <param name="expected">
              An array of binary values. Typically represented as 0 and 1, or -1 and 1,
              indicating negative and positive cases, respectively. The maximum value
              will be treated as the positive case, and the lowest as the negative.</param>
            <param name="actual">
              An array of continuous values trying to approximate the measurement array.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Compute(System.Int32)">
            <summary>
              Computes a n-points ROC curve.
            </summary>
            
            <remarks>
              Each point in the ROC curve will have a threshold increase of
              1/npoints over the previous point, starting at zero.
            </remarks>
            
            <param name="points">The number of points for the curve.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Compute(System.Double)">
            <summary>
              Computes a ROC curve with 1/increment points
            </summary>
            
            <param name="increment">The increment over the previous point for each point in the curve.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Compute(System.Double,System.Boolean)">
            <summary>
              Computes a ROC curve with 1/increment points
            </summary>
            
            <param name="increment">The increment over the previous point for each point in the curve.</param>
            <param name="forceOrigin">True to force the inclusion of the (0,0) point, false otherwise. Default is false.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Compute(System.Double[])">
            <summary>
              Computes a ROC curve with the given increment points
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.ComputePoint(System.Double)">
            <summary>
              Computes a single point of a ROC curve using the given cutoff value.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.GetScatterplot(System.Boolean)">
            <summary>
              Generates a <see cref="T:Accord.Statistics.Visualizations.Scatterplot"/> representing the ROC curve.
            </summary>
            
            <param name="includeRandom">
              True to include a plot of the random curve (a diagonal line
              going from lower left to upper right); false otherwise.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this curve.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this curve.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.calculateAreaUnderCurve">
            <summary>
              Calculates the area under the ROC curve using the trapezium method.
            </summary>
            <remarks>
              The area under a ROC curve can never be less than 0.50. If the area is first calculated as
              less than 0.50, the definition of abnormal will be reversed from a higher test value to a
              lower test value.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Save(System.IO.Stream)">
            <summary>
              Saves the curve to a stream.
            </summary>
            
            <param name="stream">The stream to which the curve is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Load(System.IO.Stream)">
            <summary>
              Loads a curve from a stream.
            </summary>
            
            <param name="stream">The stream from which the curve is to be deserialized.</param>
            
            <returns>The deserialized curve.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Load(System.String)">
            <summary>
              Loads a curve from a file.
            </summary>
            
            <param name="path">The path to the file from which the curve is to be deserialized.</param>
            
            <returns>The deserialized curve.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Save(System.String)">
            <summary>
              Saves the curve to a stream.
            </summary>
            
            <param name="path">The path to the file to which the curve is to be serialized.</param>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Points">
            <summary>
              Gets the points of the curve.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Positives">
            <summary>
              Gets the number of actual positive cases.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Negatives">
            <summary>
              Gets the number of actual negative cases.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Observations">
            <summary>
              Gets the number of cases (observations) being analyzed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Area">
            <summary>
              Gets the area under this curve (AUC).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.StandardError">
            <summary>
              Gets the standard error for the <see cref="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Area"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Variance">
            <summary>
              Gets the variance of the curve's <see cref="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Area"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Expected">
            <summary>
              Gets the ground truth values, or the values
              which should have been given by the test if
              it was perfect.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Actual">
            <summary>
              Gets the actual values given by the test.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.PositiveResults">
            <summary>
              Gets the actual test results for subjects 
              which should have been labeled as positive.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.NegativeResults">
            <summary>
              Gets the actual test results for subjects 
              which should have been labeled as negative.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.PositiveAccuracies">
            <summary>
              Gets DeLong's pseudoaccuracies for the <see cref="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.PositiveResults">positive subjects</see>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.NegativeAccuracies">
            <summary>
              Gets DeLong's pseudoaccuracies for the <see cref="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.NegativeResults">negative subjects</see>
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPoint">
            <summary>
              Object to hold information about a Receiver Operating Characteristic Curve Point
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPoint.#ctor(System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a new Receiver Operating Characteristic point.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPoint.ToString">
            <summary>
              Returns a System.String that represents the current ReceiverOperatingCharacteristicPoint.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPoint.Cutoff">
            <summary>
              Gets the cutoff value (discrimination threshold) for this point.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPointCollection">
            <summary>
              Represents a Collection of Receiver Operating Characteristic (ROC) Curve points.
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPointCollection.GetXYValues">
            <summary>
              Gets the (1-specificity, sensitivity) values as (x,y) coordinates.
            </summary>
            
            <returns>
              An jagged double array where each element is a double[] vector
              with two positions; the first is the value for 1-specificity (x)
              and the second the value for sensitivity (y).
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPointCollection.GetOneMinusSpecificity">
            <summary>
              Gets an array containing (1-specificity) 
              values for each point in the curve.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPointCollection.GetSensitivity">
            <summary>
              Gets an array containing (sensitivity) 
              values for each point in the curve.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPointCollection.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis">
            <summary>
              Backward Stepwise Logistic Regression Analysis.
            </summary>
            
            <remarks>
            <para>
              The Backward Stepwise regression is an exploratory analysis procedure,
              where the analysis begins with a full (saturated) model and at each step
              variables are eliminated from the model in a iterative fashion.</para>
            <para>
              Significance tests are performed after each removal to track which of
              the variables can be discarded safely without implying in degradation.
              When no more variables can be removed from the model without causing
              a significant loss in the model likelihood, the method can stop.</para>  
            </remarks>
            
            <example>
            <code>
            // Suppose we have the following data about some patients.
            // The first variable is continuous and represent patient
            // age. The second variable is dichotomic and give whether
            // they smoke or not (this is completely fictional data).
            
            double[][] inputs =
            {
                //            Age  Smoking
                new double[] { 55,    0   },  // 1
                new double[] { 28,    0   },  // 2
                new double[] { 65,    1   },  // 3
                new double[] { 46,    0   },  // 4
                new double[] { 86,    1   },  // 5
                new double[] { 56,    1   },  // 6
                new double[] { 85,    0   },  // 7
                new double[] { 33,    0   },  // 8
                new double[] { 21,    1   },  // 9
                new double[] { 42,    1   },  // 10
                new double[] { 33,    0   },  // 11
                new double[] { 20,    1   },  // 12
                new double[] { 43,    1   },  // 13
                new double[] { 31,    1   },  // 14
                new double[] { 22,    1   },  // 15
                new double[] { 43,    1   },  // 16
                new double[] { 46,    0   },  // 17
                new double[] { 86,    1   },  // 18
                new double[] { 56,    1   },  // 19
                new double[] { 55,    0   },  // 20
            };
            
            // Additionally, we also have information about whether
            // or not they those patients had lung cancer. The array
            // below gives 0 for those who did not, and 1 for those
            // who did.
            
            double[] output =
            {
                0, 0, 0, 1, 1, 1, 0, 0, 0, 1,
                0, 1, 1, 1, 1, 1, 0, 1, 1, 0
            };
            
            
            // Create a Stepwise Logistic Regression analysis
            var regression = new StepwiseLogisticRegressionAnalysis(inputs, output,
                new[] { "Age", "Smoking" }, "Cancer");
            
            regression.Compute(); // compute the analysis.
            
            // The full model will be stored in the complete property:
            StepwiseLogisticRegressionModel full = regression.Complete;
            
            // The best model will be stored in the current property:
            StepwiseLogisticRegressionModel best = regression.Current;
            
            // Let's check the full model results
            DataGridBox.Show(full.Coefficients); 
            
            // We can see only the Smoking variable is statistically significant.
            // This is an indication the Age variable could be discarded from
            // the model.
            
            // And check the best inner model result
            DataGridBox.Show(best.Coefficients);
            
            // This is the best nested model found. This model only has the 
            // Smoking variable, which is still significant. Since no other
            // variables can be dropped, this is the best final model.
            
            // The variables used in the current best model are
            string[] inputVariableNames = best.Inputs; // Smoking
            
            // The best model likelihood ratio p-value is
            ChiSquareTest test = best.ChiSquare; // {0.816990081334823}
            
            // so the model is distinguishable from a null model. We can also
            // query the other nested models by checking the Nested property:
            
            DataGridBox.Show(regression.Nested);
            
            // Finally, we can also use the analysis to classify a new patient
            double y = regression.Current.Regression.Compute(new double[] { 1 });
            
            // For a smoking person, the answer probability is approximately 83%.
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Analysis.LogisticRegressionAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.#ctor(System.Double[][],System.Double[])">
            <summary>
              Constructs a Stepwise Logistic Regression Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output data for the analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.#ctor(System.Double[][],System.Double[],System.String[],System.String)">
            <summary>
              Constructs a Stepwise Logistic Regression Analysis.
            </summary>
            
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output data for the analysis.</param>
            <param name="inputNames">The names for the input variables.</param>
            <param name="outputName">The name for the output variable.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Compute">
            <summary>
              Computes the Stepwise Logistic Regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.DoStep">
            <summary>
              Computes one step of the Stepwise Logistic Regression Analysis.
            </summary>
            <returns>
              Returns the index of the variable discarded in the step or -1
              in case no variable could be discarded.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.fit(Accord.Statistics.Models.Regression.LogisticRegression,System.Double[][],System.Double[])">
            <summary>
              Fits a logistic regression model to data until convergence.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Iterations">
            <summary>
              Gets or sets the maximum number of iterations to be
              performed by the regression algorithm. Default is 50.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Tolerance">
            <summary>
              Gets or sets the difference between two iterations of the regression 
              algorithm when the algorithm should stop. The difference is calculated
              based on the largest absolute parameter change of the regression. Default
              is 1e-5.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Source">
            <summary>
              Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Outputs">
            <summary>
              Gets the dependent variable value
              for each of the source input points.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Result">
            <summary>
              Gets the resulting probabilities obtained
              by the most likely logistic regression model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Current">
            <summary>
              Gets the current best nested model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Complete">
            <summary>
              Gets the full model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Nested">
            <summary>
              Gets the collection of nested models obtained after 
              a step of the backward stepwise procedure.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Inputs">
            <summary>
              Gets the name of the input variables.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Output">
            <summary>
              Gets the name of the output variables.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Threshold">
            <summary>
              Gets or sets the significance threshold used to
              determine if a nested model is significant or not.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Variables">
            <summary>
              Gets the final set of input variables indices
              as selected by the stepwise procedure.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel">
            <summary>
              Stepwise Logistic Regression Nested Model.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.#ctor(Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis,Accord.Statistics.Models.Regression.LogisticRegression,System.Int32[],Accord.Statistics.Testing.ChiSquareTest,Accord.Statistics.Testing.ChiSquareTest[])">
            <summary>
              Constructs a new Logistic regression model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.Coefficients">
            <summary>
              Gets information about the regression model
              coefficients in a object-oriented structure.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.Analysis">
            <summary>
              Gets the Stepwise Logistic Regression Analysis
              from which this model belongs to.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.Regression">
            <summary>
              Gets the regression model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.Variables">
            <summary>
              Gets the subset of the original variables used by the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.Names">
            <summary>
              Gets the name of the variables used in
              this model combined as a single string.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.ChiSquare">
            <summary>
              Gets the Chi-Square Likelihood Ratio test for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.Inputs">
            <summary>
              Gets the subset of the original variables used by the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.OddsRatios">
            <summary>
              Gets the Odds Ratio for each coefficient
              found during the logistic regression.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.StandardErrors">
            <summary>
              Gets the Standard Error for each coefficient
              found during the logistic regression.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.WaldTests">
            <summary>
              Gets the Wald Tests for each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.CoefficientValues">
            <summary>
              Gets the value of each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.Confidences">
            <summary>
              Gets the 95% Confidence Intervals (C.I.)
              for each coefficient found in the regression.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.LikelihoodRatioTests">
            <summary>
              Gets the Likelihood-Ratio Tests for each coefficient.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.StepwiseLogisticRegressionModelCollection">
            <summary>
              Stepwise Logistic Regression Nested Model collection.
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.NestedLogisticCoefficient">
            <summary>
              Represents a Logistic Regression Coefficient found in the Logistic Regression,
              allowing it to be bound to controls like the DataGridView. This class cannot
              be instantiated outside the <see cref="T:Accord.Statistics.Analysis.LogisticRegressionAnalysis"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.NestedLogisticCoefficient.Name">
            <summary>
              Gets the name for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.NestedLogisticCoefficient.OddsRatio">
            <summary>
              Gets the Odds ratio for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.NestedLogisticCoefficient.StandardError">
            <summary>
              Gets the Standard Error for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.NestedLogisticCoefficient.Confidence">
            <summary>
              Gets the 95% confidence interval (C.I.) for the current coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.NestedLogisticCoefficient.ConfidenceUpper">
            <summary>
              Gets the upper limit for the 95% confidence interval.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.NestedLogisticCoefficient.ConfidenceLower">
            <summary>
              Gets the lower limit for the 95% confidence interval.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.NestedLogisticCoefficient.Value">
            <summary>
              Gets the coefficient value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.NestedLogisticCoefficient.Wald">
            <summary>
              Gets the Wald's test performed for this coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.NestedLogisticCoefficient.LikelihoodRatio">
            <summary>
              Gets the Likelihood-Ratio test performed for this coefficient.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.NestedLogisticCoefficientCollection">
            <summary>
              Represents a collection of Logistic Coefficients found in the
              <see cref="T:Accord.Statistics.Analysis.LogisticRegressionAnalysis"/>. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Circular">
            <summary>
              Set of statistics functions operating over a circular space.
            </summary>
            
            <remarks>
              This class represents collection of common functions used in
              statistics. The values are handled as belonging to a distribution
              defined over a circle, such as the <see cref="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution"/>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Circular.ToRadians(System.Double[],System.Double,System.Boolean)">
            <summary>
              Transforms circular data into angles (normalizes the data to be between -PI and PI).
            </summary>
            
            <param name="samples">The samples to be transformed.</param>
            <param name="length">The maximum possible sample value (such as 24 for hour data).</param>
            <param name="inPlace">Whether to perform the transformation in place.</param>
            
            <returns>A double array containing the same data in <paramref name="samples"/>,
              but normalized between -PI and PI.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.ToRadians(System.Double,System.Double)">
            <summary>
              Transforms circular data into angles (normalizes the data to be between -PI and PI).
            </summary>
            
            <param name="sample">The sample to be transformed.</param>
            <param name="length">The maximum possible sample value (such as 24 for hour data).</param>
            
            <returns>The <paramref name="sample"/> normalized to be between -PI and PI.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.ToCircular(System.Double,System.Double,System.Boolean)">
            <summary>
              Transforms angular data back into circular data (reverts the
              <see cref="M:Accord.Statistics.Circular.ToRadians(System.Double[],System.Double,System.Boolean)"/> transformation.
            </summary>
            
            <param name="angle">The angle to be reconverted into the original unit.</param>
            <param name="length">The maximum possible sample value (such as 24 for hour data).</param>
            <param name="wrap">
              Whether range values should be wrapped to be contained in the circle. If 
              set to false, range values could be returned outside the [+pi;-pi] range.
            </param>
            
            <returns>The original before being converted.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Sum(System.Double[],System.Double@,System.Double@)">
            <summary>
              Computes the sum of cosines and sines for the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            
            <param name="cos">The sum of cosines, returned as an out parameter.</param>
            <param name="sin">The sum of sines, returned as an out parameter.</param>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Mean(System.Double[])">
            <summary>
              Computes the Mean direction of the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            
            <returns>The mean direction of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Mean(System.Double[],System.Double)">
            <summary>
              Computes the circular Mean direction of the given circular samples.
              The minimum possible value for a sample must be zero and the maximum must
              be indicated in the parameter <paramref name="length"/>.
            </summary>
            
            <param name="samples">A double array containing the circular samples.</param>
            <param name="length">The maximum possible value of the samples.</param>
            
            <returns>The circular Mean direction of the given samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Mean(System.Int32,System.Double,System.Double)">
            <summary>
              Computes the Mean direction of the given angles.
            </summary>
            
            <param name="samples">The number of samples.</param>
            <param name="cos">The sum of the cosines of the samples.</param>
            <param name="sin">The sum of the sines of the samples.</param>
            
            <returns>The mean direction of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Resultant(System.Double[])">
            <summary>
              Computes the mean resultant vector length (r) of the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            
            <returns>The mean resultant vector length of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Resultant(System.Double[],System.Double)">
            <summary>
              Computes the resultant vector length (r) of the given circular samples.
              The minimum possible value for a sample must be zero and the maximum must
              be indicated in the parameter <paramref name="length"/>.
            </summary>
            
            <param name="samples">A double array containing the circular samples.</param>
            <param name="length">The maximum possible value of the samples.</param>
            
            <returns>The mean resultant vector length of the given samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Resultant(System.Int32,System.Double,System.Double)">
            <summary>
              Computes the mean resultant vector length (r) of the given angles.
            </summary>
            
            <param name="samples">The number of samples.</param>
            <param name="cos">The sum of the cosines of the samples.</param>
            <param name="sin">The sum of the sines of the samples.</param>
            
            <returns>The mean resultant vector length of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Variance(System.Double[],System.Double)">
            <summary>
              Computes the circular variance of the given circular samples.
              The minimum possible value for a sample must be zero and the maximum must
              be indicated in the parameter <paramref name="length"/>.
            </summary>
            
            <param name="samples">A double array containing the circular samples.</param>
            <param name="length">The maximum possible value of the samples.</param>
            
            <returns>The circular variance of the given samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Variance(System.Double[])">
            <summary>
              Computes the Variance of the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            
            <returns>The variance of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Variance(System.Int32,System.Double,System.Double)">
            <summary>
              Computes the Variance of the given angles.
            </summary>
            
            <param name="samples">The number of samples.</param>
            <param name="cos">The sum of the cosines of the samples.</param>
            <param name="sin">The sum of the sines of the samples.</param>
            
            <returns>The variance of the angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.StandardDeviation(System.Double[],System.Double)">
            <summary>
              Computes the circular standard deviation of the given circular samples.
              The minimum possible value for a sample must be zero and the maximum must
              be indicated in the parameter <paramref name="length"/>.
            </summary>
            
            <param name="samples">A double array containing the circular samples.</param>
            <param name="length">The maximum possible value of the samples.</param>
            
            <returns>The circular standard deviation of the given samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.StandardDeviation(System.Double[])">
            <summary>
              Computes the Standard Deviation of the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            
            <returns>The standard deviation of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.StandardDeviation(System.Int32,System.Double,System.Double)">
            <summary>
              Computes the Standard Deviation of the given angles.
            </summary>
            
            <param name="samples">The number of samples.</param>
            <param name="cos">The sum of the cosines of the samples.</param>
            <param name="sin">The sum of the sines of the samples.</param>
            
            <returns>The standard deviation of the angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.AngularDeviation(System.Double[],System.Double)">
            <summary>
              Computes the circular angular deviation of the given circular samples.
              The minimum possible value for a sample must be zero and the maximum must
              be indicated in the parameter <paramref name="length"/>.
            </summary>
            
            <param name="samples">A double array containing the circular samples.</param>
            <param name="length">The maximum possible value of the samples.</param>
            
            <returns>The circular angular deviation of the given samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.AngularDeviation(System.Double[])">
            <summary>
              Computes the Angular Deviation of the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            
            <returns>The angular deviation of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.AngularDeviation(System.Int32,System.Double,System.Double)">
            <summary>
              Computes the Angular Deviation of the given angles.
            </summary>
            
            <param name="samples">The number of samples.</param>
            <param name="cos">The sum of the cosines of the samples.</param>
            <param name="sin">The sum of the sines of the samples.</param>
            
            <returns>The angular deviation of the angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.StandardError(System.Double[],System.Double,System.Double)">
            <summary>
              Computes the circular standard error of the given circular samples.
              The minimum possible value for a sample must be zero and the maximum must
              be indicated in the parameter <paramref name="length"/>.
            </summary>
            
            <param name="samples">A double array containing the circular samples.</param>
            <param name="length">The maximum possible value of the samples.</param>
            <param name="alpha">The confidence level. Default is 0.05.</param>
            
            <returns>The circular standard error of the given samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.StandardError(System.Double[],System.Double)">
            <summary>
              Computes the standard error of the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="alpha">The confidence level. Default is 0.05.</param>
            
            <returns>The standard error of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.StandardError(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
              Computes the standard error of the given angles.
            </summary>
            
            <param name="samples">The number of samples.</param>
            <param name="cos">The sum of the cosines of the samples.</param>
            <param name="sin">The sum of the sines of the samples.</param>
            <param name="alpha">The confidence level. Default is 0.05.</param>
            
            <returns>The standard error of the angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Distance(System.Double,System.Double)">
            <summary>
              Computes the angular distance between two angles.
            </summary>
            
            <param name="x">The first angle.</param>
            <param name="y">The second angle.</param>
            
            <returns>The distance between the two angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Distance(System.Double,System.Double,System.Double)">
            <summary>
              Computes the distance between two circular samples.
            </summary>
            
            <param name="x">The first sample.</param>
            <param name="y">The second sample.</param>
            <param name="length">The maximum possible value of the samples.</param>
            
            <returns>The distance between the two angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Computes the angular distance between two angles.
            </summary>
            
            <param name="cosx">The cosine of the first sample.</param>
            <param name="sinx">The sin of the first sample.</param>
            <param name="cosy">The cosine of the second sample.</param>
            <param name="siny">The sin of the second sample.</param>
            
            <returns>The distance between the two angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Median(System.Double[],System.Double)">
            <summary>
              Computes the circular Median of the given circular samples.
              The minimum possible value for a sample must be zero and the maximum must
              be indicated in the parameter <paramref name="length"/>.
            </summary>
            
            <param name="samples">A double array containing the circular samples.</param>
            <param name="length">The maximum possible value of the samples.</param>
            
            <returns>The circular Median of the given samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Median(System.Double[])">
            <summary>
              Computes the circular Median direction of the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            
            <returns>The circular Median of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Quartiles(System.Double[],System.Double,System.Double@,System.Double@,System.Boolean)">
            <summary>
              Computes the circular quartiles of the given circular samples.
              The minimum possible value for a sample must be zero and the maximum must
              be indicated in the parameter <paramref name="length"/>.
            </summary>
            
            <param name="samples">A double array containing the circular samples.</param>
            <param name="length">The maximum possible value of the samples.</param>
            <param name="q1">The first quartile, as an out parameter.</param>
            <param name="q3">The third quartile, as an out parameter.</param>
            <param name="wrap">
              Whether range values should be wrapped to be contained in the circle. If 
              set to false, range values could be returned outside the [+pi;-pi] range.
            </param>
            
            <returns>The median of the given samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Quartiles(System.Double[],System.Double,System.Double@,System.Double@,System.Double,System.Boolean)">
            <summary>
              Computes the circular quartiles of the given circular samples.
              The minimum possible value for a sample must be zero and the maximum must
              be indicated in the parameter <paramref name="length"/>.
            </summary>
            
            <param name="samples">A double array containing the circular samples.</param>
            <param name="length">The maximum possible value of the samples.</param>
            <param name="q1">The first quartile, as an out parameter.</param>
            <param name="q3">The third quartile, as an out parameter.</param>
            <param name="median">The median value of the <paramref name="samples"/>, if already known.</param>
            <param name="wrap">
              Whether range values should be wrapped to be contained in the circle. If 
              set to false, range values could be returned outside the [+pi;-pi] range.
            </param>
            
            <returns>The median of the given samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Quartiles(System.Double[],System.Double@,System.Double@,System.Boolean)">
            <summary>
              Computes the circular quartiles of the given circular angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="q1">The first quartile, as an out parameter.</param>
            <param name="q3">The third quartile, as an out parameter.</param>
            <param name="wrap">
              Whether range values should be wrapped to be contained in the circle. If 
              set to false, range values could be returned outside the [+pi;-pi] range.
            </param>
            
            <returns>The median of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Quartiles(System.Double[],System.Double,AForge.DoubleRange@,System.Boolean)">
            <summary>
              Computes the circular quartiles of the given circular samples.
              The minimum possible value for a sample must be zero and the maximum must
              be indicated in the parameter <paramref name="length"/>.
            </summary>
            
            <param name="samples">A double array containing the circular samples.</param>
            <param name="length">The maximum possible value of the samples.</param>
            <param name="range">The sample quartiles, as an out parameter.</param>
            <param name="wrap">
              Whether range values should be wrapped to be contained in the circle. If 
              set to false, range values could be returned outside the [+pi;-pi] range.
            </param>
            
            <returns>The median of the given samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Quartiles(System.Double[],System.Double,AForge.DoubleRange@,System.Double,System.Boolean)">
            <summary>
              Computes the circular quartiles of the given circular samples.
              The minimum possible value for a sample must be zero and the maximum must
              be indicated in the parameter <paramref name="length"/>.
            </summary>
            
            <param name="samples">A double array containing the circular samples.</param>
            <param name="length">The maximum possible value of the samples.</param>
            <param name="range">The sample quartiles, as an out parameter.</param>
            <param name="median">The median value of the <paramref name="samples"/>, if already known.</param>
            <param name="wrap">
              Whether range values should be wrapped to be contained in the circle. If 
              set to false, range values could be returned outside the [+pi;-pi] range.
            </param>
            
            <returns>The median of the given samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Quartiles(System.Double[],AForge.DoubleRange@,System.Boolean)">
            <summary>
              Computes the circular quartiles of the given circular angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="range">The sample quartiles, as an out parameter.</param>
            <param name="wrap">
              Whether range values should be wrapped to be contained in the circle. If 
              set to false, range values could be returned outside the [+pi;-pi] range.
            </param>
            
            <returns>The median of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Quartiles(System.Double[],AForge.DoubleRange@,System.Double,System.Boolean)">
            <summary>
              Computes the circular quartiles of the given circular angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="range">The sample quartiles, as an out parameter.</param>
            <param name="median">The angular median, if already known.</param>
            <param name="wrap">
              Whether range values should be wrapped to be contained in the circle. If 
              set to false, range values could be returned outside the [+pi;-pi] range.
            </param>
            
            <returns>The median of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Quartiles(System.Double[],System.Double@,System.Double@,System.Double,System.Boolean)">
            <summary>
              Computes the circular quartiles of the given circular angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="q1">The first quartile, as an out parameter.</param>
            <param name="q3">The third quartile, as an out parameter.</param>
            <param name="median">The angular median, if already known.</param>
            <param name="wrap">
              Whether range values should be wrapped to be contained in the circle. If 
              set to false, range values could be returned outside the [+pi;-pi] range.
            </param>
            
            <returns>The median of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Concentration(System.Double[])">
            <summary>
              Computes the concentration (kappa) of the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            <returns>
              The concentration (kappa) parameter of the <see cref="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution"/>
              for the given data.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Concentration(System.Double[],System.Double)">
            <summary>
              Computes the concentration (kappa) of the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="mean">The mean of the angles, if already known.</param>
            <returns>
              The concentration (kappa) parameter of the <see cref="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution"/>
              for the given data.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.WeightedMean(System.Double[],System.Double[])">
            <summary>
              Computes the Weighted Mean of the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="weights">An unit vector containing the importance of each angle
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <returns>The mean of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.WeightedConcentration(System.Double[],System.Double[])">
            <summary>
              Computes the Weighted Concentration of the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="weights">An unit vector containing the importance of each angle
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <returns>The mean of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.WeightedConcentration(System.Double[],System.Double[],System.Double)">
            <summary>
              Computes the Weighted Concentration of the given angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="weights">An unit vector containing the importance of each angle
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="mean">The mean of the angles, if already known.</param>
            <returns>The mean of the given angles.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.estimateKappa(System.Double)">
            <summary>
              Computes the maximum likelihood estimate
              of kappa given by Best and Fisher (1981).
            </summary>
            
            <remarks>
            <para>
              This method implements the approximation to the Maximum Likelihood
              Estimative of the kappa concentration parameter as suggested by Best
              and Fisher (1981), cited by Zheng Sun (2006) and Hussin and Mohamed
              (2008). Other useful approximations are given by Suvrit Sra (2009).</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description>
                  A.G. Hussin and I.B. Mohamed, 2008. Efficient Approximation for the von Mises Concentration Parameter.
                  Asian Journal of Mathematics &amp; Statistics, 1: 165-169. </description></item>
                <item><description><a href="http://www.kyb.mpg.de/publications/attachments/vmfnote_7045%5B0%5D.pdf">
                  Suvrit Sra, "A short note on parameter approximation for von Mises-Fisher distributions:
                  and a fast implementation of $I_s(x)$". (revision of Apr. 2009). Computational Statistics (2011).
                  Available on: http://www.kyb.mpg.de/publications/attachments/vmfnote_7045%5B0%5D.pdf </a></description></item>
                <item><description>
                  Zheng Sun. M.Sc. Comparing measures of fit for circular distributions. Master thesis, 2006.
                  Available on: https://dspace.library.uvic.ca:8443/bitstream/handle/1828/2698/zhengsun_master_thesis.pdf </description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Skewness(System.Double[])">
            <summary>
              Computes the circular skewness of the given circular angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            
            <returns>The circular skewness for the given <paramref name="angles"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Kurtosis(System.Double[])">
            <summary>
              Computes the circular kurtosis of the given circular angles.
            </summary>
            
            <param name="angles">A double array containing the angles in radians.</param>
            
            <returns>The circular kurtosis for the given <paramref name="angles"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Circular.CentralMoments(System.Double[],System.Int32)">
            <summary>
              Computes the complex circular central 
              moments of the given circular angles.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Circular.NoncentralMoments(System.Double[],System.Int32)">
            <summary>
              Computes the complex circular non-central
              moments of the given circular angles.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.NamespaceDoc">
            <summary>
              Contains more than 40 statistical distributions, with support 
              for most probability distribution measures and estimation methods.
            </summary>
            
            <remarks>
            <para>
              This namespace contains a huge collection of probability distributions, ranging the from the common
              and simple <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution">Normal (Gaussian) </see> and <see cref="T:Accord.Statistics.Distributions.Univariate.PoissonDistribution">
              Poisson</see> distributions to <see cref="T:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution">Inverse-Wishart</see> and 
              <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1">multivariate mixture distributions</see>, including many specialized
              univariate distributions used in <see cref="N:Accord.Statistics.Testing">statistical hypothesis testing</see>.
              Some of those distributions include the <see cref="T:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution"/>, <see cref="T:Accord.Statistics.Distributions.Univariate.TDistribution"/>,
              <see cref="T:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution"/>, <see cref="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution"/> and many others.</para>
            
            <para>
              For a complete list of all <see cref="N:Accord.Statistics.Distributions.Univariate">
              univariate probability distributions</see>, check the <see cref="N:Accord.Statistics.Distributions.Univariate"/>
              namespace. For a complete list of all <see cref="N:Accord.Statistics.Distributions.Multivariate">
              multivariate distributions</see>, please see the <see cref="N:Accord.Statistics.Distributions.Multivariate"/>
              namespace.</para>
             
            <para>
              A list of <see cref="T:Accord.Statistics.Distributions.DensityKernels.IDensityKernel">density kernels</see>
              such as the <see cref="T:Accord.Statistics.Distributions.DensityKernels.GaussianKernel">Gaussian kernel</see>
              and the <see cref="T:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel">Epanechnikov kernel</see>
              are available in the <see cref="N:Accord.Statistics.Distributions.DensityKernels"/> namespace. </para>
            
            
            <para>
              The namespace class diagram is shown below. </para>
              <img src="..\diagrams\classes\Accord.Statistics.png"/>
              
            <para>
              The namespace class diagram for univariate distributions is shown below. </para>
              <img src="..\diagrams\classes\Accord.Statistics.Univariate.png"/>
              
            <para>
              The namespace class diagram for multivariate distributions is shown below. </para>
              <img src="..\diagrams\classes\Accord.Statistics.Multivariate.png"/>
            </remarks>
            
              
            <seealso cref="N:Accord.Statistics.Distributions"/>
            <seealso cref="N:Accord.Statistics.Distributions.Univariate"/>
            <seealso cref="N:Accord.Statistics.Distributions.Multivariate"/>
            <seealso cref="N:Accord.Statistics.Distributions.Fitting"/>
            <seealso cref="N:Accord.Statistics.Distributions.DensityKernels"/>
            <seealso cref="N:Accord.Statistics.Testing"/>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.DensityKernels.NamespaceDoc">
            <summary>
             Contains density estimation kernels which can be used in combination
             with <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution">empirical distributions</see> 
             and <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution">multivariate empirical
             distributions</see>.
            </summary>
            
            <seealso cref="N:Accord.Statistics.Distributions"/>
            <seealso cref="N:Accord.Statistics.Distributions.Univariate"/>
            <seealso cref="N:Accord.Statistics.Distributions.Multivariate"/>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution"/>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.DensityKernels.IDensityKernel">
            <summary>
              Common interface for density estimation kernels.
            </summary>
            
            <remarks>
              Those kernels are different from <see cref="T:Accord.Statistics.Kernels.IKernel"> kernel
              functions</see>. Density estimation kernels are required to obey normalization rules in
              order to fulfill integrability and behavioral properties. Moreover, they are defined
              over a single input vector, the point estimate of a random variable.
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Distributions.DensityKernels.GaussianKernel"/>
            <seealso cref="T:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel"/>
            <seealso cref="T:Accord.Statistics.Distributions.DensityKernels.UniformKernel"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.IDensityKernel.Function(System.Double[])">
            <summary>
              Computes the kernel density function.
            </summary>
            
            <param name="x">The input point.</param>
            
            <returns>A density estimate around <paramref name="x"/>.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.NamespaceDoc">
            <summary>
             Contains special options which can be used in 
             distribution fitting (estimation) methods.
            </summary>
            
            <seealso cref="N:Accord.Statistics.Distributions"/>
            <seealso cref="N:Accord.Statistics.Distributions.Univariate"/>
            <seealso cref="N:Accord.Statistics.Distributions.Multivariate"/>
            <seealso cref="N:Accord.Statistics.Distributions.DensityKernels"/>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.BetaPertMethod">
            <summary>
              BetaPERT's distribution estimation method.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Fitting.BetaPertMethod.Classic">
            <summary>
              Estimates the mode using the classic method.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Fitting.BetaPertMethod.Vose">
            <summary>
              Estimates the mode using the Vose method.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions">
            <summary>
              Estimation options for <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution">
              Beta PERT distributions</see>. 
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.IFittingOptions">
            <summary>
              Common interface for distribution fitting option objects.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions.MinIndex">
            <summary>
              Gets or sets the index of the minimum observed 
              value, if already known. Default is -1.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions.MaxIndex">
            <summary>
              Gets or sets the index of the maximum observed 
              value, if already known. Default is -1.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions.Method">
            <summary>
              Gets or sets which estimation method should be used by the fitting 
              algorithm. Default is <see cref="F:Accord.Statistics.Distributions.Fitting.BetaEstimationMethod.Moments"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions.IsSorted">
            <summary>
              Gets or sets a value indicating whether the observations are already sorted.
            </summary>
            
            <value>
              Set to <c>true</c> if the observations are sorted; otherwise, <c>false</c>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions.FixMax">
            <summary>
              Gets or sets a value indicating whether the maximum
              value should be treated as fixed and not be estimated.
              Default is true.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions.FixMin">
            <summary>
              Gets or sets a value indicating whether the minimum
              value should be treated as fixed and not be estimated.
              Default is true.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.BetaEstimationMethod">
            <summary>
              Estimation methods for <see cref="T:Accord.Statistics.Distributions.Univariate.BetaDistribution">
              Beta distributions</see>.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Fitting.BetaEstimationMethod.Moments">
            <summary>
              Method-of-moments estimation.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Fitting.BetaEstimationMethod.MaximumLikelihood">
            <summary>
              Maximum Likelihood estimation.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.BetaOptions">
            <summary>
              Estimation options for <see cref="T:Accord.Statistics.Distributions.Univariate.BetaDistribution">
              Beta distributions</see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.BetaOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.BetaOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.BetaOptions.Method">
            <summary>
              Gets or sets which estimation method should be used by the fitting 
              algorithm. Default is <see cref="F:Accord.Statistics.Distributions.Fitting.BetaEstimationMethod.Moments"/>.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.TriangularEstimationMethod">
            <summary>
              Triangular distribution's mode estimation method.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Fitting.TriangularEstimationMethod.MeanMaxMin">
            <summary>
              Estimates the mode using the mean-maximum-minimum method.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Fitting.TriangularEstimationMethod.Standard">
            <summary>
              Estimates the mode using the standard algorithm.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Fitting.TriangularEstimationMethod.Bisection">
            <summary>
              Estimates the mode using the bisection algorithm.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.TriangularOptions">
            <summary>
              Estimation options for <see cref="T:Accord.Statistics.Distributions.Univariate.TriangularDistribution">
              Triangular distributions</see>. 
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.TriangularOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.TriangularOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.TriangularOptions.MinIndex">
            <summary>
              Gets or sets the index of the minimum observed 
              value, if already known. Default is -1.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.TriangularOptions.MaxIndex">
            <summary>
              Gets or sets the index of the maximum observed 
              value, if already known. Default is -1.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.TriangularOptions.IsSorted">
            <summary>
              Gets or sets a value indicating whether the observations are already sorted.
            </summary>
            
            <value>
              Set to <c>true</c> if the observations are sorted; otherwise, <c>false</c>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.TriangularOptions.Method">
            <summary>
              Gets or sets the mode estimation method to use. Default 
              is <see cref="F:Accord.Statistics.Distributions.Fitting.TriangularEstimationMethod.MeanMaxMin"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.TriangularOptions.FixMax">
            <summary>
              Gets or sets a value indicating whether the maximum
              value should be treated as fixed and not be estimated.
              Default is true.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.TriangularOptions.FixMin">
            <summary>
              Gets or sets a value indicating whether the minimum
              value should be treated as fixed and not be estimated.
              Default is true.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.LogExpectationMaximization`1">
            <summary>
              Expectation Maximization algorithm for mixture model fitting in the log domain.
            </summary>
            
            <typeparam name="TObservation">The type of the observations being fitted.</typeparam>
            
            <remarks>
              <para>
              This class implements a generic version of the Expectation-Maximization algorithm
              which can be used with both univariate or multivariate distribution types.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.LogExpectationMaximization`1.#ctor(System.Double[],Accord.Statistics.Distributions.IFittableDistribution{`0}[])">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Fitting.LogExpectationMaximization`1"/> algorithm.
            </summary>
            
            <param name="coefficients">The initial coefficient values.</param>
            <param name="distributions">The initial component distributions.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.LogExpectationMaximization`1.Compute(`0[])">
            <summary>
              Estimates a mixture distribution for the given observations
              using the Expectation-Maximization algorithm.
            </summary>
            
            <param name="observations">The observations from the mixture distribution.</param>
            
            <returns>The log-likelihood of the estimated mixture model.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.LogExpectationMaximization`1.LogLikelihood(System.Double[],Accord.Statistics.Distributions.IDistribution{`0}[],`0[])">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.LogExpectationMaximization`1.InnerOptions">
            <summary>
              Gets or sets the fitting options to be used 
              when any of the component distributions need
              to be estimated from the data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.LogExpectationMaximization`1.Convergence">
            <summary>
              Gets or sets convergence properties for
              the expectation-maximization algorithm.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.LogExpectationMaximization`1.Coefficients">
            <summary>
              Gets the current coefficient values.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.LogExpectationMaximization`1.Distributions">
            <summary>
              Gets the current component distribution values.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.LogExpectationMaximization`1.LogGamma">
            <summary>
              Gets the responsibility of each input vector when estimating 
              each of the component distributions, in the last iteration.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.MultivariateSmoothingRule">
            <summary>
              Smoothing rule function definition for <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution">
              Empirical distributions</see>. 
            </summary>
            
            <param name="observations">The observations for the empirical distribution.</param>
            <param name="weights">The fractional importance for each sample. Those values must sum up to one.</param>
            <param name="repeats">The number of times each sample should be repeated.</param>
            
            <returns>An estimative of the smoothing parameter.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.MultivariateEmpiricalOptions">
            <summary>
              Estimation options for <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution">Multivariate Empirical distributions</see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.MultivariateEmpiricalOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.NormalOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.MultivariateEmpiricalOptions.SmoothingRule">
            <summary>
              Gets or sets the smoothing rule used to compute the smoothing
              parameter in the <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution"/>.
              Default is to use <see cref="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.SilvermanRule(System.Double[][],System.Double[],System.Int32[])">
              Silverman's rule</see>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.MultivariateEmpiricalOptions.InPlace">
            <summary>
              Gets or sets whether the empirical distribution should be take the
              observation and weight vectors directly instead of making a copy
              beforehand.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.SmoothingRule">
            <summary>
              Smoothing rule function definition for <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution">
              Empirical distributions</see>. 
            </summary>
            
            <param name="observations">The observations for the empirical distribution.</param>
            <param name="weights">The fractional importance for each sample. Those values must sum up to one.</param>
            <param name="repeats">The number of times each sample should be repeated.</param>
            
            <returns>An estimative of the smoothing parameter.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.EmpiricalOptions">
            <summary>
              Estimation options for <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution">
              Empirical distributions</see>. 
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.EmpiricalOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.NormalOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.EmpiricalOptions.SmoothingRule">
            <summary>
              Gets or sets the smoothing rule used to compute the smoothing
              parameter in the <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution"/>. Default
              is to use the <see cref="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.SmoothingRule(System.Double[],System.Double[],System.Int32[])">
              normal distribution bandwidth approximation</see>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.EmpiricalOptions.InPlace">
            <summary>
              Gets or sets whether the empirical distribution should be take the
              observation and weight vectors directly instead of making a copy
              beforehand.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1">
            <summary>
              Expectation Maximization algorithm for mixture model fitting.
            </summary>
            
            <typeparam name="TObservation">The type of the observations being fitted.</typeparam>
            
            <remarks>
              <para>
              This class implements a generic version of the Expectation-Maximization algorithm
              which can be used with both univariate or multivariate distribution types.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1.#ctor(System.Double[],Accord.Statistics.Distributions.IFittableDistribution{`0}[])">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1"/> algorithm.
            </summary>
            
            <param name="coefficients">The initial coefficient values.</param>
            <param name="distributions">The initial component distributions.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1.Compute(`0[])">
            <summary>
              Estimates a mixture distribution for the given observations
              using the Expectation-Maximization algorithm.
            </summary>
            
            <param name="observations">The observations from the mixture distribution.</param>
            
            <returns>The log-likelihood of the estimated mixture model.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1.Compute(`0[],System.Double[])">
            <summary>
              Estimates a mixture distribution for the given observations
              using the Expectation-Maximization algorithm, assuming different
              weights for each observation.
            </summary>
            
            <param name="observations">The observations from the mixture distribution.</param>
            <param name="weights">The weight of each observation.</param>
            
            <returns>The log-likelihood of the estimated mixture model.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1.LogLikelihood(System.Double[],Accord.Statistics.Distributions.IDistribution{`0}[],`0[])">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1.LogLikelihood(System.Double[],Accord.Statistics.Distributions.IDistribution{`0}[],`0[],System.Double[],System.Double)">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1.InnerOptions">
            <summary>
              Gets or sets the fitting options to be used 
              when any of the component distributions need
              to be estimated from the data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1.Convergence">
            <summary>
              Gets or sets convergence properties for
              the expectation-maximization algorithm.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1.Coefficients">
            <summary>
              Gets the current coefficient values.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1.Distributions">
            <summary>
              Gets the current component distribution values.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1.Gamma">
            <summary>
              Gets the responsibility of each input vector when estimating 
              each of the component distributions, in the last iteration.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.IndependentOptions">
            <summary>
              Estimation options for <see cref="T:Accord.Statistics.Distributions.Multivariate.Independent`1">
              multivariate independent distributions</see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.IndependentOptions.#ctor(Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.IndependentOptions"/> class.
            </summary>
            
            <param name="innerOption">The fitting options for the inner
              component distributions of the independent distributions.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.IndependentOptions.#ctor(Accord.Statistics.Distributions.Fitting.IFittingOptions[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.IndependentOptions"/> class.
            </summary>
            
            <param name="innerOptions">The fitting options for the inner
              component distributions of the independent distributions.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.IndependentOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.IndependentOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.IndependentOptions.InnerOptions">
            <summary>
              Gets or sets the fitting options for the inner
              independent components in the joint distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.IndependentOptions.InnerOption">
            <summary>
              Gets or sets the fitting options for the inner
              independent components in the joint distribution.
              Setting this property should make all component
              distributions use the same options specified here.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.HiddenMarkovOptions">
            <summary>
              Fitting options for hidden Markov model distributions.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.HiddenMarkovOptions.Learning">
            <summary>
              Gets or sets the learning function for the hidden Markov model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.SurvivalOptions">
            <summary>
              Options for Survival distributions.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Fitting.SurvivalOptions.DefaultSurvival">
            <summary>
              Default survival estimation method. Returns <see cref="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.FlemingHarrington"/>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.SurvivalOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.SurvivalOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.SurvivalOptions.Outcome">
            <summary>
              Gets or sets the values for
              the right-censoring variable.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions">
            <summary>
              Options for Empirical Hazard distributions.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions.DefaultEstimator">
            <summary>
              Default hazard estimator. Returns <see cref="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.BreslowNelsonAalen"/>.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions.DefaultTies">
            <summary>
              Default tie handling method. Returns <see cref="F:Accord.Statistics.Distributions.Univariate.HazardTiesMethod.Efron"/>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions.#ctor(Accord.Statistics.Distributions.Univariate.HazardEstimator,Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions.#ctor(Accord.Statistics.Distributions.Univariate.HazardEstimator,System.Int32[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions.#ctor(Accord.Statistics.Distributions.Univariate.HazardEstimator,Accord.Statistics.Distributions.Univariate.HazardTiesMethod,Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions.#ctor(Accord.Statistics.Distributions.Univariate.HazardEstimator,Accord.Statistics.Distributions.Univariate.HazardTiesMethod,System.Int32[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions.Estimator">
            <summary>
              Gets or sets the estimator to be used. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.BreslowNelsonAalen"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions.Ties">
            <summary>
              Gets or sets the tie handling method to be used. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardTiesMethod.Efron"/>.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.IFittableDistribution`2">
            <summary>
              Common interface for distributions which can be estimated from data.
            </summary>
            
            <typeparam name="TObservations">The type of the observations, such as <see cref="T:System.Double"/>.</typeparam>
            <typeparam name="TOptions">The type of the options specifying object.</typeparam>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.IFittableDistribution`1">
            <summary>
              Common interface for distributions which can be estimated from data.
            </summary>
            
            <typeparam name="TObservations">The type of the observations, such as <see cref="T:System.Double"/>.</typeparam>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.IDistribution`1">
            <summary>
              Common interface for probability distributions.
            </summary>
            
            <remarks>
              <para>
              This interface is implemented by all generic probability distributions in the framework, including
              <see cref="T:Accord.Statistics.Distributions.IUnivariateDistribution`1"/>s and <see cref="T:Accord.Statistics.Distributions.IMultivariateDistribution`1"/>s. </para>
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.IDistribution">
            <summary>
              Common interface for probability distributions.
            </summary>
            
            <remarks>
              <para>
              This interface is implemented by all probability distributions in the framework, including
              <see cref="T:Accord.Statistics.Distributions.IUnivariateDistribution"/>s and <see cref="T:Accord.Statistics.Distributions.IMultivariateDistribution"/>s. This
              includes
              <see cref="T:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution"/>,
              <see cref="T:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution"/>,
              <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution"/>, and
              <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution"/></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.DistributionFunction(System.Double[])">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.ProbabilityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.LogProbabilityFunction(System.Double[])">
            <summary>
              Gets the log-probability density function (pdf)
              for this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.ComplementaryDistributionFunction(System.Double[])">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.Fit(System.Array)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.Fit(System.Array,System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.Fit(System.Array,System.Int32[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.Fit(System.Array,Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.Fit(System.Array,System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.Fit(System.Array,System.Int32[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution`1.DistributionFunction(`0)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution`1.ProbabilityFunction(`0)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution`1.LogProbabilityFunction(`0)">
            <summary>
              Gets the log-probability density function (pdf)
              for this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution`1.ComplementaryDistributionFunction(`0)">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IFittableDistribution`1.Fit(`0[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.IFittableDistribution`2.Fit(`0[],System.Double[],`1)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="T:Accord.Statistics.Distributions.ISampleableDistribution`1">
            <summary>
              Common interface for sampleable distributions (i.e. distributions that
              allow the generation of new samples through the <see cref="M:Accord.Statistics.Distributions.ISampleableDistribution`1.Generate"/>
              method.
            </summary>
            
            <typeparam name="TObservations">The type of the observations, such as <see cref="T:System.Double"/>.</typeparam>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.ISampleableDistribution`1.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.ISampleableDistribution`1.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel">
            <summary>
              Epanechnikov density kernel.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Comaniciu, Dorin, and Peter Meer. "Mean shift: A robust approach toward 
                  feature space analysis." Pattern Analysis and Machine Intelligence, IEEE 
                  Transactions on 24.5 (2002): 603-619. Available at:
                  http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1000236 </description></item>
                <item><description>
                  Dan Styer, Oberlin College Department of Physics and Astronomy; Volume of a d-dimensional
                  sphere. Last updated 30 August 2007. Available at:
                  http://www.oberlin.edu/physics/dstyer/StatMech/VolumeDSphere.pdf </description></item>
                <item><description>
                  David W. Scott, Multivariate Density Estimation: Theory, Practice, and 
                  Visualization, Wiley, Aug 31, 1992</description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution"/>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.DensityKernels.IRadiallySymmetricKernel">
            <summary>
              Common interface for radially symmetric kernels.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Distributions.DensityKernels.GaussianKernel"/>
            <seealso cref="T:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel"/>
            <seealso cref="T:Accord.Statistics.Distributions.DensityKernels.UniformKernel"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.IRadiallySymmetricKernel.Profile(System.Double)">
            <summary>
              Computes the kernel profile function.
            </summary>
            
            <param name="x">The point estimate <c>x</c>.</param>
            
            <returns>The value of the profile function at point <paramref name="x"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.IRadiallySymmetricKernel.Derivative(System.Double)">
            <summary>
              Computes the derivative of the kernel profile function.
            </summary>
            
            <param name="x">The point estimate <c>x</c>.</param>
            
            <returns>The value of the derivative profile function at point <paramref name="x"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel"/> class.
            </summary>
            
            <param name="constant">The constant by which the kernel formula
              is multiplied at the end. Default is to consider the area
              of a unit-sphere of dimension 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel"/> class.
            </summary>
            
            <param name="dimension">The desired dimension <c>d</c>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel.Function(System.Double[])">
            <summary>
              Computes the kernel density function.
            </summary>
            
            <param name="x">The input point.</param>
            
            <returns>
              A density estimate around <paramref name="x"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel.Profile(System.Double)">
            <summary>
              Computes the kernel profile function.
            </summary>
            
            <param name="x">The point estimate <c>x</c>.</param>
            
            <returns>
              The value of the profile function at point <paramref name="x"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel.Derivative(System.Double)">
            <summary>
              Computes the derivative of the kernel profile function.
            </summary>
            
            <param name="x">The point estimate <c>x</c>.</param>
            
            <returns>
              The value of the derivative profile function at point <paramref name="x"/>.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.DensityKernels.EpanechnikovKernel.Constant">
            <summary>
              Gets or sets the kernel's normalization constant.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.DensityKernels.GaussianKernel">
             <summary>
               Gaussian density kernel.
             </summary>
             
             <remarks>
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Comaniciu, Dorin, and Peter Meer. "Mean shift: A robust approach toward 
                   feature space analysis." Pattern Analysis and Machine Intelligence, IEEE 
                   Transactions on 24.5 (2002): 603-619. Available at:
                   http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1000236 </description></item>
                 <item><description>
                   Dan Styer, Oberlin College Department of Physics and Astronomy; Volume of a d-dimensional
                   sphere. Last updated 30 August 2007. Available at:
                   http://www.oberlin.edu/physics/dstyer/StatMech/VolumeDSphere.pdf </description></item>
                 <item><description>
                   David W. Scott, Multivariate Density Estimation: Theory, Practice, and 
                   Visualization, Wiley, Aug 31, 1992</description></item>
               </list></para>
             </remarks>
            
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.GaussianKernel.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.DensityKernels.GaussianKernel"/> class.
            </summary>
            
            <param name="dimension">The desired dimension <c>d</c>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.GaussianKernel.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.DensityKernels.GaussianKernel"/> class.
            </summary>
            
            <param name="constant">The normalization constant to use.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.GaussianKernel.Function(System.Double[])">
            <summary>
              Computes the kernel density function.
            </summary>
            
            <param name="x">The input point.</param>
            
            <returns>
              A density estimate around <paramref name="x"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.GaussianKernel.Profile(System.Double)">
            <summary>
              Computes the kernel profile function.
            </summary>
            
            <param name="x">The squared point estimate <c>x²</c>.</param>
            
            <returns>
              The value of the profile function at point <paramref name="x"/>².
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.GaussianKernel.Derivative(System.Double)">
            <summary>
              Computes the derivative of the kernel profile function.
            </summary>
            
            <param name="x">The point estimate <c>x</c>.</param>
            
            <returns>
              The value of the derivative profile function at point <paramref name="x"/>.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.DensityKernels.GaussianKernel.Constant">
            <summary>
              Gets or sets the kernel's normalization constant.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.DensityKernels.UniformKernel">
            <summary>
              Uniform density kernel.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Comaniciu, Dorin, and Peter Meer. "Mean shift: A robust approach toward 
                  feature space analysis." Pattern Analysis and Machine Intelligence, IEEE 
                  Transactions on 24.5 (2002): 603-619. Available at:
                  http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1000236 </description></item>
                <item><description>
                  Dan Styer, Oberlin College Department of Physics and Astronomy; Volume of a d-dimensional
                  sphere. Last updated 30 August 2007. Available at:
                  http://www.oberlin.edu/physics/dstyer/StatMech/VolumeDSphere.pdf </description></item>
                <item><description>
                  David W. Scott, Multivariate Density Estimation: Theory, Practice, and 
                  Visualization, Wiley, Aug 31, 1992</description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.UniformKernel.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.DensityKernels.UniformKernel"/> class.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.UniformKernel.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.DensityKernels.UniformKernel"/> class.
            </summary>
            
            <param name="constant">The normalization constant <c>c</c>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.UniformKernel.Function(System.Double[])">
            <summary>
              Computes the kernel density function.
            </summary>
            
            <param name="x">The input point.</param>
            
            <returns>
              A density estimate around <paramref name="x"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.UniformKernel.Profile(System.Double)">
            <summary>
              Computes the kernel profile function.
            </summary>
            
            <param name="x">The point estimate <c>x</c>.</param>
            
            <returns>
              The value of the profile function at point <paramref name="x"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DensityKernels.UniformKernel.Derivative(System.Double)">
            <summary>
              Computes the derivative of the kernel profile function.
            </summary>
            
            <param name="x">The point estimate <c>x</c>.</param>
            
            <returns>
              The value of the derivative profile function at point <paramref name="x"/>.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.DensityKernels.UniformKernel.Constant">
            <summary>
              Gets or sets the kernel's normalization constant.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.NamespaceDoc">
            <summary>
              Contains a multivariate distributions such as the <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution">
              multivariate Normal</see>, <see cref="T:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution">Multinomial</see>, 
              <see cref="T:Accord.Statistics.Distributions.Multivariate.Independent`1">Independent</see>, <see cref="T:Accord.Statistics.Distributions.Multivariate.JointDistribution">
              Joint</see> and <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1">Mixture distributions</see>.
            </summary>
            
            <remarks>
            <para>
              The namespace class diagram is shown below. </para>
              <img src="..\diagrams\classes\Accord.Statistics.Multivariate.png"/>
            </remarks>
              
            <seealso cref="N:Accord.Statistics.Distributions"/>
            <seealso cref="N:Accord.Statistics.Distributions.Univariate"/>
            <seealso cref="N:Accord.Statistics.Distributions.Fitting"/>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.IMultivariateDistribution">
            <summary>
              Common interface for multivariate probability distributions.
            </summary>
            
            <remarks>
              <para>
              This interface is implemented by both multivariate <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution">
              Discrete Distributions</see> and <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution">Continuous 
              Distributions</see>.</para>
              
              <para>
              For Univariate distributions, see <see cref="T:Accord.Statistics.Distributions.IUnivariateDistribution"/>.</para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.DirichletDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.WishartDistribution"/>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution.Dimension">
            <summary>
              Gets the number of variables for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution.Mean">
            <summary>
              Gets the Mean vector for the distribution.
            </summary>
            
            <value>An array of double-precision values containing
            the mean values for this distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution.Median">
             <summary>
               Gets the Median vector for the distribution.
             </summary>
            
             <value>An array of double-precision values containing
             the median values for this distribution.</value>
             
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution.Mode">
            <summary>
              Gets the Mode vector for the distribution.
            </summary>
            
            <value>An array of double-precision values containing
            the mode values for this distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution.Variance">
            <summary>
              Gets the Variance vector for the distribution.
            </summary>
            
            <value>An array of double-precision values containing
            the variance values for this distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution.Covariance">
            <summary>
              Gets the Variance-Covariance matrix for the distribution.
            </summary>
            
            <value>An multidimensional array of double-precision values
            containing the covariance values for this distribution.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.IMultivariateDistribution`1">
            <summary>
              Common interface for multivariate probability distributions.
            </summary>
            
            <remarks>
              <para>
              This interface is implemented by both multivariate <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution">
              Discrete Distributions</see> and <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution">Continuous 
              Distributions</see>.  However, unlike <see cref="T:Accord.Statistics.Distributions.IMultivariateDistribution"/>, this interface
              has a generic parameter that allows to define the type of the distribution values (i.e.
              <see cref="T:double"/>).</para>
              
              <para>
              For Univariate distributions, see <see cref="T:Accord.Statistics.Distributions.IUnivariateDistribution"/>.</para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.DirichletDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.WishartDistribution"/>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution`1.Dimension">
            <summary>
              Gets the number of variables for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution`1.Mean">
            <summary>
              Gets the Mean vector for the distribution.
            </summary>
            
            <value>An array of double-precision values containing
            the mean values for this distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution`1.Median">
             <summary>
               Gets the Median vector for the distribution.
             </summary>
            
             <value>An array of double-precision values containing
             the median values for this distribution.</value>
             
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution`1.Mode">
            <summary>
              Gets the Mode vector for the distribution.
            </summary>
            
            <value>An array of double-precision values containing
            the mode values for this distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution`1.Variance">
            <summary>
              Gets the Variance vector for the distribution.
            </summary>
            
            <value>An array of double-precision values containing
            the variance values for this distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution`1.Covariance">
            <summary>
              Gets the Variance-Covariance matrix for the distribution.
            </summary>
            
            <value>An multidimensional array of double-precision values
            containing the covariance values for this distribution.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution">
            <summary>
              Multivariate empirical distribution.
            </summary>
            
            <remarks>
            <para>
              Empirical distributions are based solely on the data. This class
              uses the empirical distribution function and the Gaussian kernel
              density estimation to provide an univariate continuous distribution
              implementation which depends only on sampled data.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia, The Free Encyclopedia. Empirical Distribution Function. Available on:
                  <a href=" http://en.wikipedia.org/wiki/Empirical_distribution_function">
                   http://en.wikipedia.org/wiki/Empirical_distribution_function </a></description></item>
                <item><description>
                  PlanetMath. Empirical Distribution Function. Available on:
                  <a href="http://planetmath.org/encyclopedia/EmpiricalDistributionFunction.html">
                  http://planetmath.org/encyclopedia/EmpiricalDistributionFunction.html </a></description></item>
                <item><description>
                  Wikipedia, The Free Encyclopedia. Kernel Density Estimation. Available on:
                  <a href="http://en.wikipedia.org/wiki/Kernel_density_estimation">
                  http://en.wikipedia.org/wiki/Kernel_density_estimation </a></description></item>
                <item><description>
                  Bishop, Christopher M.; Pattern Recognition and Machine Learning. 
                  Springer; 1st ed. 2006.</description></item>
                <item><description>
                  Buch-Kromann, T.; Nonparametric Density Estimation (Multidimension), 2007. Available in 
                  http://www.buch-kromann.dk/tine/nonpar/Nonparametric_Density_Estimation_multidim.pdf </description></item>
                <item><description>
                  W. Härdle, M. Müller, S. Sperlich, A. Werwatz; Nonparametric and Semiparametric Models, 2004. Available
                  in http://sfb649.wiwi.hu-berlin.de/fedc_homepage/xplore/ebooks/html/spm/spmhtmlnode18.html 
                  </description></item>
             </list></para>  
            </remarks>
            
            <example>
            <code>
              // Suppose we have the following data, and we would
              // like to estimate a distribution from this data
              
              double[][] samples =
              {
                  new double[] { 0, 1 },
                  new double[] { 1, 2 },
                  new double[] { 5, 1 },
                  new double[] { 7, 1 },
                  new double[] { 6, 1 },
                  new double[] { 5, 7 },
                  new double[] { 2, 1 },
              };
              
              // Start by specifying a density kernel
              IDensityKernel kernel = new EpanechnikovKernel(dimension: 2);
              
              // Create a multivariate Empirical distribution from the samples
              var dist = new MultivariateEmpiricalDistribution(kernel, samples);
              
              
              // Common measures
              double[] mean = dist.Mean;     // { 3.71, 2.00 }
              double[] median = dist.Median; // { 3.71, 2.00 }
              double[] var = dist.Variance;  // { 7.23, 5.00 } (diagonal from cov)
              double[,] cov = dist.Covariance; // { { 7.23, 0.83 }, { 0.83, 5.00 } }
              
              // Probability mass functions
              double pdf1 = dist.ProbabilityDensityFunction(new double[] { 2, 1 }); // 0.039131176997318849
              double pdf2 = dist.ProbabilityDensityFunction(new double[] { 4, 2 }); // 0.010212109770266639
              double pdf3 = dist.ProbabilityDensityFunction(new double[] { 5, 7 }); // 0.02891906722705221
              double lpdf = dist.LogProbabilityDensityFunction(new double[] { 5, 7 }); // -3.5432541357714742
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.DensityKernels.IDensityKernel"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution"/>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution">
            <summary>
              Abstract class for Multivariate Probability Distributions.
            </summary>
            
            <remarks>
            <para>
              A probability distribution identifies either the probability of each value of an
              unidentified random variable (when the variable is discrete), or the probability
              of the value falling within a particular interval (when the variable is continuous).</para>
            <para>
              The probability distribution describes the range of possible values that a random
              variable can attain and the probability that the value of the random variable is
              within any (measurable) subset of that range.</para>  
            <para>
              The function describing the probability that a given value will occur is called
              the probability function (or probability density function, abbreviated PDF), and
              the function describing the cumulative probability that a given value or any value
              smaller than it will occur is called the distribution function (or cumulative
              distribution function, abbreviated CDF).</para>  
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Probability_distribution">
                  Wikipedia, The Free Encyclopedia. Probability distribution. Available on:
                  http://en.wikipedia.org/wiki/Probability_distribution </a></description></item>
                <item><description><a href="http://mathworld.wolfram.com/StatisticalDistribution.html">
                  Weisstein, Eric W. "Statistical Distribution." From MathWorld--A Wolfram Web Resource.
                  http://mathworld.wolfram.com/StatisticalDistribution.html </a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.DistributionBase">
            <summary>
              Base class for statistical distribution implementations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DistributionBase.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DistributionBase.ToString(System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DistributionBase.ToString(System.String)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DistributionBase.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.DistributionBase.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.#ctor(System.Int32)">
            <summary>
              Constructs a new MultivariateDistribution class.
            </summary>
            
            <param name="dimension">The number of dimensions in the distribution.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.DistributionFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.ProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.LogProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the log-probability density function (pdf)
              for this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.ComplementaryDistributionFunction(System.Double[])">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Fit(System.Double[][])">
            
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Fit(System.Double[][],System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Fit(System.Double[][],System.Int32[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Fit(System.Double[][],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data). </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Fit(System.Double[][],System.Int32[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data). </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Dimension">
            <summary>
              Gets the number of variables for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>A vector containing the mean values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>A vector containing the variance values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Covariance">
            <summary>
              Gets the variance-covariance matrix for this distribution.
            </summary>
            
            <value>A matrix containing the covariance values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>A vector containing the mode values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>A vector containing the median values for the distribution.</value>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.#ctor(System.Double[][])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="samples">The data samples.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.#ctor(System.Double[][],System.Double[])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="samples">The data samples.</param>
            <param name="weights">The fractional weights to use for the samples.
              The weights must sum up to one.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.#ctor(System.Double[][],System.Int32[])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="samples">The data samples.</param>
            <param name="weights">The number of repetition counts for each sample.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.#ctor(Accord.Statistics.Distributions.DensityKernels.IDensityKernel,System.Double[][])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="kernel">The kernel density function to use. 
              Default is to use the <see cref="T:Accord.Statistics.Distributions.DensityKernels.GaussianKernel"/>.</param>
            <param name="samples">The data samples forming the distribution.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.#ctor(Accord.Statistics.Distributions.DensityKernels.IDensityKernel,System.Double[][],System.Double[])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="kernel">The kernel density function to use. 
              Default is to use the <see cref="T:Accord.Statistics.Distributions.DensityKernels.GaussianKernel"/>.</param>
            <param name="samples">The data samples forming the distribution.</param>
            <param name="weights">The fractional weights to use for the samples.
              The weights must sum up to one.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.#ctor(Accord.Statistics.Distributions.DensityKernels.IDensityKernel,System.Double[][],System.Int32[])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="kernel">The kernel density function to use. 
              Default is to use the <see cref="T:Accord.Statistics.Distributions.DensityKernels.GaussianKernel"/>.</param>
            <param name="samples">The data samples forming the distribution.</param>
            <param name="weights">The number of repetition counts for each sample.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.#ctor(Accord.Statistics.Distributions.DensityKernels.IDensityKernel,System.Double[][],System.Double[0:,0:])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="kernel">The kernel density function to use. 
              Default is to use the <see cref="T:Accord.Statistics.Distributions.DensityKernels.GaussianKernel"/>.</param>
            <param name="samples">The data samples.</param>
            <param name="smoothing">
              The kernel smoothing or bandwidth to be used in density estimation.
              By default, the normal distribution approximation will be used.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.#ctor(Accord.Statistics.Distributions.DensityKernels.IDensityKernel,System.Double[][],System.Int32[],System.Double[0:,0:])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="kernel">The kernel density function to use. 
              Default is to use the <see cref="T:Accord.Statistics.Distributions.DensityKernels.GaussianKernel"/>.</param>
            <param name="samples">The data samples.</param>
            <param name="weights">The number of repetition counts for each sample.</param>
            <param name="smoothing">
              The kernel smoothing or bandwidth to be used in density estimation.
              By default, the normal distribution approximation will be used.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.#ctor(Accord.Statistics.Distributions.DensityKernels.IDensityKernel,System.Double[][],System.Double[],System.Double[0:,0:])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="kernel">The kernel density function to use. 
              Default is to use the <see cref="T:Accord.Statistics.Distributions.DensityKernels.GaussianKernel"/>.</param>
            <param name="samples">The data samples.</param>
            <param name="weights">The fractional weights to use for the samples.
              The weights must sum up to one.</param>
            <param name="smoothing">
              The kernel smoothing or bandwidth to be used in density estimation.
              By default, the normal distribution approximation will be used.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.#ctor(System.Double[][],System.Int32[],System.Double[0:,0:])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="samples">The data samples.</param>
            <param name="weights">The number of repetition counts for each sample.</param>
            <param name="smoothing">
              The kernel smoothing or bandwidth to be used in density estimation.
              By default, the normal distribution approximation will be used.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.#ctor(System.Double[][],System.Double[],System.Double[0:,0:])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="samples">The data samples.</param>
            <param name="weights">The fractional weights to use for the samples.
              The weights must sum up to one.</param>
            <param name="smoothing">
              The kernel smoothing or bandwidth to be used in density estimation.
              By default, the normal distribution approximation will be used.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.ProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.DistributionFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range. For a
            univariate distribution, this should be a single
            double value. For a multivariate distribution,
            this should be a double array.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.MultivariateEmpiricalOptions)">
             <summary>
               Fits the underlying distribution to a given set of observations.
             </summary>
             
             <param name="observations">The array of observations to fit the model against.</param>
             <param name="weights">The weight vector containing the weight for each of the samples.</param>
             <param name="options">Optional arguments which may be used during fitting, such
               as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Fit(System.Double[][],System.Int32[],Accord.Statistics.Distributions.Fitting.MultivariateEmpiricalOptions)">
             <summary>
               Fits the underlying distribution to a given set of observations.
             </summary>
             
             <param name="observations">The array of observations to fit the model against.</param>
             <param name="weights">The weight vector containing the weight for each of the samples.</param>
             <param name="options">Optional arguments which may be used during fitting, such
               as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.SilvermanRule(System.Double[][])">
            <summary>
              Gets the Silverman's rule. estimative of the smoothing parameter.
              This is the default smoothing rule applied used when estimating 
              <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution"/>s.
            </summary>
            
            <remarks>
              This method is described on Wikipedia, at
              http://en.wikipedia.org/wiki/Multivariate_kernel_density_estimation
            </remarks>
            
            <param name="observations">The observations for the empirical distribution.</param>
            
            <returns>An estimative of the smoothing parameter.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.SilvermanRule(System.Double[][],System.Double[])">
            <summary>
              Gets the Silverman's rule. estimative of the smoothing parameter.
              This is the default smoothing rule applied used when estimating 
              <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution"/>s.
            </summary>
            
            <remarks>
              This method is described on Wikipedia, at
              http://en.wikipedia.org/wiki/Multivariate_kernel_density_estimation
            </remarks>
            
            <param name="observations">The observations for the empirical distribution.</param>
            <param name="weights">The fractional importance for each sample. Those values must sum up to one.</param>
            
            <returns>An estimative of the smoothing parameter.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.SilvermanRule(System.Double[][],System.Int32[])">
            <summary>
              Gets the Silverman's rule. estimative of the smoothing parameter.
              This is the default smoothing rule applied used when estimating 
              <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution"/>s.
            </summary>
            
            <remarks>
              This method is described on Wikipedia, at
              http://en.wikipedia.org/wiki/Multivariate_kernel_density_estimation
            </remarks>
            
            <param name="observations">The observations for the empirical distribution.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            
            <returns>An estimative of the smoothing parameter.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.SilvermanRule(System.Double[][],System.Double[],System.Int32[])">
            <summary>
              Gets the Silverman's rule. estimative of the smoothing parameter.
              This is the default smoothing rule applied used when estimating 
              <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution"/>s.
            </summary>
            
            <remarks>
              This method is described on Wikipedia, at
              http://en.wikipedia.org/wiki/Multivariate_kernel_density_estimation
            </remarks>
            
            <param name="observations">The observations for the empirical distribution.</param>
            <param name="weights">The fractional importance for each sample. Those values must sum up to one.</param>
            <param name="repeats">The number of times each sample should be repeated.</param>
            
            <returns>An estimative of the smoothing parameter.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Kernel">
            <summary>
              Gets the kernel density function used in this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Samples">
            <summary>
              Gets the samples giving this empirical distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Weights">
            <summary>
              Gets the fractional weights associated with each sample. Note that
              changing values on this array will not result int any effect in
              this distribution. The distribution must be computed from scratch
              with new values in case new weights needs to be used.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Counts">
            <summary>
              Gets the repetition counts associated with each sample. Note that
              changing values on this array will not result int any effect in
              this distribution. The distribution must be computed from scratch
              with new values in case new weights needs to be used.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Length">
            <summary>
              Gets the total number of samples in this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Smoothing">
            <summary>
              Gets the bandwidth smoothing parameter
              used in the kernel density estimation.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              A vector containing the mean values for the distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              A vector containing the variance values for the distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateEmpiricalDistribution.Covariance">
            <summary>
              Gets the variance-covariance matrix for this distribution.
            </summary>
            
            <value>
              A matrix containing the covariance values for the distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution">
             <summary>
               Inverse Wishart Distribution.
             </summary>
            
             <remarks>
             <para>
               The inverse Wishart distribution, also called the inverted Wishart distribution,
               is a probability distribution defined on real-valued positive-definite matrices.
               In Bayesian statistics it is used as the conjugate prior for the covariance matrix
               of a multivariate normal distribution.</para>
            
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Inverse-Wishart_distribution">
                   Wikipedia, The Free Encyclopedia. Inverse Wishart distribution. 
                   Available from: http://en.wikipedia.org/wiki/Inverse-Wishart_distribution </a></description></item>
               </list></para>
             </remarks>
             
             <example>
             <code>
               // Create a Inverse Wishart with the parameters
               var invWishart = new InverseWishartDistribution(
               
                   // Degrees of freedom
                   degreesOfFreedom: 4,
               
                   // Scale parameter
                   inverseScale: new double[,] 
                   {
                        {  1.7, -0.2 },
                        { -0.2,  5.3 },
                   }
               );
               
               // Common measures
               double[] var = invWishart.Variance;  // { -3.4, -10.6 }
               double[,] cov = invWishart.Covariance;  // see below
               double[,] mmean = invWishart.MeanMatrix; // see below
               
               //        cov                mean
               //   -5.78   -4.56        1.7  -0.2 
               //   -4.56  -56.18       -0.2   5.3 
               
               // (the above matrix representations have been transcribed to text using)
               string scov = cov.ToString(DefaultMatrixFormatProvider.InvariantCulture);
               string smean = mmean.ToString(DefaultMatrixFormatProvider.InvariantCulture);
               
               // For compatibility reasons, .Mean stores a flattened mean matrix
               double[] mean = invWishart.Mean; // { 1.7, -0.2, -0.2, 5.3 }
               
               
               // Probability density functions
               double pdf = invWishart.ProbabilityDensityFunction(new double[,] 
               {
                   {  5.2,  0.2 }, // 0.000029806281690351203
                   {  0.2,  4.2 },
               });
               
               double lpdf = invWishart.LogProbabilityDensityFunction(new double[,] 
               {
                   {  5.2,  0.2 }, // -10.420791391688828
                   {  0.2,  4.2 },
               });
             </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Distributions.Multivariate.WishartDistribution"/>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.#ctor(System.Double,System.Double[0:,0:])">
            <summary>
              Creates a new Inverse Wishart distribution.
            </summary>
            
            <param name="degreesOfFreedom">The degrees of freedom v.</param>
            <param name="inverseScale">The inverse scale matrix Ψ (psi).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.DistributionFunction(System.Double[])">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.ProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.
              For a matrix distribution, such as the Wishart's, this
              should be a positive-definite matrix or a matrix written
              in flat vector form.
            </param>
              
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.ProbabilityDensityFunction(System.Double[0:,0:])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.
              For a matrix distribution, such as the Wishart's, this
              should be a positive-definite matrix or a matrix written
              in flat vector form.
            </param>
              
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.LogProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.
              For a matrix distribution, such as the Wishart's, this
              should be a positive-definite matrix or a matrix written
              in flat vector form.
            </param>
              
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.LogProbabilityDensityFunction(System.Double[0:,0:])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.
              For a matrix distribution, such as the Wishart's, this
              should be a positive-definite matrix or a matrix written
              in flat vector form.
            </param>
              
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.MeanMatrix">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>A vector containing the mean values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.Mean">
            <summary>
              Gets the mean for this distribution as a flat matrix.
            </summary>
            
            <value>A vector containing the mean values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>A vector containing the variance values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution.Covariance">
            <summary>
              Gets the variance-covariance matrix for this distribution.
            </summary>
            
            <value>A matrix containing the covariance values for the distribution.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.VonMisesFisherDistribution">
            <summary>
              Von-Mises Fisher distribution.
            </summary>
            
            <remarks>
            <para>
              In directional statistics, the von Mises–Fisher distribution is a probability distribution 
              on the (p-1)-dimensional sphere in R^p. If p = 2 the distribution reduces to the <see cref="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution">
              von Mises distribution on the circle</see>.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia, The Free Encyclopedia. Von Mises-Fisher Distribution. Available on:
                  <a href=" https://en.wikipedia.org/wiki/Von_Mises%E2%80%93Fisher_distribution">
                   https://en.wikipedia.org/wiki/Von_Mises%E2%80%93Fisher_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.VonMisesFisherDistribution.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a Von-Mises Fisher distribution with unit mean.
            </summary>
            
            <param name="dimension">The number of dimensions in the distribution.</param>
            <param name="concentration">The concentration value κ (kappa).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.VonMisesFisherDistribution.#ctor(System.Double[],System.Double)">
            <summary>
              Constructs a Von-Mises Fisher distribution with unit mean.
            </summary>
            
            <param name="mean">The mean direction vector (with unit length).</param>
            <param name="concentration">The concentration value κ (kappa).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.VonMisesFisherDistribution.DistributionFunction(System.Double[])">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.VonMisesFisherDistribution.ProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a univariate distribution, this should be
              a  single double value. For a multivariate distribution, this should be a double array.
            </param>
              
            <returns>
              The probability of <c>x</c> occurring in the current distribution.
            </returns>
            
            <exception cref="T:Accord.DimensionMismatchException">x;The vector should have the same dimension as the distribution.</exception>
            
            <remarks>
              The Probability Density Function (PDF) describes the probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.VonMisesFisherDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.VonMisesFisherDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.VonMisesFisherDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              A vector containing the mean values for the distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.VonMisesFisherDistribution.Variance">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.VonMisesFisherDistribution.Covariance">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.WishartDistribution">
            <summary>
              Wishart Distribution.
            </summary>
            
            <remarks>
            <para>
              The Wishart distribution is a generalization to multiple dimensions of 
              the <see cref="T:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution">Chi-Squared distribution, or, in
              the case of non-integer <see cref="P:Accord.Statistics.Distributions.Multivariate.WishartDistribution.DegreesOfFreedom"/>degrees of 
              freedom</see>, of the <see cref="T:Accord.Statistics.Distributions.Univariate.GammaDistribution">Gamma distribution
              </see>.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Wishart_distribution">
                  Wikipedia, The Free Encyclopedia. Wishart distribution. 
                  Available from: http://en.wikipedia.org/wiki/Wishart_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
              // Create a Wishart distribution with the parameters:
              WishartDistribution wishart = new WishartDistribution(
              
                  // Degrees of freedom
                  degreesOfFreedom: 7,
              
                  // Scale parameter
                  scale: new double[,] 
                  {
                      { 4, 1, 1 },  
                      { 1, 2, 2 },  // (must be symmetric and positive definite)
                      { 1, 2, 6 },
                  }
              );
              
              // Common measures
              double[] var = wishart.Variance;  // { 224, 56, 504 }
              double[,] cov = wishart.Covariance;   // see below
              double[,] meanm = wishart.MeanMatrix; // see below
                          
              //         224  63  175             28  7   7 
              //   cov =  63  56  112     mean =   7  14  14
              //         175 112  504              7  14  42
              
              // (the above matrix representations have been transcribed to text using)
              string scov = cov.ToString(DefaultMatrixFormatProvider.InvariantCulture);
              string smean = meanm.ToString(DefaultMatrixFormatProvider.InvariantCulture);
              
              // For compatibility reasons, .Mean stores a flattened mean matrix
              double[] mean = wishart.Mean; // { 28, 7, 7, 7, 14, 14, 7, 14, 42 }
              
              
              // Probability density functions
              double pdf = wishart.ProbabilityDensityFunction(new double[,] 
              {
                  { 8, 3, 1 },
                  { 3, 7, 1 },   //   0.000000011082455043473361
                  { 1, 1, 8 },
              });
              
              double lpdf = wishart.LogProbabilityDensityFunction(new double[,] 
              {
                  { 8, 3, 1 },
                  { 3, 7, 1 },   // -18.317902605850534
                  { 1, 1, 8 },
              });
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.InverseWishartDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.WishartDistribution.#ctor(System.Double,System.Double[0:,0:])">
            <summary>
              Creates a new Wishart distribution.
            </summary>
            
            <param name="degreesOfFreedom">The degrees of freedom n.</param>
            <param name="scale">The positive-definite matrix scale matrix V.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.WishartDistribution.ProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.
              For a matrix distribution, such as the Wishart's, this
              should be a positive-definite matrix or a matrix written
              in flat vector form.
            </param>
              
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.WishartDistribution.ProbabilityDensityFunction(System.Double[0:,0:])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.
              For a matrix distribution, such as the Wishart's, this
              should be a positive-definite matrix or a matrix written
              in flat vector form.
            </param>
              
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.WishartDistribution.LogProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the log-probability density function (pdf)
              for this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.
              For a matrix distribution, such as the Wishart's, this
              should be a positive-definite matrix or a matrix written
              in flat vector form.
            </param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.WishartDistribution.LogProbabilityDensityFunction(System.Double[0:,0:])">
            <summary>
              Gets the log-probability density function (pdf)
              for this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.
              For a matrix distribution, such as the Wishart's, this
              should be a positive-definite matrix or a matrix written
              in flat vector form.
            </param>
              
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.WishartDistribution.DistributionFunction(System.Double[])">
            <summary>
              Unsupported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.WishartDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.WishartDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.WishartDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.WishartDistribution.DegreesOfFreedom">
            <summary>
              Gets the degrees of freedom for this Wishart distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.WishartDistribution.MeanMatrix">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>A vector containing the mean values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.WishartDistribution.Mean">
            <summary>
              Gets the mean for this distribution as a flat matrix.
            </summary>
            
            <value>A vector containing the mean values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.WishartDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>A vector containing the variance values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.WishartDistribution.Covariance">
            <summary>
              Gets the variance-covariance matrix for this distribution.
            </summary>
            
            <value>A matrix containing the covariance values for the distribution.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.Independent">
            <summary>
              Joint distribution assuming independence between vector components.
            </summary>
            
            <remarks>
            <para>
              In probability and statistics, given at least two random variables <c>X</c>, 
              <c>Y</c>, ..., that are defined on a probability space, the joint probability 
              distribution for <c>X</c>, <c>Y</c>, ... is a probability distribution that 
              gives the probability that each of X, Y, ... falls in any particular range or
              discrete set of values specified for that variable. In the case of only two 
              random variables, this is called a bivariate distribution, but the concept 
              generalizes to any number of random variables, giving a multivariate distribution.
            </para>
            
            <para>
              This class is also available in a generic version, allowing for any
              choice of component distribution (<see cref="T:Accord.Statistics.Distributions.Multivariate.Independent`1"/>.
            </para>
            
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Joint_probability_distribution">
                  Wikipedia, The Free Encyclopedia. Beta distribution. 
                  Available from: http://en.wikipedia.org/wiki/Joint_probability_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <para>
              The following example shows how to declare and initialize an Independent Joint
              Gaussian Distribution using known means and variances for each component.</para>
              
            <code>
              // Declare two normal distributions
              NormalDistribution pa = new NormalDistribution(4.2, 1); // p(a)
              NormalDistribution pb = new NormalDistribution(7.0, 2); // p(b)
             
              // Now, create a joint distribution combining these two:
              var joint = new Independent(pa, pb);
              
              // This distribution assumes the distributions of the two components are independent,
              // i.e. if we have 2D input vectors on the form {a, b}, then p({a,b}) = p(a) * p(b). 
              
              // Lets check a simple example. Consider a 2D input vector x = { 4.2, 7.0 } as
              //
              double[] x = new double[] { 4.2, 7.0 };
              
              // Those two should be completely equivalent:
              double p1 = joint.ProbabilityDensityFunction(x);
              double p2 = pa.ProbabilityDensityFunction(x[0]) * pb.ProbabilityDensityFunction(x[1]);
              
              bool equal = p1 == p2; // at this point, equal should be true.
            </code>
            
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.Independent`1"/>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.Independent`1">
             <summary>
               Joint distribution assuming independence between vector components.
             </summary>
             
             <typeparam name="TDistribution">The type of the underlying distributions.</typeparam>
             
             <remarks>
             <para>
               In probability and statistics, given at least two random variables <c>X</c>, 
               <c>Y</c>, ..., that are defined on a probability space, the joint probability 
               distribution for <c>X</c>, <c>Y</c>, ... is a probability distribution that 
               gives the probability that each of X, Y, ... falls in any particular range or
               discrete set of values specified for that variable. In the case of only two 
               random variables, this is called a bivariate distribution, but the concept 
               generalizes to any number of random variables, giving a multivariate distribution.
             </para>
             
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Joint_probability_distribution">
                   Wikipedia, The Free Encyclopedia. Beta distribution. 
                   Available from: http://en.wikipedia.org/wiki/Joint_probability_distribution </a></description></item>
               </list></para>
             </remarks>
             
             <example>
             <para>
               The following example shows how to declare and initialize an Independent Joint
               Gaussian Distribution using known means and variances for each component.</para>
               
             <code>
               // Declare two normal distributions
               NormalDistribution pa = new NormalDistribution(4.2, 1); // p(a)
               NormalDistribution pb = new NormalDistribution(7.0, 2); // p(b)
              
               // Now, create a joint distribution combining these two:
               var joint = new Independent&lt;NormalDistribution>(pa, pb);
               
               // This distribution assumes the distributions of the two components are independent,
               // i.e. if we have 2D input vectors on the form {a, b}, then p({a,b}) = p(a) * p(b). 
               
               // Lets check a simple example. Consider a 2D input vector x = { 4.2, 7.0 } as
               //
               double[] x = new double[] { 4.2, 7.0 };
               
               // Those two should be completely equivalent:
               double p1 = joint.ProbabilityDensityFunction(x);
               double p2 = pa.ProbabilityDensityFunction(x[0]) * pb.ProbabilityDensityFunction(x[1]);
               
               bool equal = p1 == p2; // at this point, equal should be true.
             </code>
             
             <para>
               The following example shows how to fit a distribution (estimate
               its parameters) from a given dataset. </para>
               
             <code>
               // Let's consider an input dataset of 2D vectors. We would
               // like to estimate an Independent&lt;NormalDistribution>
               // which best models this data.
               
              double[][] data =
              {
                              // x, y
                  new double[] { 1, 8 },
                  new double[] { 2, 6 },
                  new double[] { 5, 7 },
                  new double[] { 3, 9 },
              };
              
              // We start by declaring some initial guesses for the
              // distributions of each random variable (x, and y):
              // 
              var distX = new NormalDistribution(0, 1);
              var distY = new NormalDistribution(0, 1);
            
              // Next, we declare our initial guess Independent distribution
              var joint = new Independent&lt;NormalDistribution>(distX, distY);
            
              // We can now fit the distribution to our data,
              // producing an estimate of its parameters:
              //
              joint.Fit(data);
            
              // At this point, we have estimated our distribution. 
              
              double[] mean = joint.Mean;     // should be { 2.75,  7.50  }
              double[] var  = joint.Variance; // should be { 2.917, 1.667 } 
            
                                                //        | 2.917,  0.000 |
              double[,] cov = joint.Covariance; //  Cov = |               |
                                                //        | 0.000,  1.667 |
                                                
             // The covariance matrix is diagonal, as it would be expected
             // if is assumed there are no interactions between components.
             </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Independent`1.#ctor(`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Multivariate.Independent`1"/> class.
            </summary>
            
            <param name="components">The components.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Independent`1.DistributionFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range. For a
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Independent`1.ProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range. For a
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
            The Probability Density Function (PDF) describes the
            probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Independent`1.LogProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the log-probability density function (pdf)
              for this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range. For a
            univariate distribution, this should be a single
            double value. For a multivariate distribution,
            this should be a double array.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Independent`1.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
            <example>
              For an example on how to fit an independent joint distribution, please
              take a look at the examples section for <see cref="T:Accord.Statistics.Distributions.Multivariate.Independent`1"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Independent`1.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IndependentOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
            <example>
              For an example on how to fit an independent joint distribution, please
              take a look at the examples section for <see cref="T:Accord.Statistics.Distributions.Multivariate.Independent`1"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Independent`1.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Independent`1.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.Independent`1.Components">
            <summary>
              Gets the component distributions of the joint.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.Independent`1.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>A vector containing the mean values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.Independent`1.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary> 
            
            <value>A vector containing the variance values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.Independent`1.Covariance">
            <summary>
              Gets the variance-covariance matrix for this distribution.
            </summary>
            
            <value>A matrix containing the covariance values for the distribution.</value>
            
            <remarks>
              For an independent distribution, this matrix will always be diagonal.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Independent.#ctor(Accord.Statistics.Distributions.IUnivariateDistribution[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Multivariate.Independent`1"/> class.
            </summary>
            
            <param name="components">The components.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Independent.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.NamespaceDoc">
            <summary>
             Contains univariate distributions such as <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution">Normal</see>,
             <see cref="T:Accord.Statistics.Distributions.Univariate.CauchyDistribution">Cauchy</see>, <see cref="T:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution">
             Hypergeometric</see>, <see cref="T:Accord.Statistics.Distributions.Univariate.PoissonDistribution">Poisson</see>, 
             <see cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution">Bernoulli</see>, and specialized distributions such
             as the <see cref="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution">Kolmogorov-Smirnov</see>, 
             <see cref="T:Accord.Statistics.Distributions.Univariate.NakagamiDistribution">Nakagami</see>, <see cref="T:Accord.Statistics.Distributions.Univariate.WeibullDistribution">
             Weibull</see>, and <see cref="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution">Von-Mises</see> distributions.
            </summary>
            
            <remarks>
            <para>
              The namespace class diagram is shown below. </para>
              <img src="..\diagrams\classes\Accord.Statistics.Univariate.png"/>
            </remarks>
              
            <seealso cref="N:Accord.Statistics.Distributions"/>
            <seealso cref="N:Accord.Statistics.Distributions.Multivariate"/>
            <seealso cref="N:Accord.Statistics.Distributions.Fitting"/>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.IUnivariateDistribution">
            <summary>
              Common interface for univariate probability distributions.
            </summary>
            
            <remarks>
              <para>
              This interface is implemented by both univariate <see cref="T:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution">
              Discrete Distributions</see> and <see cref="T:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution">Continuous 
              Distributions</see>.</para>
              
              <para>
              For Multivariate distributions, see <see cref="T:Accord.Statistics.Distributions.IMultivariateDistribution"/>.</para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.GammaDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution.GetRange(System.Double)">
            <summary>
              Gets the distribution range within a given percentile.
            </summary>
            
            <remarks>
              If <c>0.25</c> is passed as the <paramref name="percentile"/> argument, 
              this function returns the same as the <see cref="P:Accord.Statistics.Distributions.IUnivariateDistribution.Quartiles"/> function.
            </remarks>
            
            <param name="percentile">
              The percentile at which the distribution ranges will be returned.</param>
            
            <value>A <see cref="T:AForge.DoubleRange"/> object containing the minimum value
            for the distribution value, and the third quartile (Q2) as the maximum.</value>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution.DistributionFunction(System.Double,System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for this
              distribution in the semi-closed interval (a; b] given as
              <c>P(a &lt; X ≤ b)</c>.
            </summary>
            
            <param name="a">The start of the semi-closed interval (a; b].</param>
            <param name="b">The end of the semi-closed interval (a; b].</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution.ProbabilityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution.LogProbabilityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf)
              for this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function 
              is also known as the Quantile function.
            </summary>
            
            <remarks>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.
            </remarks>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>A sample which could original the given probability 
              value when applied in the <see cref="M:Accord.Statistics.Distributions.IUnivariateDistribution.DistributionFunction(System.Double)"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution.ComplementaryDistributionFunction(System.Double)">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution.HazardFunction(System.Double)">
            <summary>
              Gets the hazard function, also known as the failure rate or
              the conditional failure density function for this distribution
              evaluated at point <c>x</c>.
            </summary>
            
            <remarks>
              The hazard function is the ratio of the probability
              density function f(x) to the survival function, S(x).
            </remarks>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <returns>
              The conditional failure density function <c>h(x)</c>
              evaluated at <c>x</c> in the current distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution.CumulativeHazardFunction(System.Double)">
            <summary>
              Gets the cumulative hazard function for this
              distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
            
            <returns>
              The cumulative hazard function <c>H(x)</c>  
              evaluated at <c>x</c> in the current distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution.QuantileDensityFunction(System.Double)">
            <summary>
              Gets the first derivative of the <see cref="M:Accord.Statistics.Distributions.IUnivariateDistribution.InverseDistributionFunction(System.Double)">
              inverse distribution function</see> (icdf) for this distribution evaluated
              at probability <c>p</c>. 
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution.Mean">
            <summary>
              Gets the mean value for the distribution.
            </summary>
            
            <value>The distribution's mean.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution.Variance">
            <summary>
              Gets the variance value for the distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution.Median">
            <summary>
              Gets the median value for the distribution.
            </summary>
            
            <value>The distribution's median.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution.Mode">
            <summary>
              Gets the mode value for the distribution.
            </summary>
            
            <value>The distribution's mode.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution.Entropy">
            <summary>
              Gets entropy of the distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>A <see cref="T:AForge.DoubleRange"/> containing
             the support interval for this distribution.</value>
             
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution.Quartiles">
            <summary>
              Gets the Quartiles for this distribution.
            </summary>
            
            <value>A <see cref="T:AForge.DoubleRange"/> object containing the first quartile
            (Q1) as its minimum value, and the third quartile (Q2) as the maximum.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.IUnivariateDistribution`1">
            <summary>
              Common interface for univariate probability distributions.
            </summary>
            
            <remarks>
              <para>
              This interface is implemented by both univariate <see cref="T:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution">
              Discrete Distributions</see> and <see cref="T:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution">Continuous 
              Distributions</see>. However, unlike <see cref="T:Accord.Statistics.Distributions.IUnivariateDistribution"/>, this interface
              has a generic parameter that allows to define the type of the distribution values (i.e.
              <see cref="T:double"/>).</para>
              
              <para>
              For Multivariate distributions, see <see cref="T:Accord.Statistics.Distributions.IMultivariateDistribution`1"/>.</para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.GammaDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution`1.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function 
              is also known as the Quantile function.
            </summary>
            
            <remarks>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.
            </remarks>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>A sample which could original the given probability 
              value when applied in the <see cref="M:Accord.Statistics.Distributions.IUnivariateDistribution.DistributionFunction(System.Double)"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution`1.HazardFunction(`0)">
            <summary>
              Gets the hazard function, also known as the failure rate or
              the conditional failure density function for this distribution
              evaluated at point <c>x</c>.
            </summary>
            
            <remarks>
              The hazard function is the ratio of the probability
              density function f(x) to the survival function, S(x).
            </remarks>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <returns>
              The conditional failure density function <c>h(x)</c>
              evaluated at <c>x</c> in the current distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IUnivariateDistribution`1.CumulativeHazardFunction(`0)">
            <summary>
              Gets the cumulative hazard function for this
              distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
            
            <returns>
              The cumulative hazard function <c>H(x)</c>  
              evaluated at <c>x</c> in the current distribution.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution`1.Mean">
            <summary>
              Gets the mean value for the distribution.
            </summary>
            
            <value>The distribution's mean.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution`1.Variance">
            <summary>
              Gets the variance value for the distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution`1.Median">
            <summary>
              Gets the median value for the distribution.
            </summary>
            
            <value>The distribution's median.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution`1.Mode">
            <summary>
              Gets the mode value for the distribution.
            </summary>
            
            <value>The distribution's mode.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution`1.Entropy">
            <summary>
              Gets entropy of the distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution`1.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>A <see cref="T:AForge.DoubleRange"/> containing
             the support interval for this distribution.</value>
             
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.CauchyOptions">
            <summary>
              Estimation options for <see cref="T:Accord.Statistics.Distributions.Univariate.CauchyDistribution">
              Cauchy distributions</see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.CauchyOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.CauchyOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.CauchyOptions.MaximumLikelihood">
            <summary>
              Gets or sets a value indicating whether the distribution parameters
              should be estimated using maximum likelihood. Default is true.
            </summary>
            
            <remarks>
              The Cauchy distribution parameters can be estimated in many ways. One
              approach is to use order statistics to derive approximations to the
              location and scale parameters by analysis the interquartile range of
              the data. The other approach is to use Maximum Likelihood to estimate
              the parameters. The MLE does not exists in simple algebraic form, so
              it has to be estimated using numeric optimization.
            </remarks>
            
            <value><c>true</c> if the parameters should be estimated by ML; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.CauchyOptions.EstimateScale">
            <summary>
              Gets or sets a value indicating whether the scale
              parameter should be estimated. Default is true.
            </summary>
            
            <value><c>true</c> if the scale parameter should be estimated; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.CauchyOptions.EstimateLocation">
            <summary>
              Gets or sets a value indicating whether the location
              parameter should be estimated. Default is true.
            </summary>
            
            <value><c>true</c> if the location parameter should be estimated; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.HypergeometricParameter">
            <summary>
              Estimable parameters of <see cref="T:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution">Hypergeometric</see> distributions.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Fitting.HypergeometricParameter.PopulationSize">
            <summary>
              Population size parameter <c>N</c>.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Fitting.HypergeometricParameter.PopulationSuccesses">
            <summary>
              Successes in population parameter <c>m</c>.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.HypergeometricOptions">
            <summary>
              Estimation options for <see cref="T:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution">Hypergeometric distributions</see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.HypergeometricOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.HypergeometricOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.HypergeometricOptions.Parameter">
            <summary>
              Gets or sets which parameter of the <see cref="T:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution"> Hypergeometric distribution</see> should be estimated.
            </summary>
            
            <value>The hypergeometric parameters to estimate.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.GeneralDiscreteOptions">
            <summary>
              Estimation options for <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution">general discrete (categorical) distributions</see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.GeneralDiscreteOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.GeneralDiscreteOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.GeneralDiscreteOptions.Minimum">
            <summary>
              Gets or sets the minimum allowed probability
              in the frequency tables specifying the discrete
              distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.GeneralDiscreteOptions.UseLaplaceRule">
            <summary>
              Gets ors sets whether to use Laplace's rule
              of succession to avoid zero probabilities.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.VonMisesOptions">
            <summary>
              Estimation options for <see cref="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution">
              Von-Mises distributions</see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.VonMisesOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.VonMisesOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.VonMisesOptions.UseBiasCorrection">
            <summary>
              Gets or sets a value indicating whether to use bias correction
              when estimating the concentration parameter of the von-Mises
              distribution.
            </summary>
            
            <value><c>true</c> to use bias correction; otherwise, <c>false</c>.</value>
            <remarks>
              For more information, see: Best, D. and Fisher N. (1981). The bias
              of the maximum likelihood estimators of the von Mises-Fisher concentration
              parameters. Communications in Statistics - Simulation and Computation, B10(5),
              493-502.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.IMixture`1">
            <summary>
              Common interface for mixture distributions.
            </summary>
            
            <typeparam name="TDistribution">
              The type of the mixture distribution, if either univariate or multivariate.
            </typeparam>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMixture`1.Coefficients">
            <summary>
              Gets the mixture coefficients (component weights).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMixture`1.Components">
            <summary>
              Gets the mixture components.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution">
            <summary>
              Abstract class for multivariate discrete probability distributions.
            </summary>
            
            <remarks>
            <para>
              A probability distribution identifies either the probability of each value of an
              unidentified random variable (when the variable is discrete), or the probability
              of the value falling within a particular interval (when the variable is continuous).</para>
            <para>
              The probability distribution describes the range of possible values that a random
              variable can attain and the probability that the value of the random variable is
              within any (measurable) subset of that range.</para>  
            <para>
              The function describing the probability that a given discrete value will
              occur is called the probability function (or probability mass function,
              abbreviated PMF), and the function describing the cumulative probability
              that a given value or any value smaller than it will occur is called the
              distribution function (or cumulative distribution function, abbreviated CDF).</para>  
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Probability_distribution">
                  Wikipedia, The Free Encyclopedia. Probability distribution. Available on:
                  http://en.wikipedia.org/wiki/Probability_distribution </a></description></item>
                <item><description><a href="http://mathworld.wolfram.com/StatisticalDistribution.html">
                  Weisstein, Eric W. "Statistical Distribution." From MathWorld--A Wolfram Web Resource.
                  http://mathworld.wolfram.com/StatisticalDistribution.html </a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.#ctor(System.Int32)">
            <summary>
              Constructs a new MultivariateDiscreteDistribution class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.DistributionFunction(System.Int32[])">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.ProbabilityMassFunction(System.Int32[])">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.LogProbabilityMassFunction(System.Int32[])">
            <summary>
              Gets the log-probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The logarithm of the probability of <c>x</c> 
              occurring in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.ComplementaryDistributionFunction(System.Int32[])">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Fit(System.Double[][])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Fit(System.Double[][],System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Fit(System.Double[][],System.Int32[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Fit(System.Double[][],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Fit(System.Double[][],System.Int32[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Dimension">
            <summary>
              Gets the number of variables for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              An array of double-precision values containing
              the mean values for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Variance">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              An array of double-precision values containing
              the variance values for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Covariance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              An multidimensional array of double-precision values
              containing the covariance values for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              An array of double-precision values containing
              the mode values for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              An array of double-precision values containing
              the median values for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.MixtureOptions">
            <summary>
              Estimation options for <see cref="T:Accord.Statistics.Distributions.Univariate.Mixture`1">univariate</see>
              and <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1">multivariate</see> 
              <see cref="T:Accord.Statistics.Distributions.IMixture`1">mixture distributions</see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.MixtureOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.MixtureOptions"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.MixtureOptions.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.MixtureOptions"/> class.
            </summary>
            
            <param name="threshold">The convergence criterion for the
              Expectation-Maximization algorithm. Default is 1e-3.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.MixtureOptions.#ctor(System.Double,Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.MixtureOptions"/> class.
            </summary>
            
            <param name="threshold">The convergence criterion for the
              Expectation-Maximization algorithm. Default is 1e-3.</param>
            <param name="innerOptions">The fitting options for the inner
              component distributions of the mixture density.</param>
              
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.MixtureOptions.Threshold">
            <summary>
              Gets or sets the convergence criterion for the
              Expectation-Maximization algorithm. Default is 1e-3.
            </summary>
            
            <value>The convergence threshold.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.MixtureOptions.Iterations">
            <summary>
              Gets or sets the maximum number of iterations
              to be performed by the Expectation-Maximization
              algorithm. Default is zero (iterate until convergence).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.MixtureOptions.InnerOptions">
            <summary>
              Gets or sets the fitting options for the inner
              component distributions of the mixture density.
            </summary>
            
            <value>The fitting options for inner distributions.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.MixtureOptions.Logarithm">
            <summary>
              Gets or sets whether to make computations using the log
              -domain. This might improve accuracy on large datasets.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.NormalOptions">
            <summary>
              Estimation options for <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution">
              Normal distributions</see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.NormalOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.NormalOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.NormalOptions.Regularization">
            <summary>
              Gets or sets the regularization step to
              avoid singular or non-positive definite
              covariance matrices. Default is 0.
            </summary>
            
            <value>The regularization step.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.NormalOptions.Diagonal">
            <summary>
              Gets or sets a value indicating whether the covariance
              matrix to be estimated should be assumed to be diagonal.
            </summary>
            
            <value><c>true</c> to estimate a diagonal covariance matrix; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.NormalOptions.Robust">
            <summary>
              Gets or sets whether the estimation function should
              allow non-positive definite covariance matrices by
              using the Singular Value Decomposition Function.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1">
            <summary>
              Mixture of multivariate probability distributions.
            </summary>
            
            <remarks>
            <para>
              A mixture density is a probability density function which is expressed
              as a convex combination (i.e. a weighted sum, with non-negative weights
              that sum to 1) of other probability density functions. The individual
              density functions that are combined to make the mixture density are
              called the mixture components, and the weights associated with each
              component are called the mixture weights.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Mixture_density">
                  Wikipedia, The Free Encyclopedia. Mixture density. Available on:
                  http://en.wikipedia.org/wiki/Mixture_density </a></description></item>
              </list></para>
            </remarks>
              
            <typeparam name="T">
              The type of the multivariate component distributions.</typeparam>
              
            <example>
            
            <code>
            // Randomly initialize some mixture components
            MultivariateNormalDistribution[] components = new MultivariateNormalDistribution[2];
            components[0] = new MultivariateNormalDistribution(new double[] { 2 }, new double[,] { { 1 } });
            components[1] = new MultivariateNormalDistribution(new double[] { 5 }, new double[,] { { 1 } });
            
            // Create an initial mixture
            var mixture = new MultivariateMixture&lt;MultivariateNormalDistribution&gt;(components);
            
            // Now, suppose we have a weighted data
            // set. Those will be the input points:
            
            double[][] points = new double[] { 0, 3, 1, 7, 3, 5, 1, 2, -1, 2, 7, 6, 8, 6 } // (14 points)
                .ToArray();
            
            // And those are their respective unnormalized weights:
            double[] weights = { 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 3, 1, 1 }; // (14 weights)
            
            // Let's normalize the weights so they sum up to one:
            weights = weights.Divide(weights.Sum());
            
            // Now we can fit our model to the data:
            mixture.Fit(points, weights);   // done!
            
            // Our model will be:
            double mean1 = mixture.Components[0].Mean[0]; // 1.41126
            double mean2 = mixture.Components[1].Mean[0]; // 6.53301
            
            // With mixture coefficients
            double pi1 = mixture.Coefficients[0]; // 0.51408489193241225
            double pi2 = mixture.Coefficients[1]; // 0.48591510806758775
            
            // If we need the GaussianMixtureModel functionality, we can
            // use the estimated mixture to initialize a new model:
            GaussianMixtureModel gmm = new GaussianMixtureModel(mixture);
            
            mean1 = gmm.Gaussians[0].Mean[0]; // 1.41126 (same)
            mean2 = gmm.Gaussians[1].Mean[0]; // 6.53301 (same)
            
            p1 = gmm.Gaussians[0].Proportion; // 0.51408 (same)
            p2 = gmm.Gaussians[1].Proportion; // 0.48591 (same)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.Mixture`1"/>
            <seealso cref="T:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1"/>
            <seealso cref="T:Accord.Statistics.Distributions.Fitting.LogExpectationMaximization`1"/>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.#ctor(`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1"/> class.
            </summary>
            
            <param name="components">The mixture distribution components.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.#ctor(System.Double[],`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1"/> class.
            </summary>
            
            <param name="coefficients">The mixture weight coefficients.</param>
            <param name="components">The mixture distribution components.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.ProbabilityDensityFunction(System.Int32,System.Double[])">
            <summary>
              Gets the probability density function (pdf) for one of
              the component distributions evaluated at point <c>x</c>.
            </summary>
            
            <param name="componentIndex">The index of the desired component distribution.</param>
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.LogProbabilityDensityFunction(System.Int32,System.Double[])">
            <summary>
              Gets the log-probability density function (pdf) for one 
              of the component distributions evaluated at point <c>x</c>.
            </summary>
            
            <param name="componentIndex">The index of the desired component distribution.</param>
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
               occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.ProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.LogProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The logarithm of the probability of <c>x</c> 
              occurring in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.DistributionFunction(System.Double[])">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.DistributionFunction(System.Int32,System.Double[])">
            <summary>
              Gets the cumulative distribution function (cdf) for one 
              of the component distributions evaluated at point <c>x</c>.
            </summary>
            
            <param name="componentIndex">The component distribution's index.</param>
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.MixtureOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.LogLikelihood(System.Double[][],System.Double[])">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.LogLikelihood(System.Double[][])">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Estimate(System.Double[][],`0[])">
            <summary>
              Estimates a new mixture model from a given set of observations.
            </summary>
            
            <param name="data">A set of observations.</param>
            <param name="components">The initial components of the mixture model.</param>
            <returns>Returns a new Mixture fitted to the given observations.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Estimate(System.Double[][],System.Double[],`0[])">
            <summary>
              Estimates a new mixture model from a given set of observations.
            </summary>
            
            <param name="data">A set of observations.</param>
            <param name="components">The initial components of the mixture model.</param>
            <param name="coefficients">The initial mixture coefficients.</param>
            <returns>Returns a new Mixture fitted to the given observations.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Estimate(System.Double[][],System.Double,System.Double[],`0[])">
            <summary>
              Estimates a new mixture model from a given set of observations.
            </summary>
            
            <param name="data">A set of observations.</param>
            <param name="components">The initial components of the mixture model.</param>
            <param name="coefficients">The initial mixture coefficients.</param>
            <param name="threshold">The convergence threshold for the Expectation-Maximization estimation.</param>
            <returns>Returns a new Mixture fitted to the given observations.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Components">
            <summary>
              Gets the mixture components.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Coefficients">
            <summary>
              Gets the weight coefficients.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Covariance">
            <summary>
              Gets the variance-covariance matrix for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1.Variance">
            <summary>
              Gets the variance vector for this distribution.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution">
            <summary>
              Multinomial probability distribution.
            </summary>
            
            <remarks>
              <para>The multinomial distribution is a generalization of the binomial
              distribution. The binomial distribution is the probability distribution
              of the number of "successes" in <c>n</c> independent 
              <see cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution">Bernoulli</see>
              trials, with the same probability of "success" on each trial.</para>
              
              <para>In a multinomial distribution, the analog of the
              <see cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution">Bernoulli distribution</see> is the
              <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution">categorical distribution</see>,
              where each trial results in exactly one of some fixed finite number
              <c>k</c> of possible outcomes, with probabilities <c>p1, ..., pk</c>
              and there are <c>n</c> independent trials.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Multinomial_distribution">
                  Wikipedia, The Free Encyclopedia. Multinomial distribution. Available on:
                  http://en.wikipedia.org/wiki/Multinomial_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
               // distribution parameters
               int numberOfTrials = 5; 
               double[] probabilities = { 0.25, 0.75 };
               
               // Create a new Multinomial distribution with 5 trials for 2 symbols
               var dist = new MultinomialDistribution(numberOfTrials, probabilities);
               
               int dimensions = dist.Dimension; // 2
               
               double[] mean = dist.Mean;     // {  1.25, 3.75 }
               double[] median = dist.Median; // {  1.25, 3.75 }
               double[] var = dist.Variance;  // { -0.9375, -0.9375 }
               
               double pdf1 = dist.ProbabilityMassFunction(new[] { 2, 3 }); // 0.26367187499999994
               double pdf2 = dist.ProbabilityMassFunction(new[] { 1, 4 }); // 0.3955078125
               double pdf3 = dist.ProbabilityMassFunction(new[] { 5, 0 }); // 0.0009765625
               double lpdf = dist.LogProbabilityMassFunction(new[] { 1, 4 }); // -0.9275847384929139
               
               // output is "Multinomial(x; n = 5, p = { 0.25, 0.75 })"
               string str = dist.ToString(CultureInfo.InvariantCulture); 
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.#ctor(System.Int32,System.Double[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution"/> class.
            </summary>
            
            <param name="numberOfTrials">The total number of trials N.</param>
            <param name="probabilities">A vector containing the probabilities of seeing each of possible outcomes.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.DistributionFunction(System.Int32[])">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.ProbabilityMassFunction(System.Int32[])">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.LogProbabilityMassFunction(System.Int32[])">
            <summary>
              Gets the log-probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.Probabilities">
            <summary>
              Gets the event probabilities associated with the trials.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.NumberOfTrials">
            <summary>
              Gets the number of Bernoulli trials N.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.Variance">
            <summary>
              Gets the variance vector for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.Covariance">
            <summary>
              Gets the variance-covariance matrix for this distribution.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.BetaDistribution">
             <summary>
               Beta Distribution (of the first kind).
             </summary>
             
             <remarks>
             <para>
               The beta distribution is a family of continuous probability distributions
               defined on the interval (0, 1) parameterized by two positive shape parameters,
               typically denoted by α and β. The beta distribution can be suited to the 
               statistical modeling of proportions in applications where values of proportions
               equal to 0 or 1 do not occur. One theoretical case where the beta distribution 
               arises is as the distribution of the ratio formed by one random variable having
               a Gamma distribution divided by the sum of it and another independent random 
               variable also having a Gamma distribution with the same scale parameter (but 
               possibly different shape parameter).</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Beta_distribution">
                   Wikipedia, The Free Encyclopedia. Beta distribution. 
                   Available from: http://en.wikipedia.org/wiki/Beta_distribution </a></description></item>
               </list></para>
             </remarks>
            
             <example>
             <para>
               Note: More advanced examples, including distribution estimation and random number
               generation are also available at the <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution"/>
               page.</para>
               
             <para>
               The following example shows how to instantiate and use a Beta 
               distribution given its alpha and beta parameters: </para>
             
             <code>
              double alpha = 0.42;
              double beta = 1.57;
             
              // Create a new Beta distribution with α = 0.42 and β = 1.57
              BetaDistribution distribution = new BetaDistribution(alpha, beta);
             
              // Common measures
              double mean   = distribution.Mean;      // 0.21105527638190955
              double median = distribution.Median;    // 0.11577711097114812
              double var    = distribution.Variance;  // 0.055689279830523512
              
              // Cumulative distribution functions
              double cdf    = distribution.DistributionFunction(x: 0.27);          // 0.69358638272337991
              double ccdf   = distribution.ComplementaryDistributionFunction(x: 0.27); // 0.30641361727662009
              double icdf   = distribution.InverseDistributionFunction(p: cdf);        // 0.26999999068687469
              
              // Probability density functions
              double pdf    = distribution.ProbabilityDensityFunction(x: 0.27);    // 0.94644031936694828
              double lpdf   = distribution.LogProbabilityDensityFunction(x: 0.27); // -0.055047364344046057
              
              // Hazard (failure rate) functions
              double hf     = distribution.HazardFunction(x: 0.27);           // 3.0887671630877072
              double chf    = distribution.CumulativeHazardFunction(x: 0.27); // 1.1828193992944409
              
              // String representation
              string str = distribution.ToString(); // B(x; α = 0.42, β = 1.57)
             </code>
             
             <para>
               The following example shows to create a Beta distribution
               given a discrete number of trials and the number of successes
               within those trials. It also shows how to compute the 2.5 and
               97.5 percentiles of the distribution:</para>
               
             <code>
              int trials = 100;
              int successes = 78;
              
              BetaDistribution distribution = new BetaDistribution(successes, trials);
              
              double mean   = distribution.Mean; // 0.77450980392156865
              double median = distribution.Median; // 0.77630912598534851
              
              double p025   = distribution.InverseDistributionFunction(p: 0.025); // 0.68899653915764347
              double p975   = distribution.InverseDistributionFunction(p: 0.975); // 0.84983461640764513
             </code>
             
             <para>
               The next example shows how to generate 1000 new samples from a Beta distribution:</para>
             
             <code>
               // Using the distribution's parameters
               double[] samples = GeneralizedBetaDistribution
                 .Random(alpha: 2, beta: 3, min: 0, max: 1, samples: 1000);
                 
               // Using an existing distribution
               var b = new GeneralizedBetaDistribution(alpha: 1, beta: 2);
               double[] new_samples = b.Generate(1000);
             </code>
             
             <para>
               And finally, how to estimate the parameters of a Beta distribution from
               a set of observations, using either the Method-of-moments or the Maximum 
               Likelihood Estimate.</para>
               
             <code>
             // Draw 100000 observations from a Beta with α = 2, β = 3:
             double[] samples = GeneralizedBetaDistribution
                 .Random(alpha: 2, beta: 3, samples: 100000);
             
             // Estimate a distribution from the data
             var B = BetaDistribution.Estimate(samples);
             
             // Explicitly using Method-of-moments estimation
             var mm = BetaDistribution.Estimate(samples,
                 new BetaOptions { Method = BetaEstimationMethod.Moments });
                 
             // Explicitly using Maximum Likelihood estimation
             var mle = BetaDistribution.Estimate(samples,
                 new BetaOptions { Method = BetaEstimationMethod.MaximumLikelihood });
             </code>
             </example>
             
             <seealso cref="T:Accord.Math.Beta"/>
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution"/>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution">
            <summary>
              Abstract class for univariate continuous probability Distributions.
            </summary>
            
            <remarks>
            <para>
              A probability distribution identifies either the probability of each value of an
              unidentified random variable (when the variable is discrete), or the probability
              of the value falling within a particular interval (when the variable is continuous).</para>
            <para>
              The probability distribution describes the range of possible values that a random
              variable can attain and the probability that the value of the random variable is
              within any (measurable) subset of that range.</para>  
            <para>
              The function describing the probability that a given value will occur is called
              the probability function (or probability density function, abbreviated PDF), and
              the function describing the cumulative probability that a given value or any value
              smaller than it will occur is called the distribution function (or cumulative
              distribution function, abbreviated CDF).</para>  
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Probability_distribution">
                  Wikipedia, The Free Encyclopedia. Probability distribution. Available on:
                  http://en.wikipedia.org/wiki/Probability_distribution </a></description></item>
                <item><description><a href="http://mathworld.wolfram.com/StatisticalDistribution.html">
                  Weisstein, Eric W. "Statistical Distribution." From MathWorld--A Wolfram Web Resource.
                  http://mathworld.wolfram.com/StatisticalDistribution.html </a></description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.GammaDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.#ctor">
            <summary>
              Constructs a new UnivariateDistribution class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.GetRange(System.Double)">
            <summary>
              Gets the distribution range within a given percentile.
            </summary>
            
            <remarks>
              If <c>0.25</c> is passed as the <paramref name="percentile"/> argument, 
              this function returns the same as the <see cref="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Quartiles"/> function.
            </remarks>
            
            <param name="percentile">
              The percentile at which the distribution ranges will be returned.</param>
            
            <value>A <see cref="T:AForge.DoubleRange"/> object containing the minimum value
            for the distribution value, and the third quartile (Q2) as the maximum.</value>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#DistributionFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#ComplementaryDistributionFunction(System.Double[])">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#ProbabilityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IUnivariateDistribution#ProbabilityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range. For a
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#LogProbabilityFunction(System.Double[])">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The logarithm of the probability of <c>x</c> 
              occurring in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IUnivariateDistribution#LogProbabilityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The logarithm of the probability of <c>x</c> 
              occurring in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,System.Int32[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data). </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples. </param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,System.Int32[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data). </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples. </param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.DistributionFunction(System.Double,System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for this
              distribution in the semi-closed interval (a; b] given as
              <c>P(a &lt; X ≤ b)</c>.
            </summary>
            
            <param name="a">The start of the semi-closed interval (a; b].</param>
            <param name="b">The end of the semi-closed interval (a; b].</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.ComplementaryDistributionFunction(System.Double)">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function 
              is also known as the Quantile function.
            </summary>
            
            <remarks>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.
            </remarks>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>A sample which could original the given probability 
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.DistributionFunction(System.Double)"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.QuantileDensityFunction(System.Double)">
            <summary>
              Gets the first derivative of the <see cref="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.InverseDistributionFunction(System.Double)">
              inverse distribution function</see> (icdf) for this distribution evaluated
              at probability <c>p</c>. 
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The logarithm of the probability of <c>x</c> 
              occurring in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.HazardFunction(System.Double)">
            <summary>
              Gets the hazard function, also known as the failure rate or
              the conditional failure density function for this distribution
              evaluated at point <c>x</c>.
            </summary>
            
            <remarks>
              The hazard function is the ratio of the probability
              density function f(x) to the survival function, S(x).
            </remarks>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <returns>
              The conditional failure density function <c>h(x)</c>
              evaluated at <c>x</c> in the current distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.CumulativeHazardFunction(System.Double)">
            <summary>
              Gets the cumulative hazard function for this
              distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
            
            <returns>
              The cumulative hazard function <c>H(x)</c>  
              evaluated at <c>x</c> in the current distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Fit(System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Fit(System.Double[],System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Fit(System.Double[],System.Int32[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Fit(System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Fit(System.Double[],System.Int32[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>A <see cref="T:AForge.DoubleRange"/> containing
             the support interval for this distribution.</value>
             
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>The distribution's mode value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Quartiles">
            <summary>
              Gets the Quartiles for this distribution.
            </summary>
            
            <value>A <see cref="T:AForge.DoubleRange"/> object containing the first quartile
            (Q1) as its minimum value, and the third quartile (Q2) as the maximum.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>The distribution's median value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.StandardDeviation">
            <summary>
              Gets the Standard Deviation (the square root of
              the variance) for the current distribution.
            </summary>
            
            <value>The distribution's standard deviation.</value>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.#ctor">
            <summary>
              Creates a new Beta distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
              Creates a new Beta distribution.
            </summary>
            
            <param name="successes">The number of success <c>r</c>. Default is 0.</param>
            <param name="trials">The number of trials <c>n</c>. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new Beta distribution.
            </summary>
            
            <param name="alpha">The shape parameter α (alpha).</param>
            <param name="beta">The shape parameter β (beta).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
              
            <para>
              The Beta's CDF is computed using the <see cref="M:Accord.Math.Beta.Incomplete(System.Double,System.Double,System.Double)">Incomplete 
              (regularized) Beta function I_x(a,b)</see> as CDF(x) = I_x(a,b)</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>A sample which could original the given probability 
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.DistributionFunction(System.Double)"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
            <para>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.</para>
            <para>
              The Beta's PDF is computed as pdf(x) = c * x^(a - 1) * (1 - x)^(b - 1)
              where constant c is c = 1.0 / <see cref="M:Accord.Math.Beta.Function(System.Double,System.Double)">Beta.Function(a, b)</see></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
            <para>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.</para>
            </remarks>
            
            <seealso cref="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.ProbabilityDensityFunction(System.Double)"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting,
              such as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Fit(System.Double[],System.Int32[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting,
              such as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.BetaOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Fit(System.Double[],System.Int32[],Accord.Statistics.Distributions.Fitting.BetaOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Gradient(System.Double[],System.Double,System.Double)">
            <summary>
              Computes the Gradient of the Log-Likelihood function for estimating Beta distributions.
            </summary>
            
            <param name="observations">The observed values.</param>
            <param name="alpha">The current alpha value.</param>
            <param name="beta">The current beta value.</param>
            
            <returns>
              A bi-dimensional value containing the gradient w.r.t to alpha in its
              first position, and the gradient w.r.t to be in its second position.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Gradient(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[])">
            <summary>
              Computes the Gradient of the Log-Likelihood function for estimating Beta distributions.
            </summary>
            
            <param name="sum1">The sum of log(y), where y refers to all observed values.</param>
            <param name="sum2">The sum of log(1 - y), where y refers to all observed values.</param>
            <param name="n">The total number of observed values.</param>
            <param name="alpha">The current alpha value.</param>
            <param name="beta">The current beta value.</param>
            <param name="g">A bi-dimensional vector to store the gradient.</param>
            
            <returns>
              A bi-dimensional vector containing the gradient w.r.t to alpha in its
              first position, and the gradient w.r.t to be in its second position.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.LogLikelihood(System.Double[],System.Double,System.Double)">
            <summary>
              Computes the Log-Likelihood function for estimating Beta distributions.
            </summary>
            
            <param name="observations">The observed values.</param>
            <param name="alpha">The current alpha value.</param>
            <param name="beta">The current beta value.</param>
            
            <returns>The log-likelihood value for the given observations and given Beta parameters.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.LogLikelihood(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Computes the Log-Likelihood function for estimating Beta distributions.
            </summary>
            
            <param name="sum1">The sum of log(y), where y refers to all observed values.</param>
            <param name="sum2">The sum of log(1 - y), where y refers to all observed values.</param>
            <param name="n">The total number of observed values.</param>
            <param name="alpha">The current alpha value.</param>
            <param name="beta">The current beta value.</param>
            
            <returns>The log-likelihood value for the given observations and given Beta parameters.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Random(System.Double,System.Double,System.Int32)">
             <summary>
               Generates a random vector of observations from the 
               Beta distribution with the given parameters.
             </summary>
             
             <param name="alpha">The shape parameter α (alpha).</param>
             <param name="beta">The shape parameter β (beta).</param>
             <param name="samples">The number of samples to generate.</param>
            
             <returns>An array of double values sampled from the specified Beta distribution.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Random(System.Double,System.Double)">
            <summary>
              Generates a random observation from the 
              Beta distribution with the given parameters.
            </summary>
            
            <param name="alpha">The shape parameter α (alpha).</param>
            <param name="beta">The shape parameter β (beta).</param>
            
            <returns>A random double value sampled from the specified Beta distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Estimate(System.Double[])">
            <summary>
              Estimates a new Beta distribution from a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Estimate(System.Double[],System.Double[])">
            <summary>
              Estimates a new Beta distribution from a set of weighted observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Estimate(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.BetaOptions)">
            <summary>
              Estimates a new Beta distribution from a set of weighted observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaDistribution.Estimate(System.Double[],Accord.Statistics.Distributions.Fitting.BetaOptions)">
            <summary>
              Estimates a new Beta distribution from a set of observations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaDistribution.Alpha">
            <summary>
              Gets the shape parameter α (alpha)
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaDistribution.Beta">
            <summary>
              Gets the shape parameter β (beta).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaDistribution.Successes">
            <summary>
              Gets the number of successes <c>r</c>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaDistribution.Trials">
            <summary>
              Gets the number of trials <c>n</c>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
            <remarks>The Beta's mean is computed as μ = a / (a + b).</remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
            <remarks>The Beta's variance is computed as σ² = (a * b) / ((a + b)² * (a + b + 1)).</remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <remarks>
             The beta distribution's mode is given
             by <c>(a - 1) / (a + b - 2).</c>
            </remarks>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution">
            <summary>
              Beta prime distribution.
            </summary>
            
            <remarks>
            <para>
              In probability theory and statistics, the beta prime distribution (also known as inverted 
              beta distribution or beta distribution of the second kind) is an absolutely continuous 
              probability distribution defined for <c>x &gt; 0</c> with two parameters α and β, having the
              probability density function:</para>
              
            <code>
                      x^(α-1) (1+x)^(-α-β)
              f(x) =  --------------------
                            B(α,β)
            </code>
            
            <para>
              where B is the <see cref="P:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.Beta">Beta function</see>. While the related beta distribution is
              the conjugate prior distribution of the parameter of a <see cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution">Bernoulli
              distribution</see> expressed as a probability, the beta prime distribution is the conjugate prior
              distribution of the parameter of a Bernoulli distribution expressed in odds. The distribution is 
              a Pearson type VI distribution.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Beta_prime_distribution">
                  Wikipedia, The Free Encyclopedia. Beta Prime distribution. Available on: 
                  http://en.wikipedia.org/wiki/Beta_prime_distribution </a></description></item>
              </list></para>     
            </remarks>
            
            <example>
            <para>
              The following example shows how to create and test the main characteristics
              of an Beta prime distribution given its two non-negative shape parameters: </para>
              
            <code>
            // Create a new Beta-Prime distribution with shape (4,2)
            var betaPrime = new BetaPrimeDistribution(alpha: 4, beta: 2);
            
            double mean = betaPrime.Mean;     // 4.0
            double median = betaPrime.Median; // 2.1866398762435981
            double mode = betaPrime.Mode;     // 1.0
            double var = betaPrime.Variance;  // +inf
            
            double cdf = betaPrime.DistributionFunction(x: 0.4);           // 0.02570357589099781
            double pdf = betaPrime.ProbabilityDensityFunction(x: 0.4);     // 0.16999719504628183
            double lpdf = betaPrime.LogProbabilityDensityFunction(x: 0.4); // -1.7719733417957513
            
            double ccdf = betaPrime.ComplementaryDistributionFunction(x: 0.4); // 0.97429642410900219
            double icdf = betaPrime.InverseDistributionFunction(p: cdf);       // 0.39999982363709291
            
            double hf = betaPrime.HazardFunction(x: 0.4);            // 0.17448200654307533
            double chf = betaPrime.CumulativeHazardFunction(x: 0.4); // 0.026039684773113869
            
            string str = betaPrime.ToString(CultureInfo.InvariantCulture); // BetaPrime(x; α = 4, β = 2)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a new Beta-Prime distribution with the given 
              two non-negative shape parameters <c>a</c> and <c>b</c>.
            </summary>
            
            <param name="alpha">The distribution's non-negative shape parameter a.</param>
            <param name="beta">The distribution's non-negative shape parameter b.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.Alpha">
            <summary>
              Gets the distribution's non-negative shape parameter a.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.Beta">
            <summary>
              Gets the distribution's non-negative shape parameter b.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BetaPrimeDistribution.Support">
            <summary>
              Gets the support interval for this distribution, which 
              for the Beta- Prime distribution ranges from 0 to all 
              positive numbers.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.CauchyDistribution">
             <summary>
               Cauchy-Lorentz distribution.
             </summary>
             
             <remarks>
             <para>
               The Cauchy distribution, named after Augustin Cauchy, is a continuous probability
               distribution. It is also known, especially among physicists, as the Lorentz
               distribution (after Hendrik Lorentz), Cauchy–Lorentz distribution, Lorentz(ian)
               function, or Breit–Wigner distribution. The simplest Cauchy distribution is called
               the standard Cauchy distribution. It has the distribution of a random variable that
               is the ratio of two independent standard normal random variables. </para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Cauchy_distribution">
                   Wikipedia, The Free Encyclopedia. Cauchy distribution. 
                   Available from: http://en.wikipedia.org/wiki/Cauchy_distribution </a></description></item>
               </list></para>
             </remarks>
             
             <example>
             <para>
               The following example demonstrates how to instantiate a Cauchy distribution
               with a given location parameter x0 and scale parameter γ (gamma), calculating
               its main properties and characteristics: </para>
               
             <code>
               double location = 0.42;
               double scale = 1.57;
               
               // Create a new Cauchy distribution with x0 = 0.42 and γ = 1.57 
               CauchyDistribution cauchy = new CauchyDistribution(location, scale);
               
               // Common measures
               double mean = cauchy.Mean;     // NaN - Cauchy's mean is undefined.
               double var = cauchy.Variance;  // NaN - Cauchy's variance is undefined.
               double median = cauchy.Median; // 0.42
               
               // Cumulative distribution functions
               double cdf = cauchy.DistributionFunction(x: 0.27);           // 0.46968025841608563
               double ccdf = cauchy.ComplementaryDistributionFunction(x: 0.27);          // 0.53031974158391437
               double icdf = cauchy.InverseDistributionFunction(p: 0.69358638272337991); // 1.5130304686978195
               
               // Probability density functions
               double pdf = cauchy.ProbabilityDensityFunction(x: 0.27);     // 0.2009112009763413
               double lpdf = cauchy.LogProbabilityDensityFunction(x: 0.27); // -1.6048922547266871
               
               // Hazard (failure rate) functions
               double hf = cauchy.HazardFunction(x: 0.27); // 0.3788491832800277
               double chf = cauchy.CumulativeHazardFunction(x: 0.27); // 0.63427516833243092
               
               // String representation
               string str = cauchy.ToString(CultureInfo.InvariantCulture); // "Cauchy(x; x0 = 0.42, γ = 1.57)
             </code>
             
             <para>
               The following example shows how to fit a Cauchy distribution (estimate its
               location and shape parameters) given a set of observation values. </para>
               
             <code>
               // Create an initial distribution
               CauchyDistribution cauchy = new CauchyDistribution();
               
               // Consider a vector of univariate observations
               double[] observations = { 0.25, 0.12, 0.72, 0.21, 0.62, 0.12, 0.62, 0.12 };
             
               // Fit to the observations
               cauchy.Fit(observations);
                 
               // Check estimated values
               double location = cauchy.Location; //  0.18383
               double gamma    = cauchy.Scale;    // -0.10530
             </code>
             
             <para>
               It is also possible to estimate only some of the Cauchy parameters at
               a time. For this, you can specify a <see cref="T:Accord.Statistics.Distributions.Fitting.CauchyOptions"/> object
               and pass it alongside the observations:</para>
               
             <code>
               // Create options to estimate location only
               CauchyOptions options = new CauchyOptions()
               {
                   EstimateLocation = true,
                   EstimateScale = false
               };
             
               // Create an initial distribution with a pre-defined scale
               CauchyDistribution cauchy = new CauchyDistribution(location: 0, scale: 4.2);
            
               // Fit to the observations
               cauchy.Fit(observations, options);
            
               // Check estimated values
               double location = cauchy.Location; //  0.3471218110202
               double gamma    = cauchy.Scale;    //  4.2 (unchanged)
             </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Distributions.Fitting.CauchyOptions"/>
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution"/>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.#ctor">
            <summary>
              Constructs a Cauchy-Lorentz distribution
              with location parameter 0 and scale 1.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Cauchy-Lorentz distribution
              with given location and scale parameters.
            </summary>
            
            <param name="location">The location parameter x0.</param>
            <param name="scale">The scale parameter gamma (γ).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
              
            <para>
              The Cauchy's CDF is defined as CDF(x) = 1/π * atan2(x-location, scale) + 0.5.
            </para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
            <para>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.</para>
              
            <para>
              The Cauchy's PDF is defined as PDF(x) = c / (1.0 + ((x-location)/scale)²) 
              where the constant c is given by c = 1.0 / (π * scale);
            </para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <seealso cref="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.ProbabilityDensityFunction(System.Double)"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.CauchyDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.CauchyOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.CauchyDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Random(System.Double,System.Double)">
            <summary>
              Generates a random observation from the 
              Cauchy distribution with the given parameters.
            </summary>
            
            <param name="location">The location parameter x0.</param>
            <param name="scale">The scale parameter gamma.</param>
            
            <returns>A random double value sampled from the specified Cauchy distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Random(System.Double,System.Double,System.Int32)">
            <summary>
              Generates a random vector of observations from the 
              Cauchy distribution with the given parameters.
            </summary>
            
            <param name="location">The location parameter x0.</param>
            <param name="scale">The scale parameter gamma.</param>
            <param name="samples">The number of samples to generate.</param>
            
            <returns>An array of double values sampled from the specified Cauchy distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.CauchyDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Location">
            <summary>
              Gets the distribution's 
              location parameter x0.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Scale">
            <summary>
              Gets the distribution's
              scale parameter gamma.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>The distribution's median value.</value>
            
            <remarks>
              The Cauchy's median is the location parameter x0.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>The distribution's mode value.</value>
            
            <remarks>
              The Cauchy's median is the location parameter x0.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Mean">
            <summary>
              Cauchy's mean is undefined.
            </summary>
            
            <value>Undefined.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Variance">
            <summary>
              Cauchy's variance is undefined.
            </summary>
            
            <value>Undefined.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
            <remarks>
              The Cauchy's entropy is defined as log(scale) + log(4*π).
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.CauchyDistribution.Standard">
            <summary>
              Gets the Standard Cauchy Distribution,
              with zero location and unitary shape.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.DirichletDistribution">
             <summary>
               Dirichlet distribution.
             </summary>
             
             <remarks>
             <para>
               The Dirichlet distribution, often denoted Dir(α), is a family of continuous 
               multivariate probability distributions parameterized by a vector α of positive
               real numbers. It is the multivariate generalization of the beta distribution.</para>
             <para>
               Dirichlet distributions are very often used as prior distributions in Bayesian
               statistics, and in fact the Dirichlet distribution is the conjugate prior of the
               categorical distribution and multinomial distribution. That is, its probability
               density function returns the belief that the probabilities of K rival events are
               x<sub>i</sub> given that each event has been observed α<sub>i</sub>−1 times.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Dirichlet_distribution">
                   Wikipedia, The Free Encyclopedia. Dirichlet distribution. 
                   Available from: http://en.wikipedia.org/wiki/Dirichlet_distribution </a></description></item>
               </list></para>
             </remarks>
             
             <example>
             <code>
               // Create a Dirichlet with the following concentrations
               var dirich = new DirichletDistribution(0.42, 0.57, 1.2);
               
               // Common measures
               double[] mean = dirich.Mean;     // { 0.19, 0.26, 0.54 }
               double[] median = dirich.Median; // { 0.19, 0.26, 0.54 }
               double[] var = dirich.Variance;  // { 0.048, 0.060, 0.077 }
               double[,] cov = dirich.Covariance; // see below
               
               
               //       0.0115297440926238 0.0156475098399895 0.0329421259789253 
               // cov = 0.0156475098399895 0.0212359062114143 0.0447071709713986 
               //       0.0329421259789253 0.0447071709713986 0.0941203599397865
               
               // (the above matrix representation has been transcribed to text using)
               string str = cov.ToString(DefaultMatrixFormatProvider.InvariantCulture);
               
               
               // Probability mass functions
               double pdf1 = dirich.ProbabilityDensityFunction(new double[] { 2, 5 }); // 0.12121671541846207
               double pdf2 = dirich.ProbabilityDensityFunction(new double[] { 4, 2 }); // 0.12024840322466089
               double pdf3 = dirich.ProbabilityDensityFunction(new double[] { 3, 7 }); // 0.082907634905068528
               double lpdf = dirich.LogProbabilityDensityFunction(new double[] { 3, 7 }); // -2.4900281233124044
             </code>
             </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.DirichletDistribution.#ctor(System.Int32,System.Double)">
            <summary>
              Creates a new symmetric Dirichlet distribution.
            </summary>
            
            <param name="dimension">The number <c>k</c> of categories.</param>
            <param name="concentration">The common concentration parameter α (alpha).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.DirichletDistribution.#ctor(System.Double[])">
            <summary>
              Creates a new Dirichlet distribution.
            </summary>
            
            <param name="concentrations">The concentration parameters α<sub>i</sub> (alpha_i).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.DirichletDistribution.ProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range. For a
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.DirichletDistribution.DistributionFunction(System.Double[])">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.DirichletDistribution.LogProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the log-probability density function (pdf)
              for this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range. For a
            univariate distribution, this should be a single
            double value. For a multivariate distribution,
            this should be a double array.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.DirichletDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.DirichletDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.DirichletDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.DirichletDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>A vector containing the mean values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.DirichletDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>A vector containing the variance values for the distribution.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.DirichletDistribution.Covariance">
            <summary>
              Gets the variance-covariance matrix for this distribution.
            </summary>
            
            <value>A matrix containing the covariance values for the distribution.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution">
            <summary>
              Hidden Markov Model probability distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution"/> class.
            </summary>
            
            <param name="model">The model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution.DistributionFunction(System.Int32[])">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution.ProbabilityMassFunction(System.Int32[])">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution.LogProbabilityMassFunction(System.Int32[])">
            <summary>
              Gets the log-probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.HiddenMarkovOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              An array of double-precision values containing
              the mean values for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution.Variance">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              An array of double-precision values containing
              the variance values for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.HiddenMarkovDistribution.Covariance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              An multidimensional array of double-precision values
              containing the covariance values for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution">
            <summary>
              Birnbaum-Saunders (Fatigue Life) distribution.
            </summary>
            
            <remarks>
            <para>
              The Birnbaum–Saunders distribution, also known as the fatigue life distribution,
              is a probability distribution used extensively in reliability applications to model 
              failure times. There are several alternative formulations of this distribution in
              the literature. It is named after Z. W. Birnbaum and S. C. Saunders. </para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Birnbaum%E2%80%93Saunders_distribution">
                  Wikipedia, The Free Encyclopedia. Birnbaum–Saunders distribution. 
                  Available from: http://en.wikipedia.org/wiki/Birnbaum%E2%80%93Saunders_distribution </a></description></item>
                <item><description><a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda366a.htm">
                  NIST/SEMATECH e-Handbook of Statistical Methods, Birnbaum-Saunders (Fatigue Life) Distribution
                  Available from: http://www.itl.nist.gov/div898/handbook/eda/section3/eda366a.htm </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <para>
              This example shows how to create a Birnbaum-Saunders distribution
              and compute some of its properties.</para>
              
            <code>
            // Creates a new Birnbaum-Saunders distribution
            var bs = new BirnbaumSaundersDistribution(shape: 0.42);
            
            double mean = bs.Mean;     // 1.0882000000000001
            double median = bs.Median; // 1.0
            double var = bs.Variance;  // 0.21529619999999997
            
            double cdf = bs.DistributionFunction(x: 1.4); // 0.78956384911580346
            double pdf = bs.ProbabilityDensityFunction(x: 1.4); // 1.3618433601225426
            double lpdf = bs.LogProbabilityDensityFunction(x: 1.4); // 0.30883919386130815
            
            double ccdf = bs.ComplementaryDistributionFunction(x: 1.4); // 0.21043615088419654
            double icdf = bs.InverseDistributionFunction(p: cdf); // 2.0618330099769064
            
            double hf = bs.HazardFunction(x: 1.4); // 6.4715276077824093
            double chf = bs.CumulativeHazardFunction(x: 1.4); // 1.5585729930861034
            
            string str = bs.ToString(CultureInfo.InvariantCulture); // BirnbaumSaunders(x; μ = 0, β = 1, γ = 0.42)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.#ctor">
            <summary>
              Constructs a Birnbaum-Saunders distribution
              with location parameter 0, scale 1, and shape 1.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.#ctor(System.Double)">
            <summary>
              Constructs a Birnbaum-Saunders distribution
              with location parameter 0, scale 1, and the
              given shape.
            </summary>
            
            <param name="shape">The shape parameter gamma (γ). Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Constructs a Birnbaum-Saunders distribution
              with given location, shape and scale parameters.
            </summary>
            
            <param name="location">The location parameter μ. Default is 0.</param>
            <param name="scale">The scale parameter beta (β). Default is 1.</param>
            <param name="shape">The shape parameter gamma (γ). Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
            <para>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.DistributionFunction(System.Double)"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.Location">
            <summary>
              Gets the distribution's location parameter μ.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.Scale">
            <summary>
              Gets the distribution's scale parameter β.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.Shape">
            <summary>
              Gets the distribution's shape parameter γ.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <remarks>
              The Birnbaum Saunders mean is defined as 
              <c>1 + 0.5<see cref="P:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.Shape">γ</see>²</c>.
            </remarks>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <remarks>
              The Birnbaum Saunders variance is defined as 
              <c><see cref="P:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.Shape">γ</see>² (1 + (5/4)<see cref="P:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.Shape">γ</see>²)</c>.
            </remarks>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.Mode">
            <summary>
              This method is not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BirnbaumSaundersDistribution.Entropy">
            <summary>
              This method is not supported.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistributionType">
            <summary>
              Distribution types supported by the Anderson-Darling distribution.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistributionType.Uniform">
            <summary>
              The statistic should reflect p-values for
              a Anderson-Darling comparison against an
              Uniform distribution.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistributionType.Normal">
            <summary>
              The statistic should reflect p-values for
              a Anderson-Darling comparison against a
              Normal distribution.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution">
            <summary>
              Anderson-Darling (A²) distribution.
            </summary>
            
            <example>
            <code>
            // Create a new Anderson Darling distribution (A²) for comparing against a Gaussian
            var a2 = new AndersonDarlingDistribution(AndersonDarlingDistributionType.Normal, 30);
            
            double median = a2.Median; // 0.33089957635450062
            
            double chf = a2.CumulativeHazardFunction(x: 0.27);           // 0.42618068373640966
            double cdf = a2.DistributionFunction(x: 0.27);               // 0.34700165471995292
            double ccdf = a2.ComplementaryDistributionFunction(x: 0.27); // 0.65299834528004708
            double icdf = a2.InverseDistributionFunction(p: cdf);        // 0.27000000012207787
            
            string str = a2.ToString(CultureInfo.InvariantCulture); // "A²(x; n = 30)"
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Testing.AndersonDarlingTest"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.#ctor(Accord.Statistics.Distributions.Univariate.AndersonDarlingDistributionType,System.Double)">
            <summary>
              Creates a new Anderson-Darling distribution.
            </summary>
            
            <param name="type">The type of the compared distribution.</param>
            <param name="samples">The number of samples.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.ComplementaryDistributionFunction(System.Double)">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.DistributionType">
            <summary>
              Gets the type of the distribution that the 
              Anderson-Darling is being performed against.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.NumberOfSamples">
            <summary>
              Gets the number of samples distribution parameter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.Mean">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.Mode">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.Variance">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.AndersonDarlingDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution">
             <summary>
               Kumaraswamy distribution.
             </summary>
             
             <remarks>
             <para>
               In probability and statistics, the Kumaraswamy's double bounded distribution is a 
               family of continuous probability distributions defined on the interval [0,1] differing 
               in the values of their two non-negative shape parameters, a and b.
               It is similar to the Beta distribution, but much simpler to use especially in simulation 
               studies due to the simple closed form of both its probability density function and 
               cumulative distribution function. This distribution was originally proposed by Poondi 
               Kumaraswamy for variables that are lower and upper bounded.</para>
            
             <para>
               A good example of the use of the Kumaraswamy distribution is the storage volume of a 
               reservoir of capacity z<sub>max</sub> whose upper bound is z<sub>max</sub> and lower 
               bound is 0 (Fletcher and Ponnambalam, 1996).</para>
            
               
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Kumaraswamy_distribution">
                   Wikipedia, The Free Encyclopedia. Kumaraswamy distribution. Available on: 
                   http://en.wikipedia.org/wiki/Kumaraswamy_distribution </a></description></item>
               </list></para>     
             </remarks>
             
             <example>
             <para>
               The following example shows how to create and test the main characteristics
               of an Kumaraswamy distribution given its two non-negative shape parameters: </para>
               
             <code>
             // Create a new Kumaraswamy distribution with shape (4,2)
             var kumaraswamy = new KumaraswamyDistribution(a: 4, b: 2);
             
             double mean = kumaraswamy.Mean;     // 0.71111111111111114
             double median = kumaraswamy.Median; // 0.73566031573423674
             double mode = kumaraswamy.Mode;     // 0.80910671157022118
             double var = kumaraswamy.Variance;  // 0.027654320987654302
             
             double cdf = kumaraswamy.DistributionFunction(x: 0.4);           // 0.050544639999999919
             double pdf = kumaraswamy.ProbabilityDensityFunction(x: 0.4);     // 0.49889280000000014
             double lpdf = kumaraswamy.LogProbabilityDensityFunction(x: 0.4); // -0.69536403596913343
             
             double ccdf = kumaraswamy.ComplementaryDistributionFunction(x: 0.4); // 0.94945536000000008
             double icdf = kumaraswamy.InverseDistributionFunction(p: cdf);       // 0.40000011480618253
             
             double hf = kumaraswamy.HazardFunction(x: 0.4);            // 0.52545155993431869
             double chf = kumaraswamy.CumulativeHazardFunction(x: 0.4); // 0.051866764053008864
             
             string str = kumaraswamy.ToString(CultureInfo.InvariantCulture); // Kumaraswamy(x; a = 4, b = 2)
             </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a new Kumaraswamy's double bounded distribution with 
              the given two non-negative shape parameters <c>a</c> and <c>b</c>.
            </summary>
            
            <param name="a">The distribution's non-negative shape parameter a.</param>
            <param name="b">The distribution's non-negative shape parameter b.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.A">
            <summary>
              Gets the distribution's non-negative shape parameter a.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.B">
            <summary>
              Gets the distribution's non-negative shape parameter b.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KumaraswamyDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution">
            <summary>
              Abstract class for univariate discrete probability distributions.
            </summary>
            <remarks>
            <para>
              A probability distribution identifies either the probability of each value of an
              unidentified random variable (when the variable is discrete), or the probability
              of the value falling within a particular interval (when the variable is continuous).</para>
            <para>
              The probability distribution describes the range of possible values that a random
              variable can attain and the probability that the value of the random variable is
              within any (measurable) subset of that range.</para>  
            <para>
              The function describing the probability that a given discrete value will
              occur is called the probability function (or probability mass function,
              abbreviated PMF), and the function describing the cumulative probability
              that a given value or any value smaller than it will occur is called the
              distribution function (or cumulative distribution function, abbreviated CDF).</para>  
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Probability_distribution">
                  Wikipedia, The Free Encyclopedia. Probability distribution. Available on:
                  http://en.wikipedia.org/wiki/Probability_distribution </a></description></item>
                <item><description><a href="http://mathworld.wolfram.com/StatisticalDistribution.html">
                  Weisstein, Eric W. "Statistical Distribution." From MathWorld--A Wolfram Web Resource.
                  http://mathworld.wolfram.com/StatisticalDistribution.html </a></description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.GeometricDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.PoissonDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.#ctor">
            <summary>
              Constructs a new UnivariateDistribution class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.GetRange(System.Double)">
            <summary>
              Gets the distribution range within a given percentile.
            </summary>
            
            <remarks>
              If <c>0.25</c> is passed as the <paramref name="percentile"/> argument, 
              this function returns the same as the <see cref="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Quartiles"/> function.
            </remarks>
            
            <param name="percentile">
              The percentile at which the distribution ranges will be returned.</param>
            
            <value>A <see cref="T:AForge.DoubleRange"/> object containing the minimum value
            for the distribution value, and the third quartile (Q2) as the maximum.</value>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Accord#Statistics#Distributions#IUnivariateDistribution#GetRange(System.Double)">
            <summary>
              Gets the distribution range within a given percentile.
            </summary>
            
            <remarks>
              If <c>0.25</c> is passed as the <paramref name="percentile"/> argument, 
              this function returns the same as the <see cref="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Quartiles"/> function.
            </remarks>
            
            <param name="percentile">
              The percentile at which the distribution ranges will be returned.</param>
            
            <value>A <see cref="T:AForge.DoubleRange"/> object containing the minimum value
            for the distribution value, and the third quartile (Q2) as the maximum.</value>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#DistributionFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets P(X ≤ k), the cumulative distribution function
              (cdf) for this distribution evaluated at point <c>k</c>.
            </summary>
            
            <param name="k">
              A single point in the distribution range.</param>
              
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.DistributionFunction(System.Int32,System.Boolean)">
            <summary>
              Gets P(X ≤ k) or P(X &lt; k), the cumulative distribution function
              (cdf) for this distribution evaluated at point <c>k</c>, depending
              on the value of the <paramref name="inclusive"/> parameter.
            </summary>
            
            <param name="k">
              A single point in the distribution range.</param>
            <param name="inclusive">
              True to return P(X ≤ x), false to return P(X &lt; x). Default is true.</param>
              
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
            <example>
            <code>
            // Compute P(X = k) 
            double equal = dist.ProbabilityMassFunction(k: 1);
            
            // Compute P(X &lt; k) 
            double less = dist.DistributionFunction(k: 1, inclusive: false);
            
            // Compute P(X ≤ k) 
            double lessThanOrEqual = dist.DistributionFunction(k: 1, inclusive: true);
            
            // Compute P(X > k) 
            double greater = dist.ComplementaryDistributionFunction(k: 1);
            
            // Compute P(X ≥ k) 
            double greaterThanOrEqual = dist.ComplementaryDistributionFunction(k: 1, inclusive: true);
            </code>
            </example>
            
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.DistributionFunction(System.Int32,System.Int32)">
            <summary>
              Gets the cumulative distribution function (cdf) for this
              distribution in the semi-closed interval (a; b] given as
              <c>P(a &lt; X ≤ b)</c>.
            </summary>
            
            <param name="a">The start of the semi-closed interval (a; b].</param>
            <param name="b">The end of the semi-closed interval (a; b].</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function 
              is also known as the Quantile function.
            </summary>
            
            <remarks>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.
            </remarks>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>A sample which could original the given probability 
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.DistributionFunction(System.Int32)"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.BaseInverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c> using a numerical
              approximation based on binary search.
            </summary>
            
            <remarks>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.
            </remarks>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>A sample which could original the given probability 
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.DistributionFunction(System.Int32)"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.QuantileDensityFunction(System.Double)">
            <summary>
              Gets the first derivative of the <see cref="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.InverseDistributionFunction(System.Double)">
              inverse distribution function</see> (icdf) for this distribution evaluated
              at probability <c>p</c>. 
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.ComplementaryDistributionFunction(System.Int32,System.Boolean)">
             <summary>
               Gets the complementary cumulative distribution function
               (ccdf) for this distribution evaluated at point <c>k</c>.
               This function is also known as the Survival function.
             </summary>
             
             <param name="k">
               A single point in the distribution range.</param>
             <param name="inclusive">
               True to return P(X &gt;= x), false to return P(X &gt; x). Default is false.</param>
            
             <remarks>
               The Complementary Cumulative Distribution Function (CCDF) is
               the complement of the Cumulative Distribution Function, or 1
               minus the CDF.
             </remarks>
             
             <example>
             <code>
             // Compute P(X = k) 
             double equal = dist.ProbabilityMassFunction(k: 1);
             
             // Compute P(X &lt; k) 
             double less = dist.DistributionFunction(k: 1, inclusive: false);
             
             // Compute P(X ≤ k) 
             double lessThanOrEqual = dist.DistributionFunction(k: 1, inclusive: true);
             
             // Compute P(X > k) 
             double greater = dist.ComplementaryDistributionFunction(k: 1);
             
             // Compute P(X ≥ k) 
             double greaterThanOrEqual = dist.ComplementaryDistributionFunction(k: 1, inclusive: true);
             </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.ComplementaryDistributionFunction(System.Int32)">
            <summary>
              Gets P(X &gt; k) the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>k</c>.
              This function is also known as the Survival function.
            </summary>
            
            <param name="k">
              A single point in the distribution range.</param>
              
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">
              A single point in the distribution range.</param>
              
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>k</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.LogProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the log-probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">
              A single point in the distribution range.</param>
              
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>k</c> will occur.
            </remarks>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.HazardFunction(System.Int32)">
            <summary>
              Gets the hazard function, also known as the failure rate or
              the conditional failure density function for this distribution
              evaluated at point <c>x</c>.
            </summary>
            
            <remarks>
              The hazard function is the ratio of the probability
              density function f(x) to the survival function, S(x).
            </remarks>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <returns>
              The conditional failure density function <c>h(x)</c>
              evaluated at <c>x</c> in the current distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.CumulativeHazardFunction(System.Int32)">
            <summary>
              Gets the cumulative hazard function for this
              distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
            
            <returns>
              The cumulative hazard function <c>H(x)</c>  
              evaluated at <c>x</c> in the current distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Double[],System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Double[],System.Int32[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Double[],System.Int32[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Int32[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Int32[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Int32[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Int32[],System.Int32[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
              
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>A <see cref="T:AForge.IntRange"/> containing
             the support interval for this distribution.</value>
             
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>The distribution's mode value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>The distribution's median value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.StandardDeviation">
            <summary>
              Gets the Standard Deviation (the square root of
              the variance) for the current distribution.
            </summary>
            
            <value>The distribution's standard deviation.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Quartiles">
            <summary>
              Gets the Quartiles for this distribution.
            </summary>
            
            <value>A <see cref="T:AForge.DoubleRange"/> object containing the first quartile
            (Q1) as its minimum value, and the third quartile (Q2) as the maximum.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Accord#Statistics#Distributions#IUnivariateDistribution#Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing 
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Accord#Statistics#Distributions#IUnivariateDistribution{System#Int32}#Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing 
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Accord#Statistics#Distributions#IUnivariateDistribution{System#Double}#Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing 
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution">
             <summary>
               Shapiro-Wilk distribution.
             </summary>
            
             <remarks>
             <para>
               The Shapiro-Wilk distribution models the distribution of <see cref="T:Accord.Statistics.Testing.ShapiroWilkTest">
               Shapiro-Wilk's</see> <see cref="T:Accord.Statistics.Testing.IHypothesisTest">test statistic</see>. </para>  
               
               
             <para>    
               References:
               <list type="bullet">
                 <item><description><a href="http://sci2s.ugr.es/keel/pdf/algorithm/articulo/royston1982.pdf">
                   Royston, P. "Algorithm AS 181: The W test for Normality", Applied Statistics (1982),
                   Vol. 31, pp. 176–180. </a></description></item>    
                 <item><description><a href="http://lib.stat.cmu.edu/apstat/R94">
                   Royston, P. "Remark AS R94", Applied Statistics (1995), Vol. 44, No. 4, pp. 547-551.
                   Available at http://lib.stat.cmu.edu/apstat/R94 </a></description></item>
                 <item><description>
                   Royston, P. "Approximating the Shapiro-Wilk W-test for non-normality",
                   Statistics and Computing (1992), Vol. 2, pp. 117-119. </description></item>
                 <item><description>
                   Royston, P. "An Extension of Shapiro and Wilk's W Test for Normality to Large
                   Samples", Journal of the Royal Statistical Society Series C (1982a), Vol. 31,
                   No. 2, pp. 115-124. </description></item>
               </list></para>
             </remarks>
             
             <example>
             <code>
             // Create a new Shapiro-Wilk's W for 5 samples
             var sw = new ShapiroWilkDistribution(samples: 5);
             
             double mean = sw.Mean;     // 0.81248567196628929
             double median = sw.Median; // 0.81248567196628929
             double mode = sw.Mode;     // 0.81248567196628929
             
             double cdf = sw.DistributionFunction(x: 0.84); // 0.83507812080728383
             double pdf = sw.ProbabilityDensityFunction(x: 0.84); // 0.82021062372326459
             double lpdf = sw.LogProbabilityDensityFunction(x: 0.84); // -0.1981941135071546
             
             double ccdf = sw.ComplementaryDistributionFunction(x: 0.84); // 0.16492187919271617
             double icdf = sw.InverseDistributionFunction(p: cdf); // 0.84000000194587177
             
             double hf = sw.HazardFunction(x: 0.84); // 4.9733281462602292
             double chf = sw.CumulativeHazardFunction(x: 0.84); // 1.8022833766369502
             
             string str = sw.ToString(CultureInfo.InvariantCulture); // W(x; n = 12)
             </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.#ctor(System.Int32)">
            <summary>
              Creates a new Shapiro-Wilk distribution.
            </summary>
            
            <param name="samples">The number of samples.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.ComplementaryDistributionFunction(System.Double)">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.NumberOfSamples">
            <summary>
              Gets the number of samples distribution parameter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.Variance">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShapiroWilkDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution">
            <summary>
              Log-Logistic distribution.
            </summary>
            
            <remarks>
            <para>
              In probability and statistics, the log-logistic distribution (known as the Fisk 
              distribution in economics) is a continuous probability distribution for a non-negative
              random variable. It is used in survival analysis as a parametric model for events 
              whose rate increases initially and decreases later, for example mortality rate from
              cancer following diagnosis or treatment. It has also been used in hydrology to model 
              stream flow and precipitation, and in economics as a simple model of the distribution
              of wealth or income.</para>
              
            <para>
              The log-logistic distribution is the probability distribution of a random variable
              whose logarithm has a logistic distribution. It is similar in shape to the log-normal
              distribution but has heavier tails. Its cumulative distribution function can be written
              in closed form, unlike that of the log-normal.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Log-logistic_distribution">
                  Wikipedia, The Free Encyclopedia. Log-logistic distribution. Available on: 
                  http://en.wikipedia.org/wiki/Log-logistic_distribution </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              This examples shows how to create a Log-Logistic distribution
              and compute some of its properties and characteristics.</para>
              
            <code>
            // Create a LLD2 distribution with scale = 0.42, shape = 2.2
            var log = new LogLogisticDistribution(scale: 0.42, shape: 2.2);
            
            double mean = log.Mean;     // 0.60592605102976937
            double median = log.Median; // 0.42
            double mode = log.Mode;     // 0.26892249963239817
            double var = log.Variance;  // 1.4357858982592435
            
            double cdf = log.DistributionFunction(x: 1.4);           // 0.93393329906725353
            double pdf = log.ProbabilityDensityFunction(x: 1.4);     // 0.096960115938100763
            double lpdf = log.LogProbabilityDensityFunction(x: 1.4); // -2.3334555609306102
            
            double ccdf = log.ComplementaryDistributionFunction(x: 1.4); // 0.066066700932746525
            double icdf = log.InverseDistributionFunction(p: cdf);       // 1.4000000000000006
            
            double hf = log.HazardFunction(x: 1.4);            // 1.4676094699628273
            double chf = log.CumulativeHazardFunction(x: 1.4); // 2.7170904270953637
            
            string str = log.ToString(CultureInfo.InvariantCulture); // LogLogistic(x; α = 0.42, β = 2.2)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.LogisticDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.#ctor">
            <summary>
              Constructs a Log-Logistic distribution
              with unit scale and unit shape.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.#ctor(System.Double)">
            <summary>
              Constructs a Log-Logistic distribution
              with the given scale and unit shape.
            </summary>
            
            <param name="alpha">The distribution's scale value α (alpha).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Log-Logistic distribution
              with the given scale and shape parameters.
            </summary>
            
            <param name="alpha">The distribution's scale value α (alpha).</param>
            <param name="beta">The distribution's shape value β (beta).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.DistributionFunction(System.Double)"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.QuantileDensityFunction(System.Double)">
            <summary>
              Gets the first derivative of the <see cref="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.InverseDistributionFunction(System.Double)">
              inverse distribution function</see> (icdf) for this distribution evaluated
              at probability <c>p</c>. 
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.ComplementaryDistributionFunction(System.Double)">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.HazardFunction(System.Double)">
            <summary>
              Gets the hazard function, also known as the failure rate or
              the conditional failure density function for this distribution
              evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The conditional failure density function <c>h(x)</c>
              evaluated at <c>x</c> in the current distribution.
            </returns>
            
            <remarks>
              The hazard function is the ratio of the probability
              density function f(x) to the survival function, S(x).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.FromLocationShape(System.Double,System.Double)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution"/> using 
              the location-shape parametrization. In this parametrization,
              <see cref="T:Accord.Math.Beta"/> is taken as 1 / <paramref name="shape"/>.
            </summary>
            
            <param name="location">The location parameter μ (mu) [taken as μ = α].</param>
            <param name="shape">The distribution's shape value σ (sigma) [taken as σ = β].</param>
            
            <returns>
              A <see cref="T:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution"/> with α = μ  and β = 1/σ.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.Scale">
            <summary>
              Gets the distribution's scale value (α).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.Shape">
            <summary>
              Gets the distribution's shape value (β).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogLogisticDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution">
            <summary>
              Inverse chi-Square (χ²) probability distribution
            </summary>
            
            <remarks>
            <para>
              In probability and statistics, the inverse-chi-squared distribution (or 
              inverted-chi-square distribution) is a continuous probability distribution
              of a positive-valued random variable. It is closely related to the 
              <see cref="T:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution">chi-squared distribution</see> and its 
              specific importance is that it arises in the application of Bayesian 
              inference to the normal distribution, where it can be used as the 
              prior and posterior distribution for an unknown variance.</para>
              
            <para>
              The inverse-chi-squared distribution (or inverted-chi-square distribution) is
              the probability distribution of a random variable whose multiplicative inverse
              (reciprocal) has a <see cref="T:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution">chi-squared distribution</see>.
              It is also often defined as the distribution of a random variable whose reciprocal
              divided by its degrees of freedom is a chi-squared distribution. That is, if X has
              the chi-squared distribution with <c>v</c> degrees of freedom, then according to 
              the first definition, 1/X has the inverse-chi-squared distribution with <c>v</c>
              degrees of freedom; while according to the second definition, <c>v</c>X has the 
              inverse-chi-squared distribution with <c>v</c> degrees of freedom. Only the first 
              definition is covered by this class.
            </para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Inverse-chi-squared_distribution">
                  Wikipedia, The Free Encyclopedia. Inverse-chi-square distribution. Available on: 
                  http://en.wikipedia.org/wiki/Inverse-chi-squared_distribution </a></description></item>
              </list></para>     
            </remarks>
            
            <example>
            <para>
              The following example demonstrates how to create a new inverse
              χ² distribution with the given degrees of freedom. </para>
              
            <code>
              // Create a new inverse χ² distribution with 7 d.f.
              var invchisq = new InverseChiSquareDistribution(degreesOfFreedom: 7);
              double mean = invchisq.Mean;     // 0.2
              double median = invchisq.Median; // 6.345811068141737
              double var = invchisq.Variance;  // 75
              
              double cdf = invchisq.DistributionFunction(x: 6.27);           // 0.50860033566176044
              double pdf = invchisq.ProbabilityDensityFunction(x: 6.27);     // 0.0000063457380298844403
              double lpdf = invchisq.LogProbabilityDensityFunction(x: 6.27); // -11.967727146795536
              
              double ccdf = invchisq.ComplementaryDistributionFunction(x: 6.27); // 0.49139966433823956
              double icdf = invchisq.InverseDistributionFunction(p: cdf);        // 6.2699998329362963
              
              double hf = invchisq.HazardFunction(x: 6.27);            // 0.000012913598625327002
              double chf = invchisq.CumulativeHazardFunction(x: 6.27); // 0.71049750196765715
              
              string str = invchisq.ToString(); // "Inv-χ²(x; df = 7)"
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution.#ctor(System.Int32)">
            <summary>
              Constructs a new Inverse Chi-Square distribution 
              with the given degrees of freedom.
            </summary>
            
            <param name="degreesOfFreedom">The degrees of freedom for the distribution.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              the χ² distribution evaluated at point <c>x</c>.
            </summary>
            
            <remarks>
            <para>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.</para>
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the χ² distribution evaluated at point <c>x</c>.
            </summary>
            
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              This method is not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution.DegreesOfFreedom">
            <summary>
              Gets the Degrees of Freedom for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseChiSquareDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution">
            <summary>
              Hyperbolic Secant distribution.
            </summary>
            
            <remarks>
            <para>
              In probability theory and statistics, the hyperbolic secant distribution is
              a continuous probability distribution whose probability density function and
              characteristic function are proportional to the hyperbolic secant function. 
              The hyperbolic secant function is equivalent to the inverse hyperbolic cosine,
              and thus this distribution is also called the inverse-cosh distribution.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Sech_distribution">
                  Wikipedia, The Free Encyclopedia. Hyperbolic secant distribution. Available on: 
                  http://en.wikipedia.org/wiki/Sech_distribution </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              This examples shows how to create a Sech distribution,
              compute some of its properties and generate a number of
              random samples from it.</para>
              
            <code>
            // Create a new hyperbolic secant distribution
            var sech = new HyperbolicSecantDistribution();
            
            double mean = sech.Mean;     // 0.0
            double median = sech.Median; // 0.0
            double mode = sech.Mode;     // 0.0
            double var = sech.Variance;  // 1.0
            
            double cdf = sech.DistributionFunction(x: 1.4); // 0.92968538268895873
            double pdf = sech.ProbabilityDensityFunction(x: 1.4); // 0.10955386512899701
            double lpdf = sech.LogProbabilityDensityFunction(x: 1.4); // -2.2113389316917877
            
            double ccdf = sech.ComplementaryDistributionFunction(x: 1.4); // 0.070314617311041272
            double icdf = sech.InverseDistributionFunction(p: cdf); // 1.40
            
            double hf = sech.HazardFunction(x: 1.4); // 1.5580524977385339
            
            string str = sech.ToString(); // Sech(x)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution.#ctor">
            <summary>
              Constructs a Hyperbolic Secant (Sech) distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution.Mean">
            <summary>
              Gets the mean for this distribution (always zero).
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution.Median">
            <summary>
            Gets the median for this distribution (always zero).
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution.Variance">
            <summary>
              Gets the variance for this distribution (always one).
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution.StandardDeviation">
            <summary>
              Gets the Standard Deviation (the square root of
              the variance) for the current distribution.
            </summary>
            
            <value>
              The distribution's standard deviation.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution.Mode">
            <summary>
              Gets the mode for this distribution (always zero).
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution.Support">
            <summary>
              Gets the support interval for this distribution (-inf, +inf).
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HyperbolicSecantDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>
              The distribution's entropy.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.LogisticDistribution">
            <summary>
              Logistic distribution.
            </summary>
            
            <remarks>
            <para>
              In probability theory and statistics, the logistic distribution is a continuous
              probability distribution. Its cumulative distribution function is the logistic 
              function, which appears in logistic regression and feedforward neural networks.
              It resembles the normal distribution in shape but has heavier tails (higher 
              kurtosis). The <see cref="T:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution">Tukey lambda distribution</see>
              can be considered a generalization of the logistic distribution since it adds a
              shape parameter, λ (the Tukey distribution becomes logistic when λ is zero).</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Logistic_distribution">
                  Wikipedia, The Free Encyclopedia. Logistic distribution. Available on: 
                  http://en.wikipedia.org/wiki/Logistic_distribution </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              This examples shows how to create a Logistic distribution,
              compute some of its properties and generate a number of
              random samples from it.</para>
              
            <code>
            // Create a logistic distribution with μ = 0.42 and scale = 3
            var log = new LogisticDistribution(location: 0.42, scale: 1.2);
            
            double mean = log.Mean;     // 0.42
            double median = log.Median; // 0.42
            double mode = log.Mode;     // 0.42
            double var = log.Variance;  // 4.737410112522892
            
            double cdf = log.DistributionFunction(x: 1.4); // 0.693528308197921
            double pdf = log.ProbabilityDensityFunction(x: 1.4); // 0.17712232827170876
            double lpdf = log.LogProbabilityDensityFunction(x: 1.4); // -1.7309146649427332
            
            double ccdf = log.ComplementaryDistributionFunction(x: 1.4); // 0.306471691802079
            double icdf = log.InverseDistributionFunction(p: cdf); // 1.3999999999999997
            
            double hf = log.HazardFunction(x: 1.4); // 0.57794025683160088
            double chf = log.CumulativeHazardFunction(x: 1.4); // 1.1826298874077226
            
            string str = log.ToString(CultureInfo.InvariantCulture); // Logistic(x; μ = 0.42, scale = 1.2)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogisticDistribution.#ctor">
            <summary>
              Constructs a Logistic distribution
              with zero location and unit scale.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogisticDistribution.#ctor(System.Double)">
            <summary>
              Constructs a Logistic distribution
              with given location and unit scale.
            </summary>
            
            <param name="location">The distribution's location value μ (mu).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogisticDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Logistic distribution
              with given location and scale parameters.
            </summary>
            
            <param name="location">The distribution's location value μ (mu).</param>
            <param name="scale">The distribution's scale value s.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogisticDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogisticDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogisticDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogisticDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.LogisticDistribution.DistributionFunction(System.Double)"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogisticDistribution.QuantileDensityFunction(System.Double)">
            <summary>
              Gets the first derivative of the <see cref="M:Accord.Statistics.Distributions.Univariate.LogisticDistribution.InverseDistributionFunction(System.Double)">
              inverse distribution function</see> (icdf) for this distribution evaluated
              at probability <c>p</c>. 
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogisticDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LogisticDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogisticDistribution.Location">
            <summary>
              Gets the location value μ (mu).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogisticDistribution.Mean">
            <summary>
              Gets the location value μ (mu).
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogisticDistribution.Scale">
            <summary>
              Gets the distribution's scale value (s).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogisticDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogisticDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogisticDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <remarks>
              In the logistic distribution, the mode is equal
              to the distribution <see cref="P:Accord.Statistics.Distributions.Univariate.LogisticDistribution.Mean"/> value.
            </remarks>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogisticDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LogisticDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <remarks>
              In the logistic distribution, the entropy is 
              equal to <c>ln(<see cref="P:Accord.Statistics.Distributions.Univariate.LogisticDistribution.Scale">s</see>) + 2</c>.
            </remarks>
            
            <value>
              The distribution's entropy.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution">
            <summary>
              General continuous distribution.
            </summary>
            
            <remarks>
            <para>
              The general continuous distribution provides the automatic calculation for 
              a variety of distribution functions and measures given only definitions for
              the Probability Density Function (PDF) or the Cumulative Distribution Function
              (CDF). Values such as the Expected value, Variance, Entropy and others are
              computed through numeric integration.</para>
            </remarks>
            
            <example>
            <code>
            // Let's suppose we have a formula that defines a probability distribution
            // but we dont know much else about it. We don't know the form of its cumulative
            // distribution function, for example. We would then like to know more about
            // it, such as the underlying distribution's moments, characteristics, and 
            // properties.
            
            // Let's suppose the formula we have is this one:
            double mu = 5;
            double sigma = 4.2;
            
            Func&gt;double, double> df = x => 1.0 / (sigma * Math.Sqrt(2 * Math.PI))
                            * Math.Exp(-Math.Pow(x - mu, 2) / (2 * sigma * sigma));
            
            // And for the moment, let's also pretend we don't know it is actually the
            // p.d.f. of a Gaussian distribution with mean 5 and std. deviation of 4.2.
            
            // So, let's create a distribution based _solely_ on the formula we have:
            var distribution = GeneralContinuousDistribution.FromDensityFunction(df);
            
            // Now, we can check everything that we can know about it:
            
            double mean = distribution.Mean;     // 5      (note that all of those have been
            double median = distribution.Median; // 5       detected automatically simply from
            double var = distribution.Variance;  // 17.64   the given density formula through
            double mode = distribution.Mode;     // 5       numerical methods)
            
            double cdf = distribution.DistributionFunction(x: 1.4);           // 0.19568296915377595
            double pdf = distribution.ProbabilityDensityFunction(x: 1.4);     // 0.065784567984404935
            double lpdf = distribution.LogProbabilityDensityFunction(x: 1.4); // -2.7213699972695058
            
            double ccdf = distribution.ComplementaryDistributionFunction(x: 1.4); // 0.80431703084622408
            double icdf = distribution.InverseDistributionFunction(p: cdf);       // 1.3999999997024655
            
            double hf = distribution.HazardFunction(x: 1.4);            // 0.081789351041333558
            double chf = distribution.CumulativeHazardFunction(x: 1.4); // 0.21776177055276186
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.#ctor(AForge.DoubleRange,System.Func{System.Double,System.Double},System.Func{System.Double,System.Double})">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> with the given PDF and CDF functions.
            </summary>
            
            <param name="support">The distribution's support over the real line.</param>
            <param name="density">A probability density function.</param>
            <param name="distribution">A cumulative distribution function.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.#ctor(Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> with the given PDF and CDF functions.
            </summary>
            
            <param name="distribution">A distribution whose properties will be numerically estimated.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.FromDistribution(Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> 
              from an existing <see cref="T:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution">
              continuous distribution</see>.
            </summary>
            
            <param name="distribution">The distribution.</param>
            
            <returns>A <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> representing the same
            <paramref name="distribution"/> but whose measures and functions are computed
            using numerical integration and differentiation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.FromDensityFunction(System.Func{System.Double,System.Double})">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> 
              using only a probability density function definition.
            </summary>
            
            <param name="pdf">A probability density function.</param>
            
            <returns>A <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> created from the 
            <paramref name="pdf"/> whose measures and functions are computed using 
            numerical integration and differentiation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.FromDensityFunction(AForge.DoubleRange,System.Func{System.Double,System.Double})">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> 
              using only a probability density function definition.
            </summary>
            
            <param name="support">The distribution's support over the real line.</param>
            <param name="pdf">A probability density function.</param>
            
            <returns>A <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> created from the 
            <paramref name="pdf"/> whose measures and functions are computed using 
            numerical integration and differentiation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.FromDistributionFunction(System.Func{System.Double,System.Double})">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> 
              using only a cumulative distribution function definition.
            </summary>
            
            <param name="cdf">A cumulative distribution function.</param>
            
            <returns>A <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> created from the 
            <paramref name="cdf"/> whose measures and functions are computed using 
            numerical integration and differentiation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.FromDistributionFunction(AForge.DoubleRange,System.Func{System.Double,System.Double})">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> 
              using only a cumulative distribution function definition.
            </summary>
            
            <param name="support">The distribution's support over the real line.</param>
            <param name="cdf">A cumulative distribution function.</param>
            
            <returns>A <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> created from the 
            <paramref name="cdf"/> whose measures and functions are computed using 
            numerical integration and differentiation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.FromDensityFunction(AForge.DoubleRange,System.Func{System.Double,System.Double},Accord.Math.Integration.IUnivariateIntegration)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> 
              using only a probability density function definition.
            </summary>
            
            <param name="support">The distribution's support over the real line.</param>
            <param name="pdf">A probability density function.</param>
            <param name="method">The integration method to use for numerical computations.</param>
            
            <returns>A <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> created from the 
            <paramref name="pdf"/> whose measures and functions are computed using 
            numerical integration and differentiation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.FromDistributionFunction(AForge.DoubleRange,System.Func{System.Double,System.Double},Accord.Math.Integration.IUnivariateIntegration)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> 
              using only a cumulative distribution function definition.
            </summary>
            
            <param name="support">The distribution's support over the real line.</param>
            <param name="cdf">A cumulative distribution function.</param>
            <param name="method">The integration method to use for numerical computations.</param>
            
            <returns>A <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution"/> created from the 
            <paramref name="cdf"/> whose measures and functions are computed using 
            numerical integration and differentiation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralContinuousDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.LevyDistribution">
             <summary>
               Lévy distribution.
             </summary>
             
             <remarks>
             <para>
               In probability theory and statistics, the Lévy distribution, named after Paul Lévy, is a continuous 
               probability distribution for a non-negative random variable. In spectroscopy, this distribution, with 
               frequency as the dependent variable, is known as a van der Waals profile. It is a special case of the
               inverse-gamma distribution.</para>
            
             <para>
               It is one of the few distributions that are stable and that have probability density functions that can
               be expressed analytically, the others being the normal distribution and the Cauchy distribution. All three
               are special cases of the stable distributions, which do not generally have a probability density function
               which can be expressed analytically.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="https://en.wikipedia.org/wiki/L%C3%A9vy_distribution">
                   Wikipedia, The Free Encyclopedia. Lévy distribution. Available on: 
                   https://en.wikipedia.org/wiki/L%C3%A9vy_distribution </a></description></item>
               </list></para> 
             </remarks>
             
             <example>
             <para>
               This examples shows how to create a Lévy distribution
               and how to compute some of its measures and properties.
             </para>
               
             <code>
             // Create a new Lévy distribution on 1 with scale 4.2:
             var levy = new LevyDistribution(location: 1, scale: 4.2);
             
             double mean = levy.Mean;     // +inf
             double median = levy.Median; // 10.232059220934481
             double mode = levy.Mode;     // NaN
             double var = levy.Variance;  // +inf
             
             double cdf = levy.DistributionFunction(x: 1.4); // 0.0011937454448720029
             double pdf = levy.ProbabilityDensityFunction(x: 1.4); // 0.016958939623898304
             double lpdf = levy.LogProbabilityDensityFunction(x: 1.4); // -4.0769601727487803
             
             double ccdf = levy.ComplementaryDistributionFunction(x: 1.4); // 0.99880625455512795
             double icdf = levy.InverseDistributionFunction(p: cdf); // 1.3999999
             
             double hf = levy.HazardFunction(x: 1.4); // 0.016979208476674869
             double chf = levy.CumulativeHazardFunction(x: 1.4); // 0.0011944585265140923
             
             string str = levy.ToString(CultureInfo.InvariantCulture); // Lévy(x; μ = 1, c = 4.2)
             </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LevyDistribution.#ctor">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Distributions.Univariate.LevyDistribution"/> 
              with zero location and unit scale.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LevyDistribution.#ctor(System.Double)">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Distributions.Univariate.LevyDistribution"/> in
              the given <paramref name="location"/> and with unit scale.
            </summary>
            
            <param name="location">The distribution's location.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LevyDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Distributions.Univariate.LevyDistribution"/> in the 
              given <paramref name="location"/> and <paramref name="scale"/>.
            </summary>
            
            <param name="location">The distribution's location.</param>
            <param name="scale">The distribution's scale.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LevyDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LevyDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LevyDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.LevyDistribution.DistributionFunction(System.Double)"/>.
            </returns>
            
            <remarks>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LevyDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LevyDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LevyDistribution.Location">
            <summary>
              Gets the location μ (mu) for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LevyDistribution.Scale">
            <summary>
              Gets the location c for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LevyDistribution.Mean">
            <summary>
              Gets the mean for this distribution, which for
              the Levy distribution is always positive infinity.
            </summary>
            
            <value>
              This property always returns <c>Double.PositiveInfinity</c>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LevyDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LevyDistribution.Variance">
            <summary>
              Gets the variance for this distribution, which for
              the Levy distribution is always positive infinity.
            </summary>
            
            <value>
              This property always returns <c>Double.PositiveInfinity</c>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LevyDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LevyDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LevyDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>
              The distribution's entropy.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution">
            <summary>
              Folded Normal (Gaussian) distribution.
            </summary>
            
            <remarks>
            <para>
              The folded normal distribution is a probability distribution related to the normal
              distribution. Given a normally distributed random variable X with mean μ and variance
              σ², the random variable Y = |X| has a folded normal distribution. Such a case may be
              encountered if only the magnitude of some variable is recorded, but not its sign. The
              distribution is called Folded because probability mass to the left of the x = 0 is 
             "folded" over by taking the absolute value.</para>
             
            <para>
              The Half-Normal (Gaussian) distribution <see cref="M:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.HalfNormal(System.Double)">is a special 
              case of this distribution and can be created using a named constructor</see>.
            </para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="https://en.wikipedia.org/wiki/Folded_normal_distribution">
                  Wikipedia, The Free Encyclopedia. Folded Normal distribution. Available on: 
                  https://en.wikipedia.org/wiki/Folded_normal_distribution </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              This examples shows how to create a Folded Normal distribution
              and how to compute some of its properties and measures.</para>
              
            <code>
            // Creates a new Folded Normal distribution based on a Normal
            // distribution with mean value 4 and standard deviation 4.2:
            //
            var fn = new FoldedNormalDistribution(mean: 4, stdDev: 4.2);
            
            double mean = fn.Mean;     // 4.765653108337438
            double median = fn.Median; // 4.2593565881862734
            double mode = fn.Mode;     // 2.0806531871308014
            double var = fn.Variance;  // 10.928550450993715
            
            double cdf = fn.DistributionFunction(x: 1.4);           // 0.16867109769018807
            double pdf = fn.ProbabilityDensityFunction(x: 1.4);     // 0.11998602818182187
            double lpdf = fn.LogProbabilityDensityFunction(x: 1.4); // -2.1203799747969523
            
            double ccdf = fn.ComplementaryDistributionFunction(x: 1.4); // 0.83132890230981193
            double icdf = fn.InverseDistributionFunction(p: cdf);       // 1.4
            
            double hf = fn.HazardFunction(x: 1.4);            // 0.14433039420191671
            double chf = fn.CumulativeHazardFunction(x: 1.4); // 0.18472977144474392
            
            string str = fn.ToString(CultureInfo.InvariantCulture); // FN(x; μ = 4, σ² = 17.64)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.#ctor">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution"/> 
              with zero mean and unit standard deviation.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.#ctor(System.Double)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution"/> with
              the given <paramref name="mean"/> and unit standard deviation.
            </summary>
            
            <param name="mean">
              The mean of the original normal distribution that should be folded.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution"/> with
              the given <paramref name="mean"/> and <paramref name="stdDev">
              standard deviation</paramref>
            </summary>
            
            <param name="mean">
              The mean of the original normal distribution that should be folded.</param>
            <param name="stdDev">
              The standard deviation of the original normal distribution that should be folded.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.HalfNormal(System.Double)">
            <summary>
              Creates a new Half-normal distribution with the given<paramref name="stdDev">
              standard deviation</paramref>. The half-normal distribution is a special case 
              of the <see cref="T:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution"/> when location is zero.
            </summary>
            
            <param name="stdDev">
              The standard deviation of the original normal distribution that should be folded.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FoldedNormalDistribution.Entropy">
            <summary>
              This method is not supported.
            </summary>
            
            <exception cref="T:System.NotSupportedException"/>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution">
            <summary>
              Shift Log-Logistic distribution.
            </summary>
            
            <remarks>
            <para>
              The shifted log-logistic distribution is a probability distribution also known as
              the generalized log-logistic or the three-parameter log-logistic distribution. It
              has also been called the generalized logistic distribution, but this conflicts with
              other uses of the term: see generalized logistic distribution.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Shifted_log-logistic_distribution">
                  Wikipedia, The Free Encyclopedia. Shifted log-logistic distribution. Available on: 
                  http://en.wikipedia.org/wiki/Shifted_log-logistic_distribution </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              This examples shows how to create a Shifted Log-Logistic distribution,
              compute some of its properties and generate a number of random samples
              from it.</para>
              
            <code>
            // Create a LLD3 distribution with μ = 0.0, scale = 0.42, and shape = 0.1
            var log = new ShiftedLogLogisticDistribution(location: 0, scale: 0.42, shape: 0.1);
            
            double mean = log.Mean;     // 0.069891101544818923
            double median = log.Median; // 0.0
            double mode = log.Mode;     // -0.083441677069328604
            double var = log.Variance;  // 0.62447259946747213
            
            double cdf = log.DistributionFunction(x: 1.4); // 0.94668863559417671
            double pdf = log.ProbabilityDensityFunction(x: 1.4); // 0.090123683626808615
            double lpdf = log.LogProbabilityDensityFunction(x: 1.4); // -2.4065722895662613
            
            double ccdf = log.ComplementaryDistributionFunction(x: 1.4); // 0.053311364405823292
            double icdf = log.InverseDistributionFunction(p: cdf); // 1.4000000037735139
            
            double hf = log.HazardFunction(x: 1.4); // 1.6905154207038875
            double chf = log.CumulativeHazardFunction(x: 1.4); // 2.9316057546685061
            
            string str = log.ToString(CultureInfo.InvariantCulture); // LLD3(x; μ = 0, σ = 0.42, ξ = 0.1)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.LogisticDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.ParetoDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.#ctor">
            <summary>
              Constructs a Shifted Log-Logistic distribution
              with zero location, unit scale, and zero shape.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.#ctor(System.Double)">
            <summary>
              Constructs a Shifted Log-Logistic distribution
              with the given location, unit scale and zero shape.
            </summary>
            
            <param name="location">The distribution's location value μ (mu).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Shifted Log-Logistic distribution
              with the given location and scale and zero shape.
            </summary>
            
            <param name="location">The distribution's location value μ (mu).</param>
            <param name="scale">The distribution's scale value σ (sigma).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Constructs a Shifted Log-Logistic distribution
              with the given location and scale and zero shape.
            </summary>
            
            <param name="location">The distribution's location value μ (mu).</param>
            <param name="scale">The distribution's scale value s.</param>
            <param name="shape">The distribution's shape value ξ (ksi).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.Location">
            <summary>
              Gets the distribution's location value μ (mu).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.Scale">
            <summary>
              Gets the distribution's scale value (σ).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.Shape">
            <summary>
              Gets the distribution's shape value (ξ).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ShiftedLogLogisticDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution">
            <summary>
              Skew Normal distribution.
            </summary>
            
            <remarks>
            <para>
              In probability theory and statistics, the skew normal distribution is a 
              <see cref="T:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution">continuous probability distribution</see>
              that generalises the <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution">normal distribution</see> to allow 
              for non-zero <see cref="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Skewness">skewness</see>.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="https://en.wikipedia.org/wiki/Skew_normal_distribution">
                  Wikipedia, The Free Encyclopedia. Skew normal distribution. Available on: 
                  https://en.wikipedia.org/wiki/Skew_normal_distribution </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              This examples shows how to create a Skew normal distribution
              and compute some of its properties and derived measures.</para>
              
            <code>
            // Create a Skew normal distribution with location 2, scale 3 and shape 4.2
            var skewNormal = new SkewNormalDistribution(location: 2, scale: 3, shape: 4.2);
            
            double mean = skewNormal.Mean;     // 4.3285611780515953
            double median = skewNormal.Median; // 4.0230040653062265
            double var = skewNormal.Variance;  // 3.5778028400709641
            double mode = skewNormal.Mode;     // 3.220622226764422
            
            double cdf = skewNormal.DistributionFunction(x: 1.4); // 0.020166854942526125
            double pdf = skewNormal.ProbabilityDensityFunction(x: 1.4); // 0.052257431834162059
            double lpdf = skewNormal.LogProbabilityDensityFunction(x: 1.4); // -2.9515731621912877
            
            double ccdf = skewNormal.ComplementaryDistributionFunction(x: 1.4); // 0.97983314505747388
            double icdf = skewNormal.InverseDistributionFunction(p: cdf); // 1.3999998597203041
            
            double hf = skewNormal.HazardFunction(x: 1.4); // 0.053332990517581239
            double chf = skewNormal.CumulativeHazardFunction(x: 1.4); // 0.020372981958858238
            
            string str = skewNormal.ToString(CultureInfo.InvariantCulture); // Sn(x; ξ = 2, ω = 3, α = 4.2)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.#ctor">
            <summary>
              Constructs a Skew normal distribution with
              zero location, unit scale and zero shape.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.#ctor(System.Double)">
            <summary>
              Constructs a Skew normal distribution with 
              given location, unit scale and zero skewness.
            </summary>
            
            <param name="location">The distribution's location value ξ (ksi).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Skew normal distribution with 
              given location and scale and zero skewness.
            </summary>
            
            <param name="location">The distribution's location value ξ (ksi).</param>
            <param name="scale">The distribution's scale value ω (omega).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Constructs a Skew normal distribution
              with given mean and standard deviation.
            </summary>
            
            <param name="location">The distribution's location value ξ (ksi).</param>
            <param name="scale">The distribution's scale value ω (omega).</param>
            <param name="shape">The distribution's shape value α (alpha).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c> 
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.Normal(System.Int32,System.Double)">
            <summary>
              Create a new <see cref="T:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution"/> that 
              corresponds to a <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/> with
              the given mean and standard deviation.
            </summary>
            
            <param name="mean">The distribution's mean value μ (mu).</param>
            <param name="stdDev">The distribution's standard deviation σ (sigma).</param>
            
            <returns>A <see cref="T:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution"/> representing 
            a <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/> with the given parameters.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.Location">
            <summary>
              Gets the skew-normal distribution's location value  ξ (ksi).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.Scale">
            <summary>
              Gets the skew-normal distribution's scale value ω (omega).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.Shape">
            <summary>
              Gets the skew-normal distribution's shape value α (alpha).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.Mean">
            <summary>
               Gets the mean for this distribution.
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.Skewness">
            <summary>
              Gets the skewness for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.Kurtosis">
            <summary>
              Gets the excess kurtosis for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.TrapezoidalDistribution">
            <summary>
              Trapezoidal distribution.
            </summary>
            
            <remarks>
            <para>
              Trapezoidal distributions have been used in many areas and studied under varying
              scopes, such as in the excellent work of (van Dorp and Kotz, 2003), risk analysis
              (Pouliquen, 1970) and (Powell and Wilson, 1997), fuzzy set theory (Chen and Hwang,
              1992), applied phyisics, and biomedical applications (Flehinger and Kimmel, 1987).
            </para>
            
            <para>        
              Trapezoidal distributions are appropriate for modeling events that are comprised
              by three different stages: one growth stage, where probability grows up until a
              plateau is reached; a stability stage, where probability stays more or less the same;
              and a decline stage, where probability decreases until zero (van Dorp and Kotz, 2003).
            </para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://www.seas.gwu.edu/~dorpjr/Publications/JournalPapers/Metrika2003VanDorp.pdf">
                  J. René van Dorp, Samuel Kotz, Trapezoidal distribution. Available on: 
                  http://www.seas.gwu.edu/~dorpjr/Publications/JournalPapers/Metrika2003VanDorp.pdf </a></description></item>
                <item><description>
                  Powell MR, Wilson JD (1997). Risk Assessment for National Natural Resource
                  Conservation Programs, Discussion Paper 97-49. Resources for the Future, Washington
                  D.C.</description></item>
                <item><description>
                  Chen SJ, Hwang CL (1992). Fuzzy Multiple Attribute Decision-Making: Methods and
                  Applications, Springer-Verlag, Berlin, New York.</description></item>
                <item><description>
                  Flehinger BJ, Kimmel M (1987). The natural history of lung cancer in periodically 
                  screened population. Biometrics 1987, 43, 127-144.</description></item>
              </list></para>     
            </remarks>
            
            <example>
            <para>
              The following example shows how to create and test the main characteristics
              of a Trapezoidal distribution given its parameters: </para>
              
            <code>
            // Create a new trapezoidal distribution with linear growth between
            // 0 and 2, stability between 2 and 8, and decrease between 8 and 10.
            //
            //
            //            +-----------+
            //           /|           |\
            //          / |           | \
            //         /  |           |  \
            //  -------+---+-----------+---+-------
            //   ...   0   2   4   6   8   10  ...
            //
            var trapz = new TrapezoidalDistribution(a: 0, b: 2, c: 8, d: 10, n1: 1, n3: 1);
            
            double mean = trapz.Mean;     // 2.25
            double median = trapz.Median; // 3.0
            double mode = trapz.Mode;     // 3.1353457616424696
            double var = trapz.Variance;  // 17.986666666666665
            
            double cdf = trapz.DistributionFunction(x: 1.4);           // 0.13999999999999999
            double pdf = trapz.ProbabilityDensityFunction(x: 1.4);     // 0.10000000000000001
            double lpdf = trapz.LogProbabilityDensityFunction(x: 1.4); // -2.3025850929940455
            
            double ccdf = trapz.ComplementaryDistributionFunction(x: 1.4); // 0.85999999999999999
            double icdf = trapz.InverseDistributionFunction(p: cdf);       // 1.3999999999999997
            
            double hf = trapz.HazardFunction(x: 1.4);            // 0.11627906976744187
            double chf = trapz.CumulativeHazardFunction(x: 1.4); // 0.15082288973458366
            
            string str = trapz.ToString(CultureInfo.InvariantCulture); // Trapezoidal(x; a=0, b=2, c=8, d=10, n1=1, n3=1, α = 1)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TrapezoidalDistribution.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Creates a new trapezoidal distribution.
            </summary>
            
            <param name="a">The minimum value a.</param>
            <param name="b">The beginning of the stability region b.</param>
            <param name="c">The end of the stability region c.</param>
            <param name="d">The maximum value d.</param>
            <param name="n1">The growth slope between points <paramref name="a"/> and <paramref name="b"/>.</param>
            <param name="n3">The growth slope between points <paramref name="c"/> and <paramref name="d"/>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TrapezoidalDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TrapezoidalDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TrapezoidalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TrapezoidalDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TrapezoidalDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TrapezoidalDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TrapezoidalDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TrapezoidalDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution">
             <summary>
               The 4-parameter Beta distribution.
             </summary>
             
             <remarks>
             <para>
               The generalized beta distribution is a family of continuous probability distributions defined 
               on any interval (min, max) parameterized by two positive shape parameters and two real location
               parameters, typically denoted by α, β, a and b. The beta distribution can be suited to the 
               statistical modeling of proportions in applications where values of proportions equal to 0 or 1
               do not occur. One theoretical case where the beta distribution arises is as the distribution of
               the ratio formed by one random variable having a Gamma distribution divided by the sum of it and
               another independent random variable also having a Gamma distribution with the same scale parameter
               (but possibly different shape parameter).</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Beta_distribution">
                   Wikipedia, The Free Encyclopedia. Beta distribution. 
                   Available from: http://en.wikipedia.org/wiki/Beta_distribution </a></description></item>
                 <item><description><a href="https://en.wikipedia.org/wiki/Three-point_estimation">
                   Wikipedia, The Free Encyclopedia. Three-point estimation. 
                   Available from: https://en.wikipedia.org/wiki/Three-point_estimation </a></description></item>
                 <item><description><a href="http://broadleaf.com.au/resource-material/beta-pert-origins/">
                   Broadleaf Capital International Pty Ltd. Beta PERT origins. 
                   Available from: http://broadleaf.com.au/resource-material/beta-pert-origins/ </a></description></item>
                 <item><description><a href="http://mech.vub.ac.be/teaching/info/Ontwerpmethodologie/Appendix%20les%202%20PERT.pdf">
                   Malcolm, D. G., Roseboom J. H., Clark C.E., and Fazar, W. Application of a technique of research 
                   and development program evaluation, Operations Research, 7, 646-669, 1959. Available from: 
                   http://mech.vub.ac.be/teaching/info/Ontwerpmethodologie/Appendix%20les%202%20PERT.pdf </a></description></item>
                 <item><description><a href="http://connection.ebscohost.com/c/articles/18246172/pert-model-distribution-activity-time">
                   Clark, C. E. The PERT model for the distribution of an activity time, Operations Research, 10, 405-406, 
                   1962. Available from: http://connection.ebscohost.com/c/articles/18246172/pert-model-distribution-activity-time </a></description></item>
               </list></para>
             </remarks>
             
             <example>
             <para>
               Note: Simpler examples are also available at the <see cref="T:Accord.Statistics.Distributions.Univariate.BetaDistribution"/> page.</para>
             
             <para>
               The following example shows how to create a 4-parameter Beta distribution and
               compute some of its properties and measures.</para>
               
             <code>
             // Create a 4-parameter Beta distribution with the following parameters (α, β, a, b):
             var beta = new GeneralizedBetaDistribution(alpha: 1.42, beta: 1.57, min: 1, max: 4.2);
             
             double mean = beta.Mean;     // 2.5197324414715716
             double median = beta.Median; // 2.4997705845160225
             double var = beta.Variance;  // 0.19999664152943961
             double mode = beta.Mode;     // 2.3575757575757574
             double h = beta.Entropy;     // -0.050654548091478513
             
             double cdf = beta.DistributionFunction(x: 2.27);           // 0.40828630817664596
             double pdf = beta.ProbabilityDensityFunction(x: 2.27);     // 1.2766172921464953
             double lpdf = beta.LogProbabilityDensityFunction(x: 2.27); // 0.2442138392176838
             
             double chf = beta.CumulativeHazardFunction(x: 2.27);       // 0.5247323897609667
             double hf = beta.HazardFunction(x: 2.27);                  // 2.1574915534109484
             
             double ccdf = beta.ComplementaryDistributionFunction(x: 2.27); // 0.59171369182335409
             double icdf = beta.InverseDistributionFunction(p: cdf);        // 2.27
            
             string str = beta.ToString(); // B(x; α = 1.42, β = 1.57, min = 1, max = 4.2)
             </code>
             
             <para>
               The following example shows how to create a 4-parameter Beta distribution
               with a three-point estimate using PERT.</para>
               
             <code>
             // Create a Beta from a minimum, maximum and most likely value
             var b = GeneralizedBetaDistribution.Pert(min: 1, max: 3, mode: 2);
             
             double mean = b.Mean;     // 2.5197324414715716
             double median = b.Median; // 2.4997705845160225
             double var = b.Variance;  // 0.19999664152943961
             double mode = b.Mode;     // 2.3575757575757574
             </code>
             
             <para>
               The following example shows how to create a 4-parameter Beta distribution
               with a three-point estimate using Vose's modification for PERT.</para>
               
             <code>
             // Create a Beta from a minimum, maximum and most likely value
             var b = GeneralizedBetaDistribution.Vose(min: 1, max: 3, mode: 1.42);
             
             double mean = b.Mean;     // 1.6133333333333333
             double median = b.Median; // 1.5727889200146494
             double mode = b.Mode;     // 1.4471823077804513
             double var = b.Variance;  // 0.055555555555555546
             </code>
             
             <para>
               The next example shows how to generate 1000 new samples from a Beta distribution:</para>
             
             <code>
               // Using the distribution's parameters
               double[] samples = GeneralizedBetaDistribution
                 .Random(alpha: 2, beta: 3, min: 0, max: 1, samples: 1000);
                 
               // Using an existing distribution
               var b = new GeneralizedBetaDistribution(alpha: 1, beta: 2);
               double[] new_samples = b.Generate(1000);
             </code>
             
             <para>
               And finally, how to estimate the parameters of a Beta distribution from
               a set of observations, using either the Method-of-moments or the Maximum 
               Likelihood Estimate.</para>
               
             <code>
             // First we will be drawing 100000 observations from a 4-parameter 
             //   Beta distribution with α = 2, β = 3, min = 10 and max = 15:
             
             double[] samples = GeneralizedBetaDistribution
                 .Random(alpha: 2, beta: 3, min: 10, max: 15, samples: 100000);
             
             // We can estimate a distribution with the known max and min
             var B = GeneralizedBetaDistribution.Estimate(samples, 10, 15);
             
             // We can explicitly ask for a Method-of-moments estimation
             var mm = GeneralizedBetaDistribution.Estimate(samples, 10, 15,
                 new GeneralizedBetaOptions { Method = BetaEstimationMethod.Moments });
                 
             // or explicitly ask for the Maximum Likelihood estimation
             var mle = GeneralizedBetaDistribution.Estimate(samples, 10, 15,
                 new GeneralizedBetaOptions { Method = BetaEstimationMethod.MaximumLikelihood });
             </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.BetaDistribution"/>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Beta distribution defined in the
              interval (0,1) with the given parameters α and β.
            </summary>
            
            <param name="alpha">The shape parameter α (alpha).</param>
            <param name="beta">The shape parameter β (beta).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Constructs a Beta distribution defined in the 
              interval (a, b) with parameters α, β, a and b.
            </summary>
            
            <param name="alpha">The shape parameter α (alpha).</param>
            <param name="beta">The shape parameter β (beta).</param>
            <param name="min">The minimum possible value a.</param>
            <param name="max">The maximum possible value b.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Vose(System.Double,System.Double,System.Double)">
            <summary>
              Constructs a BetaPERT distribution defined in the interval (a, b) 
              using Vose's PERT estimation for the parameters a, b, mode and λ.
            </summary>
            
            <param name="min">The minimum possible value a.</param>
            <param name="max">The maximum possible value b.</param>
            <param name="mode">The most likely value m.</param>
            
            <returns>
              A Beta distribution initialized using the Vose's PERT method.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Vose(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Constructs a BetaPERT distribution defined in the interval (a, b) 
              using Vose's PERT estimation for the parameters a, b, mode and λ.
            </summary>
            
            <param name="min">The minimum possible value a.</param>
            <param name="max">The maximum possible value b.</param>
            <param name="mode">The most likely value m.</param>
            <param name="scale">The scale parameter λ (lambda). Default is 4.</param>
            
            <returns>
              A Beta distribution initialized using the Vose's PERT method.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Pert(System.Double,System.Double,System.Double)">
            <summary>
              Constructs a BetaPERT distribution defined in the interval (a, b) 
              using usual PERT estimation for the parameters a, b, mode and λ.
            </summary>
            
            <param name="min">The minimum possible value a.</param>
            <param name="max">The maximum possible value b.</param>
            <param name="mode">The most likely value m.</param>
            
            <returns>
              A Beta distribution initialized using the PERT method.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Pert(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Constructs a BetaPERT distribution defined in the interval (a, b) 
              using usual PERT estimation for the parameters a, b, mode and λ.
            </summary>
            
            <param name="min">The minimum possible value a.</param>
            <param name="max">The maximum possible value b.</param>
            <param name="mode">The most likely value m.</param>
            <param name="scale">The scale parameter λ (lambda). Default is 4.</param>
            
            <returns>
              A Beta distribution initialized using the PERT method.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.GolenkoGinzburg(System.Double,System.Double)">
            <summary>
              Constructs a BetaPERT distribution defined in the interval (a, b) 
              using Golenko-Ginzburg observation that the mode is often at 2/3
              of the guessed interval.
            </summary>
            
            <param name="min">The minimum possible value a.</param>
            <param name="max">The maximum possible value b.</param>
            
            <returns>
              A Beta distribution initialized using the Golenko-Ginzburg's method.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Standard(System.Int32,System.Int32)">
            <summary>
              Constructs a standard Beta distribution defined in the interval (0, 1)
              based on the number of successed and trials for an experiment.
            </summary>
            
            <param name="successes">The number of success <c>r</c>. Default is 0.</param>
            <param name="trials">The number of trials <c>n</c>. Default is 1.</param>
            
            <returns>
              A standard Beta distribution initialized using the given parameters.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>A sample which could original the given probability 
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.DistributionFunction(System.Double)"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
            <para>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.</para>
            </remarks>
            
            <seealso cref="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.ProbabilityDensityFunction(System.Double)"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting,
              such as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Fit(System.Double[],System.Int32[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting,
              such as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against.
              The array elements can be either of type double (for univariate data) or type
              double[] (for multivariate data).
            </param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, 
              such as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Fit(System.Double[],System.Int32[],Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against.
              The array elements can be either of type double (for univariate data) or type
              double[] (for multivariate data).
            </param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, 
              such as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Random(System.Double,System.Double,System.Double,System.Double,System.Int32)">
             <summary>
               Generates a random vector of observations from the 
               Beta distribution with the given parameters.
             </summary>
             
             <param name="alpha">The shape parameter α (alpha).</param>
             <param name="beta">The shape parameter β (beta).</param>
             <param name="min">The minimum possible value a.</param>
             <param name="max">The maximum possible value b.</param>
             <param name="samples">The number of samples to generate.</param>
            
             <returns>An array of double values sampled from the specified Beta distribution.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Random(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Generates a random observation from a 
              Beta distribution with the given parameters.
            </summary>
            
            <param name="alpha">The shape parameter α (alpha).</param>
            <param name="beta">The shape parameter β (beta).</param>
            <param name="min">The minimum possible value a.</param>
            <param name="max">The maximum possible value b.</param>
            
            <returns>A random double value sampled from the specified Beta distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Estimate(System.Double[],System.Int32,System.Int32)">
            <summary>
              Estimates a new Beta distribution from a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Estimate(System.Double[],System.Int32,System.Int32,System.Double[])">
            <summary>
              Estimates a new Beta distribution from a set of weighted observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Estimate(System.Double[],System.Int32,System.Int32,System.Double[],Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions)">
            <summary>
              Estimates a new Beta distribution from a set of weighted observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Estimate(System.Double[],System.Int32,System.Int32,Accord.Statistics.Distributions.Fitting.GeneralizedBetaOptions)">
            <summary>
              Estimates a new Beta distribution from a set of observations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Min">
            <summary>
              Gets the minimum value A.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Max">
            <summary>
              Gets the maximum value B.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Alpha">
            <summary>
              Gets the shape parameter α (alpha)
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Beta">
            <summary>
              Gets the shape parameter β (beta).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Mean">
            <summary>
              Gets the mean for this distribution, 
              defined as (a + 4 * m + 6 * b).
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Variance">
            <summary>
              Gets the variance for this distribution, 
              defined as ((b - a) / (k+2))²
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <remarks>
             The beta distribution's mode is given
             by <c>(a - 1) / (a + b - 2).</c>
            </remarks>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Support">
            <summary>
              Gets the distribution support, defined as (<see cref="P:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Min"/>, <see cref="P:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Max"/>).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedBetaDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.TriangularDistribution">
            <summary>
              Triangular distribution.
            </summary>
            
            <remarks>
            <para>
              In probability theory and statistics, the triangular distribution is a continuous
              probability distribution with lower limit a, upper limit b and mode c, where a &lt; 
              b and a ≤ c ≤ b.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="https://en.wikipedia.org/wiki/Triangular_distribution">
                  Wikipedia, The Free Encyclopedia. Triangular distribution. Available on: 
                  https://en.wikipedia.org/wiki/Triangular_distribution </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              This example shows how to create a Triangular distribution
              with minimum 1, maximum 6, and most common value 3.</para>
              
            <code>
            // Create a new Triangular distribution (1, 3, 6).
            var trig = new TriangularDistribution(a: 1, b: 6, c: 3);
            
            double mean = trig.Mean;     // 3.3333333333333335
            double median = trig.Median; // 3.2613872124741694
            double mode = trig.Mode;     // 3.0
            double var = trig.Variance;  // 1.0555555555555556
            
            double cdf = trig.DistributionFunction(x: 2); // 0.10000000000000001
            double pdf = trig.ProbabilityDensityFunction(x: 2); // 0.20000000000000001
            double lpdf = trig.LogProbabilityDensityFunction(x: 2); // -1.6094379124341003
            
            double ccdf = trig.ComplementaryDistributionFunction(x: 2); // 0.90000000000000002
            double icdf = trig.InverseDistributionFunction(p: cdf); // 2.0000000655718773
            
            double hf = trig.HazardFunction(x: 2); // 0.22222222222222224
            double chf = trig.CumulativeHazardFunction(x: 2); // 0.10536051565782628
            
            string str = trig.ToString(CultureInfo.InvariantCulture); // Triangular(x; a = 1, b = 6, c = 3)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Constructs a Triangular distribution
              with the given parameters a, b and c.
            </summary>
            
            <param name="min">The minimum possible value in the distribution (a).</param>
            <param name="max">The maximum possible value in the distribution (b).</param>
            <param name="mode">The most common value in the distribution (c).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting,
              such as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Fit(System.Double[],System.Int32[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting,
              such as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.TriangularOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against.
              The array elements can be either of type double (for univariate data) or type
              double[] (for multivariate data).
            </param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, 
              such as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Fit(System.Double[],System.Int32[],Accord.Statistics.Distributions.Fitting.TriangularOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against.
              The array elements can be either of type double (for univariate data) or type
              double[] (for multivariate data).
            </param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, 
              such as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.GetMin(System.Double[],System.Double[],System.Int32@)">
            <summary>
              Gets the minimum value in a set of weighted observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.GetMax(System.Double[],System.Double[],System.Int32@)">
            <summary>
              Gets the maximum value in a set of weighted observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.FindMax(System.Double[],System.Double)">
            <summary>
              Finds the index of the last largest value in a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.FindMin(System.Double[],System.Double)">
            <summary>
              Finds the index of the first smallest value in a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.GetMin(System.Double[],System.Int32[],System.Int32@)">
            <summary>
              Finds the index of the first smallest value in a set of weighted observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TriangularDistribution.GetMax(System.Double[],System.Int32[],System.Int32@)">
            <summary>
              Finds the index of the last largest value in a set of weighted observations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Min">
            <summary>
              Gets the triangular parameter A (the minimum value).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Max">
            <summary>
              Gets the triangular parameter B (the maximum value).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Mean">
            <summary>
              Gets the mean for this distribution, 
              defined as (a + b + c) / 3.
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Variance">
            <summary>
              Gets the variance for this distribution, defined
              as (a² + b² + c² - ab - ac - bc) / 18.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Mode">
            <summary>
              Gets the mode for this distribution,
              also known as the triangular's <c>c</c>.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Support">
            <summary>
              Gets the distribution support, defined as (<see cref="P:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Min"/>, <see cref="P:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Max"/>).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TriangularDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution, 
              defined as 0.5 + log((max-min)/2)).
            </summary>
            
            <value>
              The distribution's entropy.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.GumbelDistribution">
             <summary>
               Gumbel distribution (as known as the Extreme Value Type I distribution).
             </summary>
             
             <remarks>
             <para>
               In probability theory and statistics, the Gumbel distribution is used to model
               the distribution of the maximum (or the minimum) of a number of samples of various
               distributions. Such a distribution might be used to represent the distribution of 
               the maximum level of a river in a particular year if there was a list of maximum 
               values for the past ten years. It is useful in predicting the chance that an extreme 
               earthquake, flood or other natural disaster will occur.</para>
            
             <para>
               The potential applicability of the Gumbel distribution to represent the distribution 
               of maxima relates to extreme value theory which indicates that it is likely to be useful
               if the distribution of the underlying sample data is of the normal or exponential type.</para>
            
             <para>
               The Gumbel distribution is a particular case of the generalized extreme value
               distribution (also known as the Fisher-Tippett distribution). It is also known 
               as the log-Weibull distribution and the double exponential distribution (a term
               that is alternatively sometimes used to refer to the Laplace distribution). It 
               is related to the Gompertz distribution[citation needed]: when its density is 
               first reflected about the origin and then restricted to the positive half line,
               a Gompertz function is obtained.</para>
            
             <para>
               In the latent variable formulation of the multinomial logit model — common in 
               discrete choice theory — the errors of the latent variables follow a Gumbel 
               distribution. This is useful because the difference of two Gumbel-distributed 
               random variables has a logistic distribution.</para>
            
             <para>
               The Gumbel distribution is named after Emil Julius Gumbel (1891–1966), based on
               his original papers describing the distribution.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Gumbel_distribution">
                   Wikipedia, The Free Encyclopedia. Gumbel distribution. Available on: 
                   http://en.wikipedia.org/wiki/Gumbel_distribution </a></description></item>
               </list></para>     
             </remarks>
             
             <example>
             <para>
               The following example shows how to create and test the main characteristics
               of an Gumbel distribution given its location and scale parameters: </para>
               
             <code>
             var gumbel = new GumbelDistribution(location: 4.795, scale: 1 / 0.392);
             
             double mean = gumbel.Mean;     // 6.2674889410753387
             double median = gumbel.Median; // 5.7299819402593481
             double mode = gumbel.Mode;     // 4.7949999999999999
             double var = gumbel.Variance;  // 10.704745853604138
             
             double cdf = gumbel.DistributionFunction(x: 3.4); // 0.17767760424788051
             double pdf = gumbel.ProbabilityDensityFunction(x: 3.4); // 0.12033954114322486
             double lpdf = gumbel.LogProbabilityDensityFunction(x: 3.4); // -2.1174380222001519
             
             double ccdf = gumbel.ComplementaryDistributionFunction(x: 3.4); // 0.82232239575211952
             double icdf = gumbel.InverseDistributionFunction(p: cdf); // 3.3999999904866245
             
             double hf = gumbel.HazardFunction(x: 1.4); // 0.03449691276402958
             double chf = gumbel.CumulativeHazardFunction(x: 1.4); // 0.022988793482259906
             
             string str = gumbel.ToString(CultureInfo.InvariantCulture); // Gumbel(x; μ = 4.795, β = 2.55)
             </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.#ctor">
            <summary>
              Creates a new Gumbel distribution 
              with location zero and unit scale.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new Gumbel distribution 
              with the given location and scale.
            </summary>
            
            <param name="location">The location parameter μ (mu). Default is 0.</param>
            <param name="scale">The scale parameter β (beta). Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.DistributionFunction(System.Double)">
            <summary>
             Gets the cumulative distribution function (cdf) for
             this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
            <para>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <seealso cref="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.ProbabilityDensityFunction(System.Double)"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.ComplementaryDistributionFunction(System.Double)">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.CumulativeHazardFunction(System.Double)">
            <summary>
              Gets the cumulative hazard function for this
              distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The cumulative hazard function <c>H(x)</c>
              evaluated at <c>x</c> in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.HazardFunction(System.Double)">
            <summary>
              Gets the hazard function, also known as the failure rate or
              the conditional failure density function for this distribution
              evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The conditional failure density function <c>h(x)</c>
              evaluated at <c>x</c> in the current distribution.
            </returns>
            
            <remarks>
              The hazard function is the ratio of the probability
              density function f(x) to the survival function, S(x).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.DistributionFunction(System.Double)"/>.
            </returns>
            
            <remarks>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.Fit(System.Double[],System.Int32[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GumbelDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GumbelDistribution.Location">
            <summary>
              Gets the distribution's location parameter mu (μ).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GumbelDistribution.Shape">
            <summary>
              Gets the distribution's scale parameter beta (β).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GumbelDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GumbelDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GumbelDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GumbelDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>The distribution's median value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GumbelDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>The distribution's mode value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GumbelDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution">
            <summary>
              Tukey-Lambda distribution.
            </summary>
            
            <remarks>
            <para>
              Formalized by John Tukey, the Tukey lambda distribution is a continuous 
              probability distribution defined in terms of its quantile function. It is
              typically used to identify an appropriate distribution and not used in 
              statistical models directly.</para>
            <para>
              The Tukey lambda distribution has a single shape parameter λ. As with other
              probability distributions, the Tukey lambda distribution can be transformed 
              with a location parameter, μ, and a scale parameter, σ. Since the general form
              of probability distribution can be expressed in terms of the standard distribution, 
              the subsequent formulas are given for the standard form of the function.</para>
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Tukey_lambda_distribution">
                  Wikipedia, The Free Encyclopedia. Tukey-Lambda distribution. Available on: 
                  http://en.wikipedia.org/wiki/Tukey_lambda_distribution </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              This examples shows how to create a Tukey distribution and
              compute some of its properties .</para>
              
            <code>
            var tukey = new TukeyLambdaDistribution(lambda: 0.14);
            
            double mean = tukey.Mean;     // 0.0
            double median = tukey.Median; // 0.0
            double mode = tukey.Mode;     // 0.0
            double var = tukey.Variance;  // 2.1102970222144855
            double stdDev = tukey.StandardDeviation;  // 1.4526861402982014
            
            double cdf = tukey.DistributionFunction(x: 1.4); // 0.83252947230217966
            double pdf = tukey.ProbabilityDensityFunction(x: 1.4); // 0.17181242109370659
            double lpdf = tukey.LogProbabilityDensityFunction(x: 1.4); // -1.7613519723149427
            
            double ccdf = tukey.ComplementaryDistributionFunction(x: 1.4); // 0.16747052769782034
            double icdf = tukey.InverseDistributionFunction(p: cdf); // 1.4000000000000004
            
            double hf = tukey.HazardFunction(x: 1.4); // 1.0219566231014163
            double chf = tukey.CumulativeHazardFunction(x: 1.4); // 1.7842102556452939
            
            string str = tukey.ToString(CultureInfo.InvariantCulture); // Tukey(x; λ = 0.14)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.LogisticDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.#ctor(System.Double)">
            <summary>
              Constructs a Tukey-Lambda distribution
              with the given lambda (shape) parameter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.DistributionFunction(System.Double)"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.QuantileDensityFunction(System.Double)">
            <summary>
              Gets the first derivative of the <see cref="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.InverseDistributionFunction(System.Double)">
              inverse distribution function</see> (icdf) for this distribution evaluated
              at probability <c>p</c>. 
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.LogQuantileDensityFunction(System.Double)">
            <summary>
              Gets the log of the <see cref="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.QuantileDensityFunction(System.Double)">quantile 
              density function</see>, which in turn is the first derivative of 
              the <see cref="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.InverseDistributionFunction(System.Double)"> inverse distribution
              function</see> (icdf), evaluated at probability <c>p</c>. 
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.Lambda">
            <summary>
              Gets the distribution shape parameter lambda (λ).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.Mean">
            <summary>
              Gets the mean for this distribution (always zero).
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.Median">
            <summary>
              Gets the median for this distribution (always zero).
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.Mode">
            <summary>
              Gets the mode for this distribution (always zero).
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>
              The distribution's entropy.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TukeyLambdaDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution">
            <summary>
              Power Lognormal distribution.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda366e.htm">
                  NIST/SEMATECH e-Handbook of Statistical Methods. Power Lognormal distribution. Available on: 
                  http://www.itl.nist.gov/div898/handbook/eda/section3/eda366e.htm </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              This example shows how to create a Power Lognormal 
              distribution and compute some of its properties.</para>
              
            <code>
            // Create a Power-Lognormal distribution with p = 4.2 and s = 1.2
            var plog = new PowerLognormalDistribution(power: 4.2, shape: 1.2);
            
            double cdf = plog.DistributionFunction(x: 1.4); // 0.98092157745191766
            double pdf = plog.ProbabilityDensityFunction(x: 1.4); // 0.046958580233533977
            double lpdf = plog.LogProbabilityDensityFunction(x: 1.4); // -3.0584893374471496
            
            double ccdf = plog.ComplementaryDistributionFunction(x: 1.4); // 0.019078422548082351
            double icdf = plog.InverseDistributionFunction(p: cdf); // 1.4
            
            double hf = plog.HazardFunction(x: 1.4); // 10.337649063164642
            double chf = plog.CumulativeHazardFunction(x: 1.4); // 3.9591972920568446
            
            string str = plog.ToString(CultureInfo.InvariantCulture); // PLD(x; p = 4.2, σ = 1.2)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Power Lognormal distribution
              with the given power and shape parameters.
            </summary>
            
            <param name="power">The distribution's power p.</param>
            <param name="shape">The distribution's shape σ.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.DistributionFunction(System.Double)"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.HazardFunction(System.Double)">
            <summary>
              Gets the hazard function, also known as the failure rate or
              the conditional failure density function for this distribution
              evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The conditional failure density function <c>h(x)</c>
              evaluated at <c>x</c> in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.CumulativeHazardFunction(System.Double)">
            <summary>
              Gets the cumulative hazard function for this
              distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The cumulative hazard function <c>H(x)</c>
              evaluated at <c>x</c> in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.ComplementaryDistributionFunction(System.Double)">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.Power">
            <summary>
              Gets the distribution's power parameter (p).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.Shape">
            <summary>
              Gets the distribution's shape parameter sigma (σ). 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.Mean">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.Median">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.Mode">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.Variance">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.StandardDeviation">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerLognormalDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution">
            <summary>
              Generalized Normal distribution (also known as Exponential Power distribution).
            </summary>
            
            <remarks>
            <para>
              The generalized normal distribution or generalized Gaussian distribution
              (GGD) is either of two families of parametric continuous probability 
              distributions on the real line. Both families add a shape parameter to
              the normal distribution. To distinguish the two families, they are referred
              to below as "version 1" and "version 2". However this is not a standard 
              nomenclature.</para>
            <para>
              Known also as the exponential power distribution, or the generalized error
              distribution, this is a parametric family of symmetric distributions. It includes
              all normal and Laplace distributions, and as limiting cases it includes all 
              continuous uniform distributions on bounded intervals of the real line.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="https://en.wikipedia.org/wiki/Generalized_normal_distribution">
                  Wikipedia, The Free Encyclopedia. Generalized normal distribution. Available on: 
                  https://en.wikipedia.org/wiki/Generalized_normal_distribution </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              This examples shows how to create a Generalized normal distribution
              and compute some of its properties.</para>
              
            <code>
            // Creates a new generalized normal distribution with the given parameters
            var normal = new GeneralizedNormalDistribution(location: 1, scale: 5, shape: 0.42);
            
            double mean = normal.Mean;     // 1
            double median = normal.Median; // 1
            double mode = normal.Mode;     // 1
            double var = normal.Variance;  // 19200.781700666659
            
            double cdf = normal.DistributionFunction(x: 1.4); // 0.51076148867681703
            double pdf = normal.ProbabilityDensityFunction(x: 1.4); // 0.024215092283124507
            double lpdf = normal.LogProbabilityDensityFunction(x: 1.4); // -3.7207791921441378
            
            double ccdf = normal.ComplementaryDistributionFunction(x: 1.4); // 0.48923851132318297
            double icdf = normal.InverseDistributionFunction(p: cdf); // 1.4000000149740108
            
            double hf = normal.HazardFunction(x: 1.4); // 0.049495474543966168
            double chf = normal.CumulativeHazardFunction(x: 1.4); // 0.7149051552030572
            
            string str = normal.ToString(CultureInfo.InvariantCulture); // GGD(x; μ = 1, α = 5, β = 0.42)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.LaplaceDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Constructs a Generalized Normal distribution with the given parameters.
            </summary>
            
            <param name="location">The location parameter μ.</param>
            <param name="scale">The scale parameter α.</param>
            <param name="shape">The shape parameter β.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.Laplace(System.Double,System.Double)">
            <summary>
              Create an <see cref="T:Accord.Statistics.Distributions.Univariate.LaplaceDistribution"/> distribution using a 
              <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution"/> specialization.
            </summary>
            
            <param name="location">The Laplace's location parameter μ (mu).</param>
            <param name="scale">The Laplace's scale parameter b.</param>
            
            <returns>A <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution"/> that provides
             a <see cref="T:Accord.Statistics.Distributions.Univariate.LaplaceDistribution"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.Normal(System.Double,System.Double)">
            <summary>
              Create an <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/> distribution using a 
              <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution"/> specialization.
            </summary>
            
            <param name="mean">The Normal's mean parameter μ (mu).</param>
            <param name="stdDev">The Normal's standard deviation σ (sigma).</param>
            
            <returns>A <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution"/> that provides
             a <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/> distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for the
              Generalized Normal distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.ProbabilityDensityFunction(System.Double)">
             <summary>
               Gets the probability density function (pdf) for
               the Normal distribution evaluated at point <c>x</c>.
             </summary>
             
             <param name="x">A single point in the distribution range. For a
               univariate distribution, this should be a single double value.
               For a multivariate distribution, this should be a double array.</param>
               
             <returns>
               The probability of <c>x</c> occurring
               in the current distribution.
             </returns>
             
             <example>
               See <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution"/>.
             </example> 
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.Mean">
            <summary>
              Gets the location value μ (mu) for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <remarks>
              In the Generalized Normal Distribution, the mode is
              equal to the distribution's <see cref="P:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.Mean"/> value.
            </remarks>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralizedNormalDistribution.Entropy">
            <summary>
              Gets the Entropy for this Normal distribution.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution">
            <summary>
              Power Normal distribution.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda366d.htm">
                  NIST/SEMATECH e-Handbook of Statistical Methods. Power Normal distribution. Available on: 
                  http://www.itl.nist.gov/div898/handbook/eda/section3/eda366d.htm </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              This example shows how to create a Power Normal distribution
              and compute some of its properties.</para>
              
            <code>
            // Create a new Power-Normal distribution with p = 4.2
            var pnormal = new PowerNormalDistribution(power: 4.2);
            
            double cdf = pnormal.DistributionFunction(x: 1.4); // 0.99997428721920678
            double pdf = pnormal.ProbabilityDensityFunction(x: 1.4); // 0.00020022645890003279
            double lpdf = pnormal.LogProbabilityDensityFunction(x: 1.4); // -0.20543269836728234
            
            double ccdf = pnormal.ComplementaryDistributionFunction(x: 1.4); // 0.000025712780793218926
            double icdf = pnormal.InverseDistributionFunction(p: cdf); // 1.3999999999998953
            
            double hf = pnormal.HazardFunction(x: 1.4); // 7.7870402470368854
            double chf = pnormal.CumulativeHazardFunction(x: 1.4); // 10.568522382550167
            
            string str = pnormal.ToString(); // PND(x; p = 4.2)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.#ctor(System.Double)">
            <summary>
              Constructs a Power Normal distribution
              with given power (shape) parameter.
            </summary>
            
            <param name="power">The distribution's power p.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function 
              is also known as the Quantile function.
            </summary>
            
            <remarks>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.
            </remarks>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>A sample which could original the given probability 
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.DistributionFunction(System.Double)"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The logarithm of the probability of <c>x</c> 
              occurring in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.Power">
            <summary>
              Gets the distribution shape (power) parameter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.Mean">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.Median">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.Mode">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.Variance">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.StandardDeviation">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PowerNormalDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.UQuadraticDistribution">
            <summary>
              U-quadratic distribution.
            </summary>
            
            <remarks>
            <para>
              In probability theory and statistics, the U-quadratic distribution is a continuous
              probability distribution defined by a unique quadratic function with lower limit a 
              and upper limit b. This distribution is a useful model for symmetric bimodal processes.
              Other continuous distributions allow more flexibility, in terms of relaxing the symmetry
              and the quadratic shape of the density function, which are enforced in the U-quadratic 
              distribution - e.g., Beta distribution, Gamma distribution, etc. </para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/U-quadratic_distribution">
                  Wikipedia, The Free Encyclopedia. U-quadratic distribution. Available on: 
                  http://en.wikipedia.org/wiki/U-quadratic_distribution </a></description></item>
              </list></para>     
            </remarks>
            
            <example>
            <para>
              The following example shows how to create and test the main characteristics
              of an U-quadratic distribution given its two parameters: </para>
              
            <code>
            // Create a new U-quadratic distribution with values
            var u2 = new UQuadraticDistribution(a: 0.42, b: 4.2);
            
            double mean = u2.Mean;     // 2.3100000000000001
            double median = u2.Median; // 2.3100000000000001
            double mode = u2.Mode;     // 0.8099060089153145
            double var = u2.Variance;  // 2.1432600000000002
            
            double cdf = u2.DistributionFunction(x: 1.4);           // 0.44419041812731797
            double pdf = u2.ProbabilityDensityFunction(x: 1.4);     // 0.18398763254730335
            double lpdf = u2.LogProbabilityDensityFunction(x: 1.4); // -1.6928867380489712
            
            double ccdf = u2.ComplementaryDistributionFunction(x: 1.4); // 0.55580958187268203
            double icdf = u2.InverseDistributionFunction(p: cdf);       // 1.3999998213768274
            
            double hf = u2.HazardFunction(x: 1.4);            // 0.3310263776442936
            double chf = u2.CumulativeHazardFunction(x: 1.4); // 0.58732952203701494
            
            string str = u2.ToString(CultureInfo.InvariantCulture); // "UQuadratic(x; a = 0.42, b = 4.2)"
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UQuadraticDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a new U-quadratic distribution.
            </summary>
            
            <param name="a">Parameter a.</param>
            <param name="b">Parameter b.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UQuadraticDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UQuadraticDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UQuadraticDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UQuadraticDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UQuadraticDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UQuadraticDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UQuadraticDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UQuadraticDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UQuadraticDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution">
            <summary>
              Wrapped Cauchy Distribution.
            </summary>
            
            <remarks>
             <para>
              In probability theory and directional statistics, a wrapped Cauchy distribution
              is a wrapped probability distribution that results from the "wrapping" of the 
              Cauchy distribution around the unit circle. The Cauchy distribution is sometimes
              known as a Lorentzian distribution, and the wrapped Cauchy distribution may 
              sometimes be referred to as a wrapped Lorentzian distribution.</para>
              
             <para>
              The wrapped Cauchy distribution is often found in the field of spectroscopy where
              it is used to analyze diffraction patterns (e.g. see Fabry–Pérot interferometer)</para>.
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Directional_statistics">
                  Wikipedia, The Free Encyclopedia. Directional statistics. Available on:
                  http://en.wikipedia.org/wiki/Directional_statistics </a></description></item>
                <item><description><a href="http://en.wikipedia.org/wiki/Wrapped_Cauchy_distribution">
                  Wikipedia, The Free Encyclopedia. Wrapped Cauchy distribution. Available on:
                  http://en.wikipedia.org/wiki/Wrapped_Cauchy_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
              // Create a Wrapped Cauchy distribution with μ = 0.42, γ = 3
              var dist = new WrappedCauchyDistribution(mu: 0.42, gamma: 3);
              
              // Common measures
              double mean = dist.Mean;     // 0.42
              double var = dist.Variance;  // 0.950212931632136
               
              // Probability density functions
              double pdf = dist.ProbabilityDensityFunction(x: 0.42); // 0.1758330112785475
              double lpdf = dist.LogProbabilityDensityFunction(x: 0.42); // -1.7382205338929015
              
              // String representation
              string str = dist.ToString(); // "WrappedCauchy(x; μ = 0,42, γ = 3)"
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.CauchyDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution"/> class.
            </summary>
            
            <param name="mu">The mean resultant parameter μ.</param>
            <param name="gamma">The gamma parameter γ.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.DistributionFunction(System.Double)">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.Fit(System.Double[],System.Int32[],Accord.Statistics.Distributions.Fitting.CauchyOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.CauchyOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.Median">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.Mode">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WrappedCauchyDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>
              The distribution's entropy.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution">
            <summary>
              Inverse Gamma Distribution.
            </summary>
            
            <remarks>
            <para>
              The inverse gamma distribution is a two-parameter family of continuous probability
              distributions on the positive real line, which is the distribution of the reciprocal
              of a variable distributed according to the gamma distribution. Perhaps the chief use
              of the inverse gamma distribution is in Bayesian statistics, where it serves as the 
              conjugate prior of the variance of a normal distribution. However, it is common among
              Bayesians to consider an alternative parameterization of the normal distribution in 
              terms of the precision, defined as the reciprocal of the variance, which allows the
              gamma distribution to be used directly as a conjugate prior.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Inverse-gamma_distribution">
                  Wikipedia, The Free Encyclopedia. Inverse Gamma Distribution. 
                  Available from: http://en.wikipedia.org/wiki/Inverse-gamma_distribution </a></description></item>
                <item><description><a href="http://www.johndcook.com/inverse gamma.pdf">
                  John D. Cook. (2008). The Inverse Gamma Distribution. </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
              // Create a new inverse Gamma distribution with α = 0.42 and β = 0.5
              var invGamma = new InverseGammaDistribution(shape: 0.42, scale: 0.5);
            
              // Common measures
              double mean   = invGamma.Mean;     // -0.86206896551724133
              double median = invGamma.Median;   // 3.1072323347401709
              double var    = invGamma.Variance; // -0.47035626665061164
               
              // Cumulative distribution functions
              double cdf = invGamma.DistributionFunction(x: 0.27);           // 0.042243552114989695
              double ccdf = invGamma.ComplementaryDistributionFunction(x: 0.27); // 0.95775644788501035
              double icdf = invGamma.InverseDistributionFunction(p: cdf);        // 0.26999994629410995
              
              // Probability density functions
              double pdf = invGamma.ProbabilityDensityFunction(x: 0.27);     // 0.35679850067181362
              double lpdf = invGamma.LogProbabilityDensityFunction(x: 0.27); // -1.0305840804381006
              
              // Hazard (failure rate) functions
              double hf = invGamma.HazardFunction(x: 0.27); // 0.3725357333377633
              double chf = invGamma.CumulativeHazardFunction(x: 0.27); // 0.043161763098266373
              
              // String representation
              string str = invGamma.ToString(); // Γ^(-1)(x; α = 0.42, β = 0.5)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.GammaDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new Inverse Gamma Distribution.
            </summary>
            
            <param name="shape">The shape parameter α (alpha).</param>
            <param name="scale">The scale parameter β (beta).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
              
            <para>
              In the Inverse Gamma CDF is computed in terms of the <see cref="M:Accord.Math.Gamma.UpperIncomplete(System.Double,System.Double)">
              Upper Incomplete Regularized Gamma Function Q</see> as CDF(x) = Q(a, b / x).</para>
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
            <remarks>
              In the Inverse Gamma distribution, the Mean is given as b / (a - 1).
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
            <remarks>
              In the Inverse Gamma distribution, the Variance is given as b² / ((a - 1)² * (a - 2)).
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.LaplaceDistribution">
            <summary>
              Laplace's Distribution (as known as the double exponential distribution).
            </summary>
            
            <remarks>
            <para>
              In probability theory and statistics, the Laplace distribution is a continuous
              probability distribution named after Pierre-Simon Laplace. It is also sometimes called
              the double exponential distribution.</para>
            
            <para>
              The difference between two independent identically distributed exponential random
              variables is governed by a Laplace distribution, as is a Brownian motion evaluated at an
              exponentially distributed random time. Increments of Laplace motion or a variance gamma 
              process evaluated over the time scale also have a Laplace distribution.</para>
            
            <para>
               The probability density function of the Laplace distribution is also reminiscent of the
               normal distribution; however, whereas the normal distribution is expressed in terms of 
               the squared difference from the mean μ, the Laplace density is expressed in terms of the 
               absolute difference from the mean. Consequently the Laplace distribution has fatter tails
               than the normal distribution.</para>
               
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Laplace_distribution">
                  Wikipedia, The Free Encyclopedia. Laplace distribution. 
                  Available from: http://en.wikipedia.org/wiki/Laplace_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
               // Create a new Laplace distribution with μ = 4 and b = 2
               var laplace = new LaplaceDistribution(location: 4, scale: 2);
               
               // Common measures
               double mean = laplace.Mean;     // 4.0
               double median = laplace.Median; // 4.0
               double var = laplace.Variance;  // 8.0
               
               // Cumulative distribution functions
               double cdf = laplace.DistributionFunction(x: 0.27);               // 0.077448104942453522
               double ccdf = laplace.ComplementaryDistributionFunction(x: 0.27); // 0.92255189505754642
               double icdf = laplace.InverseDistributionFunction(p: cdf);        // 0.27
               
               // Probability density functions
               double pdf = laplace.ProbabilityDensityFunction(x: 0.27);     //  0.038724052471226761
               double lpdf = laplace.LogProbabilityDensityFunction(x: 0.27); // -3.2512943611198906
               
               // Hazard (failure rate) functions
               double hf = laplace.HazardFunction(x: 0.27); // 0.041974931360160776
               double chf = laplace.CumulativeHazardFunction(x: 0.27); // 0.080611649844768624
                
               // String representation
               string str = laplace.ToString(CultureInfo.InvariantCulture); // Laplace(x; μ = 4, b = 2)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LaplaceDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new Laplace distribution.
            </summary>
            
            <param name="location">The location parameter μ (mu).</param>
            <param name="scale">The scale parameter b.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LaplaceDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.LaplaceDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LaplaceDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.LaplaceDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LaplaceDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.LaplaceDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LaplaceDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LaplaceDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LaplaceDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
            <remarks>
              The Laplace's distribution mean has the 
              same value as the location parameter μ.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LaplaceDistribution.Mode">
            <summary>
              Gets the mode for this distribution (μ).
            </summary>
            
            <remarks>
              The Laplace's distribution mode has the 
              same value as the location parameter μ.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LaplaceDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
            <remarks>
              The Laplace's distribution median has the 
              same value as the location parameter μ.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LaplaceDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
            <remarks>
              The Laplace's variance is computed as 2*b².
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LaplaceDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LaplaceDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
            <remarks>
              The Laplace's entropy is defined as ln(2*e*b), in which
              <c>e</c> is the <see cref="F:System.Math.E">Euler constant</see>.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution">
            <summary>
              Mann-Whitney's U statistic distribution.
            </summary>
            
            <remarks>
            <para>
              This is the distribution for <see cref="T:Accord.Statistics.Testing.MannWhitneyWilcoxonTest">Mann-Whitney's U</see>
              statistic used in <see cref="T:Accord.Statistics.Testing.MannWhitneyWilcoxonTest"/>. This distribution is based on
              sample <see cref="M:Accord.Statistics.Tools.Rank(System.Double[],System.Boolean)"/> statistics.</para>
            <para>
              This is the distribution for the first sample statistic, U1. Some textbooks
              (and statistical packages) use alternate definitions for U, which should be
              compared with the appropriate statistic tables or alternate distributions.</para>
            </remarks>
            
            <example>
            <code>
              // Consider the following rank statistics
              double[] ranks = { 1, 2, 3, 4, 5 };
              
              // Create a new Mann-Whitney U's distribution with n1 = 2 and n2 = 3
              var mannWhitney = new MannWhitneyDistribution(ranks, n1: 2, n2: 3);
              
              // Common measures
              double mean = mannWhitney.Mean;     // 2.7870954605658511
              double median = mannWhitney.Median; // 1.5219615583481305
              double var = mannWhitney.Variance;  // 18.28163603621158
              
              // Cumulative distribution functions
              double cdf = mannWhitney.DistributionFunction(x: 4);               // 0.6
              double ccdf = mannWhitney.ComplementaryDistributionFunction(x: 4); // 0.4
              double icdf = mannWhitney.InverseDistributionFunction(p: cdf);     // 3.6666666666666661
              
              // Probability density functions
              double pdf = mannWhitney.ProbabilityDensityFunction(x: 4);     // 0.2
              double lpdf = mannWhitney.LogProbabilityDensityFunction(x: 4); // -1.6094379124341005
              
              // Hazard (failure rate) functions
              double hf = mannWhitney.HazardFunction(x: 4); // 0.5
              double chf = mannWhitney.CumulativeHazardFunction(x: 4); // 0.916290731874155
                
              // String representation
              string str = mannWhitney.ToString(); // MannWhitney(u; n1 = 2, n2 = 3)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Testing.MannWhitneyWilcoxonTest"/>
            <seealso cref="M:Accord.Statistics.Tools.Rank(System.Double[],System.Boolean)"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.#ctor(System.Double[],System.Int32,System.Int32)">
            <summary>
              Constructs a Mann-Whitney's U-statistic distribution.
            </summary>
            
            <param name="ranks">The rank statistics.</param>
            <param name="n1">The number of observations in the first sample.</param>
            <param name="n2">The number of observations in the second sample.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>k</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.UMinimum(System.Double[],System.Int32,System.Int32)">
            <summary>
              Gets the Mann-Whitney's U statistic for the smaller sample.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.USample1(System.Double[],System.Int32)">
            <summary>
              Gets the Mann-Whitney's U statistic for the first sample.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.USample2(System.Double[],System.Int32)">
            <summary>
              Gets the Mann-Whitney's U statistic for the second sample.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>u</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>u</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>u</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>u</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>u</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.Samples1">
            <summary>
              Gets the number of observations in the first sample. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.Samples2">
            <summary>
              Gets the number of observations in the second sample.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.Ranks">
            <summary>
              Gets the rank statistics for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
            <remarks>
              The mean of Mann-Whitney's U distribution
              is defined as <c>(n1 * n2) / 2</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
            <remarks>
              The variance of Mann-Whitney's U distribution
              is defined as <c>(n1 * n2 * (n1 + n2 + 1)) / 12</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.Mode">
            <summary>
              This method is not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.Entropy">
            <summary>
              This method is not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution">
             <summary>
               Noncentral t-distribution.
             </summary>
             
             <remarks>
             <para>
               As with other noncentrality parameters, the noncentral t-distribution generalizes 
               a probability distribution – <see cref="T:Accord.Statistics.Distributions.Univariate.TDistribution">Student's t-distribution</see>
               – using a noncentrality parameter. Whereas the central distribution describes how a
               test statistic is distributed when the difference tested is null, the noncentral 
               distribution also describes how <c>t</c> is distributed when the null is false. 
               This leads to its use in statistics, especially calculating statistical power. The
               noncentral t-distribution is also known as the singly noncentral t-distribution, and
               in addition to its primary use in statistical inference, is also used in robust 
               modeling for data.</para>
               
             <para>    
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Noncentral_t-distribution">
                   Wikipedia, The Free Encyclopedia. Noncentral t-distribution. Available on:
                   http://en.wikipedia.org/wiki/Noncentral_t-distribution </a></description></item>
               </list></para>
             </remarks>
             
             <example>
             <code>
               var distribution = new NoncentralTDistribution(
                     degreesOfFreedom: 4, noncentrality: 2.42);
            
               double mean = distribution.Mean;     // 3.0330202123035104
               double median = distribution.Median; // 2.6034842414893795
               double var = distribution.Variance;  // 4.5135883917583683
               
               double cdf = distribution.DistributionFunction(x: 1.4); // 0.15955740661144721
               double pdf = distribution.ProbabilityDensityFunction(x: 1.4); // 0.23552141805184526
               double lpdf = distribution.LogProbabilityDensityFunction(x: 1.4); // -1.4459534225195116
               
               double ccdf = distribution.ComplementaryDistributionFunction(x: 1.4); // 0.84044259338855276
               double icdf = distribution.InverseDistributionFunction(p: cdf); // 1.4000000000123853
               
               double hf = distribution.HazardFunction(x: 1.4); // 0.28023498559521387
               double chf = distribution.CumulativeHazardFunction(x: 1.4); // 0.17382662901507062
               
               string str = distribution.ToString(CultureInfo.InvariantCulture); // T(x; df = 4, μ = 2.42)
             </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.TDistribution"/>
             <seealso cref="T:Accord.Statistics.Testing.TTest"/>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.TDistribution"/> class.
            </summary>
            
            <param name="degreesOfFreedom">The degrees of freedom v.</param>
            <param name="noncentrality">The noncentrality parameter μ (mu).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
             Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.distributionFunctionLowerTail(System.Double,System.Double,System.Double)">
            <summary>
              Computes the cumulative probability at <c>t</c> of the
              non-central T-distribution with DF degrees of freedom 
              and non-centrality parameter.
            </summary>
            
            <remarks>
              This function is based on the original work done by
              Russell Lent hand John Burkardt, shared under the
              LGPL license. Original FORTRAN code can be found at:
              http://people.sc.fsu.edu/~jburkardt/f77_src/asa243/asa243.html
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.DegreesOfFreedom">
            <summary>
              Gets the degrees of freedom (v) for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.Noncentrality">
            <summary>
              Gets the noncentrality parameter μ (mu) for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <remarks>
              The noncentral t-distribution's mean is defined in terms of
              the <see cref="M:Accord.Math.Gamma.Function(System.Double)">Gamma function Γ(x)</see> as 
              <c>μ * sqrt(v/2) * Γ((v - 1) / 2) / Γ(v / 2) for v &gt; 1</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <remarks>
              The noncentral t-distribution's variance is defined in terms of
              the <see cref="M:Accord.Math.Gamma.Function(System.Double)">Gamma function Γ(x)</see> as 
              <c>a - b * c²</c> in which
              <c>a = v*(1+μ²) / (v-2)</c>,
              <c>b = (u² * v) / 2</c> and
              <c>c = Γ((v - 1) / 2) / Γ(v / 2)</c> for <c>v &gt; 2</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.ExponentialDistribution">
            <summary>
              Exponential distribution.
            </summary>
            
            <remarks>
            <para>
              In probability theory and statistics, the exponential distribution (a.k.a. negative
              exponential distribution) is a family of continuous probability distributions. It 
              describes the time between events in a Poisson process, i.e. a process in which events 
              occur continuously and independently at a constant average rate. It is the continuous 
              analogue of the geometric distribution.</para>
            <para>
              Note that the exponential distribution is not the same as the class of exponential 
              families of distributions, which is a large class of probability distributions that
              includes the exponential distribution as one of its members, but also includes the 
              normal distribution, binomial distribution, gamma distribution, Poisson, and many 
              others.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Exponential_distribution">
                  Wikipedia, The Free Encyclopedia. Exponential distribution. Available on: 
                  http://en.wikipedia.org/wiki/Exponential_distribution </a></description></item>
              </list></para>     
            </remarks>
            
            <example>
            <para>
              The following example shows how to create and test the main characteristics
              of an Exponential distribution given a lambda (λ) rate of 0.42: </para>
              
            <code>
              // Create an Exponential distribution with λ = 0.42
              var exp = new ExponentialDistribution(rate: 0.42);
              
              // Common measures
              double mean = exp.Mean;     // 2.3809523809523809
              double median = exp.Median; // 1.6503504299046317
              double var = exp.Variance;  // 5.6689342403628125
              
              // Cumulative distribution functions
              double cdf  = exp.DistributionFunction(x: 0.27);          // 0.10720652870550407
              double ccdf = exp.ComplementaryDistributionFunction(x: 0.27); // 0.89279347129449593
              double icdf = exp.InverseDistributionFunction(p: cdf);        // 0.27
              
              // Probability density functions
              double pdf  = exp.ProbabilityDensityFunction(x: 0.27);    // 0.3749732579436883
              double lpdf = exp.LogProbabilityDensityFunction(x: 0.27); // -0.98090056770472311
              
              // Hazard (failure rate) functions
              double hf = exp.HazardFunction(x: 0.27);            // 0.42
              double chf = exp.CumulativeHazardFunction(x: 0.27); // 0.1134
              
              // String representation
              string str = exp.ToString(CultureInfo.InvariantCulture); // Exp(x; λ = 0.42)
            </code>
            
            <para>
              The following example shows how to generate random samples drawn
              from an Exponential distribution and later how to re-estimate a
              distribution from the generated samples.</para>
              
            <code>
              // Create an Exponential distribution with λ = 2.5
              var exp = new ExponentialDistribution(rate: 2.5);
            
              // Generate a million samples from this distribution:
              double[] samples = target.Generate(1000000);
            
              // Create a default exponential distribution
              var newExp = new ExponentialDistribution();
            
              // Fit the samples
              newExp.Fit(samples);
            
              // Check the estimated parameters
              double rate = newExp.Rate; // 2.5
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.#ctor">
            <summary>
              Creates a new Exponential distribution with the given rate.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.#ctor(System.Double)">
            <summary>
              Creates a new Exponential distribution with the given rate.
            </summary>
            
            <param name="rate">The rate parameter lambda (λ). Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.DistributionFunction(System.Double)">
            <summary>
             Gets the cumulative distribution function (cdf) for
             this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
              
            <para>
              The Exponential CDF is defined as CDF(x) = 1 - exp(-λ*x).</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
            <para>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.</para>
              
            <para>
              The Exponential PDF is defined as PDF(x) = λ * exp(-λ*x).</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <seealso cref="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.ProbabilityDensityFunction(System.Double)"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <remarks>
            <para>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.</para>
            
            <para>
              The Exponential ICDF is defined as ICDF(p) = -ln(1-p)/λ.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
            <example>
              Please see <see cref="T:Accord.Statistics.Distributions.Univariate.ExponentialDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Estimate(System.Double[])">
            <summary>
              Estimates a new Exponential distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Estimate(System.Double[],System.Double[])">
            <summary>
              Estimates a new Exponential distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Random(System.Double,System.Int32)">
             <summary>
               Generates a random vector of observations from the 
               Exponential distribution with the given parameters.
             </summary>
             
             <param name="lambda">The rate parameter lambda.</param>
             <param name="samples">The number of samples to generate.</param>
            
             <returns>An array of double values sampled from the specified Exponential distribution.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Random(System.Double)">
            <summary>
              Generates a random observation from the 
              Exponential distribution with the given parameters.
            </summary>
            
            <param name="lambda">The rate parameter lambda.</param>
            
            <returns>A random double value sampled from the specified Exponential distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Rate">
            <summary>
              Gets the distribution's rate parameter lambda (λ).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
            <remarks>
              In the Exponential distribution, the mean is defined as 1/λ.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
            <remarks>
              In the Exponential distribution, the variance is defined as 1/(λ²)
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>The distribution's median value.</value>
            
            <remarks>
              In the Exponential distribution, the median is defined as ln(2) / λ.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>The distribution's mode value.</value>
            
            <remarks>
              In the Exponential distribution, the median is defined as 0.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ExponentialDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
            <remarks>
              In the Exponential distribution, the median is defined as 1 - ln(λ).
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.GammaDistribution">
             <summary>
               Gamma distribution.
             </summary>
             
             <remarks>
             <para>
                The gamma distribution is a two-parameter family of continuous probability
                distributions. There are three different parameterizations in common use:</para>
                <list type="bullet">
                <item><description>
                   With a <see cref="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Shape"/> parameter k and a
                   <see cref="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Scale"/> parameter θ.</description></item>
                <item><description>
                   With a shape parameter α = k and an inverse scale parameter
                   β = 1/θ, called a <see cref="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Rate"/> parameter.</description></item>
                <item><description>
                   With a shape parameter k and a <see cref="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Mean"/>
                   parameter μ = k/β.</description></item>
                </list>
                   
             <para>
                In each of these three forms, both parameters are positive real numbers. The
                parameterization with k and θ appears to be more common in econometrics and 
                certain other applied fields, where e.g. the gamma distribution is frequently
                used to model waiting times. For instance, in life testing, the waiting time 
                until death is a random variable that is frequently modeled with a gamma 
                distribution. This is the <see cref="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.#ctor(System.Double,System.Double)">default 
                construction method for this class</see>.</para>
             <para>
                The parameterization with α and β is more common in Bayesian statistics, where 
                the gamma distribution is used as a conjugate prior distribution for various 
                types of inverse scale (aka rate) parameters, such as the λ of an exponential 
                distribution or a Poisson distribution – or for that matter, the β of the gamma
                distribution itself. (The closely related inverse gamma distribution is used as
                a conjugate prior for scale parameters, such as the variance of a normal distribution.)
                In order to create a Gamma distribution using the Bayesian parameterization, you
                can use <see cref="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.FromBayesian(System.Double,System.Double)"/>.</para>
             <para>
                If k is an integer, then the distribution represents an Erlang distribution; i.e.,
                the sum of k independent exponentially distributed random variables, each of which
                has a mean of θ (which is equivalent to a rate parameter of 1/θ). </para>
             <para>
                The gamma distribution is the maximum entropy probability distribution for a random 
                variable X for which E[X] = kθ = α/β is fixed and greater than zero, and <c>E[ln(X)] = 
                ψ(k) + ln(θ) = ψ(α) − ln(β)</c> is fixed (ψ is the digamma function).</para>
                
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Gamma_distribution">
                   Wikipedia, The Free Encyclopedia. Gamma distribution. Available on: 
                   http://en.wikipedia.org/wiki/Gamma_distribution </a></description></item>
               </list></para>     
             </remarks>
             
             <example>
             <para>
               The following example shows how to create, test and compute the main 
               functions of a Gamma distribution given parameters θ = 4 and k = 2: </para>
               
             <code>
               // Create a Γ-distribution with k = 2 and θ = 4
               var gamma = new GammaDistribution(theta: 4, k: 2);
             
               // Common measures
               double mean   = gamma.Mean;     // 8.0
               double median = gamma.Median;   // 6.7133878418421506
               double var    = gamma.Variance; // 32.0
             
               // Cumulative distribution functions
               double cdf  = gamma.DistributionFunction(x: 0.27);              //  0.002178158242390601
               double ccdf = gamma.ComplementaryDistributionFunction(x: 0.27); // 0.99782184175760935
               double icdf = gamma.InverseDistributionFunction(p: cdf);        // 0.26999998689819171
               
               // Probability density functions
               double pdf  = gamma.ProbabilityDensityFunction(x: 0.27);    //  0.015773530285395465
               double lpdf = gamma.LogProbabilityDensityFunction(x: 0.27); // -4.1494220422235433
             
               // Hazard (failure rate) functions
               double hf  = gamma.HazardFunction(x: 0.27);           // 0.015807962529274005
               double chf = gamma.CumulativeHazardFunction(x: 0.27); // 0.0021805338793574793
            
               // String representation
               string str = gamma.ToString(CultureInfo.InvariantCulture); // "Γ(x; k = 2, θ = 4)"
             </code>
             </example>
             
             <seealso cref="T:Accord.Math.Gamma"/>
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.InverseGammaDistribution"/>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.#ctor">
            <summary>
              Constructs a Gamma distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Gamma distribution.
            </summary>
            
            <param name="theta">The scale parameter θ (theta). Default is 1.</param>
            <param name="k">The shape parameter k. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.FromBayesian(System.Double,System.Double)">
            <summary>
              Constructs a Gamma distribution using α and β parameterization.
            </summary>
            
            <param name="alpha">The shape parameter α = k.</param>
            <param name="beta">The inverse scale parameter β = 1/θ.</param>
            
            <returns>A Gamma distribution constructed with the given parameterization.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.FromMean(System.Double,System.Double)">
            <summary>
              Constructs a Gamma distribution using k and μ parameterization.
            </summary>
            
            <param name="alpha">The shape parameter α = k.</param>
            <param name="mean">The mean parameter μ = k/β.</param>
            
            <returns>A Gamma distribution constructed with the given parameterization.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
              
            <para>
              The Gamma's CDF is computed in terms of the <see cref="M:Accord.Math.Gamma.LowerIncomplete(System.Double,System.Double)">
              Lower Incomplete Regularized Gamma Function P</see> as <c>CDF(x) = P(shape, 
              x / scale)</c>.</para>
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.GammaDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.GammaDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.GammaDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.DistributionFunction(System.Double)"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.Estimate(System.Double[])">
            <summary>
              Estimates a new Gamma distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.Estimate(System.Double[],System.Double[])">
            <summary>
              Estimates a new Gamma distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.Random(System.Double,System.Double,System.Int32)">
             <summary>
               Generates a random vector of observations from the 
               Gamma distribution with the given parameters.
             </summary>
             
             <param name="scale">The scale parameter theta.</param>
             <param name="shape">The shape parameter k.</param>
             <param name="samples">The number of samples to generate.</param>
            
             <returns>An array of double values sampled from the specified Gamma distribution.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.Random(System.Double,System.Double)">
            <summary>
              Generates a random observation from the 
              Gamma distribution with the given parameters.
            </summary>
            
            <param name="scale">The scale parameter theta.</param>
            <param name="shape">The shape parameter k.</param>
            
            <returns>A random double value sampled from the specified Gamma distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GammaDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Scale">
            <summary>
              Gets the distribution's scale
              parameter θ (theta).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Shape">
            <summary>
              Gets the distribution's 
              shape parameter k.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Rate">
            <summary>
              Gets the inverse scale parameter β = 1/θ.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
            <remarks>
              In the Gamma distribution, the mean is computed as k*θ.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
            <remarks>
              In the Gamma distribution, the variance is computed as k*θ².
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GammaDistribution.Standard">
            <summary>
              Gets the standard Gamma distribution,
              with scale θ = 1 and location k = 1.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution">
            <summary>
              Kolmogorov-Smirnov distribution.
            </summary>
            
            <remarks>
            <para>
              This class is based on the excellent paper and original Java code by Simard and
              L'Ecuyer (2010). Includes additional modifications for increased performance and
              readability, shared under the LGPL under permission of original authors.</para>
              
            <para>
              L'Ecuyer and Simard partitioned the problem of evaluating the CDF using multiple
              approximation and asymptotic methods in order to achieve a best compromise between
              speed and precision. The distribution function of this class follows the same 
              partitioning scheme as described by L'Ecuyer and Simard, which is described in the
              table below.</para>
             
              <list type="table">
               <listheader><term>For n &lt;= 140 and:</term></listheader>
                 <item><term>1/n &gt; x &gt;= 1-1/n</term><description>Uses the Ruben-Gambino formula.</description></item>
                 <item><term>1/n &lt; nx² &lt; 0.754693</term><description>Uses the Durbin matrix algorithm.</description></item>
                 <item><term>0.754693 &lt;= nx² &lt; 4</term><description>Uses the Pomeranz algorithm.</description></item>
                 <item><term>4 &lt;= nx² &lt; 18</term><description>Uses the complementary distribution function.</description></item>
                 <item><term>nx² &gt;= 18</term><description>Returns the constant 1.</description></item></list>
                 
              <list type="table">
               <listheader><term>For 140 &lt; n &lt;= 10^5</term></listheader>
                 <item><term>nx² &gt;= 18</term><description>Returns the constant 1.</description></item>
                 <item><term>nx^(3/2) &lt; 1.4</term><description>Durbin matrix algorithm.</description></item>
                 <item><term>nx^(3/2) &gt; 1.4</term><description>Pelz-Good asymptotic series.</description></item></list>
                 
              <list type="table">
               <listheader><term>For n &gt; 10^5</term></listheader>
                 <item><term>nx² &gt;= 18</term><description>Returns the constant 1.</description></item>
                 <item><term>nx² &lt; 18</term><description>Pelz-Good asymptotic series.</description></item></list>
            
            <para>
              References:
              <list type="bullet">
                <item><description>
                  R. Simard and P. L'Ecuyer. (2011). "Computing the Two-Sided Kolmogorov-Smirnov
                  Distribution", Journal of Statistical Software, Vol. 39, Issue 11, Mar 2011.
                  Available on: http://www.iro.umontreal.ca/~lecuyer/myftp/papers/ksdist.pdf </description></item>
                <item><description>
                  Marsaglia, G., Tsang, W. W., Wang, J. (2003) "Evaluating Kolmogorov's
                  Distribution", Journal of Statistical Software, 8 (18), 1–4. jstor.
                  Available on: http://www.jstatsoft.org/v08/i18/paper </description></item>
                <item><description>
                  Durbin, J. (1972). Distribution Theory for Tests Based on The Sample 
                  Distribution Function, Society for Industrial &amp; Applied Mathematics,
                  Philadelphia. </description></item>
             </list></para>  
            </remarks>
            
            <example>
            <para>
              The following example shows how to build a Kolmogorov-Smirnov distribution
              for 42 samples and compute its main functions and characteristics: </para>
              
            <code>
              // Create a Kolmogorov-Smirnov distribution with n = 42
              var ks = new KolmogorovSmirnovDistribution(samples: 42);
              
              // Common measures
              double mean   = ks.Mean;     // 0.13404812830261556
              double median = ks.Median;   // 0.12393613519421857
              double var    = ks.Variance; // 0.019154717445778062
              
              // Cumulative distribution functions
              double cdf  = ks.DistributionFunction(x: 0.27);              // 0.99659863602996079
              double ccdf = ks.ComplementaryDistributionFunction(x: 0.27); // 0.0034013639700392062
              double icdf = ks.InverseDistributionFunction(p: cdf);        // 0.26999997446092017
              
              // Hazard (failure rate) functions
              double chf  = ks.CumulativeHazardFunction(x: 0.27);          // 5.6835787601476619
              
              // String representation
              string str = ks.ToString(); // "KS(x; n = 42)"
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Testing.KolmogorovSmirnovTest"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.#ctor(System.Double)">
            <summary>
              Creates a new Kolmogorov-Smirnov distribution.
            </summary>
            
            <param name="samples">The number of samples.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.ComplementaryDistributionFunction(System.Double)">
             <summary>
               Gets the complementary cumulative distribution function
               (ccdf) for this distribution evaluated at point <c>x</c>.
               This function is also known as the Survival function.
             </summary>
            
             <remarks>
               The Complementary Cumulative Distribution Function (CCDF) is
               the complement of the Cumulative Distribution Function, or 1
               minus the CDF.
             </remarks>
             
             <example>
               See <see cref="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution"/>.
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.OneSideDistributionFunction(System.Double)">
             <summary>
               Computes the Upper Tail of the P[Dn &gt;= x] distribution.
             </summary>
            
             <remarks>
               This function approximates the upper tail of the P[Dn &gt;= x]
               distribution using the one-sided Kolmogorov-Smirnov statistic.
             </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.CumulativeFunction(System.Double,System.Double)">
             <summary>
               Computes the Cumulative Distribution Function (CDF)
               for the Kolmogorov-Smirnov statistic's distribution.
             </summary>
             
             <param name="n">The sample size.</param>
             <param name="x">The Kolmogorov-Smirnov statistic.</param>
             <returns>Returns the cumulative probability of the statistic 
             <paramref name="x"/> under a sample size <paramref name="n"/>.</returns>
             
             <remarks>
             <para>
               This function computes the cumulative probability P[Dn &lt;= x] of
               the Kolmogorov-Smirnov distribution using multiple methods as
               suggested by Richard Simard (2010).</para>
              
             <para>
               Simard partitioned the problem of evaluating the CDF using multiple
               approximation and asymptotic methods in order to achieve a best compromise
               between speed and precision. This function follows the same partitioning as
               Simard, which is described in the table below.</para>
              
               <list type="table">
                <listheader><term>For n &lt;= 140 and:</term></listheader>
                  <item><term>1/n > x >= 1-1/n</term><description>Uses the Ruben-Gambino formula.</description></item>
                  <item><term>1/n &lt; nx² &lt; 0.754693</term><description>Uses the Durbin matrix algorithm.</description></item>
                  <item><term>0.754693 &lt;= nx² &lt; 4</term><description>Uses the Pomeranz algorithm.</description></item>
                  <item><term>4 &lt;= nx² &lt; 18</term><description>Uses the complementary distribution function.</description></item>
                  <item><term>nx² >= 18</term><description>Returns the constant 1.</description></item></list>
                  
               <list type="table">
                <listheader><term>For 140 &lt; n &lt;= 10^5</term></listheader>
                  <item><term>nx² &gt;= 18</term><description>Returns the constant 1.</description></item>
                  <item><term>nx^(3/2) &lt; 1.4</term><description>Durbin matrix algorithm.</description></item>
                  <item><term>nx^(3/2) &gt; 1.4</term><description>Pelz-Good asymptotic series.</description></item></list>
                  
               <list type="table">
                <listheader><term>For n &gt; 10^5</term></listheader>
                  <item><term>nx² &gt;= 18</term><description>Returns the constant 1.</description></item>
                  <item><term>nx² &lt; 18</term><description>Pelz-Good asymptotic series.</description></item></list>
            
             </remarks>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.ComplementaryDistributionFunction(System.Double,System.Double)">
            <summary>
              Computes the Complementary Cumulative Distribution Function (1-CDF)
              for the Kolmogorov-Smirnov statistic's distribution.
            </summary>
            
            <param name="n">The sample size.</param>
            <param name="x">The Kolmogorov-Smirnov statistic.</param>
            <returns>Returns the complementary cumulative probability of the statistic 
            <paramref name="x"/> under a sample size <paramref name="n"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.PelzGood(System.Double,System.Double)">
            <summary>
              Pelz-Good algorithm for computing lower-tail areas
              of the Kolmogorov-Smirnov distribution.
            </summary>
            
            <remarks>
            <para>
              As stated in Simard's paper, Pelz and Good (1976) generalized Kolmogorov's
              approximation to an asymptotic series in 1/sqrt(n). </para>
            <para>
              References: Wolfgang Pelz and I. J. Good, "Approximating the Lower Tail-Areas of
              the Kolmogorov-Smirnov One-Sample Statistic", Journal of the Royal 
              Statistical Society, Series B. Vol. 38, No. 2 (1976), pp. 152-156</para> 
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.OneSideUpperTail(System.Double,System.Double)">
             <summary>
               Computes the Upper Tail of the P[Dn &gt;= x] distribution.
             </summary>
            
             <remarks>
               This function approximates the upper tail of the P[Dn &gt;= x]
               distribution using the one-sided Kolmogorov-Smirnov statistic.
             </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.Pomeranz(System.Int32,System.Double)">
            <summary>
              Pomeranz algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.Durbin(System.Int32,System.Double)">
            <summary>
              Durbin's algorithm for computing P[Dn &lt; d]
            </summary>
            
            <remarks>
            <para>
              The method presented by Marsaglia (2003), as stated in the paper, is based
              on a succession of developments starting with Kolmogorov and culminating in
              a masterful treatment by Durbin (1972). Durbin's monograph summarized and 
              extended many previous works published in the years 1933-73.</para>
            <para>
              This function implements the small C procedure provided by Marsaglia on his
              paper with corrections made by Simard (2010). Further optimizations also
              have been performed.
            </para>
              References:
              - Marsaglia, G., Tsang, W. W., Wang, J. (2003) "Evaluating Kolmogorov's
                Distribution", Journal of Statistical Software, 8 (18), 1–4. jstor.
                Available on: http://www.jstatsoft.org/v08/i18/paper
              - Durbin, J. (1972) Distribution Theory for Tests Based on The Sample 
                Distribution Function, Society for Industrial &amp; Applied Mathematics,
                Philadelphia.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.matrixPower(System.Double[0:,0:],System.Int32,System.Double[0:,0:],System.Int32@,System.Int32,System.Int32,System.Double[0:,0:])">
            <summary>
              Computes matrix power. Used in the Durbin algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.computeLimits(System.Double,System.Double[],System.Double[])">
            <summary>
              Initializes the Pomeranz algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.computeA(System.Int32,System.Double[],System.Double)">
            <summary>
              Creates matrix A of the Pomeranz algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.computeH(System.Int32,System.Double[],System.Double[][])">
            <summary>
              Computes matrix H of the Pomeranz algorithm.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.NumberOfSamples">
            <summary>
              Gets the number of samples distribution parameter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <remarks>
              The mean of the K-S distribution for n samples 
              is computed as Mean = sqrt(π/2) * ln(2) / sqrt(n).
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution"/>.
            </example>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.Mode">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <remarks>
              The variance of the K-S distribution for n samples 
              is computed as Var = (π² / 12 - mean²) / n, in which
              mean is the K-S distribution <see cref="P:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.Mean"/>.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution"/>.
            </example>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution">
             <summary>
               Bernoulli probability distribution.
             </summary>
             
             <remarks>
             <para>
               The Bernoulli distribution is a distribution for a single
               binary variable x E {0,1}, representing, for example, the
               flipping of a coin. It is governed by a single continuous
               parameter representing the probability of an observation
               to be equal to 1.</para>
               
             <para>    
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Bernoulli_distribution">
                   Wikipedia, The Free Encyclopedia. Bernoulli distribution. Available on:
                   http://en.wikipedia.org/wiki/Bernoulli_distribution </a></description></item>
                 <item><description>
                   C. Bishop. “Pattern Recognition and Machine Learning”. Springer. 2006.</description></item>
               </list></para>
             </remarks>
            
             <example>
             <code>
                // Create a distribution with probability 0.42
                var bern = new BernoulliDistribution(mean: 0.42);
                
                // Common measures
                double mean   = bern.Mean;     // 0.42
                double median = bern.Median;   // 0.0
                double var    = bern.Variance; // 0.2436
                double mode   = bern.Mode;     // 0.0
                
                // Probability mass functions
                double pdf = bern.ProbabilityMassFunction(k: 1); // 0.42
                double lpdf = bern.LogProbabilityMassFunction(k: 0); // -0.54472717544167193
                
                // Cumulative distribution functions
                double cdf = bern.DistributionFunction(k: 0);    // 0.58
                double ccdf = bern.ComplementaryDistributionFunction(k: 0); // 0.42
                
                // Quantile functions
                int icdf0 = bern.InverseDistributionFunction(p: 0.57); // 0
                int icdf1 = bern.InverseDistributionFunction(p: 0.59); // 1
                
                // Hazard / failure rate functions
                double hf = bern.HazardFunction(x: 0); // 1.3809523809523814
                double chf = bern.CumulativeHazardFunction(x: 0); // 0.86750056770472328
                
                // String representation
                string str = bern.ToString(CultureInfo.InvariantCulture); // "Bernoulli(x; p = 0.42, q = 0.58)"
             </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.BinomialDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.#ctor">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution">Bernoulli</see> distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.#ctor(System.Double)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution">Bernoulli</see> distribution.
            </summary>
            
            <param name="mean">The probability of an observation being equal to 1. Default is 0.5</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>k</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.DistributionFunction(System.Int32)"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.ComplementaryDistributionFunction(System.Int32)">
            <summary>
              Gets P(X &gt; k) the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>k</c>.
              This function is also known as the Survival function.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>k</c> occurring
              in the current distribution.
            </returns>
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>k</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.LogProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the log-probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>k</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>k</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.IntRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.BinomialDistribution">
            <summary>
              Binomial probability distribution.
            </summary>
            
            <remarks>
            <para>
             The binomial distribution is the discrete probability distribution of the number of
             successes in a sequence of <c>&gt;n</c> independent yes/no experiments, each of which 
             yields success with probability <c>p</c>. Such a success/failure experiment is also
             called a Bernoulli experiment or Bernoulli trial; when <c>n = 1</c>, the binomial 
             distribution is a <see cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution">Bernoulli distribution</see>.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Binomial_distribution">
                  Wikipedia, The Free Encyclopedia. Binomial distribution. Available on:
                  http://en.wikipedia.org/wiki/Binomial_distribution </a></description></item>
                <item><description>
                  C. Bishop. “Pattern Recognition and Machine Learning”. Springer. 2006.</description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
              // Creates a distribution with n = 16 and success probability 0.12
              var bin = new BinomialDistribution(trials: 16, probability: 0.12);
              
              // Common measures
              double mean = bin.Mean;     // 1.92
              double median = bin.Median; // 2
              double var = bin.Variance;  // 1.6896
              double mode = bin.Mode;     // 2
              
              // Probability mass functions
              double pdf = bin.ProbabilityMassFunction(k: 1); // 0.28218979948821621
              double lpdf = bin.LogProbabilityMassFunction(k: 0); // -2.0453339441581582
              
              // Cumulative distribution functions
              double cdf = bin.DistributionFunction(k: 0);    // 0.12933699143209909
              double ccdf = bin.ComplementaryDistributionFunction(k: 0); // 0.87066300856790091
              
              // Quantile functions
              int icdf0 = bin.InverseDistributionFunction(p: 0.37); // 1
              int icdf1 = bin.InverseDistributionFunction(p: 0.50); // 2
              int icdf2 = bin.InverseDistributionFunction(p: 0.99); // 5
              int icdf3 = bin.InverseDistributionFunction(p: 0.999); // 7
              
              // Hazard (failure rate) functions
              double hf = bin.HazardFunction(x: 0); // 1.3809523809523814
              double chf = bin.CumulativeHazardFunction(x: 0); // 0.86750056770472328
              
              // String representation
              string str = bin.ToString(CultureInfo.InvariantCulture); // "Binomial(x; n = 16, p = 0.12)"
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BinomialDistribution.#ctor">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Distributions.Univariate.BinomialDistribution">binomial distribution</see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BinomialDistribution.#ctor(System.Int32)">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Distributions.Univariate.BinomialDistribution">binomial distribution</see>.
            </summary>
            
            <param name="trials">The number of trials <c>n</c>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BinomialDistribution.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Distributions.Univariate.BinomialDistribution">binomial distribution</see>.
            </summary>
            
            <param name="trials">The number of trials <c>n</c>.</param>
            <param name="probability">The success probability <c>p</c> in each trial.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BinomialDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>k</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BinomialDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <remarks>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BinomialDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>k</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BinomialDistribution.LogProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the log-probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>k</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BinomialDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BinomialDistribution.Fit(System.Int32[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BinomialDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BinomialDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BinomialDistribution.NumberOfTrials">
            <summary>
              Gets the number of trials <c>n</c> for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BinomialDistribution.ProbabilityOfSuccess">
            <summary>
              Gets the success probability <c>p</c> for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BinomialDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
             
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BinomialDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BinomialDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BinomialDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BinomialDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.IntRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution">
            <summary>
              Chi-Square (χ²) probability distribution
            </summary>
            
            <remarks>
            <para>
              In probability theory and statistics, the chi-square distribution (also chi-squared
              or χ²-distribution) with k degrees of freedom is the distribution of a sum of the 
              squares of k independent standard normal random variables. It is one of the most 
              widely used probability distributions in inferential statistics, e.g. in hypothesis 
              testing, or in construction of confidence intervals.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Chi-square_distribution">
                  Wikipedia, The Free Encyclopedia. Chi-square distribution. Available on: 
                  http://en.wikipedia.org/wiki/Chi-square_distribution </a></description></item>
              </list></para>     
            </remarks>
            
            <example>
            <para>
              The following example demonstrates how to create a new χ² 
              distribution with the given degrees of freedom. </para>
              
            <code>
              // Create a new χ² distribution with 7 d.f.
              var chisq = new ChiSquareDistribution(degreesOfFreedom: 7);
            
              // Common measures
              double mean = chisq.Mean;     //  7
              double median = chisq.Median; //  6.345811195595612
              double var = chisq.Variance;  // 14
            
              // Cumulative distribution functions
              double cdf = chisq.DistributionFunction(x: 6.27);           // 0.49139966433823956
              double ccdf = chisq.ComplementaryDistributionFunction(x: 6.27); // 0.50860033566176044
              double icdf = chisq.InverseDistributionFunction(p: cdf);        // 6.2700000000852318
              
              // Probability density functions
              double pdf = chisq.ProbabilityDensityFunction(x: 6.27);     // 0.11388708001184455
              double lpdf = chisq.LogProbabilityDensityFunction(x: 6.27); // -2.1725478476948092
            
              // Hazard (failure rate) functions
              double hf = chisq.HazardFunction(x: 6.27);            // 0.22392254197721179
              double chf = chisq.CumulativeHazardFunction(x: 6.27); // 0.67609276602233315
              
              // String representation
              string str = chisq.ToString(); // "χ²(x; df = 7)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.#ctor">
            <summary>
              Constructs a new Chi-Square distribution
              with given degrees of freedom.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.#ctor(System.Int32)">
            <summary>
              Constructs a new Chi-Square distribution
              with given degrees of freedom.
            </summary>
            
            <param name="degreesOfFreedom">The degrees of freedom for the distribution. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              the χ² distribution evaluated at point <c>x</c>.
            </summary>
            
            <remarks>
            <para>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.</para>
            <para>
              References:
              <list type="bullet">
                <item><description>
                  <a href="http://en.wikipedia.org/wiki/Chi-square_distribution#Probability_density_function">
                  Wikipedia, the free encyclopedia. Chi-square distribution. </a></description></item>
              </list></para>
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the χ² distribution evaluated at point <c>x</c>.
            </summary>
            
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
              
            <para>
              The χ² distribution function is defined in terms of the <see cref="M:Accord.Math.Gamma.LowerIncomplete(System.Double,System.Double)">
              Incomplete Gamma Function Γ(a, x)</see> as CDF(x; df) = Γ(df/2, x/d). </para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.ComplementaryDistributionFunction(System.Double)">
             <summary>
               Gets the complementary cumulative distribution function
               (ccdf) for the χ² distribution evaluated at point <c>x</c>.
               This function is also known as the Survival function.
             </summary>
            
             <remarks>
             <para>
               The Complementary Cumulative Distribution Function (CCDF) is
               the complement of the Cumulative Distribution Function, or 1
               minus the CDF.</para>
               
             <para>
               The χ² complementary distribution function is defined in terms of the 
               <see cref="M:Accord.Math.Gamma.UpperIncomplete(System.Double,System.Double)">Complemented Incomplete Gamma 
               Function Γc(a, x)</see> as CDF(x; df) = Γc(df/2, x/d). </para>
             </remarks>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.DistributionFunction(System.Double)"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              This method is not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Random(System.Int32,System.Int32)">
            <summary>
              Generates a random vector of observations from the 
              Chi-Square distribution with the given parameters.
            </summary>
            
            <returns>An array of double values sampled from the specified Chi-Square distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Random(System.Int32)">
            <summary>
              Generates a random observation from the 
              Chi-Square distribution with the given parameters.
            </summary>
            
            <param name="degreesOfFreedom">The degrees of freedom for the distribution.</param>
            
            <returns>A random double value sampled from the specified Chi-Square distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Inverse(System.Double,System.Int32)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            <param name="degreesOfFreedom">
              The degrees of freedom of the Chi-Square distribution.
            </param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.DistributionFunction(System.Double)"/>.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.DegreesOfFreedom">
            <summary>
              Gets the Degrees of Freedom for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <remarks>
              The χ² distribution mean is the number of degrees of freedom.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <remarks>
              The χ² distribution variance is twice its degrees of freedom.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <remarks>
              The χ² distribution mode is <c>max(degrees of freedom - 2, 0)</c>.
            </remarks>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.JointDistribution">
            <summary>
              Joint distribution of multiple discrete univariate distributions.
            </summary>
            
            <remarks>
            <para>
              This class builds a (potentially huge) lookup table for discrete
              symbol distributions. For example, given a discrete variable A
              which may take symbols a, b, c; and a discrete variable B which
              may assume values x, y, z, this class will build the probability
              table: </para>
              
            <code>
                     x      y      z
              a   p(a,x) p(a,y) p(a,z)
              b   p(b,x) p(b,y) p(b,z)
              c   p(c,x) p(c,y) p(c,z)
            </code>
            
            <para>
              Thus comprising the probabilities for all possible simple combination. This
              distribution is a generalization of the
              <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution"/>
              for multivariate discrete observations.
            </para>
            </remarks>
            
            <example>
            <para>
              The following example should demonstrate how to estimate a joint 
              distribution of two discrete variables. The first variable can
              take up to three distinct values, whereas the second can assume
              up to five.</para>
            
            <code>
              // Lets create a joint distribution for two discrete variables:
              // the first of which can assume 3 distinct symbol values: 0, 1, 2
              // the second which can assume 5 distinct symbol values: 0, 1, 2, 3, 4
              
              int[] symbols = { 3, 5 }; // specify the symbol counts
              
              // Create the joint distribution for the above variables
              JointDistribution joint = new JointDistribution(symbols);
            
              // Now, suppose we would like to fit the distribution (estimate
              // its parameters) from the following multivariate observations:
              //
              double[][] observations = 
              {
                  new double[] { 0, 0 },
                  new double[] { 1, 1 },
                  new double[] { 2, 1 },
                  new double[] { 0, 0 },
              };
            
              
              // Estimate parameters
              joint.Fit(observations);
            
              // At this point, we can query the distribution for observations:
              double p1 = joint.ProbabilityMassFunction(new[] { 0, 0 }); // should be 0.50
              double p2 = joint.ProbabilityMassFunction(new[] { 1, 1 }); // should be 0.25
              double p3 = joint.ProbabilityMassFunction(new[] { 2, 1 }); // should be 0.25
            
              // As it can be seem, indeed {0,0} appeared twice at the data, 
              // and {1,1} and {2,1 appeared one fourth of the data each.
            </code>
            </example>
            
            <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution"/>
            <see cref="T:Accord.Statistics.Distributions.Multivariate.Independent`1"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.JointDistribution.#ctor(System.Int32[])">
            <summary>
              Constructs a new joint discrete distribution.
            </summary>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.JointDistribution.ProbabilityMassFunction(System.Int32[])">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range.</param>
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.JointDistribution.LogProbabilityMassFunction(System.Int32[])">
            <summary>
              Gets the log-probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">A single point in the distribution range.</param>
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.JointDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.JointDistribution.DistributionFunction(System.Int32[])">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.JointDistribution.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.JointDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.JointDistribution.Frequencies">
            <summary>
              Gets the frequency of observation of each discrete variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.JointDistribution.Symbols">
            <summary>
              Gets the number of symbols for each discrete variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.JointDistribution.Mean">
            <summary>
            Gets the mean for this distribution.
            </summary>
            
            <value>
              An array of double-precision values containing
              the mean values for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.JointDistribution.Variance">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              An array of double-precision values containing
              the variance values for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.JointDistribution.Covariance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              An multidimensional array of double-precision values
              containing the covariance values for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution">
            <summary>
              Wilcoxon's W statistic distribution.
            </summary>
            
            <remarks>
            <para>
              This is the distribution for the positive side statistic W+ of the Wilcoxon
              test. Some textbooks (and statistical packages) use alternate definitions for
              W, which should be compared with the appropriate statistic tables or alternate
              distributions.</para>
            <para>
              The Wilcoxon signed-rank test is a non-parametric statistical hypothesis test
              used when comparing two related samples, matched samples, or repeated measurements
              on a single sample to assess whether their population mean ranks differ (i.e. it
              is a paired difference test). It can be used as an alternative to the paired
              Student's t-test, t-test for matched pairs, or the t-test for dependent samples
              when the population cannot be assumed to be normally distributed.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test">
                  Wikipedia, The Free Encyclopedia. Wilcoxon signed-rank test. Available on:
                  http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
              // Compute some rank statistics (see other examples below)
              double[] ranks = { 1, 2, 3, 4, 5.5, 5.5, 7, 8, 9, 10, 11, 12 };
              
              // Create a new Wilcoxon's W distribution
              WilcoxonDistribution W = new WilcoxonDistribution(ranks);
              
              // Common measures
              double mean = W.Mean;     // 39.0
              double median = W.Median; // 38.5
              double var = W.Variance;  // 162.5
              
              // Probability density functions
              double pdf = W.ProbabilityDensityFunction(w: 42);     // 0.38418508862319295
              double lpdf = W.LogProbabilityDensityFunction(w: 42); // 0.38418508862319295
              
              // Cumulative distribution functions
              double cdf = W.DistributionFunction(w: 42);               // 0.60817384423279575
              double ccdf = W.ComplementaryDistributionFunction(x: 42); // 0.39182615576720425
              
              // Quantile function
              double icdf = W.InverseDistributionFunction(p: cdf); // 42
              
              // Hazard (failure rate) functions
              double hf = W.HazardFunction(x: 42);            // 0.98049883339449373
              double chf = W.CumulativeHazardFunction(x: 42); // 0.936937017743799
              
              // String representation
              string str = W.ToString(); // "W+(x; R)"
            </code>
            
            <para>
              The following example shows how to compute the W+ statistic
              given a sample. The W+ statistics is given as the sum of all
              positive <see cref="M:Accord.Statistics.Tools.Rank(System.Double[],System.Boolean)">signed ranks 
              </see> in a sample.</para>
              
            <code>
              // Suppose we have computed a vector of differences between
              // samples and an hypothesized value (as in Wilcoxon's test).
              
              double[] differences = ... // differences between samples and an hypothesized median
              
              // Compute the ranks of the absolute differences and their sign
              double[] ranks = Accord.Statistics.Tools.Rank(differences.Abs());
              int[] signs    = Accord.Math.Matrix.Sign(differences).ToInt32();
              
              // Compute the W+ statistics from the signed ranks
              double W = WilcoxonDistribution.WPositive(Signs, ranks);
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Testing.WilcoxonSignedRankTest"/>
            <seealso cref="T:Accord.Statistics.Testing.TwoSampleWilcoxonSignedRankTest"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.#ctor(System.Double[])">
            <summary>
              Creates a new Wilcoxon's W+ distribution.
            </summary>
            
            <param name="ranks">The rank statistics for the samples.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.#ctor(System.Double[],System.Boolean)">
            <summary>
              Creates a new Wilcoxon's W+ distribution.
            </summary>
            
            <param name="ranks">The rank statistics for the samples.</param>
            <param name="forceExact">True to compute the exact test. May requires
              a significant amount of processing power for large samples (n > 12).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.WPositive(System.Int32[],System.Double[])">
            <summary>
              Computes the Wilcoxon's W+ statistic.
            </summary>
            
            <remarks>
              The W+ statistic is computed as the
              sum of all positive signed ranks.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.WNegative(System.Int32[],System.Double[])">
            <summary>
              Computes the Wilcoxon's W- statistic.
            </summary>
            
            <remarks>
              The W- statistic is computed as the
              sum of all negative signed ranks.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.WMinimum(System.Int32[],System.Double[])">
            <summary>
              Computes the Wilcoxon's W statistic.
            </summary>
            
            <remarks>
              The W statistic is computed as the
              minimum of the W+ and W- statistics.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>k</c>.
            </summary>
            
            <param name="w">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.DistributionFunction(System.Double)"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>w</c>.
            </summary>
            
            <param name="w">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>w</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>w</c>.
            </summary>
            
            <param name="w">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.Samples">
            <summary>
              Gets the number of effective samples.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.Ranks">
            <summary>
              Gets the rank statistics for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value. In the current
              implementation, returns the same as the <see cref="P:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.Mean"/>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.DegenerateDistribution">
            <summary>
              Degenerate distribution.
            </summary>
            
            <remarks>
            <para>
              In mathematics, a degenerate distribution or deterministic distribution is
              the probability distribution of a random variable which only takes a single
              value. Examples include a two-headed coin and rolling a die whose sides all 
              show the same number. While this distribution does not appear random in the
              everyday sense of the word, it does satisfy the definition of random variable. </para>
            <para> 
              The degenerate distribution is localized at a point k0 on the real line. The
              probability mass function is a Delta function at k0.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Degenerate_distribution">
                  Wikipedia, The Free Encyclopedia. Degenerate distribution. Available on:
                  http://en.wikipedia.org/wiki/Degenerate_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <para>
              This example shows how to create a Degenerate distribution
              and compute some of its properties.</para>
              
            <code>
            var dist = new DegenerateDistribution(value: 2);
            
            double mean = dist.Mean;     // 2
            double median = dist.Median; // 2
            double mode = dist.Mode;     // 2
            double var = dist.Variance;  // 1
            
            double cdf1 = dist.DistributionFunction(k: 1);    // 0
            double cdf2 = dist.DistributionFunction(k: 2);   // 1
            
            double pdf1 = dist.ProbabilityMassFunction(k: 1); // 0
            double pdf2 = dist.ProbabilityMassFunction(k: 2); // 1
            double pdf3 = dist.ProbabilityMassFunction(k: 3); // 0
            
            double lpdf = dist.LogProbabilityMassFunction(k: 2); // 0
            double ccdf = dist.ComplementaryDistributionFunction(k: 2); // 0.0
            
            int icdf1 = dist.InverseDistributionFunction(p: 0.0); // 1
            int icdf2 = dist.InverseDistributionFunction(p: 0.5); // 3
            int icdf3 = dist.InverseDistributionFunction(p: 1.0); // 2
            
            double hf = dist.HazardFunction(x: 0); // 0.0
            double chf = dist.CumulativeHazardFunction(x: 0); // 0.0
            
            string str = dist.ToString(CultureInfo.InvariantCulture); // Degenerate(x; k0 = 2)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.DegenerateDistribution"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.DegenerateDistribution"/> class.
            </summary>
            
            <param name="value">
              The only value whose probability is different from zero. Default is zero.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>k</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>k</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.DistributionFunction(System.Int32)"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              The <see cref="T:Accord.Statistics.Distributions.Univariate.DegenerateDistribution"/> does not support fitting.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Value">
            <summary>
              Gets the unique value whose probability is different from zero.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <remarks>
              In the Degenerate distribution, the mean is equal to the
              <see cref="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Value">unique value</see> within its domain.
            </remarks>
            
            <value>
              The distribution's mean value, which should equal <see cref="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Value"/>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Median">
            <summary>
              Gets the median for this distribution, which should equal <see cref="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Value"/>.
            </summary>
            
            <remarks>
              In the Degenerate distribution, the mean is equal to the
              <see cref="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Value">unique value</see> within its domain.
            </remarks>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Variance">
            <summary>
              Gets the variance for this distribution, which should equal 0.
            </summary>
            
            <remarks>
              In the Degenerate distribution, the variance equals 0.
            </remarks>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Mode">
            <summary>
              Gets the mode for this distribution, which should equal <see cref="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Value"/>.
            </summary>
            
            <remarks>
              In the Degenerate distribution, the mean is equal to the
              <see cref="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Value">unique value</see> within its domain.
            </remarks>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution, which is zero.
            </summary>
            
            <value>
              The distribution's entropy.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <remarks>
              The degenerate distribution's support is given only on the 
              point interval (<see cref="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Value"/>, <see cref="P:Accord.Statistics.Distributions.Univariate.DegenerateDistribution.Value"/>).
            </remarks>
            
            <value>
              A <see cref="T:AForge.IntRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.NegativeBinomialDistribution">
            <summary>
              Negative Binomial distribution.
            </summary>
            
            <remarks>
            <para>
              The negative binomial distribution is a discrete probability distribution of the number 
              of successes in a sequence of Bernoulli trials before a specified (non-random) number of
              failures (denoted r) occur. For example, if one throws a die repeatedly until the third 
              time “1” appears, then the probability distribution of the number of non-“1”s that had 
              appeared will be negative binomial.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Negative_binomial_distribution">
                  Wikipedia, The Free Encyclopedia. Negative Binomial distribution. 
                  Available from: http://en.wikipedia.org/wiki/Negative_binomial_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
               // Create a new Negative Binomial distribution with r = 7 and p = 0.42
               var dist = new NegativeBinomialDistribution(failures: 7, probability: 0.42);
               
               // Common measures
               double mean = dist.Mean;     // 5.068965517241379
               double median = dist.Median; // 5.0
               double var = dist.Variance;  // 8.7395957193816862
               
               // Cumulative distribution functions
               double cdf = dist.DistributionFunction(k: 2);               // 0.19605133020527743
               double ccdf = dist.ComplementaryDistributionFunction(k: 2); // 0.80394866979472257
               
               // Probability mass functions
               double pmf1 = dist.ProbabilityMassFunction(k: 4); // 0.054786846293416853
               double pmf2 = dist.ProbabilityMassFunction(k: 5); // 0.069908015870399909
               double pmf3 = dist.ProbabilityMassFunction(k: 6); // 0.0810932984096639
               double lpmf = dist.LogProbabilityMassFunction(k: 2); // -2.3927801721315989
               
               // Quantile function
               int icdf1 = dist.InverseDistributionFunction(p: 0.17); // 2
               int icdf2 = dist.InverseDistributionFunction(p: 0.46); // 4
               int icdf3 = dist.InverseDistributionFunction(p: 0.87); // 8
               
               // Hazard (failure rate) functions
               double hf = dist.HazardFunction(x: 4); // 0.10490438293398294
               double chf = dist.CumulativeHazardFunction(x: 4); // 0.64959916255036043
               
               // String representation
               string str = dist.ToString(CultureInfo.InvariantCulture); // "NegativeBinomial(x; r = 7, p = 0.42)"
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.BinomialDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NegativeBinomialDistribution.#ctor(System.Int32,System.Double)">
            <summary>
              Creates a new Negative Binomial distribution.
            </summary>
            
            <param name="failures">Number of failures <c>r</c>.</param>
            <param name="probability">Success probability in each experiment.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NegativeBinomialDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets P( X&lt;= k), the cumulative distribution function
              (cdf) for this distribution evaluated at point <c>k</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NegativeBinomialDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>k</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NegativeBinomialDistribution.LogProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the log-probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>k</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NegativeBinomialDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NegativeBinomialDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NegativeBinomialDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NegativeBinomialDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NegativeBinomialDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NegativeBinomialDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NegativeBinomialDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.IntRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.ParetoDistribution">
            <summary>
              Pareto's Distribution.
            </summary>
            
            <remarks>
            <para>
              The Pareto distribution, named after the Italian economist Vilfredo Pareto, is a power law
              probability distribution that coincides with social, scientific, geophysical, actuarial, 
              and many other types of observable phenomena. Outside the field of economics it is sometimes
              referred to as the Bradford distribution.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Pareto_distribution">
                  Wikipedia, The Free Encyclopedia. Pareto distribution. 
                  Available from: http://en.wikipedia.org/wiki/Pareto_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
               // Creates a new Pareto's distribution with xm = 0.42, α = 3
               var pareto = new ParetoDistribution(scale: 0.42, shape: 3);
               
               // Common measures
               double mean   = pareto.Mean;     // 0.63
               double median = pareto.Median;   // 0.52916684095584676
               double var    = pareto.Variance; // 0.13229999999999997
               
               // Cumulative distribution functions
               double cdf = pareto.DistributionFunction(x: 1.4);           // 0.973
               double ccdf = pareto.ComplementaryDistributionFunction(x: 1.4); // 0.027000000000000024
               double icdf = pareto.InverseDistributionFunction(p: cdf);       // 1.4000000446580794
               
               // Probability density functions
               double pdf = pareto.ProbabilityDensityFunction(x: 1.4);     // 0.057857142857142857
               double lpdf = pareto.LogProbabilityDensityFunction(x: 1.4); // -2.8497783609309111
               
               // Hazard (failure rate) functions
               double hf = pareto.HazardFunction(x: 1.4);            // 2.142857142857141
               double chf = pareto.CumulativeHazardFunction(x: 1.4); // 3.6119184129778072
               
               // String representation
               string str = pareto.ToString(CultureInfo.InvariantCulture); // Pareto(x; xm = 0.42, α = 3)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ParetoDistribution.#ctor">
            <summary>
              Creates new Pareto distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ParetoDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Creates new Pareto distribution.
            </summary>
            
            <param name="scale">The scale parameter x<sub>m</sub>. Default is 1.</param>
            <param name="shape">The shape parameter α (alpha). Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ParetoDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.ParetoDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ParetoDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.ParetoDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ParetoDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.ParetoDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ParetoDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ParetoDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ParetoDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ParetoDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ParetoDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ParetoDistribution.Scale">
            <summary>
              Gets the scale parameter x<sub>m</sub> for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ParetoDistribution.Alpha">
            <summary>
              Gets the shape parameter α (alpha) for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ParetoDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
            <remarks>
              The Pareto distribution's mean is defined as
              <c>α * x<sub>m</sub> / (α - 1)</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ParetoDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
            <remarks>
              The Pareto distribution's mean is defined as
              <c>α * x<sub>m</sub>² / ((α - 1)² * (α - 2)</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ParetoDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
            <remarks>
              The Pareto distribution's Entropy is defined as
              <c>ln(x<sub>m</sub> / α) + 1 / α + 1</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ParetoDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ParetoDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>The distribution's mode value.</value>
            
            <remarks>
              The Pareto distribution's Entropy is defined as <c>x<sub>m</sub></c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ParetoDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>The distribution's median value.</value>
            
            <remarks>
              The Pareto distribution's median is defined
              as <c>x<sub>m</sub> * 2^(1 / α)</c>.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution">
             <summary>
               Discrete uniform distribution.
             </summary>
             
             <remarks>
             <para>
               In probability theory and statistics, the discrete uniform distribution is a 
               symmetric probability distribution whereby a finite number of values are equally
               likely to be observed; every one of n values has equal probability 1/n. Another 
               way of saying "discrete uniform distribution" would be "a known, finite number of
               outcomes equally likely to happen".</para>
            
             <para>
               A simple example of the discrete uniform distribution is throwing a fair die. 
               The possible values are 1, 2, 3, 4, 5, 6, and each time the die is thrown the 
               probability of a given score is 1/6. If two dice are thrown and their values 
               added, the resulting distribution is no longer uniform since not all sums have 
               equal probability.</para>
               
             <para>
               The discrete uniform distribution itself is inherently non-parametric. It is 
               convenient, however, to represent its values generally by an integer interval
               [a,b], so that a,b become the main parameters of the distribution (often one
               simply considers the interval [1,n] with the single parameter n). </para>
               
             <para>    
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Uniform_distribution_(discrete)">
                   Wikipedia, The Free Encyclopedia. Uniform distribution (discrete). Available on:
                   http://en.wikipedia.org/wiki/Uniform_distribution_(discrete) </a></description></item>
               </list></para>
             </remarks>
             
             <example>
             <code>
               // Create an uniform (discrete) distribution in [2, 6] 
               var dist = new UniformDiscreteDistribution(a: 2, b: 6);
               
               // Common measures
               double mean = dist.Mean;     // 4.0
               double median = dist.Median; // 4.0
               double var = dist.Variance;  // 1.3333333333333333
               
               // Cumulative distribution functions
               double cdf = dist.DistributionFunction(k: 2);               // 0.2
               double ccdf = dist.ComplementaryDistributionFunction(k: 2); // 0.8
               
               // Probability mass functions
               double pmf1 = dist.ProbabilityMassFunction(k: 4); // 0.2
               double pmf2 = dist.ProbabilityMassFunction(k: 5); // 0.2
               double pmf3 = dist.ProbabilityMassFunction(k: 6); // 0.2
               double lpmf = dist.LogProbabilityMassFunction(k: 2); // -1.6094379124341003
               
               // Quantile function
               int icdf1 = dist.InverseDistributionFunction(p: 0.17); // 2
               int icdf2 = dist.InverseDistributionFunction(p: 0.46); // 4
               int icdf3 = dist.InverseDistributionFunction(p: 0.87); // 6
               
               // Hazard (failure rate) functions
               double hf = dist.HazardFunction(x: 4); // 0.5
               double chf = dist.CumulativeHazardFunction(x: 4); // 0.916290731874155
               
               // String representation
               string str = dist.ToString(CultureInfo.InvariantCulture); // "U(x; a = 2, b = 6)"
             </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
              Creates a discrete uniform distribution defined in the interval [a;b].
            </summary>
            
            <param name="a">The starting (minimum) value a.</param>
            <param name="b">The ending (maximum) value b.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>k</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
               Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>k</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>k</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.LogProbabilityMassFunction(System.Int32)">
            <summary>
            Gets the log-probability mass function (pmf) for
            this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="k">A single point in the distribution range.</param>
            <returns>
            The logarithm of the probability of <c>k</c>
            occurring in the current distribution.
            </returns>
            <remarks>
            The Probability Mass Function (PMF) describes the
            probability that a given value <c>k</c> will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.Minimum">
            <summary>
              Gets the minimum value of the distribution (a).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.Maximum">
            <summary>
              Gets the maximum value of the distribution (b).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.Length">
            <summary>
              Gets the length of the distribution (b - a + 1).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformDiscreteDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.GeometricDistribution">
            <summary>
               (Shifted) Geometric Distribution.
            </summary>
            
            <remarks>
            <para>
              This class represents the shifted version of the Geometric distribution
              with support on { 0, 1, 2, 3, ... }. This is the probability distribution
              of the number Y = X − 1 of failures before the first success, supported
              on the set { 0, 1, 2, 3, ... }.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Geometric_distribution">
                  Wikipedia, The Free Encyclopedia. Geometric distribution. Available on:
                  http://en.wikipedia.org/wiki/Geometric_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
              // Create a Geometric distribution with 42% success probability
              var dist = new GeometricDistribution(probabilityOfSuccess: 0.42);
              
              // Common measures
              double mean   = dist.Mean;     // 1.3809523809523812
              double median = dist.Median;   // 1.0
              double var    = dist.Variance; // 3.2879818594104315
              double mode   = dist.Mode;     // 0.0
              
              // Cumulative distribution functions
              double cdf = dist.DistributionFunction(k: 2);               // 0.80488799999999994
              double ccdf = dist.ComplementaryDistributionFunction(k: 2); // 0.19511200000000006
              
              // Probability mass functions
              double pdf1 = dist.ProbabilityMassFunction(k: 0); // 0.42
              double pdf2 = dist.ProbabilityMassFunction(k: 1); // 0.2436
              double pdf3 = dist.ProbabilityMassFunction(k: 2); // 0.141288
              double lpdf = dist.LogProbabilityMassFunction(k: 2); // -1.956954918588067
              
              // Quantile functions
              int icdf1 = dist.InverseDistributionFunction(p: 0.17); // 0
              int icdf2 = dist.InverseDistributionFunction(p: 0.46); // 1
              int icdf3 = dist.InverseDistributionFunction(p: 0.87); // 3
              
              // Hazard (failure rate) functions
              double hf = dist.HazardFunction(x: 0); // 0.72413793103448265
              double chf = dist.CumulativeHazardFunction(x: 0); // 0.54472717544167193
              
              // String representation
              string str = dist.ToString(CultureInfo.InvariantCulture); // "Geometric(x; p = 0.42)"
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeometricDistribution.#ctor(System.Double)">
            <summary>
              Creates a new (shifted) geometric distribution.
            </summary>
            
            <param name="probabilityOfSuccess">The success probability.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeometricDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>k</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeometricDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>k</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeometricDistribution.LogProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the log-probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>k</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeometricDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>
              A sample which could original the given probability
              value when applied in the <see cref="M:Accord.Statistics.Distributions.Univariate.GeometricDistribution.DistributionFunction(System.Int32)"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeometricDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeometricDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeometricDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeometricDistribution.ProbabilityOfSuccess">
            <summary>
              Gets the success probability for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeometricDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeometricDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeometricDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeometricDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeometricDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeometricDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.IntRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution">
            <summary>
              Hypergeometric probability distribution.
            </summary>
            
            <remarks>
            <para>
              The hypergeometric distribution is a discrete probability distribution that 
              describes the probability of <c>k</c> successes in <c>n</c> draws from a finite population
              without replacement. This is in contrast to the <see cref="T:Accord.Statistics.Distributions.Univariate.BinomialDistribution">
              binomial distribution</see>, which describes the probability of <c>k</c> successes 
              in <c>n</c> draws with replacement.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Hypergeometric_distribution">
                  Wikipedia, The Free Encyclopedia. Hypergeometric distribution. Available on:
                  http://en.wikipedia.org/wiki/Hypergeometric_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
               // Distribution parameters
               int populationSize = 15; // population size N
               int success = 7;         // number of successes in the sample  
               int samples = 8;         // number of samples drawn from N
               
               // Create a new Hypergeometric distribution with N = 15, n = 8, and s = 7
               var dist = new HypergeometricDistribution(populationSize, success, samples);
               
               // Common measures
               double mean   = dist.Mean;     // 1.3809523809523812
               double median = dist.Median;   // 4.0
               double var    = dist.Variance; // 3.2879818594104315
               double mode   = dist.Mode;     // 4.0
               
               // Cumulative distribution functions
               double cdf = dist.DistributionFunction(k: 2);               // 0.80488799999999994
               double ccdf = dist.ComplementaryDistributionFunction(k: 2); // 0.19511200000000006
               
               // Probability mass functions
               double pdf1 = dist.ProbabilityMassFunction(k: 4); // 0.38073038073038074
               double pdf2 = dist.ProbabilityMassFunction(k: 5); // 0.18275058275058276
               double pdf3 = dist.ProbabilityMassFunction(k: 6); // 0.030458430458430458
               double lpdf = dist.LogProbabilityMassFunction(k: 2); // -2.3927801721315989
               
               // Quantile function
               int icdf1 = dist.InverseDistributionFunction(p: 0.17); // 3
               int icdf2 = dist.InverseDistributionFunction(p: 0.46); // 4
               int icdf3 = dist.InverseDistributionFunction(p: 0.87); // 5
               
               // Hazard (failure rate) functions
               double hf = dist.HazardFunction(x: 4); // 1.7753623188405792
               double chf = dist.CumulativeHazardFunction(x: 4); // 1.5396683418789763
               
               // String representation
               string str = dist.ToString(CultureInfo.InvariantCulture); // "HyperGeometric(x; N = 15, m = 7, n = 8)"
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.BinomialDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.GeometricDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution">Hypergeometric distribution</see>.
            </summary>
            
            <param name="populationSize">Size <c>N</c> of the population.</param>
            <param name="successes">The number <c>m</c> of successes in the population.</param>
            <param name="samples">The number <c>n</c> of samples drawn from the population.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>k</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>k</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.LogProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the log-probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>k</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.HypergeometricOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.PopulationSize">
            <summary>
              Gets the size <c>N</c> of the 
              population for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.SampleSize">
            <summary>
              Gets the size <c>n</c> of the sample drawn
              from <see cref="P:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.PopulationSize">N</see>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.PopulationSuccess">
            <summary>
              Gets the count of success trials in the
              population for this distribution. This
              is often referred as <c>m</c>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.Entropy">
            <summary>
             Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.IntRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution">
             <summary>
               Inverse Gaussian (Normal) Distribution, also known as the Wald distribution.
             </summary>
             
             <remarks>
             <para>
               The Inverse Gaussian distribution is a two-parameter family of continuous probability
               distributions with support on (0,∞). As λ tends to infinity, the inverse Gaussian distribution
               becomes more like a normal (Gaussian) distribution. The inverse Gaussian distribution has
               several properties analogous to a Gaussian distribution. The name can be misleading: it is
               an "inverse" only in that, while the Gaussian describes a Brownian Motion's level at a fixed
               time, the inverse Gaussian describes the distribution of the time a Brownian Motion with positive
               drift takes to reach a fixed positive level.</para>
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Inverse_Gaussian_distribution">
                   Wikipedia, The Free Encyclopedia. Inverse Gaussian distribution. Available on: 
                   http://en.wikipedia.org/wiki/Inverse_Gaussian_distribution </a></description></item>
               </list></para> 
             </remarks>
            
             <example>
             <code>
               // Create a new inverse Gaussian distribution with μ = 0.42 and λ = 1.2
               var invGaussian = new InverseGaussianDistribution(mean: 0.42, shape: 1.2);
               
               // Common measures
               double mean = invGaussian.Mean;     // 0.42
               double median = invGaussian.Median; // 0.35856861093990083
               double var = invGaussian.Variance;  // 0.061739999999999989
               
               // Cumulative distribution functions
               double cdf = invGaussian.DistributionFunction(x: 0.27);               // 0.30658791274125458
               double ccdf = invGaussian.ComplementaryDistributionFunction(x: 0.27); // 0.69341208725874548
               double icdf = invGaussian.InverseDistributionFunction(p: cdf);        // 0.26999999957543408
               
               // Probability density functions
               double pdf = invGaussian.ProbabilityDensityFunction(x: 0.27);     // 2.3461495925760354
               double lpdf = invGaussian.LogProbabilityDensityFunction(x: 0.27); // 0.85277551314980737
               
               // Hazard (failure rate) functions
               double hf = invGaussian.HazardFunction(x: 0.27);            // 3.383485283406336
               double chf = invGaussian.CumulativeHazardFunction(x: 0.27); // 0.36613081401302111
               
               // String representation
               string str = invGaussian.ToString(CultureInfo.InvariantCulture); // "N^-1(x; μ = 0.42, λ = 1.2)"
             </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a new Inverse Gaussian distribution.
            </summary>
            
            <param name="mean">The mean parameter mu.</param>
            <param name="shape">The shape parameter lambda.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Estimate(System.Double[])">
            <summary>
              Estimates a new Normal distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Estimate(System.Double[],System.Double[])">
            <summary>
              Estimates a new Normal distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Random(System.Double,System.Double)">
            <summary>
              Generates a random observation from the 
              Inverse Gaussian distribution with the given parameters.
            </summary>
            
            <param name="mean">The mean parameter mu.</param>
            <param name="shape">The shape parameter lambda.</param>
            
            <returns>A random double value sampled from the specified Uniform distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Random(System.Double,System.Double,System.Int32)">
             <summary>
               Generates a random vector of observations from the 
               Inverse Gaussian distribution with the given parameters.
             </summary>
             
             <param name="mean">The mean parameter mu.</param>
             <param name="shape">The shape parameter lambda.</param>
             <param name="samples">The number of samples to generate.</param>
            
             <returns>An array of double values sampled from the specified Uniform distribution.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Shape">
            <summary>
              Gets the shape parameter (lambda)
              for this distribution.
            </summary>
            
            <value>The distribution's lambda value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.NakagamiDistribution">
            <summary>
              Nakagami distribution.
            </summary>
            
            <remarks>
            <para>
              The Nakagami distribution has been used in the modeling of wireless
              signal attenuation while traversing multiple paths. </para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Nakagami_distribution">
                  Wikipedia, The Free Encyclopedia. Nakagami distribution. Available on:
                  http://en.wikipedia.org/wiki/Nakagami_distribution </a></description></item>
                <item><description>
                  Laurenson, Dave (1994). "Nakagami Distribution". Indoor Radio Channel Propagation
                  Modeling by Ray Tracing Techniques. </description></item>
                <item><description>  
                  R. Kolar, R. Jirik, J. Jan (2004) "Estimator Comparison of the Nakagami-m Parameter
                  and Its Application in Echocardiography", Radioengineering, 13 (1), 8–12 </description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
              var nakagami = new NakagamiDistribution(shape: 2.4, spread: 4.2);
              
              double mean = nakagami.Mean;     // 1.946082119049118
              double median = nakagami.Median; // 1.9061151110206338
              double var = nakagami.Variance;  // 0.41276438591729486
              
              double cdf = nakagami.DistributionFunction(x: 1.4); // 0.20603416752368109
              double pdf = nakagami.ProbabilityDensityFunction(x: 1.4); // 0.49253215371343023
              double lpdf = nakagami.LogProbabilityDensityFunction(x: 1.4); // -0.708195533773302
              
              double ccdf = nakagami.ComplementaryDistributionFunction(x: 1.4); // 0.79396583247631891
              double icdf = nakagami.InverseDistributionFunction(p: cdf); // 1.400000000131993
              
              double hf = nakagami.HazardFunction(x: 1.4); // 0.62034426869133652
              double chf = nakagami.CumulativeHazardFunction(x: 1.4); // 0.23071485080660473
              
              string str = nakagami.ToString(CultureInfo.InvariantCulture); // Nakagami(x; μ = 2,4, ω = 4,2)"
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.NakagamiDistribution"/> class.
            </summary>
            
            <param name="shape">The shape parameter μ (mu).</param>
            <param name="spread">The spread parameter ω (omega).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
            <para>
              The Nakagami's distribution CDF is defined in terms of the 
              <see cref="M:Accord.Math.Gamma.LowerIncomplete(System.Double,System.Double)">Lower incomplete regularized 
              Gamma function P(a, x)</see> as <c>CDF(x) = P(μ, μ / ω) * x²</c>.
            </para>
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.NakagamiDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
            <para>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.</para>
            <para>
              Nakagami's PDF is defined as 
              <c>PDF(x) = c * x^(2 * μ - 1) * exp(-(μ / ω) * x²)</c>
              in which <c>c = 2 * μ ^ μ / (Γ(μ) * ω ^ μ))</c></para>
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.NakagamiDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
            <para>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.</para>
            <para>
              Nakagami's PDF is defined as 
              <c>PDF(x) = c * x^(2 * μ - 1) * exp(-(μ / ω) * x²)</c>
              in which <c>c = 2 * μ ^ μ / (Γ(μ) * ω ^ μ))</c></para>
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.NakagamiDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Estimate(System.Double[])">
            <summary>
              Estimates a new Nakagami distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Estimate(System.Double[],System.Double[])">
            <summary>
              Estimates a new Nakagami distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Random(System.Double,System.Double,System.Int32)">
             <summary>
               Generates a random vector of observations from the 
               Nakagami distribution with the given parameters.
             </summary>
             
             <param name="shape">The shape parameter μ.</param>
             <param name="spread">The spread parameter ω.</param>
             <param name="samples">The number of samples to generate.</param>
            
             <returns>An array of double values sampled from the specified Nakagami distribution.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Random(System.Double,System.Double)">
            <summary>
              Generates a random observation from the 
              Nakagami distribution with the given parameters.
            </summary>
            
            <param name="shape">The shape parameter μ.</param>
            <param name="spread">The spread parameter ω.</param>
            
            <returns>A random double value sampled from the specified Nakagami distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Shape">
            <summary>
              Gets the distribution's shape parameter μ (mu).
            </summary>
            
            <value>The shape parameter μ (mu).</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Spread">
            <summary>
              Gets the distribution's spread parameter ω (omega).
            </summary>
            
            <value>The spread parameter ω (omega).</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
            <remarks>
              Nakagami's mean is defined in terms of the <see cref="M:Accord.Math.Gamma.Function(System.Double)">
              Gamma function Γ(x)</see> as <c>(Γ(μ + 0.5) / Γ(μ)) * sqrt(ω / μ)</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
            <remarks>
              Nakagami's variance is defined in terms of the <see cref="M:Accord.Math.Gamma.Function(System.Double)">
              Gamma function Γ(x)</see> as <c>ω * (1 - (1 / μ) * (Γ(μ + 0.5) / Γ(μ))²</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Entropy">
            <summary>
              This method is not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NakagamiDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.RayleighDistribution">
            <summary>
              Rayleigh distribution.
            </summary>
            
            <remarks>
            <para>
              In probability theory and statistics, the Rayleigh distribution is a continuous 
              probability distribution. A Rayleigh distribution is often observed when the overall
              magnitude of a vector is related to its directional components. </para>
              
            <para>One example where the Rayleigh distribution naturally arises is when wind speed
              is analyzed into its orthogonal 2-dimensional vector components. Assuming that the 
              magnitude of each component is uncorrelated and normally distributed with equal variance,
              then the overall wind speed (vector magnitude) will be characterized by a Rayleigh 
              distribution.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Rayleigh_distribution">
                  Wikipedia, The Free Encyclopedia. Rayleigh distribution. Available on: 
                  http://en.wikipedia.org/wiki/Rayleigh_distribution </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <code>
              // Create a new Rayleigh's distribution with σ = 0.42
              var rayleigh = new RayleighDistribution(sigma: 0.42);
              
              // Common measures
              double mean = rayleigh.Mean;     // 0.52639193767251
              double median = rayleigh.Median; // 0.49451220943852386
              double var = rayleigh.Variance;  // 0.075711527953380237
              
              // Cumulative distribution functions
              double cdf = rayleigh.DistributionFunction(x: 1.4);               // 0.99613407986052716
              double ccdf = rayleigh.ComplementaryDistributionFunction(x: 1.4); // 0.0038659201394728449
              double icdf = rayleigh.InverseDistributionFunction(p: cdf);       // 1.4000000080222026
               
              // Probability density functions
              double pdf = rayleigh.ProbabilityDensityFunction(x: 1.4);     // 0.030681905868831811
              double lpdf = rayleigh.LogProbabilityDensityFunction(x: 1.4); // -3.4840821835248961
              
              // Hazard (failure rate) functions
              double hf = rayleigh.HazardFunction(x: 1.4); // 7.9365079365078612
              double chf = rayleigh.CumulativeHazardFunction(x: 1.4); // 5.5555555555555456
              
              // String representation
              string str = rayleigh.ToString(CultureInfo.InvariantCulture); // Rayleigh(x; σ = 0.42)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.RayleighDistribution.#ctor(System.Double)">
            <summary>
              Creates a new Rayleigh distribution.
            </summary>
            
            <param name="sigma">The scale parameter σ (sigma).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.RayleighDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.RayleighDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.RayleighDistribution.ProbabilityDensityFunction(System.Double)">
             <summary>
               Gets the probability density function (pdf) for
               this distribution evaluated at point <c>x</c>.
             </summary>
             
             <param name="x">A single point in the distribution range.</param>
             
             <returns>
               The probability of <c>x</c> occurring
               in the current distribution.
             </returns>
             
             <remarks>
               The Probability Density Function (PDF) describes the
               probability that a given value <c>x</c> will occur.
             </remarks>
            
             <example>
               See <see cref="T:Accord.Statistics.Distributions.Univariate.RayleighDistribution"/>.
             </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.RayleighDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.RayleighDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Estimate(System.Double[])">
            <summary>
              Estimates a new Gamma distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Random(System.Double,System.Int32)">
             <summary>
               Generates a random vector of observations from the 
               Rayleigh distribution with the given parameters.
             </summary>
             
             <param name="sigma">The Rayleigh distribution's sigma.</param>
             <param name="samples">The number of samples to generate.</param>
            
             <returns>An array of double values sampled from the specified Rayleigh distribution.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Random(System.Double)">
            <summary>
              Generates a random observation from the 
              Rayleigh distribution with the given parameters.
            </summary>
            
            <param name="sigma">The Rayleigh distribution's sigma.</param>
            
            <returns>A random double value sampled from the specified Rayleigh distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.RayleighDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
            <remarks>
              The Rayleight's mean value is defined 
              as <c>mean = σ * sqrt(π / 2)</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Scale">
            <summary>
              Gets the Rayleight's scale parameter σ (sigma)
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
            <remarks>
              The Rayleight's variance value is defined 
              as <c>var = (4 - π) / 2 * σ²</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <remarks>
              In the Rayleigh distribution, the mode equals σ (sigma).
            </remarks>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.RayleighDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.TDistribution">
            <summary>
              Student's t-distribution.
            </summary>
            
            <remarks>
            <para>
              In probability and statistics, Student's t-distribution (or simply the
              t-distribution) is a family of continuous probability distributions that
              arises when estimating the mean of a normally distributed population in 
              situations where the sample size is small and population standard deviation
              is unknown. It plays a role in a number of widely used statistical analyses,
              including the Student's t-test for assessing the statistical significance of
              the difference between two sample means, the construction of confidence intervals 
              for the difference between two population means, and in linear regression 
              analysis. The Student's t-distribution also arises in the Bayesian analysis of 
              data from a normal family.</para>
            <para>
              If we take <c>k</c> samples from a normal distribution with fixed unknown mean and 
              variance, and if we compute the sample mean and sample variance for these k 
              samples, then the t-distribution (for k) can be defined as the distribution 
              of the location of the true mean, relative to the sample mean and divided by
              the sample standard deviation, after multiplying by the normalizing term 
              <c>sqrt(n)</c>, where <c>n</c> is the sample size. In this way the t-distribution
              can be used to estimate how likely it is that the true mean lies in any given
              range.</para>
            <para>
              The t-distribution is symmetric and bell-shaped, like the normal distribution,
              but has heavier tails, meaning that it is more prone to producing values that 
              fall far from its mean. This makes it useful for understanding the statistical 
              behavior of certain types of ratios of random quantities, in which variation in
              the denominator is amplified and may produce outlying values when the denominator
              of the ratio falls close to zero. The Student's t-distribution is a special case 
              of the generalized hyperbolic distribution.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Student's_t-distribution">
                  Wikipedia, The Free Encyclopedia. Student's t-distribution. Available on:
                  http://en.wikipedia.org/wiki/Student's_t-distribution </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
              // Create a new Student's T distribution with d.f = 4.2
              TDistribution t = new TDistribution(degreesOfFreedom: 4.2);
              
              // Common measures
              double mean = t.Mean;     // 0.0
              double median = t.Median; // 0.0
              double var = t.Variance;  // 1.9090909090909089
              
              // Cumulative distribution functions
              double cdf = t.DistributionFunction(x: 1.4);           // 0.88456136730659074
              double pdf = t.ProbabilityDensityFunction(x: 1.4);     // 0.13894002185341031
              double lpdf = t.LogProbabilityDensityFunction(x: 1.4); // -1.9737129364307417
              
              // Probability density functions
              double ccdf = t.ComplementaryDistributionFunction(x: 1.4); // 0.11543863269340926
              double icdf = t.InverseDistributionFunction(p: cdf);       // 1.4000000000000012
              
              // Hazard (failure rate) functions
              double hf = t.HazardFunction(x: 1.4);            // 1.2035833984833988
              double chf = t.CumulativeHazardFunction(x: 1.4); // 2.1590162088918525
              
              // String representation
              string str = t.ToString(CultureInfo.InvariantCulture); // T(x; df = 4.2)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Testing.TTest"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NoncentralTDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TDistribution.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.TDistribution"/> class.
            </summary>
            
            <param name="degreesOfFreedom">The degrees of freedom.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.TDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.TDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.TDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <remarks>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.TDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
             Not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.TDistribution.inverseDistributionLeftTail(System.Double,System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              the left tail T-distribution evaluated at probability <c>p</c>.
            </summary>
            
            <remarks>
              Based on the stdtril function from the Cephes Math Library
              Release 2.8, adapted with permission of Stephen L. Moshier.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TDistribution.DegreesOfFreedom">
            <summary>
              Gets the degrees of freedom for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
            <remarks>
              In the T Distribution, the mean is zero if the number of degrees 
              of freedom is higher than 1. Otherwise, it is undefined.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TDistribution.Mode">
            <summary>
              Gets the mode for this distribution (always zero).
            </summary>
            
            <value>
              The distribution's mode value (zero).
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.TDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution">
            <summary>
              Continuous Uniform Distribution.
            </summary>
            
            <remarks>
            <para>
              The continuous uniform distribution or rectangular distribution is a family of 
              symmetric probability distributions such that for each member of the family, all
              intervals of the same length on the distribution's support are equally probable.
              The support is defined by the two parameters, a and b, which are its minimum and
              maximum values. The distribution is often abbreviated U(a,b). It is the maximum
              entropy probability distribution for a random variate X under no constraint other
              than that it is contained in the distribution's support.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Uniform_distribution_(continuous)">
                  Wikipedia, The Free Encyclopedia. Uniform Distribution (continuous). Available on: 
                  http://en.wikipedia.org/wiki/Uniform_distribution_(continuous) </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              The following example demonstrates how to create an uniform 
              distribution defined over the interval [0.42, 1.1]. </para>
              
            <code>
              // Create a new uniform continuous distribution from 0.42 to 1.1
              var uniform = new UniformContinuousDistribution(a: 0.42, b: 1.1);
              
              // Common measures
              double mean = uniform.Mean;     // 0.76
              double median = uniform.Median; // 0.76
              double var = uniform.Variance;  // 0.03853333333333335
              
              // Cumulative distribution functions
              double cdf = uniform.DistributionFunction(x: 0.9);               // 0.70588235294117641
              double ccdf = uniform.ComplementaryDistributionFunction(x: 0.9); // 0.29411764705882359
              double icdf = uniform.InverseDistributionFunction(p: cdf);       // 0.9
              
              // Probability density functions
              double pdf = uniform.ProbabilityDensityFunction(x: 0.9);     // 1.4705882352941173
              double lpdf = uniform.LogProbabilityDensityFunction(x: 0.9); // 0.38566248081198445
              
              // Hazard (failure rate) functions
              double hf = uniform.HazardFunction(x: 0.9); // 4.9999999999999973
              double chf = uniform.CumulativeHazardFunction(x: 0.9); // 1.2237754316221154
              
              // String representation
              string str = uniform.ToString(CultureInfo.InvariantCulture); // "U(x; a = 0.42, b = 1.1)"
            </code>
            </example>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.#ctor">
            <summary>
              Creates a new uniform distribution defined in the interval [0;1].
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new uniform distribution defined in the interval [a;b].
            </summary>
            
            <param name="a">The starting number a.</param>
            <param name="b">The ending number b.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
              
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Estimate(System.Double[])">
            <summary>
              Estimates a new uniform distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Random(System.Double,System.Double,System.Int32)">
             <summary>
               Generates a random vector of observations from the 
               Uniform distribution with the given parameters.
             </summary>
             
             <param name="a">The starting number a.</param>
             <param name="b">The ending number b.</param>
             <param name="samples">The number of samples to generate.</param>
            
             <returns>An array of double values sampled from the specified Uniform distribution.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Random(System.Int32)">
             <summary>
               Generates a random observation from the Uniform 
               distribution defined in the interval 0 and 1.
             </summary>
             
             <param name="samples">The number of samples to generate.</param>
            
             <returns>An array of double values sampled from the specified Uniform distribution.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Random">
            <summary>
              Generates a random observation from the Uniform 
              distribution defined in the interval 0 and 1.
            </summary>
            
            <returns>A random double value sampled from the specified Uniform distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Random(System.Double,System.Double)">
            <summary>
              Generates a random observation from the 
              Uniform distribution with the given parameters.
            </summary>
            
            <param name="a">The starting number a.</param>
            <param name="b">The ending number b.</param>
            
            <returns>A random double value sampled from the specified Uniform distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Minimum">
            <summary>
              Gets the minimum value of the distribution (a).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Maximum">
            <summary>
              Gets the maximum value of the distribution (b).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Length">
            <summary>
              Gets the length of the distribution (b-a).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <remarks>
              The mode of the uniform distribution is any value contained
              in the interval of the distribution. The framework return
              the same value as the <see cref="P:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Mean"/>.
            </remarks>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UniformContinuousDistribution.Standard">
            <summary>
              Gets the Standard Uniform Distribution,
              starting at zero and ending at one (a=0, b=1).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.LognormalDistribution">
            <summary>
              Log-Normal (Galton) distribution.
            </summary>
            
            <remarks>
             <para>
              The log-normal distribution is a probability distribution of a random
              variable whose logarithm is normally distributed.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia, The Free Encyclopedia. Log-normal distribution.
                  Available on: http://en.wikipedia.org/wiki/Log-normal_distribution </description></item>
                <item><description>
                  NIST/SEMATECH e-Handbook of Statistical Methods. Lognormal Distribution.
                  Available on: http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm </description></item>
                <item><description>
                  Weisstein, Eric W. "Normal Distribution Function." From MathWorld--A Wolfram Web
                  Resource. http://mathworld.wolfram.com/NormalDistributionFunction.html </description></item>
             </list></para>  
            </remarks>
            
            <example>
            <code>
              // Create a new Log-normal distribution with μ = 2.79 and σ = 1.10
              var log = new LognormalDistribution(location: 0.42, shape: 1.1);
            
              // Common measures
              double mean = log.Mean;     // 2.7870954605658511
              double median = log.Median; // 1.5219615583481305
              double var = log.Variance;  // 18.28163603621158
            
              // Cumulative distribution functions
              double cdf = log.DistributionFunction(x: 0.27);           // 0.057961222885664958
              double ccdf = log.ComplementaryDistributionFunction(x: 0.27); // 0.942038777114335
              double icdf = log.InverseDistributionFunction(p: cdf);        // 0.26999997937815973
              
              // Probability density functions
              double pdf = log.ProbabilityDensityFunction(x: 0.27);     // 0.39035530085982068
              double lpdf = log.LogProbabilityDensityFunction(x: 0.27); // -0.94069792674674835
            
              // Hazard (failure rate) functions
              double hf = log.HazardFunction(x: 0.27);            // 0.41437285846720867
              double chf = log.CumulativeHazardFunction(x: 0.27); // 0.059708840588116374
            
              // String representation
              string str = log.ToString("N2", CultureInfo.InvariantCulture); // Lognormal(x; μ = 2.79, σ = 1.10)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.#ctor">
            <summary>
              Constructs a Log-Normal (Galton) distribution
              with zero location and unit shape.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.#ctor(System.Double)">
            <summary>
              Constructs a Log-Normal (Galton) distribution
              with given location and unit shape.
            </summary>
            
            <param name="location">The distribution's location value μ (mu).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Log-Normal (Galton) distribution
              with given mean and standard deviation.
            </summary>
            
            <param name="location">The distribution's location value μ (mu).</param>
            <param name="shape">The distribution's shape deviation σ (sigma).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the this Log-Normal distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
            <remarks>
            
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
              
            <para>
             The calculation is computed through the relationship to the error function
             as <see cref="M:Accord.Math.Special.Erfc(System.Double)">erfc</see>(-z/sqrt(2)) / 2. See 
             [Weisstein] for more details.</para>  
             
            <para>    
              References:
              <list type="bullet">
                <item><description>
                  Weisstein, Eric W. "Normal Distribution Function." From MathWorld--A Wolfram Web
                  Resource. http://mathworld.wolfram.com/NormalDistributionFunction.html </description></item>
              </list></para>
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.LognormalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              the Normal distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range. For a
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.LognormalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.LognormalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Estimate(System.Double[])">
            <summary>
              Estimates a new Log-Normal distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Estimate(System.Double[],Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Estimates a new Log-Normal distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Estimate(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Estimates a new Log-Normal distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Random(System.Double,System.Double)">
            <summary>
              Generates a random observation from the 
              Lognormal distribution with the given parameters.
            </summary>
            
            <param name="location">The distribution's location value.</param>
            <param name="shape">The distribution's shape deviation.</param>
            
            <returns>A random double value sampled from the specified Lognormal distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Random(System.Double,System.Double,System.Int32)">
             <summary>
               Generates a random vector of observations from the 
               Lognormal distribution with the given parameters.
             </summary>
             
             <param name="location">The distribution's location value.</param>
             <param name="shape">The distribution's shape deviation.</param>
             <param name="samples">The number of samples to generate.</param>
            
             <returns>An array of double values sampled from the specified Lognormal distribution.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.LognormalDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Shape">
            <summary>
              Shape parameter σ (sigma) of 
              the log-normal distribution. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Shape2">
            <summary>
              Squared shape parameter σ² (sigma-squared)
              of the log-normal distribution. 
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Location">
            <summary>
              Location parameter μ (mu) of the log-normal distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Mean">
            <summary>
              Gets the Mean for this Log-Normal distribution.
            </summary>
            
            <remarks>
              The Lognormal distribution's mean is 
              defined as <c>exp(μ + σ²/2).</c>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Variance">
            <summary>
              Gets the Variance (the square of the standard
              deviation) for this Log-Normal distribution.
            </summary>
            
            <remarks>
              The Lognormal distribution's variance is
              defined as <c>(exp(σ²) - 1) * exp(2*μ + σ²)</c>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Entropy">
            <summary>
              Gets the Entropy for this Log-Normal distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.LognormalDistribution.Standard">
            <summary>
              Gets the Standard Log-Normal Distribution,
              with location set to zero and unit shape.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution">
             <summary>
               Empirical distribution.
             </summary>
             
             <remarks>
             <para>
               Empirical distributions are based solely on the data. This class
               uses the empirical distribution function and the Gaussian kernel
               density estimation to provide an univariate continuous distribution
               implementation which depends only on sampled data.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Wikipedia, The Free Encyclopedia. Empirical Distribution Function. Available on:
                   <a href=" http://en.wikipedia.org/wiki/Empirical_distribution_function">
                    http://en.wikipedia.org/wiki/Empirical_distribution_function </a></description></item>
                 <item><description>
                   PlanetMath. Empirical Distribution Function. Available on:
                   <a href="http://planetmath.org/encyclopedia/EmpiricalDistributionFunction.html">
                   http://planetmath.org/encyclopedia/EmpiricalDistributionFunction.html </a></description></item>
                 <item><description>
                   Wikipedia, The Free Encyclopedia. Kernel Density Estimation. Available on:
                   <a href="http://en.wikipedia.org/wiki/Kernel_density_estimation">
                   http://en.wikipedia.org/wiki/Kernel_density_estimation </a></description></item>
                 <item><description>
                   Bishop, Christopher M.; Pattern Recognition and Machine Learning. 
                   Springer; 1st ed. 2006.</description></item>
              </list></para>  
             </remarks>
             
             <example>
             <para>
               The following example shows how to build an empirical distribution directly from a sample: </para>
               
             <code>
               // Consider the following univariate samples
               double[] samples = { 5, 5, 1, 4, 1, 2, 2, 3, 3, 3, 4, 3, 3, 3, 4, 3, 2, 3 };
               
               // Create a non-parametric, empirical distribution using those samples:
               EmpiricalDistribution distribution = new EmpiricalDistribution(samples);
                 
               // Common measures
               double mean   = distribution.Mean;     // 3
               double median = distribution.Median;   // 2.9999993064186787
               double var    = distribution.Variance; // 1.2941176470588236
               
               // Cumulative distribution function
               double cdf  = distribution.DistributionFunction(x: 4.2);          // 0.88888888888888884
               double ccdf = distribution.ComplementaryDistributionFunction(x: 4.2); //0.11111111111111116
               double icdf = distribution.InverseDistributionFunction(p: cdf);       // 4.1999999999999993
               
               // Probability density functions
               double pdf  = distribution.ProbabilityDensityFunction(x: 4.2);    // 0.15552784414141974
               double lpdf = distribution.LogProbabilityDensityFunction(x: 4.2); // -1.8609305013898356
               
               // Hazard (failure rate) functions
               double hf  = distribution.HazardFunction(x: 4.2);           // 1.3997505972727771
               double chf = distribution.CumulativeHazardFunction(x: 4.2); // 2.1972245773362191
            
               // Automatically estimated smooth parameter (gamma)
               double smoothing = distribution.Smoothing; // 1.9144923416414432
             
               // String representation
               string str = distribution.ToString(CultureInfo.InvariantCulture); // Fn(x; S)
             </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.#ctor(System.Double[])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="samples">The data samples.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.#ctor(System.Double[],System.Double)">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="samples">The data samples.</param>
            <param name="smoothing">
              The kernel smoothing or bandwidth to be used in density estimation.
              By default, the normal distribution approximation will be used.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.#ctor(System.Double[],System.Double[])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="samples">The data samples.</param>
            <param name="weights">The fractional weights to use for the samples.
              The weights must sum up to one.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.#ctor(System.Double[],System.Int32[])">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="samples">The data samples.</param>
            <param name="weights">The number of repetition counts for each sample.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.#ctor(System.Double[],System.Double[],System.Double)">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="samples">The data samples.</param>
            <param name="weights">The fractional weights to use for the samples.
              The weights must sum up to one.</param>
            <param name="smoothing">
              The kernel smoothing or bandwidth to be used in density estimation.
              By default, the normal distribution approximation will be used.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.#ctor(System.Double[],System.Int32[],System.Double)">
            <summary>
              Creates a new Empirical Distribution from the data samples.
            </summary>
            
            <param name="samples">The data samples.</param>
            <param name="smoothing">
              The kernel smoothing or bandwidth to be used in density estimation.
              By default, the normal distribution approximation will be used.</param>
            <param name="weights">The number of repetition counts for each sample.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.EmpiricalOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Fit(System.Double[],System.Int32[],Accord.Statistics.Distributions.Fitting.EmpiricalOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.SmoothingRule(System.Double[])">
            <summary>
              Gets the default estimative of the smoothing parameter.
            </summary>
            <remarks>
              This method is based on the practical estimation of the bandwidth as
              suggested in Wikipedia: http://en.wikipedia.org/wiki/Kernel_density_estimation
            </remarks>
            
            <param name="observations">The observations for the empirical distribution.</param>
            
            <returns>An estimative of the smoothing parameter.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.SmoothingRule(System.Double[],System.Double[])">
            <summary>
              Gets the default estimative of the smoothing parameter.
            </summary>
            <remarks>
              This method is based on the practical estimation of the bandwidth as
              suggested in Wikipedia: http://en.wikipedia.org/wiki/Kernel_density_estimation
            </remarks>
            
            <param name="observations">The observations for the empirical distribution.</param>
            <param name="weights">The fractional importance for each sample. Those values must sum up to one.</param>
            
            <returns>An estimative of the smoothing parameter.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.SmoothingRule(System.Double[],System.Int32[])">
            <summary>
              Gets the default estimative of the smoothing parameter.
            </summary>
            <remarks>
              This method is based on the practical estimation of the bandwidth as
              suggested in Wikipedia: http://en.wikipedia.org/wiki/Kernel_density_estimation
            </remarks>
            
            <param name="observations">The observations for the empirical distribution.</param>
            <param name="repeats">The number of times each sample should be repeated.</param>
            
            <returns>An estimative of the smoothing parameter.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.SmoothingRule(System.Double[],System.Double[],System.Int32[])">
            <summary>
              Gets the default estimative of the smoothing parameter.
            </summary>
            
            <remarks>
              This method is based on the practical estimation of the bandwidth as
              suggested in Wikipedia: http://en.wikipedia.org/wiki/Kernel_density_estimation
            </remarks>
            
            <param name="observations">The observations for the empirical distribution.</param>
            <param name="weights">The fractional importance for each sample. Those values must sum up to one.</param>
            <param name="repeats">The number of times each sample should be repeated.</param>
            
            <returns>An estimative of the smoothing parameter.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Samples">
            <summary>
              Gets the samples giving this empirical distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Weights">
            <summary>
              Gets the fractional weights associated with each sample. Note that
              changing values on this array will not result int any effect in
              this distribution. The distribution must be computed from scratch
              with new values in case new weights needs to be used.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Counts">
            <summary>
              Gets the repetition counts associated with each sample. Note that
              changing values on this array will not result int any effect in
              this distribution. The distribution must be computed from scratch
              with new values in case new weights needs to be used.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Length">
            <summary>
              Gets the total number of samples in this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Smoothing">
            <summary>
              Gets the bandwidth smoothing parameter
              used in the kernel density estimation.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution"/>.
            </example>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution"/>.
            </example>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.FDistribution">
             <summary>
               F (Fisher-Snedecor) distribution.
             </summary>
             
             <remarks>
             <para>
               In probability theory and statistics, the F-distribution is a continuous
               probability distribution. It is also known as Snedecor's F distribution
               or the Fisher-Snedecor distribution (after R.A. Fisher and George W. Snedecor). 
               The F-distribution arises frequently as the null distribution of a test statistic,
               most notably in the analysis of variance; see <see cref="T:Accord.Statistics.Testing.FTest"/>.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/F-distribution">
                   Wikipedia, The Free Encyclopedia. F-distribution. Available on: 
                   http://en.wikipedia.org/wiki/F-distribution </a></description></item>
               </list></para>     
             </remarks>
             
             <example>
             <para>
               The following example shows how to construct a Fisher-Snedecor's F-distribution
               with 8 and 5 degrees of freedom, respectively.</para>
            
             <code>
               // Create a Fisher-Snedecor's F distribution with 8 and 5 d.f.
               FDistribution F = new FDistribution(degrees1: 8, degrees2: 5);
             
               // Common measures
               double mean = F.Mean;     // 1.6666666666666667
               double median = F.Median; // 1.0545096252132447
               double var = F.Variance;  // 7.6388888888888893
               
               // Cumulative distribution functions
               double cdf = F.DistributionFunction(x: 0.27); // 0.049463408057268315
               double ccdf = F.ComplementaryDistributionFunction(x: 0.27); // 0.95053659194273166
               double icdf = F.InverseDistributionFunction(p: cdf); // 0.27
               
               // Probability density functions
               double pdf = F.ProbabilityDensityFunction(x: 0.27); // 0.45120469723580559
               double lpdf = F.LogProbabilityDensityFunction(x: 0.27); // -0.79583416831212883
               
               // Hazard (failure rate) functions
               double hf = F.HazardFunction(x: 0.27); // 0.47468419528555084
               double chf = F.CumulativeHazardFunction(x: 0.27); // 0.050728620222091653
               
               // String representation
               string str = F.ToString(CultureInfo.InvariantCulture); // F(x; df1 = 8, df2 = 5)
             </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.#ctor">
            <summary>
              Constructs a F-distribution with
              the given degrees of freedom.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a F-distribution with
              the given degrees of freedom.
            </summary>
            
            <param name="degrees1">The first degree of freedom. Default is 1.</param>
            <param name="degrees2">The second degree of freedom. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the F-distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
            <para>
              The F-distribution CDF is computed in terms of the <see cref="M:Accord.Math.Beta.Incomplete(System.Double,System.Double,System.Double)">
              Incomplete Beta function Ix(a,b)</see> as CDF(x) = Iu(d1/2, d2/2) in which
              u is given as u = (d1 * x) / (d1 * x + d2)</para>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.ComplementaryDistributionFunction(System.Double)">
            <summary>
              Gets the complementary cumulative distribution
              function evaluated at point <c>x</c>.
            </summary>
            
            <remarks>
            <para>
              The F-distribution complementary CDF is computed in terms of the <see cref="M:Accord.Math.Beta.Incomplete(System.Double,System.Double,System.Double)">
              Incomplete Beta function Ix(a,b)</see> as CDFc(x) = Iu(d2/2, d1/2) in which
              u is given as u = (d2 * x) / (d2 * x + d1)</para>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <remarks>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              the F-distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Not available.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.Random(System.Int32,System.Int32,System.Int32)">
             <summary>
               Generates a random vector of observations from the 
               F-distribution with the given parameters.
             </summary>
             
             <param name="d1">The first degree of freedom.</param>
             <param name="d2">The second degree of freedom.</param>
             <param name="samples">The number of samples to generate.</param>
            
             <returns>An array of double values sampled from the specified F-distribution.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.Random(System.Int32,System.Int32)">
            <summary>
              Generates a random observation from the 
              F-distribution with the given parameters.
            </summary>
            
            <param name="d1">The first degree of freedom.</param>
            <param name="d2">The second degree of freedom.</param>
            
            <returns>A random double value sampled from the specified F-distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FDistribution.DegreesOfFreedom1">
            <summary>
              Gets the first degree of freedom.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FDistribution.DegreesOfFreedom2">
            <summary>
              Gets the second degree of freedom.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.SurvivalOutcome">
            <summary>
              Outcome status for survival methods. A sample can 
              enter the experiment, exit the experiment while still
              alive or exit the experiment due to failure.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Univariate.SurvivalOutcome.Started">
            <summary>
              Observation started. The observation was left censored before
              the current time and has now entered the experiment. This is 
              equivalent to R's censoring code -1.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Univariate.SurvivalOutcome.Failed">
            <summary>
              Failure happened. This is equivalent to R's censoring code 1.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Univariate.SurvivalOutcome.Censored">
            <summary>
              The sample was right-censored. This is equivalent to R's censoring code 0.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.HazardEstimator">
            <summary>
              Estimators for estimating parameters of Hazard distributions.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.BreslowNelsonAalen">
            <summary>
              Breslow-Nelson-Aalen estimator (default).
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.KaplanMeier">
            <summary>
              Kaplan-Meier estimator.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.HazardTiesMethod">
            <summary>
              Methods for handling ties in hazard/survival estimation algorithms.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Univariate.HazardTiesMethod.Efron">
            <summary>
              Efron's method for ties (default).
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Univariate.HazardTiesMethod.Breslow">
            <summary>
              Breslow's method for ties.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.SurvivalEstimator">
            <summary>
              Estimators for Survival distribution functions.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.FlemingHarrington">
            <summary>
              Fleming-Harrington estimator (default).
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.KaplanMeier">
            <summary>
              Kaplan-Meier estimator.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution">
            <summary>
              Empirical Hazard Distribution.
            </summary>
            
            <remarks>
            <para>
              The Empirical Hazard (or Survival) Distribution can be used as an
              estimative of the true Survival function for a dataset which does
              not relies on distribution or model assumptions about the data.</para>
              
            <para>
              The most direct use for this class is in Survival Analysis, such as when
              using or creating <see cref="T:Accord.Statistics.Models.Regression.ProportionalHazards">
              Cox's Proportional Hazards models</see>.</para>
              
            // references
            http://www.statsdirect.com/help/default.htm#survival_analysis/kaplan_meier.htm
            </remarks>
            
            <example>
            <para>
              The following example shows how to construct an empirical hazards 
              function from a set of hazard values at the given time instants.</para>
            <code>
            
              // Consider the following observations, occurring at the given time steps
              double[] times = { 11, 10, 9, 8, 6, 5, 4, 2 };
              double[] values = { 0.22, 0.67, 1.00, 0.18, 1.00, 1.00, 1.00, 0.55 };
              
              // Create a new empirical distribution function given the observations and event times
              EmpiricalHazardDistribution distribution = new EmpiricalHazardDistribution(times, values);
              
              // Common measures
              double mean   = distribution.Mean;     // 2.1994135014183138
              double median = distribution.Median;   // 3.9999999151458066
              double var    = distribution.Variance; // 4.2044065839577112
              
              // Cumulative distribution functions
              double cdf = distribution.DistributionFunction(x: 4.2);               // 0.7877520261732569
              double ccdf = distribution.ComplementaryDistributionFunction(x: 4.2); // 0.21224797382674304
              double icdf = distribution.InverseDistributionFunction(p: cdf);       // 4.3304819115496436
              
              // Probability density functions
              double pdf = distribution.ProbabilityDensityFunction(x: 4.2);     // 0.21224797382674304
              double lpdf = distribution.LogProbabilityDensityFunction(x: 4.2); // -1.55
              
              // Hazard (failure rate) functions
              double hf = distribution.HazardFunction(x: 4.2);            // 1.0
              double chf = distribution.CumulativeHazardFunction(x: 4.2); // 1.55
              
              // String representation
              string str = distribution.ToString(); // H(x; v, t)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Models.Regression.ProportionalHazards"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.#ctor(System.Double[],System.Double[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> class.
            </summary>
            
            <param name="time">The time steps.</param>
            <param name="lambdas">The hazard rates at the time steps.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.#ctor(System.Double[],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalEstimator)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> class.
            </summary>
            
            <param name="times">The time steps.</param>
            <param name="lambdas">The hazard rates at the time steps.</param>
            <param name="estimator">The survival function estimator to be used. Default is 
              <see cref="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.FlemingHarrington"/></param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.#ctor(Accord.Statistics.Distributions.Univariate.SurvivalEstimator)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> class.
            </summary>
            
            <param name="estimator">The survival function estimator to be used. Default is 
              <see cref="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.FlemingHarrington"/></param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.ComplementaryDistributionFunction(System.Double)">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF. In the Empirical Hazard Distribution, this function
              is computed using the Fleming-Harrington estimator.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.CumulativeHazardFunction(System.Double)">
            <summary>
              Gets the cumulative hazard function for this
              distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The cumulative hazard function <c>H(x)</c>
              evaluated at <c>x</c> in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.HazardFunction(System.Double)">
            <summary>
              Gets the hazard function, also known as the failure rate or
              the conditional failure density function for this distribution
              evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The conditional failure density function <c>h(x)</c>
              evaluated at <c>x</c> in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring in the current distribution.
            </returns>
            
            <remarks>
              In the Empirical Hazard Distribution, the PDF is defined
              as the product of the hazard function h(x) and survival 
              function S(x), as PDF(x) = h(x) * S(x).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.EmpiricalHazardOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.SurvivalOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Sort(System.Double[]@,Accord.Statistics.Distributions.Univariate.SurvivalOutcome[]@)">
            <summary>
              Sorts time-censored events considering their time of occurrence and the type of event.
              Events are first sorted in decreased order of occurrence, and then with failures coming
              before censoring.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="output">The outcome at the time of event (failure or censored).</param>
            
            <returns>The indices of the new sorting.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Sort(System.Double[]@,Accord.Statistics.Distributions.Univariate.SurvivalOutcome[]@,System.Double[][]@)">
            <summary>
              Sorts time-censored events considering their time of occurrence and the type of event.
              Events are first sorted in decreased order of occurrence, and then with failures coming
              before censoring.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="output">The outcome at the time of event (failure or censored).</param>
            <param name="inputs">The input vector associated with the event.</param>
            
            <returns>The indices of the new sorting.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Sort(System.Double[]@,Accord.Statistics.Distributions.Univariate.SurvivalOutcome[]@,System.Double[]@)">
            <summary>
              Sorts time-censored events considering their time of occurrence and the type of event.
              Events are first sorted in decreased order of occurrence, and then with failures coming
              before censoring.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="output">The outcome at the time of event (failure or censored).</param>
            <param name="weights">The weights associated with each event.</param>
            
            <returns>The indices of the new sorting.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[],System.Double[])">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            <param name="weights">The weights associated with each event.</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],System.Int32[],System.Double[])">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            <param name="weights">The weights associated with each event.</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalEstimator,Accord.Statistics.Distributions.Univariate.HazardEstimator)">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            <param name="weights">The weights associated with each event.</param>
            <param name="hazard">The hazard estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.BreslowNelsonAalen"/>.</param>
            <param name="survival">The survival estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.FlemingHarrington"/>.</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],System.Int32[],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalEstimator,Accord.Statistics.Distributions.Univariate.HazardEstimator)">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            <param name="weights">The weights associated with each event.</param>
            <param name="hazard">The hazard estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.BreslowNelsonAalen"/>.</param>
            <param name="survival">The survival estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.FlemingHarrington"/>.</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[],Accord.Statistics.Distributions.Univariate.SurvivalEstimator,Accord.Statistics.Distributions.Univariate.HazardEstimator)">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            <param name="hazard">The hazard estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.BreslowNelsonAalen"/>.</param>
            <param name="survival">The survival estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.FlemingHarrington"/>.</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],System.Int32[],Accord.Statistics.Distributions.Univariate.SurvivalEstimator,Accord.Statistics.Distributions.Univariate.HazardEstimator)">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            <param name="hazard">The hazard estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.BreslowNelsonAalen"/>.</param>
            <param name="survival">The survival estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.FlemingHarrington"/>.</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],System.Int32[],Accord.Statistics.Distributions.Univariate.SurvivalEstimator,Accord.Statistics.Distributions.Univariate.HazardEstimator,Accord.Statistics.Distributions.Univariate.HazardTiesMethod)">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            <param name="hazard">The hazard estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.BreslowNelsonAalen"/>.</param>
            <param name="survival">The survival estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.FlemingHarrington"/>.</param>
            <param name="ties">The method for handling event ties. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardTiesMethod.Efron"/>.</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],System.Int32[],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalEstimator,Accord.Statistics.Distributions.Univariate.HazardEstimator,Accord.Statistics.Distributions.Univariate.HazardTiesMethod)">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            <param name="weights">The weights associated with each event.</param>
            <param name="hazard">The hazard estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.BreslowNelsonAalen"/>.</param>
            <param name="survival">The survival estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.FlemingHarrington"/>.</param>
            <param name="ties">The method for handling event ties. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardTiesMethod.Efron"/>.</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[],Accord.Statistics.Distributions.Univariate.SurvivalEstimator,Accord.Statistics.Distributions.Univariate.HazardEstimator,Accord.Statistics.Distributions.Univariate.HazardTiesMethod)">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            <param name="hazard">The hazard estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.BreslowNelsonAalen"/>.</param>
            <param name="survival">The survival estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.FlemingHarrington"/>.</param>
            <param name="ties">The method for handling event ties. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardTiesMethod.Efron"/>.</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[],Accord.Statistics.Distributions.Univariate.HazardTiesMethod)">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            <param name="ties">The method for handling event ties. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardTiesMethod.Efron"/>.</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],System.Int32[],Accord.Statistics.Distributions.Univariate.HazardTiesMethod)">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            <param name="ties">The method for handling event ties. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardTiesMethod.Efron"/>.</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimate(System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalEstimator,Accord.Statistics.Distributions.Univariate.HazardEstimator,Accord.Statistics.Distributions.Univariate.HazardTiesMethod)">
            <summary>
              Estimates an Empirical Hazards distribution considering event times and the outcome of the
              observed sample at the time of event, plus additional parameters for the hazard estimation.
            </summary>
            
            <param name="time">The time of occurrence for the event.</param>
            <param name="outcome">The outcome at the time of event (failure or censored).</param>
            <param name="weights">The weights associated with each event.</param>
            <param name="hazard">The hazard estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.BreslowNelsonAalen"/>.</param>
            <param name="survival">The survival estimator to use. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.SurvivalEstimator.FlemingHarrington"/>.</param>
            <param name="ties">The method for handling event ties. Default is <see cref="F:Accord.Statistics.Distributions.Univariate.HazardTiesMethod.Efron"/>.</param>
            
            <returns>The <see cref="T:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution"/> estimated from the given data.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Times">
            <summary>
              Gets the time steps of the hazard density values.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Hazards">
            <summary>
              Gets the hazard rate values at each time step.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Survivals">
            <summary>
              Gets the survival values at each time step.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Estimator">
            <summary>
              Gets the survival function estimator being used in this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>
              The distribution's mean value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>
              The distribution's variance.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Mode">
            <summary>
              This method is not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Entropy">
            <summary>
              This method is not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.EmpiricalHazardDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.GompertzDistribution">
             <summary>
               Gompertz distribution.
             </summary>
             
             <remarks>
             <para>
               The Gompertz distribution is a continuous probability distribution. The
               Gompertz distribution is often applied to describe the distribution of 
               adult lifespans by demographers and actuaries. Related fields of science
               such as biology and gerontology also considered the Gompertz distribution
               for the analysis of survival. More recently, computer scientists have also
               started to model the failure rates of computer codes by the Gompertz 
               distribution. In marketing science, it has been used as an individual-level 
               model of customer lifetime.</para>
             
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Gamma_distribution">
                   Wikipedia, The Free Encyclopedia. Gompertz distribution. Available on: 
                   http://en.wikipedia.org/wiki/Gompertz_distribution </a></description></item>
               </list></para>     
             </remarks>
             
             <example>
             <para>
               The following example shows how to construct a Gompertz 
               distribution with <c>η = 4.2</c> and <c>b = 1.1</c>.</para>
            
             <code>
               // Create a new Gompertz distribution with η = 4.2 and b = 1.1
               GompertzDistribution dist = new GompertzDistribution(eta: 4.2, b: 1.1);
               
               // Common measures
               double median = dist.Median; // 0.13886469671401389
               
               // Cumulative distribution functions
               double cdf = dist.DistributionFunction(x: 0.27); // 0.76599768199799145
               double ccdf = dist.ComplementaryDistributionFunction(x: 0.27); // 0.23400231800200855
               double icdf = dist.InverseDistributionFunction(p: cdf); // 0.26999999999766749
               
               // Probability density functions
               double pdf = dist.ProbabilityDensityFunction(x: 0.27); // 1.4549484164912097
               double lpdf = dist.LogProbabilityDensityFunction(x: 0.27); // 0.37497044741163688
               
               // Hazard (failure rate) functions
               double hf = dist.HazardFunction(x: 0.27); // 6.2176666834502088
               double chf = dist.CumulativeHazardFunction(x: 0.27); // 1.4524242576820101
               
               // String representation
               string str = dist.ToString(CultureInfo.InvariantCulture); // "Gompertz(x; η = 4.2, b = 1.1)"
             </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GompertzDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.GompertzDistribution"/> class.
            </summary>
            
            <param name="eta">The shape parameter <c>η</c>.</param>
            <param name="b">The scale parameter <c>b</c>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GompertzDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GompertzDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GompertzDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GompertzDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GompertzDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GompertzDistribution.Mean">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GompertzDistribution.Variance">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GompertzDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GompertzDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GompertzDistribution.Entropy">
            <summary>
              Not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GompertzDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.Mixture`1">
            <summary>
              Mixture of univariate probability distributions.
            </summary>
            
            <remarks>
            <para>
              A mixture density is a probability density function which is expressed
              as a convex combination (i.e. a weighted sum, with non-negative weights
              that sum to 1) of other probability density functions. The individual
              density functions that are combined to make the mixture density are
              called the mixture components, and the weights associated with each
              component are called the mixture weights.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Mixture_density">
                  Wikipedia, The Free Encyclopedia. Mixture density. Available on:
                  http://en.wikipedia.org/wiki/Mixture_density </a></description></item>
              </list></para>
            </remarks>
              
            <typeparam name="T">
              The type of the univariate component distributions.</typeparam>
              
            <example>
            <code>
              // Create a new mixture containing two Normal distributions
              Mixture&lt;NormalDistribution&gt; mix = new Mixture&lt;NormalDistribution&gt;(
                  new NormalDistribution(2, 1), new NormalDistribution(5, 1));
              
              // Common measures
              double mean   = mix.Mean;     // 3.5
              double median = mix.Median;   // 3.4999998506015895
              double var    = mix.Variance; // 3.25
              
              // Cumulative distribution functions
              double cdf = mix.DistributionFunction(x: 4.2);               // 0.59897597553494908
              double ccdf = mix.ComplementaryDistributionFunction(x: 4.2); // 0.40102402446505092
              
              // Probability mass functions
              double pmf1 = mix.ProbabilityDensityFunction(x: 1.2); // 0.14499174984363708
              double pmf2 = mix.ProbabilityDensityFunction(x: 2.3); // 0.19590437513747333
              double pmf3 = mix.ProbabilityDensityFunction(x: 3.7); // 0.13270883471234715
              double lpmf = mix.LogProbabilityDensityFunction(x: 4.2); // -1.8165661905848629
              
              // Quantile function
              double icdf1 = mix.InverseDistributionFunction(p: 0.17); // 1.5866611690305095
              double icdf2 = mix.InverseDistributionFunction(p: 0.46); // 3.1968506765456883
              double icdf3 = mix.InverseDistributionFunction(p: 0.87); // 5.6437596300843076
              
              // Hazard (failure rate) functions
              double hf = mix.HazardFunction(x: 4.2);            // 0.40541978256972522
              double chf = mix.CumulativeHazardFunction(x: 4.2); // 0.91373394208601633
              
              // String representation:
              // Mixture(x; 0.5 * N(x; μ = 5, σ² = 1) + 0.5 * N(x; μ = 5, σ² = 1))
              string str = mix.ToString(CultureInfo.InvariantCulture);
            </code>
            
            <para>
              The following example shows how to estimate (fit) a Mixture of Normal distributions
              from weighted data:</para>
              
            <code>
            // Randomly initialize some mixture components
            NormalDistribution[] components = new NormalDistribution[2];
            components[0] = new NormalDistribution(2, 1);
            components[1] = new NormalDistribution(5, 1);
            
            // Create an initial mixture
            var mixture = new Mixture&lt;NormalDistribution&gt;(components);
            
            // Now, suppose we have a weighted data
            // set. Those will be the input points:
            
            double[] points = { 0, 3, 1, 7, 3, 5, 1, 2, -1, 2, 7, 6, 8, 6 }; // (14 points)
            
            // And those are their respective unnormalized weights:
            double[] weights = { 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 3, 1, 1 }; // (14 weights)
            
            // Let's normalize the weights so they sum up to one:
            weights = weights.Divide(weights.Sum());
            
            // Now we can fit our model to the data:
            mixture.Fit(points, weights);   // done!
            
            // Our model will be:
            double mean1 = mixture.Components[0].Mean; // 1.41126
            double mean2 = mixture.Components[1].Mean; // 6.53301
            
            // With mixture weights
            double pi1 = mixture.Coefficients[0]; // 0.51408
            double pi2 = mixture.Coefficients[0]; // 0.48591
            
            // If we need the GaussianMixtureModel functionality, we can
            // use the estimated mixture to initialize a new model:
            GaussianMixtureModel gmm = new GaussianMixtureModel(mixture);
            
            mean1 = gmm.Gaussians[0].Mean[0]; // 1.41126 (same)
            mean2 = gmm.Gaussians[1].Mean[0]; // 6.53301 (same)
            
            p1 = gmm.Gaussians[0].Proportion; // 0.51408 (same)
            p2 = gmm.Gaussians[1].Proportion; // 0.48591 (same)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateMixture`1"/>
            <seealso cref="T:Accord.Statistics.Distributions.Fitting.ExpectationMaximization`1"/>
            <seealso cref="T:Accord.Statistics.Distributions.Fitting.LogExpectationMaximization`1"/>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.#ctor(`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.Mixture`1"/> class.
            </summary>
            
            <param name="components">The mixture distribution components.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.#ctor(System.Double[],`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.Mixture`1"/> class.
            </summary>
            
            <param name="coefficients">The mixture weight coefficients.</param>
            <param name="components">The mixture distribution components.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.ProbabilityDensityFunction(System.Int32,System.Double)">
            <summary>
              Gets the probability density function (pdf) for one of
              the component distributions evaluated at point <c>x</c>.
            </summary>
            
            <param name="componentIndex">The index of the desired component distribution.</param>
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring in the component distribution,
              computed as the PDF of the component distribution times its mixture
              coefficient.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.LogProbabilityDensityFunction(System.Int32,System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for one 
              of the component distributions evaluated at point <c>x</c>.
            </summary>
            
            <param name="componentIndex">The index of the desired component distribution.</param>
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c> occurring in the 
              component distribution, computed as the PDF of the component 
              distribution times its mixture coefficient.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.DistributionFunction(System.Int32,System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for one
              component of this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="componentIndex">The component distribution's index.</param>
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.MixtureOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.LogLikelihood(System.Double[],System.Double[])">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.LogLikelihood(System.Double[])">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Estimate(System.Double[],`0[])">
            <summary>
              Estimates a new mixture model from a given set of observations.
            </summary>
            
            <param name="data">A set of observations.</param>
            <param name="components">The initial components of the mixture model.</param>
            <returns>Returns a new Mixture fitted to the given observations.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Estimate(System.Double[],System.Double[],`0[])">
            <summary>
              Estimates a new mixture model from a given set of observations.
            </summary>
            
            <param name="data">A set of observations.</param>
            <param name="coefficients">The initial mixture coefficients.</param>
            <param name="components">The initial components of the mixture model.</param>
            <returns>Returns a new Mixture fitted to the given observations.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Estimate(System.Double[],System.Double,System.Double[],`0[])">
            <summary>
              Estimates a new mixture model from a given set of observations.
            </summary>
            
            <param name="data">A set of observations.</param>
            <param name="coefficients">The initial mixture coefficients.</param>
            <param name="threshold">The convergence threshold for the Expectation-Maximization estimation.</param>
            <param name="components">The initial components of the mixture model.</param>
            <returns>Returns a new Mixture fitted to the given observations.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.Mixture`1.Components">
            <summary>
              Gets the mixture components.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.Mixture`1.Coefficients">
            <summary>
              Gets the weight coefficients.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.Mixture`1.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.Mixture`1.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <remarks>
              References: Lidija Trailovic and Lucy Y. Pao, Variance Estimation and
              Ranking of Gaussian Mixture Distributions in Target Tracking
              Applications, Department of Electrical and Computer Engineering
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.Mixture`1.Mode">
            <summary>
              This method is not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.Mixture`1.Entropy">
            <summary>
              This method is not supported.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.Mixture`1.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution">
            <summary>
              Multivariate Normal (Gaussian) distribution.
            </summary>
            
            <remarks>
            <para>
              The Gaussian is the most widely used distribution for continuous
              variables. In the case of many variables, it is governed by two
              parameters, the mean vector and the variance-covariance matrix.</para>
            <para>
              When a covariance matrix given to the class constructor is not positive
              definite, the distribution is degenerate and this may be an indication
              indication that it may be entirely contained in a r-dimensional subspace.
              Applying a rotation to an orthogonal basis to recover a non-degenerate
              r-dimensional distribution may help in this case.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://www.aiaccess.net/English/Glossaries/GlosMod/e_gm_positive_definite_matrix.htm">
                  Ai Access. Glossary of Data Modeling. Positive definite matrix. Available on:
                  http://www.aiaccess.net/English/Glossaries/GlosMod/e_gm_positive_definite_matrix.htm </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <para>
              The following example shows how to create a Multivariate Gaussian
              distribution with known parameters mean vector and covariance matrix
            </para>
            <code>
              // Create a multivariate Gaussian distribution 
              var dist = new MultivariateNormalDistribution(
              
                  // mean vector mu
                  mean: new double[] 
                  {
                      4, 2 
                  },
              
                  // covariance matrix sigma
                  covariance: new double[,] 
                  {
                      { 0.3, 0.1 },
                      { 0.1, 0.7 }
                  }
              );
              
              // Common measures
              double[] mean = dist.Mean;     // { 4, 2 }
              double[] median = dist.Median; // { 4, 2 }
              double[] var = dist.Variance;  // { 0.3, 0.7 } (diagonal from cov)
              double[,] cov = dist.Covariance; // { { 0.3, 0.1 }, { 0.1, 0.7 } }
              
              // Probability mass functions
              double pdf1 = dist.ProbabilityDensityFunction(new double[] { 2, 5 }); // 0.000000018917884164743237
              double pdf2 = dist.ProbabilityDensityFunction(new double[] { 4, 2 }); // 0.35588127170858852
              double pdf3 = dist.ProbabilityDensityFunction(new double[] { 3, 7 }); // 0.000000000036520107734505265
              double lpdf = dist.LogProbabilityDensityFunction(new double[] { 3, 7 }); // -24.033158110192296
              
              // Cumulative distribution function (for up to two dimensions)
              double cdf = dist.DistributionFunction(new double[] { 3, 5 }); // 0.033944035782101548
              
              // Generate samples from this distribution:
              double[][] sample = dist.Generate(1000000);
            </code>
            
            <para>
              The following example demonstrates how to fit a multivariate Gaussian to
              a set of observations. Since those observations would lead to numerical
              difficulties, the example also demonstrates how to specify a regularization
              constant to avoid getting a <see cref="T:Accord.NonPositiveDefiniteMatrixException"/>.
            </para>
            
            <code>
              double[][] observations = 
              {
                  new double[] { 1, 2 },
                  new double[] { 1, 2 },
                  new double[] { 1, 2 },
                  new double[] { 1, 2 }
              };
              
              // Create a multivariate Gaussian for 2 dimensions
              var normal = new MultivariateNormalDistribution(2);
              
              // Specify a regularization constant in the fitting options
              NormalOptions options = new NormalOptions() { Regularization = double.Epsilon };
              
              // Fit the distribution to the data
              normal.Fit(observations, options);
              
              // Check distribution parameters
              double[] mean = normal.Mean;     // { 1, 2 }
              double[] var  = normal.Variance; // { 4.9E-324, 4.9E-324 } (almost machine zero)
            </code>
            
            <para>
              The next example shows how to estimate a Gaussian distribution from data
              available inside a Microsoft Excel spreadsheet using the ExcelReader class.</para>
              
            <code>
              // Create a new Excel reader to read data from a spreadsheet
              ExcelReader reader = new ExcelReader(@"test.xls", hasHeaders: false);
              
              // Extract the "Data" worksheet from the xls
              DataTable table = reader.GetWorksheet("Data");
              
              // Convert the data table to a jagged matrix
              double[][] observations = table.ToArray();
              
              
              // Estimate a new Multivariate Normal Distribution from the observations
              var dist = MultivariateNormalDistribution.Estimate(observations, new NormalOptions()
              {
                  Regularization = 1e-10 // this value will be added to the diagonal until it becomes positive-definite
              });
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.#ctor(System.Int32)">
            <summary>
              Constructs a multivariate Gaussian distribution
              with zero mean vector and identity covariance matrix.
            </summary>
            
            <param name="dimension">The number of dimensions in the distribution.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.#ctor(System.Double[],System.Double[0:,0:])">
            <summary>
              Constructs a multivariate Gaussian distribution
              with given mean vector and covariance matrix.
            </summary>
            
            <param name="mean">The mean vector μ (mu) for the distribution.</param>
            <param name="covariance">The covariance matrix Σ (sigma) for the distribution.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.DistributionFunction(System.Double[])">
            <summary>
              Computes the cumulative distribution function for distributions
              up to two dimensions. For more than two dimensions, this method
              is not supported.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.ComplementaryDistributionFunction(System.Double[])">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <remarks>
              The Complementary Cumulative Distribution Function (CCDF) is
              the complement of the Cumulative Distribution Function, or 1
              minus the CDF.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.ProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range. For a
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.LogProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the log-probability density function (pdf)
              for this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range. For a
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <example>
              Please see <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            
            <example>
              Please see <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Estimate(System.Double[][])">
            <summary>
              Estimates a new Normal distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Estimate(System.Double[][],Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Estimates a new Normal distribution from a given set of observations.
            </summary>
            
            <example>
              Please see <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Estimate(System.Double[][],System.Double[])">
            <summary>
              Estimates a new Normal distribution from a given set of observations.
            </summary>
            
            <example>
              Please see <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Estimate(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Estimates a new Normal distribution from a given set of observations.
            </summary>
            
            <example>
              Please see <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.ToIndependentNormalDistribution">
            <summary>
              Converts this <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution">multivariate
              normal distribution</see> into a <see cref="T:Accord.Statistics.Distributions.Multivariate.Independent`1">joint distribution
              of independent</see> <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution">normal distributions</see>.
            </summary>
            
            <returns>
              A <see cref="T:Accord.Statistics.Distributions.Multivariate.Independent`1">independent joint distribution</see> of 
              <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution">normal distributions</see>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Generate">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Univariate(System.Double,System.Double)">
            <summary>
              Creates a new univariate Normal distribution.
            </summary>
            
            <param name="mean">The mean value for the distribution.</param>
            <param name="stdDev">The standard deviation for the distribution.</param>
            
            <returns>A <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution"/> object that
            actually represents a <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Bivariate(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Creates a new bivariate Normal distribution.
            </summary>
            
            <param name="mean1">The mean value for the first variate in the distribution.</param>
            <param name="mean2">The mean value for the second variate in the distribution.</param>
            <param name="stdDev1">The standard deviation for the first variate.</param>
            <param name="stdDev2">The standard deviation for the second variate.</param>
            <param name="rho">The correlation coefficient between the two distributions.</param>
            
            <returns>A bi-dimensional <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Generate(System.Int32,System.Double[],System.Double[0:,0:])">
            <summary>
              Generates a random vector of observations from a distribution with the given parameters.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <param name="mean">The mean vector μ (mu) for the distribution.</param>
            <param name="covariance">The covariance matrix Σ (sigma) for the distribution.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Mean">
            <summary>
              Gets the Mean vector μ (mu) for 
              the Gaussian distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Variance">
            <summary>
              Gets the Variance vector diag(Σ), the diagonal of 
              the sigma matrix, for the Gaussian distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution.Covariance">
            <summary>
              Gets the variance-covariance matrix
              Σ (sigma) for the Gaussian distribution.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution">
            <summary>
              Univariate general discrete distribution, also referred as the
              Categorical distribution.
            </summary>
            
            <remarks>
             <para>
              An univariate categorical distribution is a statistical distribution
              whose variables can take on only discrete values. Each discrete value
              defined within the interval of the distribution has an associated 
              probability value indicating its frequency of occurrence.</para>
             <para>
              The discrete uniform distribution is a special case of a generic
              discrete distribution whose probability values are constant.</para>
            </remarks>
            
            <example>
            <code>
              // Create a Categorical distribution for 3 symbols, in which
              // the first and second symbol have 25% chance of appearing,
              // and the third symbol has 50% chance of appearing.
              
              //                         1st   2nd   3rd
              double[] probabilities = { 0.25, 0.25, 0.50 };
              
              // Create the categorical with the given probabilities
              var dist = new GeneralDiscreteDistribution(probabilities);
              
              // Common measures
              double mean = dist.Mean;     // 1.25
              double median = dist.Median; // 1.00
              double var = dist.Variance;  // 0.6875
              
              // Cumulative distribution functions
              double cdf  = dist.DistributionFunction(k: 2);              // 1.0
              double ccdf = dist.ComplementaryDistributionFunction(k: 2); // 0.0
              
              // Probability mass functions
              double pdf1 = dist.ProbabilityMassFunction(k: 0); // 0.25
              double pdf2 = dist.ProbabilityMassFunction(k: 1); // 0.25
              double pdf3 = dist.ProbabilityMassFunction(k: 2); // 0.50
              double lpdf = dist.LogProbabilityMassFunction(k: 2); // -0.69314718055994529
              
              // Quantile function
              int icdf1 = dist.InverseDistributionFunction(p: 0.17); // 0
              int icdf2 = dist.InverseDistributionFunction(p: 0.39); // 1
              int icdf3 = dist.InverseDistributionFunction(p: 0.56); // 2
              
              // Hazard (failure rate) functions
              double hf = dist.HazardFunction(x: 0); // 0.33333333333333331
              double chf = dist.CumulativeHazardFunction(x: 0); // 0.2876820724517809
              
              // String representation
              string str = dist.ToString(CultureInfo.InvariantCulture); // "Categorical(x; p = { 0.25, 0.25, 0.5 })"
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.#ctor(System.Int32,System.Double[])">
            <summary>
              Constructs a new generic discrete distribution.
            </summary>
            
            <param name="start">
              The integer value where the distribution starts, also
              known as the offset value. Default value is 0.</param>
            <param name="probabilities">
              The frequency of occurrence for each integer value in the
              distribution. The distribution is assumed to begin in the
              interval defined by start up to size of this vector.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new uniform discrete distribution.
            </summary>
            
            <param name="start">
              The integer value where the distribution starts, also
              known as the offset value. Default value is 0.</param>
            <param name="symbols">
              The number of discrete values within the distribution.
              The distribution is assumed to belong to the interval
              [start, start + symbols].</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.#ctor(System.Double[])">
            <summary>
              Constructs a new generic discrete distribution.
            </summary>
            
            <param name="probabilities">
              The frequency of occurrence for each integer value in the
              distribution. The distribution is assumed to begin in the
              interval defined by start up to size of this vector.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.#ctor(System.Int32)">
            <summary>
              Constructs a new uniform discrete distribution.
            </summary>
            
            <param name="symbols">
              The number of discrete values within the distribution.
              The distribution is assumed to belong to the interval
              [start, start + symbols].</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Uniform(System.Int32,System.Int32)">
            <summary>
              Constructs a new uniform discrete distribution.
            </summary>
            
            <param name="a">
              The integer value where the distribution starts, also
              known as <c>a</c>. Default value is 0.</param>
            <param name="b">
              The integer value where the distribution ends, also 
              known as <c>b</c>.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>k</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>k</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">
              A single point in the distribution range.</param>
              
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.LogProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the log-probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>k</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.GeneralDiscreteOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Random(System.Double[],System.Int32)">
            <summary>
              Returns a random sample within the given symbol probabilities.
            </summary>
            
            <param name="probabilities">The probabilities for the discrete symbols.</param>
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random sample within the given probabilities.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Random(System.Double[])">
            <summary>
              Returns a random symbol within the given symbol probabilities.
            </summary>
            
            <param name="probabilities">The probabilities for the discrete symbols.</param>
            
            <returns>A random symbol within the given probabilities.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Item(System.Int32)">
            <summary>
              Gets the probability value associated with the symbol <paramref name="i"/>.
            </summary>
            
            <param name="i">The symbol's index.</param>
            
            <returns>The probability of the given symbol.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Minimum">
            <summary>
              Gets the integer value where the
              discrete distribution starts.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Maximum">
            <summary>
              Gets the integer value where the
              discrete distribution ends.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Length">
            <summary>
              Gets the number of symbols in the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Frequencies">
            <summary>
              Gets the probabilities associated
              with each discrete variable value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.IntRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.NormalDistribution">
            <summary>
              Normal (Gaussian) distribution.
            </summary>
            
            <remarks>
            <para>
              In probability theory, the normal (or Gaussian) distribution is a very 
              commonly occurring continuous probability distribution—a function that
              tells the probability that any real observation will fall between any two
              real limits or real numbers, as the curve approaches zero on either side.
              Normal distributions are extremely important in statistics and are often 
              used in the natural and social sciences for real-valued random variables
              whose distributions are not known.</para>
            <para>
              The normal distribution is immensely useful because of the central limit 
              theorem, which states that, under mild conditions, the mean of many random 
              variables independently drawn from the same distribution is distributed 
              approximately normally, irrespective of the form of the original distribution:
              physical quantities that are expected to be the sum of many independent processes
              (such as measurement errors) often have a distribution very close to the normal.
              Moreover, many results and methods (such as propagation of uncertainty and least
              squares parameter fitting) can be derived analytically in explicit form when the
              relevant variables are normally distributed.</para>
            <para>
              The Gaussian distribution is sometimes informally called the bell curve. However,
              many other distributions are bell-shaped (such as Cauchy's, Student's, and logistic).
              The terms Gaussian function and Gaussian bell curve are also ambiguous because they
              sometimes refer to multiples of the normal distribution that cannot be directly
              interpreted in terms of probabilities.</para>
              
            <para>
              The Gaussian is the most widely used distribution for continuous
              variables. In the case of a single variable, it is governed by
              two parameters, the mean and the variance.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="https://en.wikipedia.org/wiki/Normal_distribution">
                  Wikipedia, The Free Encyclopedia. Normal distribution. Available on: 
                  https://en.wikipedia.org/wiki/Normal_distribution </a></description></item>
              </list></para> 
            </remarks>
            
            <example>
            <para>
              This examples shows how to create a Normal distribution,
              compute some of its properties and generate a number of
              random samples from it.</para>
              
            <code>
              // Create a normal distribution with mean 2 and sigma 3
              var normal = new NormalDistribution(mean: 2, stdDev: 3);
            
              // In a normal distribution, the median and
              // the mode coincide with the mean, so
            
              double mean = normal.Mean;     // 2
              double mode = normal.Mode;     // 2
              double median = normal.Median; // 2
            
              // The variance is the square of the standard deviation
              double variance = normal.Variance; // 3² = 9
              
              // Let's check what is the cumulative probability of
              // a value less than 3 occurring in this distribution:
              double cdf = normal.DistributionFunction(3); // 0.63055
            
              // Finally, let's generate 1000 samples from this distribution
              // and check if they have the specified mean and standard devs
            
              double[] samples = normal.Generate(1000);
            
              double sampleMean = samples.Mean();             // 1.92
              double sampleDev = samples.StandardDeviation(); // 3.00
            </code>
            
            <para>
              This example further demonstrates how to compute
              derived measures from a Normal distribution: </para>
              
            <code>
              var normal = new NormalDistribution(mean: 4, stdDev: 4.2);
              
              double mean = normal.Mean;     // 4.0
              double median = normal.Median; // 4.0
              double mode = normal.Mode;     // 4.0
              double var = normal.Variance;  // 17.64
              
              double cdf = normal.DistributionFunction(x: 1.4);           // 0.26794249453351904
              double pdf = normal.ProbabilityDensityFunction(x: 1.4);     // 0.078423391448155175
              double lpdf = normal.LogProbabilityDensityFunction(x: 1.4); // -2.5456330358182586
              
              double ccdf = normal.ComplementaryDistributionFunction(x: 1.4); // 0.732057505466481
              double icdf = normal.InverseDistributionFunction(p: cdf);       // 1.4
              
              double hf = normal.HazardFunction(x: 1.4);            // 0.10712736480747137
              double chf = normal.CumulativeHazardFunction(x: 1.4); // 0.31189620872601354
              
              string str = normal.ToString(CultureInfo.InvariantCulture); // N(x; μ = 4, σ² = 17.64)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.SkewNormalDistribution"/>
            <seealso cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution"/>
            
            <seealso cref="T:Accord.Statistics.Testing.ZTest"/>
            <seealso cref="T:Accord.Statistics.Testing.TTest"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.#ctor">
            <summary>
              Constructs a Normal (Gaussian) distribution
              with zero mean and unit standard deviation.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.#ctor(System.Double)">
            <summary>
              Constructs a Normal (Gaussian) distribution
              with given mean and unit standard deviation.
            </summary>
            
            <param name="mean">The distribution's mean value μ (mu).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Normal (Gaussian) distribution
              with given mean and standard deviation.
            </summary>
            
            <param name="mean">The distribution's mean value μ (mu).</param>
            <param name="stdDev">The distribution's standard deviation σ (sigma).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the this Normal distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">
              A single point in the distribution range.</param>
              
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
            <para>
             The calculation is computed through the relationship to the error function
             as <see cref="M:Accord.Math.Special.Erfc(System.Double)">erfc</see>(-z/sqrt(2)) / 2.</para>  
             
            <para>    
              References:
              <list type="bullet">
                <item><description>
                  Weisstein, Eric W. "Normal Distribution." From MathWorld--A Wolfram Web Resource.
                  Available on: http://mathworld.wolfram.com/NormalDistribution.html </description></item>
                <item><description><a href="http://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function">
                  Wikipedia, The Free Encyclopedia. Normal distribution. Available on:
                  http://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function </a></description></item>
              </list></para>
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.ComplementaryDistributionFunction(System.Double)">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.InverseDistributionFunction(System.Double)">
             <summary>
               Gets the inverse of the cumulative distribution function (icdf) for
               this distribution evaluated at probability <c>p</c>. This function
               is also known as the Quantile function.
             </summary>
             
             <remarks>
             <para>
               The Inverse Cumulative Distribution Function (ICDF) specifies, for
               a given probability, the value which the random variable will be at,
               or below, with that probability.</para>
             <para>
               The Normal distribution's ICDF is defined in terms of the
               <see cref="M:Accord.Math.Normal.Inverse(System.Double)">standard normal inverse cumulative
               distribution function I</see> as <c>ICDF(p) = μ + σ * I(p)</c>.
             </para>
             </remarks>
            
             <example>
               See <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>.
             </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.ProbabilityDensityFunction(System.Double)">
             <summary>
               Gets the probability density function (pdf) for
               the Normal distribution evaluated at point <c>x</c>.
             </summary>
             
             <param name="x">A single point in the distribution range. For a
               univariate distribution, this should be a single
               double value. For a multivariate distribution,
               this should be a double array.</param>
               
             <returns>
               The probability of <c>x</c> occurring
               in the current distribution.
             </returns>
             
             <remarks>
             <para>
               The Probability Density Function (PDF) describes the
               probability that a given value <c>x</c> will occur.</para>
             <para>
               The Normal distribution's PDF is defined as
               <c>PDF(x) = c * exp((x - μ / σ)²/2)</c>.</para>
             </remarks>
             
             <example>
               See <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>.
             </example> 
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              the Normal distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range. For a
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
              
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
            <example>
              See <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>.
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.ZScore(System.Double)">
            <summary>
              Gets the Z-Score for a given value.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.Estimate(System.Double[])">
            <summary>
              Estimates a new Normal distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.Estimate(System.Double[],Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Estimates a new Normal distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.Estimate(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Estimates a new Normal distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.ToMultivariateDistribution">
            <summary>
              Converts this univariate distribution into a
              1-dimensional multivariate distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.Generate">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Mean">
            <summary>
              Gets the Mean value μ (mu) for this Normal distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <remarks>
              The normal distribution's median value 
              equals its <see cref="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Mean"/> value μ.
            </remarks>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Variance">
            <summary>
              Gets the Variance σ² (sigma-squared), which is the square
              of the standard deviation σ for this Normal distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.StandardDeviation">
            <summary>
              Gets the Standard Deviation σ (sigma), which is the 
              square root of the variance for this Normal distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <remarks>
              The normal distribution's mode value 
              equals its <see cref="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Mean"/> value μ.
            </remarks>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Skewness">
            <summary>
              Gets the skewness for this distribution. In 
              the Normal distribution, this is always 0.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Kurtosis">
            <summary>
              Gets the excess kurtosis for this distribution. 
              In the Normal distribution, this is always 0.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Entropy">
            <summary>
              Gets the Entropy for this Normal distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Standard">
            <summary>
              Gets the Standard Gaussian Distribution, with zero mean and unit variance.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.PoissonDistribution">
            <summary>
              Poisson probability distribution.
            </summary>
            
            <remarks>
              <para>The Poisson distribution is a discrete probability distribution that
              expresses the probability of a number of events occurring in a fixed
              period of time if these events occur with a known average rate and
              independently of the time since the last event.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Poisson_distribution">
                  Wikipedia, The Free Encyclopedia. Poisson distribution. Available on:
                  http://en.wikipedia.org/wiki/Poisson_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <para>
              The following example shows how to instantiate a new Poisson distribution
              with a given rate λ and how to compute its measures and associated functions.</para>
              
            <code>
            // Create a new Poisson distribution with 
            var dist = new PoissonDistribution(lambda: 4.2);
            
            // Common measures
            double mean = dist.Mean;     // 4.2
            double median = dist.Median; // 4.0
            double var = dist.Variance;  // 4.2
            
            // Cumulative distribution functions
            double cdf1 = dist.DistributionFunction(k: 2); // 0.21023798702309743
            double cdf2 = dist.DistributionFunction(k: 4); // 0.58982702131057763
            double cdf3 = dist.DistributionFunction(k: 7); // 0.93605666027257894
            double ccdf = dist.ComplementaryDistributionFunction(k: 2); // 0.78976201297690252
            
            // Probability mass functions
            double pmf1 = dist.ProbabilityMassFunction(k: 4); // 0.19442365170822165
            double pmf2 = dist.ProbabilityMassFunction(k: 5); // 0.1633158674349062
            double pmf3 = dist.ProbabilityMassFunction(k: 6); // 0.11432110720443435
            double lpmf = dist.LogProbabilityMassFunction(k: 2); // -2.0229781299813
            
            // Quantile function
            int icdf1 = dist.InverseDistributionFunction(p: cdf1); // 2
            int icdf2 = dist.InverseDistributionFunction(p: cdf2); // 4
            int icdf3 = dist.InverseDistributionFunction(p: cdf3); // 7
            
            // Hazard (failure rate) functions
            double hf = dist.HazardFunction(x: 4); // 0.47400404660843515
            double chf = dist.CumulativeHazardFunction(x: 4); // 0.89117630901575073
            
            // String representation
            string str = dist.ToString(CultureInfo.InvariantCulture); // "Poisson(x; λ = 4.2)"
            </code>
            
            <para>
              This example shows hows to call the distribution function 
              to compute different types of probabilities. </para>
              
            <code>
            // Create a new Poisson distribution
            var dist = new PoissonDistribution(lambda: 4.2);
            
            // P(X = 1) = 0.0629814226460064
            double equal = dist.ProbabilityMassFunction(k: 1);
            
            // P(X &lt; 1) = 0.0149955768204777
            double less = dist.DistributionFunction(k: 1, inclusive: false);
            
            // P(X ≤ 1) = 0.0779769994664841
            double lessThanOrEqual = dist.DistributionFunction(k: 1, inclusive: true);
            
            // P(X > 1) = 0.922023000533516
            double greater = dist.ComplementaryDistributionFunction(k: 1);
            
            // P(X ≥ 1) = 0.985004423179522
            double greaterThanOrEqual = dist.ComplementaryDistributionFunction(k: 1, inclusive: true);
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.#ctor">
            <summary>
              Creates a new Poisson distribution with λ = 1.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.#ctor(System.Double)">
            <summary>
              Creates a new Poisson distribution with the given λ (lambda).
            </summary>
            
            <param name="lambda">The Poisson's λ (lambda) parameter. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>k</c>.
            </summary>
            
            <param name="k">
              A single point in the distribution range.</param>
              
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="k">
              A single point in the distribution range.</param>
              
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>k</c> will occur.
            </remarks>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.LogProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the log-probability mass function (pmf) for
              this distribution evaluated at point <c>k</c>.
            </summary>
            
            <param name="k">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>k</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>k</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.InverseDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the cumulative distribution function (icdf) for
              this distribution evaluated at probability <c>p</c>. This function
              is also known as the Quantile function.
            </summary>
            
            <param name="p">A probability value between 0 and 1.</param>
            
            <returns>The observation which most likely generated <paramref name="p"/>.</returns>
            
            <remarks>
            <para>
              The Inverse Cumulative Distribution Function (ICDF) specifies, for
              a given probability, the value which the random variable will be at,
              or below, with that probability.</para>
            <para>
              In Poisson's distribution, the Inverse CDF can be computed using
              the <see cref="M:Accord.Math.Gamma.Inverse(System.Double,System.Double)">inverse Gamma function Γ'(a, x)</see>
              as 
                        <code>icdf(p) = Γ'(λ, 1 - p)</code>
              .</para>
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Lambda">
            <summary>
              Gets the Poisson's parameter λ (lambda).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <remarks>
              A closed form expression for the entropy of a Poisson
              distribution is unknown. This property returns an approximation
              for large lambda.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.IntRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Standard">
            <summary>
              Gets the standard Poisson distribution,
              with lambda (rate) equal to 1.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution">
            <summary>
              von-Mises (Circular Normal) distribution.
            </summary>
            
            <remarks>
              <para>The von Mises distribution (also known as the circular normal distribution
              or Tikhonov distribution) is a continuous probability distribution on the circle.
              It may be thought of as a close approximation to the wrapped normal distribution,
              which is the circular analogue of the normal distribution.</para>
              
              <para>The wrapped normal distribution describes the distribution of an angle that
              is the result of the addition of many small independent angular deviations, such as
              target sensing, or grain orientation in a granular material. The von Mises distribution
              is more mathematically tractable than the wrapped normal distribution and is the
              preferred distribution for many applications.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Von_Mises_distribution">
                  Wikipedia, The Free Encyclopedia. Von-Mises distribution. Available on:
                  http://en.wikipedia.org/wiki/Von_Mises_distribution </a></description></item>
                <item><description><a href="http://www.kyb.mpg.de/publications/attachments/vmfnote_7045%5B0%5D.pdf">
                  Suvrit Sra, "A short note on parameter approximation for von Mises-Fisher distributions:
                  and a fast implementation of $I_s(x)$". (revision of Apr. 2009). Computational Statistics (2011).
                  Available on: http://www.kyb.mpg.de/publications/attachments/vmfnote_7045%5B0%5D.pdf </a></description></item>
                <item><description>
                  Zheng Sun. M.Sc. Comparing measures of fit for circular distributions. Master thesis, 2006.
                  Available on: https://dspace.library.uvic.ca:8443/bitstream/handle/1828/2698/zhengsun_master_thesis.pdf </description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
               // Create a new von-Mises distribution with μ = 0.42 and κ = 1.2
               var vonMises = new VonMisesDistribution(mean: 0.42, concentration: 1.2);
               
               // Common measures
               double mean = vonMises.Mean;     // 0.42
               double median = vonMises.Median; // 0.42
               double var = vonMises.Variance;  // 0.48721760532782921
               
               // Cumulative distribution functions
               double cdf = vonMises.DistributionFunction(x: 1.4); // 0.81326928491589345
               double ccdf = vonMises.ComplementaryDistributionFunction(x: 1.4); // 0.18673071508410655
               double icdf = vonMises.InverseDistributionFunction(p: cdf); // 1.3999999637927665
               
               // Probability density functions
               double pdf = vonMises.ProbabilityDensityFunction(x: 1.4); // 0.2228112141141676
               double lpdf = vonMises.LogProbabilityDensityFunction(x: 1.4); // -1.5014304395467863
               
               // Hazard (failure rate) functions
               double hf = vonMises.HazardFunction(x: 1.4); // 1.1932220899695576
               double chf = vonMises.CumulativeHazardFunction(x: 1.4); // 1.6780877262500649
               
               // String representation
               string str = vonMises.ToString(CultureInfo.InvariantCulture); // VonMises(x; μ = 0.42, κ = 1.2)
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Circular"/>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.#ctor(System.Double)">
            <summary>
              Constructs a von-Mises distribution with zero mean.
            </summary>
            
            <param name="concentration">The concentration value κ (kappa).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a von-Mises distribution.
            </summary>
            
            <param name="mean">The mean value μ (mu).</param>
            <param name="concentration">The concentration value κ (kappa).</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.VonMisesOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.CircularUniform(System.Double)">
            <summary>
              Creates a new circular uniform distribution by creating a
              new <see cref="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution"/> with zero kappa.
            </summary>
            
            <param name="mean">The mean value μ (mu).</param>
            
            <returns>
              A <see cref="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution"/> with zero kappa, which
              is equivalent to creating an uniform circular distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Estimate(System.Double[])">
            <summary>
              Estimates a new von-Mises distribution from a given set of angles.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Estimate(System.Double[],Accord.Statistics.Distributions.Fitting.VonMisesOptions)">
            <summary>
              Estimates a new von-Mises distribution from a given set of angles.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Estimate(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.VonMisesOptions)">
            <summary>
              Estimates a new von-Mises distribution from a given set of angles.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.DistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
              von-Mises cumulative distribution function.
            </summary>
            
            <remarks>
              This method implements the Von-Mises CDF calculation code
              as given by Geoffrey Hill on his original FORTRAN code and
              shared under the GNU LGPL license.
            
            <para>    
              References:
              <list type="bullet">
                <item><description>Geoffrey Hill, ACM TOMS Algorithm 518,
                Incomplete Bessel Function I0: The von Mises Distribution,
                ACM Transactions on Mathematical Software, Volume 3, Number 3,
                September 1977, pages 279-284.</description></item>
              </list></para>
            </remarks>
            
            <param name="x">The point where to calculate the CDF.</param>
            <param name="mu">The location parameter μ (mu).</param>
            <param name="kappa">The concentration parameter κ (kappa).</param>
            
            <returns>The value of the von-Mises CDF at point <paramref name="x"/>.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Mean">
            <summary>
              Gets the mean value μ (mu) for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Median">
            <summary>
              Gets the median value μ (mu) for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Mode">
            <summary>
              Gets the mode value μ (mu) for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Concentration">
            <summary>
              Gets the concentration κ (kappa) for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <remarks>
              The von-Mises Variance is defined in terms of the
              <see cref="M:Accord.Math.Bessel.I(System.Double)">Bessel function of the first 
              kind In(x)</see> as <c>var = 1 - I(1, κ) / I(0, κ)</c>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.WeibullDistribution">
            <summary>
              Weibull distribution.
            </summary>
            
            <remarks>
            <para>
              In probability theory and statistics, the Weibull distribution is a
              continuous probability distribution. It is named after Waloddi Weibull,
              who described it in detail in 1951, although it was first identified by
              Fréchet (1927) and first applied by Rosin and Rammler (1933) to describe a
              particle size distribution.</para>
              
            <para>
            The Weibull distribution is related to a number of other probability distributions;
            in particular, it interpolates between the <see cref="T:Accord.Statistics.Distributions.Univariate.ExponentialDistribution">
            exponential distribution</see> (for k = 1) and the <see cref="T:Accord.Statistics.Distributions.Univariate.RayleighDistribution">
            Rayleigh distribution</see> (when k = 2). </para>
            
            <para>
            If the quantity x is a "time-to-failure", the Weibull distribution gives a 
            distribution for which the failure rate is proportional to a power of time.
            The shape parameter, k, is that power plus one, and so this parameter can be
            interpreted directly as follows:</para>
            
            <list type="bullet">
              <item><description>
                A value of k &lt; 1 indicates that the failure rate decreases over time. This
                happens if there is significant "infant mortality", or defective items failing
                early and the failure rate decreasing over time as the defective items are 
                weeded out of the population.</description></item>
              <item><description>
                A value of k = 1 indicates that the failure rate is constant over time. This 
                might suggest random external events are causing mortality, or failure.</description></item>
              <item><description>
                A value of k &gt; 1 indicates that the failure rate increases with time. This 
                happens if there is an "aging" process, or parts that are more likely to fail 
                as time goes on.</description></item>
            </list>
            <para>
            In the field of materials science, the shape parameter <c>k</c> of a distribution 
            of strengths is known as the Weibull modulus.</para>
            
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Weibull_distribution">
                  Wikipedia, The Free Encyclopedia. Weibull distribution. Available on:
                  http://en.wikipedia.org/wiki/Weibull_distribution </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
               // Create a new Weibull distribution with λ = 0.42 and k = 1.2
               var weilbull = new WeibullDistribution(scale: 0.42, shape: 1.2);
               
               // Common measures
               double mean = weilbull.Mean;     // 0.39507546046784414
               double median = weilbull.Median; // 0.30945951550913292
               double var = weilbull.Variance;  // 0.10932249666369542
               double mode = weilbull.Mode;     // 0.094360430821809421
               
               // Cumulative distribution functions
               double cdf = weilbull.DistributionFunction(x: 1.4);           //  0.98560487188700052
               double pdf = weilbull.ProbabilityDensityFunction(x: 1.4);     //  0.052326687031379278
               double lpdf = weilbull.LogProbabilityDensityFunction(x: 1.4); // -2.9502487697674415
               
               // Probability density functions
               double ccdf = weilbull.ComplementaryDistributionFunction(x: 1.4); // 0.22369885565908001
               double icdf = weilbull.InverseDistributionFunction(p: cdf);       // 1.400000001051205
               
               // Hazard (failure rate) functions
               double hf = weilbull.HazardFunction(x: 1.4);            // 1.1093328057258516
               double chf = weilbull.CumulativeHazardFunction(x: 1.4); // 1.4974545260150962
               
               // String representation
               string str = weilbull.ToString(CultureInfo.InvariantCulture); // Weibull(x; λ = 0.42, k = 1.2)
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.WeibullDistribution"/> class.
            </summary>
            
            <param name="scale">The scale parameter λ (lambda).</param>
            <param name="shape">The shape parameter k.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the log-probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The logarithm of the probability of <c>x</c>
              occurring in the current distribution.
            </returns>
            
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.HazardFunction(System.Double)">
            <summary>
              Gets the hazard function, also known as the failure rate or
              the conditional failure density function for this distribution
              evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The conditional failure density function <c>h(x)</c>
              evaluated at <c>x</c> in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.CumulativeHazardFunction(System.Double)">
            <summary>
              Gets the cumulative hazard function for this
              distribution evaluated at point <c>x</c>.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
            <returns>
              The cumulative hazard function <c>H(x)</c>
              evaluated at <c>x</c> in the current distribution.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.ComplementaryDistributionFunction(System.Double)">
            <summary>
              Gets the complementary cumulative distribution function
              (ccdf) for this distribution evaluated at point <c>x</c>.
              This function is also known as the Survival function.
            </summary>
            
            <param name="x">A single point in the distribution range.</param>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.InverseComplementaryDistributionFunction(System.Double)">
            <summary>
              Gets the inverse of the <see cref="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.ComplementaryDistributionFunction(System.Double)"/>. 
              The inverse complementary distribution function is also known as the 
              inverse survival Function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            
            <param name="observations">The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
              
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.Generate">
            <summary>
              Generates a random observation from the current distribution.
            </summary>
            
            <returns>A random observations drawn from this distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.Random(System.Double,System.Double,System.Int32)">
             <summary>
               Generates a random vector of observations from the 
               Weibull distribution with the given parameters.
             </summary>
             
             <param name="scale">The scale parameter lambda.</param>
             <param name="shape">The shape parameter k.</param>
             <param name="samples">The number of samples to generate.</param>
            
             <returns>An array of double values sampled from the specified Weibull distribution.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.Random(System.Double,System.Double)">
            <summary>
              Generates a random observation from the 
              Weibull distribution with the given parameters.
            </summary>
            
            <param name="scale">The scale parameter lambda.</param>
            <param name="shape">The shape parameter k.</param>
            
            <returns>A random double value sampled from the specified Weibull distribution.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.WeibullDistribution.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WeibullDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
            
            <value>The distribution's mean value.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WeibullDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
            
            <value>The distribution's variance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WeibullDistribution.Median">
            <summary>
              Gets the median for this distribution.
            </summary>
            
            <value>
              The distribution's median value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WeibullDistribution.Mode">
            <summary>
              Gets the mode for this distribution.
            </summary>
            
            <value>
              The distribution's mode value.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WeibullDistribution.Support">
            <summary>
              Gets the support interval for this distribution.
            </summary>
            
            <value>
              A <see cref="T:AForge.DoubleRange"/> containing
              the support interval for this distribution.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.WeibullDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
            
            <value>The distribution's entropy.</value>
            
        </member>
        <member name="T:Accord.Statistics.Filters.BaseFilter`1">
            <summary>
              Base abstract class for the Data Table preprocessing filters.
            </summary>
            <typeparam name="T">The column options type.</typeparam>
            
        </member>
        <member name="T:Accord.Statistics.Filters.IFilter">
            <summary>
              Sample processing filter interface.
            </summary>
            
            <remarks>The interface defines the set of methods which should be
            provided by all table processing filters. Methods of this interface should
            keep the source table unchanged and return the result of data processing
            filter as new data table.</remarks>
            
        </member>
        <member name="M:Accord.Statistics.Filters.IFilter.Apply(System.Data.DataTable)">
             <summary>
               Applies the filter to a <see cref="T:System.Data.DataTable"/>.
             </summary>
             
             <param name="data">Source table to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source table.</returns>
             
             <remarks>The method keeps the source table unchanged and returns the
             the result of the table processing filter as new data table.</remarks> 
            
        </member>
        <member name="M:Accord.Statistics.Filters.BaseFilter`1.#ctor">
            <summary>
              Creates a new DataTable Filter Base.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.BaseFilter`1.Apply(System.Data.DataTable,System.String[])">
            <summary>
              Applies the Filter to a <see cref="T:System.Data.DataTable"/>.
            </summary>
            
            <param name="data">The source <see cref="T:System.Data.DataTable"/>.</param>
            <param name="columnNames">The name of the columns that should be processed.</param>
            
            <returns>The processed <see cref="T:System.Data.DataTable"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.BaseFilter`1.Apply(System.Data.DataTable)">
            <summary>
              Applies the Filter to a <see cref="T:System.Data.DataTable"/>.
            </summary>
            
            <param name="data">The source <see cref="T:System.Data.DataTable"/>.</param>
            
            <returns>The processed <see cref="T:System.Data.DataTable"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.BaseFilter`1.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.BaseFilter`1.Active">
            <summary>
              Gets or sets whether this filter is active. An inactive
              filter will repass the input table as output unchanged.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.BaseFilter`1.Columns">
            <summary>
              Gets the collection of filter options.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.BaseFilter`1.Item(System.String)">
            <summary>
              Gets options associated with a given variable (data column).
            </summary>
            
            <param name="columnName">The name of the variable.</param>
            
        </member>
        <member name="P:Accord.Statistics.Filters.BaseFilter`1.Item(System.Int32)">
            <summary>
              Gets options associated with a given variable (data column).
            </summary>
            
            <param name="index">The column's index for the variable.</param>
            
        </member>
        <member name="T:Accord.Statistics.Filters.ColumnOptionsBase">
            <summary>
              Column options for filter which have per-column settings.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.ColumnOptionsBase.#ctor(System.String)">
            <summary>
              Constructs the base class for Column Options.
            </summary>
            
            <param name="column">Column's name.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.ColumnOptionsBase.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Filters.ColumnOptionsBase.ColumnName">
            <summary>
              Gets or sets the name of the column that the options will apply to.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.ColumnOptionsBase.Tag">
            <summary>
              Gets or sets a user-determined object associated with this column.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.ColumnOptionCollection`1">
            <summary>
              Column option collection.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.ColumnOptionCollection`1.GetKeyForItem(`0)">
            <summary>
              Extracts the key from the specified column options.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.ColumnOptionCollection`1.Add(`0)">
            <summary>
              Adds a new column options definition to the collection.
            </summary>
            
            <param name="options">The column options to be added.</param>
            
            <returns>The added column options.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.ColumnOptionCollection`1.TryGetValue(System.String,`0@)">
            <summary>
              Gets the associated options for the given column name.
            </summary>
            
            <param name="columnName">The name of the column whose options should be retrieved.</param>
            <param name="options">The retrieved options.</param>
            
            <returns>True if the options was contained in the collection; false otherwise.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Filters.IInPlaceFilter">
            <summary>
              Data processing interface for in-place filters.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.IInPlaceFilter.ApplyInPlace(System.Data.DataTable)">
             <summary>
               Applies the filter to a <see cref="T:System.Data.DataTable"/>,
               modifying the table in place.
             </summary>
             
             <param name="data">Source table to apply filter to.</param>
             
             <remarks>The method modifies the source table in place.</remarks> 
            
        </member>
        <member name="T:Accord.Statistics.Filters.IAutoConfigurableColumn">
            <summary>
              Indicates that a column filter supports automatic initialization.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.IAutoConfigurableColumn.Detect(System.Data.DataColumn)">
            <summary>
              Auto detects the column options by analyzing a given <see cref="T:System.Data.DataColumn"/>.
            </summary> 
            
            <param name="column">The column to analyze.</param>
            
        </member>
        <member name="T:Accord.Statistics.Filters.IAutoConfigurableFilter">
            <summary>
              Indicates that a filter supports automatic initialization.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.IAutoConfigurableFilter.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary> 
            
        </member>
        <member name="T:Accord.Statistics.Filters.Branching">
            <summary>
              Branching filter.
            </summary>
            
            <remarks>
              The branching filter allows for different filter sequences to be
              applied to different subsets of a data table. For instance, consider
              a data table whose first column, "IsStudent", is an indicator variable:
              a value of 1 indicates the row contains information about a student, and
              a value of 0 indicates the row contains information about someone who is
              not currently a student. Using the branching filter, it becomes possible
              to apply a different set of filters for the rows that represent students
              and different filters for rows that represent non-students.
            </remarks>
            
            <example>
            <para>
              Suppose we have the following data table. In this table, each row represents
              a person, an indicator variable tell us whether this person is a smoker, and
              the last column indicates the age of each person. Let's say we would like to
              convert the age of smokers to a scale from -1 to 0, and the age of non-smokers
              to a scale from 0 to 1.</para>
              
            <code>
            object[,] data = 
            {
                { "Id",  "IsSmoker", "Age" },
                {   0,       1,        10  },
                {   1,       1,        15  },
                {   2,       0,        40  },
                {   3,       1,        20  },
                {   4,       0,        70  },
                {   5,       0,        55  },
            };
            
            // Create a DataTable from data
            DataTable input = data.ToTable();
            
            // We will create two filters, one to operate on the smoking
            // branch of the data, and other in the non-smoking subjects.
            //
            var smoker = new LinearScaling();
            var common = new LinearScaling();
            
            // for the smokers, we will convert the age to [-1; 0]
            smoker.Columns.Add(new LinearScaling.Options("Age")
            {
                SourceRange = new DoubleRange(10, 20),
                OutputRange = new DoubleRange(-1, 0)
            });
            
            // for non-smokers, we will convert the age to [0; +1]
            common.Columns.Add(new LinearScaling.Options("Age")
            {
                SourceRange = new DoubleRange(40, 70),
                OutputRange = new DoubleRange(0, 1)
            });
            
            // We now configure and create the branch filter
            var settings = new Branching.Options("IsSmoker");
            settings.Filters.Add(1, smoker);
            settings.Filters.Add(0, common);
            
            Branching branching = new Branching(settings);
            
            
            // Finally, we can process the input data:
            DataTable actual = branching.Apply(input);
            
            // As result, the generated table will
            // then contain the following entries:
            
            //  { "Id",  "IsSmoker", "Age" },
            //  {   0,       1,      -1.0  },
            //  {   1,       1,      -0.5  },
            //  {   2,       0,       0.0  },
            //  {   3,       1,       0.0  },
            //  {   4,       0,       1.0  },
            //  {   5,       0,       0.5  },
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Branching.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Filters.Branching"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Branching.#ctor(System.String[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Filters.Branching"/> class.
            </summary>
            
            <param name="columns">The columns to use as filters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Branching.#ctor(Accord.Statistics.Filters.Branching.Options[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Filters.Branching"/> class.
            </summary>
            
            <param name="columns">The columns to use as filters.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Branching.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Branching.Options">
            <summary>
              Column options for the branching filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Branching.Options.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Filters.Branching.Options"/> class.
            </summary>
            
            <param name="name">The column name.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Branching.Options.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Filters.Branching.Options"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Branching.Options.Detect(System.Data.DataColumn)">
            <summary>
              Auto detects the column options by analyzing a given <see cref="T:System.Data.DataColumn"/>.
            </summary>
            
            <param name="column">The column to analyze.</param>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Branching.Options.Filters">
            <summary>
              Gets the collection of filters associated with a given label value.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Identification">
            <summary>
              Identification filter.
            </summary>
            
            <remarks>
            <para>
              The identification filter adds a new column to the data containing an
              unique id for each of the samples (rows) in the data table (or matrix).</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Identification.#ctor">
            <summary>
              Creates a new identification filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Identification.#ctor(System.String)">
            <summary>
              Creates a new identification filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Identification.Apply(System.Data.DataTable)">
            <summary>
              Applies the filter to the DataTable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Identification.ColumnName">
            <summary>
              Gets or sets the name of the column used
              to store row indices.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Randomization">
            <summary>
              Randomization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Randomization.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Filters.Randomization"/> class.
            </summary>
            
            <param name="seed">A fixed random seed value to generate fixed
            permutations. If not specified, generates true random permutations. </param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Randomization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Statistics.Filters.Randomization"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Randomization.Apply(System.Data.DataTable)">
            <summary>
              Applies the filter to the current data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Randomization.Seed">
            <summary>
              Gets or sets the fixed random seed to
              be used in randomization, if any.
            </summary>
            
            <value>The random seed, for fixed permutations;
            or null, for true random permutations.</value>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Imputation">
            <summary>
              Imputation filter for filling missing values.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Imputation.#ctor">
            <summary>
              Creates a new Imputation filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Imputation.#ctor(System.String[])">
            <summary>
              Creates a new Imputation filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Imputation.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Imputation.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary> 
            
        </member>
        <member name="T:Accord.Statistics.Filters.Imputation.Strategy">
            <summary>
              Strategies for missing value imputations.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Filters.Imputation.Strategy.FixedValue">
            <summary>
              Uses a fixed-value to replace missing fields.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Filters.Imputation.Strategy.Mean">
            <summary>
              Uses the mean value to replace missing fields.
            </summary>
        </member>
        <member name="F:Accord.Statistics.Filters.Imputation.Strategy.Mode">
            <summary>
              Uses the mode value to replace missing fields.
            </summary>
        </member>
        <member name="F:Accord.Statistics.Filters.Imputation.Strategy.Median">
            <summary>
              Uses the median value to replace missing fields.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Filters.Imputation.Options">
            <summary>
              Options for the imputation filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Imputation.Options.#ctor(System.String)">
            <summary>
              Constructs a new column option
              for the Imputation filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Imputation.Options.#ctor">
            <summary>
              Constructs a new column option
              for the Imputation filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Imputation.Options.Detect(System.Data.DataColumn)">
            <summary>
              Auto detects the column options by analyzing
              a given <see cref="T:System.Data.DataColumn"/>.
            </summary>
            
            <param name="column">The column to analyze.</param>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Imputation.Options.Strategy">
            <summary>
              Gets or sets the imputation strategy
              to use with this column.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.Imputation.Options.MissingValue">
            <summary>
              Missing value indicator.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Imputation.Options.ReplaceWith">
            <summary>
              Value to replace missing values with.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Grouping">
            <summary>
              Grouping filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Grouping.#ctor">
            <summary>
              Creates a new Grouping filter with equal group
              proportions and default Group indicator column.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Grouping.#ctor(System.String)">
            <summary>
              Creates a new Grouping filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Grouping.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Grouping.Lock">
            <summary>
              Gets or sets a value indicating whether the group labels
              are locked and should not be randomly re-selected.
            </summary>
            
            <value><c>true</c> to lock groups; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Grouping.GroupIndices">
            <summary>
              Gets or sets the group index labels.
            </summary>
            
            <value>The group indices.</value>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Grouping.Proportion">
            <summary>
              Gets or sets the two-group proportions.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Grouping.GroupIndicatorColumnName">
            <summary>
              Gets or sets the name of the indicator
              column which will be used to distinguish
              samples from either group.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Grouping.Options">
            <summary>
              Options for the grouping filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Grouping.Options.#ctor(System.String)">
            <summary>
              Constructs a new Options object for the given column.
            </summary>
            
            <param name="name">
              The name of the column to create this options for.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Grouping.Options.#ctor">
            <summary>
              Constructs a new Options object.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Grouping.Options.Classes">
            <summary>
              Gets or sets the labels used for each class contained in the column.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Elimination">
            <summary>
              Elimination filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Elimination.#ctor">
            <summary>
              Creates a elimination filter to remove
              rows containing missing values.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Elimination.#ctor(System.String[])">
            <summary>
              Creates a elimination filter to remove
              rows containing missing values in the
              specified columns.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Elimination.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Elimination.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary> 
            
        </member>
        <member name="T:Accord.Statistics.Filters.Elimination.Options">
            <summary>
              Options for the discretization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Elimination.Options.#ctor(System.String)">
            <summary>
              Constructs a new column option
              for the Elimination filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Elimination.Options.#ctor">
            <summary>
              Constructs a new column option
              for the Elimination filter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Elimination.Options.Value">
            <summary>
              Gets the value indicator of a missing field.
              Default is <see cref="F:System.Double.NaN"/>.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Windowing">
            <summary>
              Time-series windowing filter.
            </summary>
            
            <remarks>
              This filter splits a time-series into overlapping time
              windows, with optional associated output values. This
              filter can be used to create time-window databases for
              time-series regression and latent-state identification.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Windowing.#ctor">
            <summary>
              Creates a new time segmentation filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Windowing.#ctor(System.Int32)">
            <summary>
              Creates a new time segmentation filter.
            </summary>
            
            <param name="windowSize">The size of the time windows to be extracted.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Windowing.#ctor(System.Int32,System.Int32)">
            <summary>
              Creates a new time segmentation filter.
            </summary>
            
            <param name="windowSize">The size of the time windows to be extracted.</param>
            <param name="steps">The number of elements between two taken windows. If set to
              the same number of <paramref name="windowSize"/>, the windows will not overlap. 
              Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Windowing.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Windowing.Apply(System.Double[])">
            <summary>
              Applies the filter to a time series.
            </summary>
            
            <param name="samples">The source time series.</param>
            
            <returns>The time-windows extracted from the time-series.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Windowing.Apply(System.Double[],System.Double[]@)">
            <summary>
              Applies the filter to a time series.
            </summary>
            
            <param name="samples">The source time series.</param>
            <param name="outputs">The output associated with each time-window.</param>
            
            <returns>The time-windows extracted from the time-series.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Windowing.WindowSize">
            <summary>
              Gets or sets the length of the time-windows
              that should be extracted from the sequences.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Windowing.StepSize">
            <summary>
              Gets or sets the step size that should be used
              when extracting windows. If set to the same number
              as the <see cref="P:Accord.Statistics.Filters.Windowing.WindowSize"/>, windows will not
              overlap. Default is 1.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Windowing.Options">
             <summary>
               Options for segmenting a time-series contained inside a column.
             </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Windowing.Options.#ctor">
            <summary>
              Constructs a new Options object.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Stratification">
            <summary>
              Class equalization filter.
            </summary>
            <remarks>
              Currently this class does only work for a single
              column and only for the binary case (two classes).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Stratification.#ctor">
            <summary>
              Creates a new class equalization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Stratification.#ctor(System.String)">
            <summary>
              Creates a new classes equalization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Stratification.#ctor(System.String,System.Int32)">
            <summary>
              Creates a new classes equalization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Stratification.#ctor(System.String,System.Int32[])">
            <summary>
              Creates a new classes equalization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Stratification.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Stratification.Options">
            <summary>
              Options for the stratification filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Stratification.Options.#ctor(System.String)">
            <summary>
              Constructs a new Options object for the given column.
            </summary>
            
            <param name="name">
              The name of the column to create this options for.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Stratification.Options.#ctor">
            <summary>
              Constructs a new Options object.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Stratification.Options.Detect(System.Data.DataColumn)">
            <summary>
              Auto detects the column options by analyzing a given <see cref="T:System.Data.DataColumn"/>.
            </summary>
            
            <param name="column">The column to analyze.</param>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Stratification.Options.Classes">
            <summary>
              Gets or sets the labels used for each class contained in the column.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.CodificationVariable">
            <summary>
              Codification type.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Filters.CodificationVariable.Ordinal">
            <summary>
              The variable should be codified as an ordinal variable,
              meaning they will be translated to symbols 0, 1, 2, ... n,
              where n is the total number of distinct symbols this variable
              can assume.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Filters.CodificationVariable.Categorical">
            <summary>
              This variable should be codified as a 1-of-n vector by creating
              one column for each symbol this variable can assume, and marking
              the column corresponding to the current symbol as 1 and the rest
              as zero.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Filters.CodificationVariable.CategoricalWithBaseline">
            <summary>
              This variable should be codified as a 1-of-(n-1) vector by creating
              one column for each symbol this variable can assume, except the
              first. This is the same as as <see cref="F:Accord.Statistics.Filters.CodificationVariable.Categorical"/>,
              but the first symbol is handled as a baseline (and should be indicated by
              a zero in every column).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Codification">
            <summary>
              Codification Filter class.
            </summary>
            
            <remarks>
            <para>
              The codification filter performs an integer codification of classes in
              given in a string form. An unique integer identifier will be assigned
              for each of the string classes.</para>
            </remarks>
            
            <example>
            <para>
              When handling data tables, often there will be cases in which a single
              table contains both numerical variables and categorical data in the form
              of text labels. Since most machine learning and statistics algorithms
              expect their data to be numeric, the codification filter can be used
              to create mappings between text labels and discrete symbols.</para>
              
            <code>
            // Show the start data
            DataGridBox.Show(table);
            </code>
            
            <img src="..\images\filters\input-table.png"/> 
            
            <code>
            // Create a new data projection (column) filter
            var filter = new Codification(table, "Category");
            
            // Apply the filter and get the result
            DataTable result = filter.Apply(table);
            
            // Show it
            DataGridBox.Show(result);
            </code>
            
            <img src="..\images\filters\output-codification.png"/> 
            
            
            <para>
              The following more elaborated examples show how to
              use the <see cref="T:Accord.Statistics.Filters.Codification"/> filter without
              necessarily handling <see cref="T:System.Data.DataTable">
              DataTable</see>s.</para>
              
            <code>
              // Suppose we have a data table relating the age of
              // a person and its categorical classification, as 
              // in "child", "adult" or "elder".
              
              // The Codification filter is able to extract those
              // string labels and transform them into discrete
              // symbols, assigning integer labels to each of them
              // such as "child" = 0, "adult" = 1, and "elder" = 3.
              
              // Create the aforementioned sample table
              DataTable table = new DataTable("Sample data");
              table.Columns.Add("Age", typeof(int));
              table.Columns.Add("Label", typeof(string));
              
              //            age   label
              table.Rows.Add(10, "child");
              table.Rows.Add(07, "child");
              table.Rows.Add(04, "child");
              table.Rows.Add(21, "adult");
              table.Rows.Add(27, "adult");
              table.Rows.Add(12, "child");
              table.Rows.Add(79, "elder");
              table.Rows.Add(40, "adult");
              table.Rows.Add(30, "adult");
              
              
              // Now, let's say we need to translate those text labels
              // into integer symbols. Let's use a Codification filter:
              
              Codification codebook = new Codification(table);
              
              
              // After that, we can use the codebook to "translate"
              // the text labels into discrete symbols, such as:
              
              int a = codebook.Translate("Label", "child"); // returns 0
              int b = codebook.Translate("Label", "adult"); // returns 1
              int c = codebook.Translate("Label", "elder"); // returns 2
              
              // We can also do the reverse:
              string labela = codebook.Translate("Label", 0); // returns "child"
              string labelb = codebook.Translate("Label", 1); // returns "adult"
              string labelc = codebook.Translate("Label", 2); // returns "elder"
            </code>
            
            <para>
              After we have created the codebook, we can use it to feed data with
              categorical variables to method which would otherwise not know how
              to handle text labels data. Continuing with our example, the next
              code section shows how to convert an entire data table into a numerical
              matrix. </para>
            
            <code>
              // We can process an entire data table at once:
              DataTable result = codebook.Apply(table);
              
              // The resulting table can be transformed to jagged array:
              double[][] matrix = Matrix.ToArray(result);
              
              // and the resulting matrix will be given by
              // new double[][] 
              // {
              //     new double[] { 10, 0 },
              //     new double[] {  7, 0 },
              //     new double[] {  4, 0 },
              //     new double[] { 21, 1 },
              //     new double[] { 27, 1 },
              //     new double[] { 12, 0 },
              //     new double[] { 79, 2 },
              //     new double[] { 40, 1 },
              //     new double[] { 30, 1 } 
              // };
              
              // PS: the string representation for the matrix above can be obtained by calling
              string str = matrix.ToString(CSharpJaggedMatrixFormatProvider.InvariantCulture);
            </code>
            
            <para>
              Finally, by expressing our data in terms of a simple numerical
              matrix we will be able to feed it to any machine learning algorithm.
              The following code section shows how to create a <see cref="T:Accord.Statistics.Kernels.Linear">
              linear</see> multi-class Support Vector Machine to classify ages into any
              of the previously considered text labels ("child", "adult" or "elder").</para>
            
            <code>
              // Now we will be able to feed this matrix to any machine learning
              // algorithm without having to worry about text labels in our data:
              
              // Use the first column as input and the second column a output:
              
              double[][] inputs = matrix.GetColumns(0);      // Age column
              int[] outputs = matrix.GetColumn(1).ToInt32(); // Label column
              
              
              // Create a multi-class SVM for one input (Age) and three classes (Label)
              var machine = new MulticlassSupportVectorMachine(inputs: 1, classes: 3);
              
              // Create a Multi-class learning algorithm for the machine
              var teacher = new MulticlassSupportVectorLearning(machine, inputs, outputs);
              
              // Configure the learning algorithm to use SMO to train the
              //  underlying SVMs in each of the binary class subproblems.
              teacher.Algorithm = (svm, classInputs, classOutputs, i, j) =&gt;
                  new SequentialMinimalOptimization(svm, classInputs, classOutputs);
              
              // Run the learning algorithm
              double error = teacher.Run(); // error will be zero
              
              
              // After we have learned the machine, we can use it to classify
              // new data points, and use the codebook to translate the machine
              // outputs to the original text labels:
              
              string result1 = codebook.Translate("Label", machine.Compute(10)); // child
              string result2 = codebook.Translate("Label", machine.Compute(40)); // adult
              string result3 = codebook.Translate("Label", machine.Compute(70)); // elder
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Filters.Normalization"/>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.#ctor">
            <summary>
              Creates a new Codification Filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.#ctor(System.Data.DataTable)">
            <summary>
              Creates a new Codification Filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.#ctor(System.Data.DataTable,System.String[])">
            <summary>
              Creates a new Codification Filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.#ctor(System.String,System.String[])">
            <summary>
              Creates a new Codification Filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.#ctor(System.String[],System.String[][])">
            <summary>
              Creates a new Codification Filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.#ctor(System.String,System.String[][])">
            <summary>
              Creates a new Codification Filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Translate(System.String,System.String)">
            <summary>
              Translates a value of a given variable
              into its integer (codeword) representation.
            </summary>
            
            <param name="columnName">The name of the variable's data column.</param>
            <param name="value">The value to be translated.</param>
            
            <returns>An integer which uniquely identifies the given value
            for the given variable.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Translate(System.String[])">
            <summary>
              Translates an array of values into their
              integer representation, assuming values
              are given in original order of columns.
            </summary>
            
            <param name="data">The values to be translated.</param>
            
            <returns>An array of integers in which each value
            uniquely identifies the given value for each of
            the variables.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Translate(System.Data.DataRow,System.String[])">
            <summary>
              Translates an array of values into their
              integer representation, assuming values
              are given in original order of columns.
            </summary>
            
            <param name="row">A <see cref="T:System.Data.DataRow"/> containing the values to be translated.</param>
            <param name="columnNames">The columns of the <paramref name="row"/> containing the
            values to be translated.</param>
            
            <returns>An array of integers in which each value
            uniquely identifies the given value for each of
            the variables.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Translate(System.String[],System.String[])">
            <summary>
              Translates a value of the given variables
              into their integer (codeword) representation.
            </summary>
            
            <param name="columnNames">The names of the variable's data column.</param>
            <param name="values">The values to be translated.</param>
            
            <returns>An array of integers in which each integer
            uniquely identifies the given value for the given 
            variables.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Translate(System.String,System.String[])">
            <summary>
              Translates a value of the given variables
              into their integer (codeword) representation.
            </summary>
            
            <param name="columnName">The variable name.</param>
            <param name="values">The values to be translated.</param>
            
            <returns>An array of integers in which each integer
            uniquely identifies the given value for the given 
            variables.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Translate(System.String,System.String[][])">
            <summary>
              Translates a value of the given variables
              into their integer (codeword) representation.
            </summary>
            
            <param name="columnName">The variable name.</param>
            <param name="values">The values to be translated.</param>
            
            <returns>An array of integers in which each integer
            uniquely identifies the given value for the given 
            variables.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Translate(System.String,System.Int32)">
            <summary>
              Translates an integer (codeword) representation of
              the value of a given variable into its original
              value.
            </summary>
            
            <param name="columnName">The variable name.</param>
            <param name="codeword">The codeword to be translated.</param>
            
            <returns>The original meaning of the given codeword.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Translate(System.String,System.Int32[])">
            <summary>
              Translates an integer (codeword) representation of
              the value of a given variable into its original
              value.
            </summary>
            
            <param name="columnName">The name of the variable's data column.</param>
            <param name="codewords">The codewords to be translated.</param>
            
            <returns>The original meaning of the given codeword.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Translate(System.String[],System.Int32[])">
            <summary>
              Translates the integer (codeword) representations of
              the values of the given variables into their original
              values.
            </summary>
            
            <param name="columnNames">The name of the variables' columns.</param>
            <param name="codewords">The codewords to be translated.</param>
            
            <returns>The original meaning of the given codewords.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Detect(System.Data.DataTable,System.String[])">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary> 
             
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary> 
             
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Detect(System.String,System.String[][])">
            <summary>
              Auto detects the filter options by analyzing a set of string labels.
            </summary>
            
            <param name="columnName">The variable name.</param>
            <param name="values">A set of values that this variable can assume.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Detect(System.String[],System.String[][])">
            <summary>
              Auto detects the filter options by analyzing a set of string labels.
            </summary>
            
            <param name="columnNames">The variable names.</param>
            <param name="values">A set of values that those variable can assume.
              The first element of the array is assumed to be related to the first
              <paramref name="columnNames">column name</paramref> parameter.</param>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Codification.Options">
            <summary>
              Options for processing a column.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Options.Remap(System.String,System.Int32)">
            <summary>
              Forces the given key to have a specific symbol value.
            </summary>
            
            <param name="key">The key.</param>
            <param name="value">The value that should be associated with this key.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Options.#ctor(System.String)">
            <summary>
              Constructs a new Options object for the given column.
            </summary>
            
            <param name="name">
              The name of the column to create this options for.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Options.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
              Constructs a new Options object for the given column.
            </summary>
            
            <param name="name">
              The name of the column to create this options for.
            </param>
            
            <param name="map">The initial mapping for this column.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Codification.Options.#ctor">
            <summary>
              Constructs a new Options object.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Codification.Options.Mapping">
            <summary>
              Gets or sets the label mapping for translating
              integer labels to the original string labels.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Codification.Options.Symbols">
            <summary>
              Gets the number of symbols used to code this variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Codification.Options.VariableType">
            <summary>
              Gets the codification type that should be used for this variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Codification.Options.Values">
            <summary>
              Gets the values associated with each symbol, in the order of the symbols.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Discretization">
            <summary>
              Value discretization preprocessing filter.
            </summary>
            
            <remarks>
              This filter converts double or decimal values with an fractional
              part to the nearest possible integer according to a given threshold
              and a rounding rule.</remarks>
            
            <example>
            <code>
            // Show the start data
            DataGridBox.Show(table);
            </code>
            
            <img src="..\images\filters\input-table.png" /> 
            
            <code>
            // Create a new data projection (column) filter
            var filter = new Discretization("Cost (M)");
            
            // Apply the filter and get the result
            DataTable result = filter.Apply(table);
            
            // Show it
            DataGridBox.Show(result);
            </code>
            
            <img src="..\images\filters\output-discretization.png" /> 
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Discretization.#ctor">
            <summary>
              Creates a new Discretization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Discretization.#ctor(System.String[])">
            <summary>
              Creates a new Discretization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Discretization.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Discretization.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary> 
            
        </member>
        <member name="T:Accord.Statistics.Filters.Discretization.Options">
            <summary>
              Options for the discretization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Discretization.Options.#ctor(System.String)">
            <summary>
              Constructs a new Options class for the discretization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Discretization.Options.#ctor">
            <summary>
              Constructs a new Options object.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Discretization.Options.Threshold">
            <summary>
              Gets or sets the threshold for the discretization filter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Discretization.Options.Symmetric">
            <summary>
              Gets or sets whether the discretization threshold is symmetric.
            </summary>
            
            <remarks>
            <para>
              If a symmetric threshold of 0.4 is used, for example, a real value of
              0.5 will be rounded to 1.0 and a real value of -0.5 will be rounded to
              -1.0. </para>
            <para>
              If a non-symmetric threshold of 0.4 is used, a real value of 0.5
              will be rounded towards 1.0, but a real value of -0.5 will be rounded
              to 0.0 (because |-0.5| is higher than the threshold of 0.4).</para>
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Filters.FiltersSequence">
            <summary>
              Sequence of table processing filters.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.FiltersSequence.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Filters.FiltersSequence"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.FiltersSequence.#ctor(Accord.Statistics.Filters.IFilter[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Filters.FiltersSequence"/> class.
            </summary>
            
            <param name="filters">Sequence of filters to apply.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.FiltersSequence.Apply(System.Data.DataTable)">
            <summary>
              Applies the sequence of filters to a given table.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Filters.Normalization">
            <summary>
              Data normalization preprocessing filter.
            </summary>
            
            <para>
              The normalization filter is able to transform numerical data into
              Z-Scores, subtracting the mean for each variable and dividing by
              their standard deviation. The filter is able to distinguish
              numerical columns automatically, leaving other columns unaffected.
              It is also possible to control which columns should be processed
              by the filter.</para>
            
            <example>
            <para>
              Suppose we have a data table relating the age of a person and its 
              categorical classification, as in "child", "adult" or "elder".
              The normalization filter can be used to transform the "Age" column
              into Z-scores, as shown below:</para>
              
            <code>
              // Create the aforementioned sample table
              DataTable table = new DataTable("Sample data");
              table.Columns.Add("Age", typeof(double));
              table.Columns.Add("Label", typeof(string));
              
              //            age   label
              table.Rows.Add(10, "child");
              table.Rows.Add(07, "child");
              table.Rows.Add(04, "child");
              table.Rows.Add(21, "adult");
              table.Rows.Add(27, "adult");
              table.Rows.Add(12, "child");
              table.Rows.Add(79, "elder");
              table.Rows.Add(40, "adult");
              table.Rows.Add(30, "adult");
              
              // The filter will ignore non-real (continuous) data
              Normalization normalization = new Normalization(table);
              
              double mean = normalization["Age"].Mean;              // 25.55
              double sdev = normalization["Age"].StandardDeviation; // 23.29
              
              // Now we can process another table at once:
              DataTable result = normalization.Apply(table);
              
              // The result will be a table with the same columns, but
              // in which any column named "Age" will have been normalized
              // using the previously detected mean and standard deviation:
              
              DataGridBox.Show(result);
            </code>
            
            <para>
              The resulting data is shown below:</para>
            
              <img src="..\images\normalization-filter.png"/>
            
            </example>
            
            <seealso cref="T:Accord.Statistics.Filters.Codification"/>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Normalization.#ctor">
            <summary>
              Creates a new data normalization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Normalization.#ctor(System.Data.DataTable)">
            <summary>
              Creates a new data normalization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Normalization.#ctor(System.String[])">
            <summary>
              Creates a new data normalization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Normalization.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Normalization.Apply(System.Double[][])">
            <summary>
              Applies the Filter to a <see cref="T:System.Data.DataTable"/>.
            </summary>
            
            <param name="data">The source <see cref="T:System.Data.DataTable"/>.</param>
            
            <returns>The processed <see cref="T:System.Data.DataTable"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Normalization.ApplyInPlace(System.Double[][])">
            <summary>
              Applies the Filter to a <see cref="T:System.Data.DataTable"/>.
            </summary>
            
            <param name="data">The source <see cref="T:System.Data.DataTable"/>.</param>
            
            <returns>The processed <see cref="T:System.Data.DataTable"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Normalization.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary>     
            
        </member>
        <member name="M:Accord.Statistics.Filters.Normalization.Detect(System.Double[][])">
            <summary>
              Auto detects the filter options by analyzing a given matrix.
            </summary>     
            
        </member>
        <member name="T:Accord.Statistics.Filters.Normalization.Options">
             <summary>
               Options for normalizing a column.
             </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Normalization.Options.#ctor">
            <summary>
              Constructs a new Options object.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.Normalization.Options.#ctor(System.String)">
            <summary>
              Constructs a new Options object for the given column.
            </summary>
            
            <param name="name">
              The name of the column to create this options for.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Normalization.Options.#ctor(System.String,System.Double,System.Double)">
            <summary>
              Constructs a new Options object for the given column.
            </summary>
            
            <param name="name">
              The name of the column to create this options for.
            </param>
            
            <param name="mean">The mean value for normalization.</param>
            <param name="standardDeviation">The standard deviation value for standardization.</param>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Normalization.Options.Mean">
            <summary>
              Gets or sets the mean of the data contained in the column.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.Normalization.Options.StandardDeviation">
            <summary>
              Gets or sets the standard deviation of the data contained in the column.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.Normalization.Options.Standardize">
            <summary>
              Gets or sets if the column's data should be standardized to Z-Scores.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Filters.PrincipalComponentProjection">
            <summary>
              Principal component projection filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.PrincipalComponentProjection.#ctor">
            <summary>
              Creates a new Principal Component Projection filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.PrincipalComponentProjection.#ctor(System.String[])">
            <summary>
              Creates a new data normalization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.PrincipalComponentProjection.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the filter.
            </summary>
            
            <param name="data">The data.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.PrincipalComponentProjection.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.PrincipalComponentProjection.Analysis">
            <summary>
              Gets or sets the analysis associated with the filter.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.PrincipalComponentProjection.Options">
             <summary>
               Options for normalizing a column.
             </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.PrincipalComponentProjection.Options.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Filters.PrincipalComponentProjection.Options"/> class.
            </summary>
            
            <param name="columnName">Name of the column.</param>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Projection">
            <summary>
              Relational-algebra projection filter.
            </summary>
            
            <remarks>
              This filter is able to selectively remove columns from tables, and keep
              only the columns of interest.
            </remarks>
            
            <example>
            <code>
            // Show the start data
            DataGridBox.Show(table);
            </code>
            
            <img src="..\images\filters\input-table.png" /> 
            
            <code>
            // Create a new data projection (column) filter
            var filter = new Projection("Floors", "Finished");
            
            // Apply the filter and get the result
            DataTable result = filter.Apply(table);
            
            // Show it
            DataGridBox.Show(result);
            </code>
            
            <img src="..\images\filters\output-projection.png" /> 
            
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Projection.#ctor(System.String[])">
            <summary>
              Creates a new projection filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Projection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Creates a new projection filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Projection.#ctor">
            <summary>
              Creates a new projection filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Projection.Apply(System.Data.DataTable)">
            <summary>
              Applies the filter to the DataTable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Projection.Columns">
            <summary>
              List of columns to keep in the projection.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.LinearScaling">
            <summary>
              Linear Scaling Filter
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScaling.#ctor">
            <summary>
              Creates a new Linear Scaling Filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScaling.#ctor(System.String[])">
            <summary>
              Creates a new Linear Scaling Filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScaling.#ctor(System.Data.DataTable)">
            <summary>
              Creates a new Linear Scaling Filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScaling.#ctor(System.Data.DataTable,System.String[])">
            <summary>
              Creates a new Linear Scaling Filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScaling.ProcessFilter(System.Data.DataTable)">
            <summary>
              Applies the filter to the DataTable.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScaling.Detect(System.Data.DataTable,System.String[])">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary>  
            
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScaling.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary>  
            
        </member>
        <member name="T:Accord.Statistics.Filters.LinearScaling.Options">
            <summary>
              Options for the Linear Scaling filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScaling.Options.#ctor(System.String)">
            <summary>
              Creates a new column options.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScaling.Options.#ctor">
            <summary>
              Constructs a new Options object.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.LinearScaling.Options.SourceRange">
            <summary>
              Range of the input values
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.LinearScaling.Options.OutputRange">
            <summary>
              Target range of the output values after scaling.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.Selection">
            <summary>
              Relational-algebra selection filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Selection.#ctor(System.String,System.String)">
            <summary>
              Constructs a new Selection Filter.
            </summary>
            
            <param name="expression">The filtering criteria.</param>
            <param name="orderBy">The desired sort order.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Selection.#ctor(System.String)">
            <summary>
              Constructs a new Selection Filter.
            </summary>
            
            <param name="expression">The filtering criteria.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Selection.#ctor">
            <summary>
              Constructs a new Selection Filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.Selection.Apply(System.Data.DataTable)">
            <summary>
              Applies the filter to the current data.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Selection.Expression">
            <summary>
              Gets or sets the eSQL filter expression for the filter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.Selection.OrderBy">
            <summary>
              Gets or sets the ordering to apply for the filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Proportions(System.Int32[],System.Int32[])">
            <summary>
              Calculates the prevalence of a class for each variable.
            </summary>
            
            <param name="positives">An array of counts detailing the occurrence of the first class.</param>
            <param name="negatives">An array of counts detailing the occurrence of the second class.</param>
            
            <returns>An array containing the proportion of the first class over the total of occurrences.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Proportions(System.Int32[][],System.Int32,System.Int32)">
            <summary>
              Calculates the prevalence of a class.
            </summary>
            
            <param name="data">A matrix containing counted, grouped data.</param>
            <param name="positiveColumn">The index for the column which contains counts for occurrence of the first class.</param>
            <param name="negativeColumn">The index for the column which contains counts for occurrence of the second class.</param>
            
            <returns>An array containing the proportion of the first class over the total of occurrences.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Group(System.Int32[][],System.Int32,System.Int32)">
            <summary>
              Groups the occurrences contained in data matrix of binary (dichotomous) data.
            </summary>
            
            <param name="data">A data matrix containing at least a column of binary data.</param>
            <param name="labelColumn">Index of the column which contains the group label name.</param>
            <param name="dataColumn">Index of the column which contains the binary [0,1] data.</param>
            
            <returns>
               A matrix containing the group label in the first column, the number of occurrences of the first class
               in the second column and the number of occurrences of the second class in the third column.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Group``1(``0[],System.Int32[])">
            <summary>
              Divides values into groups given a vector 
              containing the group labels for every value.
            </summary>
            
            <typeparam name="T">The type of the values.</typeparam>
            <param name="values">The values to be separated into groups.</param>
            <param name="labels">
              A vector containing the class label associated with each of the 
              values. The labels must begin on 0 and its maximum value should
              be the number of groups - 1.</param>
            
            <returns>The original values divided into groups.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Group``1(``0[],System.Int32[],System.Int32)">
            <summary>
              Divides values into groups given a vector 
              containing the group labels for every value.
            </summary>
            
            <typeparam name="T">The type of the values.</typeparam>
            <param name="values">The values to be separated into groups.</param>
            <param name="labels">
              A vector containing the class label associated with each of the 
              values. The labels must begin on 0 and its maximum value should
              be the number of groups - 1.</param>
            <param name="groups">The number of groups.</param>
            
            <returns>The original values divided into groups.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Expand(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
              Extends a grouped data into a full observation matrix.
            </summary>
            
            <param name="data">The group labels.</param>
            <param name="positives">
              An array containing he occurrence of the positive class
              for each of the groups.</param>
            <param name="negatives">
              An array containing he occurrence of the negative class
              for each of the groups.</param>
              
            <returns>A full sized observation matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Expand(System.Int32[][],System.Int32,System.Int32,System.Int32)">
            <summary>
              Expands a grouped data into a full observation matrix.
            </summary>
            
            <param name="data">The grouped data matrix.</param>
            <param name="labelColumn">Index of the column which contains the labels
            in the grouped data matrix. </param>
            <param name="positiveColumn">Index of the column which contains
              the occurrences for the first class.</param>
            <param name="negativeColumn">Index of the column which contains
              the occurrences for the second class.</param>
              
            <returns>A full sized observation matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Expand(System.Int32[])">
            <summary>
              Expands a grouped data into a full observation matrix.
            </summary>
            
            <param name="labels">The class labels.</param>
            
            <returns>A jagged matrix where each row corresponds to each element 
              given in the <paramref name="labels"/> parameter, and each row has
              the same length as the number of <paramref name="labels"/> in the
              problem. Each row contains the value 1 on the position corresponding
              to the label index.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Expand(System.Int32[],System.Double,System.Double)">
            <summary>
              Expands a grouped data into a full observation matrix.
            </summary>
            
            <param name="labels">The class labels.</param>
            <param name="negative">The negative value to indicate the absence of the class.</param>
            <param name="positive">The positive value to indicate the presence of the class.</param>
            
            <returns>A jagged matrix where each row corresponds to each element 
              given in the <paramref name="labels"/> parameter, and each row has
              the same length as the number of <paramref name="labels"/> in the
              problem. Each row contains the positive value on the position corresponding
              to the label index, and the negative value on all others.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Expand(System.Int32[],System.Int32)">
            <summary>
              Expands a grouped data into a full observation matrix.
            </summary>
            
            <param name="labels">The class labels.</param>
            <param name="classes">The number of classes.</param>
            
            <returns>A jagged matrix where each row corresponds to each element 
              given in the <paramref name="labels"/> parameter, and each row has
              the same length as the number of <paramref name="classes"/> in the
              problem. Each row contains the positive value on the position corresponding
              to the label index, and the negative value on all others.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Expand(System.Int32[],System.Int32,System.Double,System.Double)">
            <summary>
              Expands a grouped data into a full observation matrix.
            </summary>
            
            <param name="labels">The class labels.</param>
            <param name="classes">The number of classes.</param>
            <param name="negative">The negative value to indicate the absence of the class.</param>
            <param name="positive">The positive value to indicate the presence of the class.</param>
            
            <returns>A jagged matrix where each row corresponds to each element 
              given in the <paramref name="labels"/> parameter, and each row has
              the same length as the number of <paramref name="classes"/> in the
              problem. Each row contains the value 1 on the position corresponding
              to the label index.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Random(System.Int32,System.Int32)">
            <summary>
              Returns a random group assignment for a sample.
            </summary>
            
            <param name="size">The sample size.</param>
            <param name="groups">The number of groups.</param>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Random(System.Int32,System.Double)">
            <summary>
              Returns a random group assignment for a sample
              into two mutually exclusive groups.
            </summary>
            
            <param name="size">The sample size.</param>
            <param name="proportion">The proportion of samples between the groups.</param>
            
        </member>
        <member name="M:Accord.Statistics.Groups.Random(System.Int32[],System.Int32,System.Int32)">
            <summary>
              Returns a random group assignment for a sample, making
              sure different class labels are distributed evenly among
              the groups.
            </summary>
            
            <param name="labels">A vector containing class labels.</param>
            <param name="classes">The number of different classes in <paramref name="labels"/>.</param>
            <param name="groups">The number of groups.</param>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Additive">
            <summary>
              Additive combination of kernels.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.KernelBase">
            <summary>
              Base class for kernel functions. This class provides automatic
              distance calculations for classes that do not provide optimized
              implementations.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.IDistance">
             <summary>
               Kernel space distance interface for kernel functions.
             </summary>
             
             <seealso cref="T:Accord.Statistics.Kernels.IKernel"/>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.IKernel">
            <summary>
              Kernel function interface.
            </summary>
            
            <remarks>
            <para>
              In Machine Learning and statistics, a Kernel is a function that returns
              the value of the dot product between the images of the two arguments.</para>
              
            <para>  <c>k(x,y) = ‹S(x),S(y)›</c></para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://www.support-vector.net/icml-tutorial.pdf">
                http://www.support-vector.net/icml-tutorial.pdf </a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.IKernel.Function(System.Double[],System.Double[])">
            <summary>
              The kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.IDistance.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in feature space
              between two points given in input space.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Squared distance between <c>x</c> and <c>y</c> in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.KernelBase.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in feature space
              between two points given in input space.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>
              Squared distance between <c>x</c> and <c>y</c> in feature (kernel) space.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.KernelBase.Function(System.Double[],System.Double[])">
            <summary>
              The kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>
              Dot product in feature (kernel) space.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Additive.#ctor(Accord.Statistics.Kernels.IKernel[])">
            <summary>
              Constructs a new additive kernel.
            </summary>
            
            <param name="kernels">Kernels to combine.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Additive.#ctor(Accord.Statistics.Kernels.IKernel[],System.Double[])">
            <summary>
              Constructs a new additive kernel.
            </summary>
            
            <param name="kernels">Kernels to combine.</param>
            
            <param name="weights">
              Weight values for each of the kernels.
              Default is to assign equal weights.</param>
              
        </member>
        <member name="M:Accord.Statistics.Kernels.Additive.Function(System.Double[],System.Double[])">
            <summary>
              Additive Kernel Combination function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Additive.Kernels">
            <summary>
              Gets the combination of kernels to use.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Additive.Weights">
            <summary>
              Gets the weight array to use in the weighted kernel sum.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Anova">
            <summary>
              ANOVA (ANalysis Of VAriance) Kernel.
            </summary>
            
            <remarks>
              The ANOVA kernel is a graph kernel, which can be
              computed using dynamic programming tables.
              
              References:
              - http://www.cse.ohio-state.edu/mlss09/mlss09_talks/1.june-MON/jst_tutorial.pdf
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Anova.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new ANOVA Kernel.
            </summary>
            
            <param name="vectorLength">Length of the input vector.</param>
            <param name="subsequenceLength">Length of the subsequences for the ANOVA decomposition.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Anova.Function(System.Double[],System.Double[])">
            <summary>
              ANOVA Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.IRadialBasisKernel">
            <summary>
              Interface for Radial Basis Function kernels.
            </summary>
            
            <remarks>
            <para>
              A radial basis function (RBF) is a real-valued function whose value depends only 
              on the distance from the origin, so that <c>ϕ(x) = ϕ(||x||)</c>; or alternatively 
              on the distance from some other point <c>c</c>, called a center, so that 
              <c>ϕ(x,c) = ϕ(||x−c||)</c>. Any function ϕ that satisfies the property 
              <c>ϕ(x) = ϕ(||x||)</c> is a radial function. The norm is usually Euclidean distance,
              although other distance functions are also possible. </para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia, The Free Encyclopedia. Radial basis functions. Available on:
                  https://en.wikipedia.org/wiki/Radial_basis_function </description></item>
               </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.IRadialBasisKernel.Function(System.Double)">
            <summary>
              The kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> between two vectors in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.IEstimable">
             <summary>
               Interface for <see cref="T:Accord.Statistics.Kernels.IKernel">kernel functions</see> 
               with support for automatic parameter estimation.
             </summary>
             
             
             <seealso cref="T:Accord.Statistics.Kernels.IKernel"/>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.IEstimable.Estimate(System.Double[][])">
            <summary>
              Estimates kernel parameters from the data.
            </summary>
            
            <param name="inputs">The input data.</param>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.ITransform">
             <summary>
               Common interface for kernel functions that can explicitly 
               project input points into the kernel feature space.
             </summary>
             
             <seealso cref="T:Accord.Statistics.Kernels.IKernel"/>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.ITransform.Transform(System.Double[])">
            <summary>
              Projects an input point into feature space.
            </summary>
            
            <param name="input">The input point to be projected into feature space.</param>
            
            <returns>
              The feature space representation of the given <paramref name="input"/> point.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Bessel">
            <summary>
              Bessel Kernel.
            </summary>
            
            <remarks>
              The Bessel kernel is well known in the theory of function spaces 
              of fractional smoothness. 
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Bessel.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a new Bessel Kernel.
            </summary>
            
            <param name="order">The order for the Bessel function.</param>
            <param name="sigma">The value for sigma.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Bessel.Function(System.Double[],System.Double[])">
            <summary>
              Bessel Kernel Function
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Bessel.Function(System.Double)">
            <summary>
              Bessel Kernel Function
            </summary>
            
            <param name="z">Distance <c>z</c> between two vectors in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Bessel.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Bessel.Order">
            <summary>
              Gets or sets the order of the Bessel function.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Bessel.Sigma">
            <summary>
              Gets or sets the sigma constant for this kernel.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.BSpline">
            <summary>
              B-Spline Kernel.
            </summary>
            
            <remarks>
            <para>
              The B-Spline kernel is defined only in the interval [−1, 1]. It is 
              also a member of the Radial Basis Functions family of kernels.</para>
            <para>  
              References:
              <list type="bullet">
                <item><description>
                  Bart Hamers, Kernel Models for Large Scale Applications. Doctoral thesis.
                  Available on: ftp://ftp.esat.kuleuven.ac.be/pub/SISTA/hamers/PhD_bhamers.pdf
                </description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.BSpline.#ctor(System.Int32)">
            <summary>
              Constructs a new B-Spline Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.BSpline.Function(System.Double[],System.Double[])">
            <summary>
              B-Spline Kernel Function
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.BSpline.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.BSpline.Order">
            <summary>
              Gets or sets the B-Spline order.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Cauchy">
            <summary>
              Cauchy Kernel.
            </summary>
            
            <remarks>
              The Cauchy kernel comes from the Cauchy distribution (Basak, 2008). It is a
              long-tailed kernel and can be used to give long-range influence and sensitivity
              over the high dimension space.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Cauchy.#ctor(System.Double)">
            <summary>
              Constructs a new Cauchy Kernel.
            </summary>
            
            <param name="sigma">The value for sigma.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Cauchy.Function(System.Double[],System.Double[])">
            <summary>
              Cauchy Kernel Function
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Cauchy.Function(System.Double)">
            <summary>
              Cauchy Kernel Function
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Cauchy.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Cauchy.Sigma">
            <summary>
              Gets or sets the kernel's sigma value.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.ChiSquare">
            <summary>
              Chi-Square Kernel.
            </summary>
            
            <remarks>
              The Chi-Square kernel comes from the Chi-Square distribution.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.ChiSquare.#ctor">
            <summary>
              Constructs a new Chi-Square kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.ChiSquare.Function(System.Double[],System.Double[])">
            <summary>
              Chi-Square Kernel Function
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.ChiSquare.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Circular">
            <summary>
              Circular Kernel.
            </summary>
            
            <remarks>
              The circular kernel comes from a statistics perspective. It is an example
              of an isotropic stationary kernel and is positive definite in R^2.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Circular.#ctor(System.Double)">
            <summary>
              Constructs a new Circular Kernel.
            </summary>
            
            <param name="sigma">Value for sigma.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Circular.Function(System.Double[],System.Double[])">
            <summary>
              Circular Kernel Function
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Circular.Function(System.Double)">
            <summary>
              Circular Kernel Function
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Circular.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Circular.Sigma">
            <summary>
              Gets or sets the kernel's sigma value.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Gaussian`1">
            <summary>
              Composite Gaussian Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian`1.#ctor(`0)">
            <summary>
              Constructs a new Gaussian Dynamic Time Warping Kernel
            </summary>
            
            <param name="innerKernel">The inner kernel function of the composite kernel.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian`1.#ctor(`0,System.Double)">
            <summary>
              Constructs a new Gaussian Dynamic Time Warping Kernel
            </summary>
            
            <param name="innerKernel">The inner kernel function of the composite kernel.</param>
            <param name="sigma">The kernel's sigma parameter.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian`1.Function(System.Double[],System.Double[])">
            <summary>
              Gaussian Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian`1.Accord#Statistics#Kernels#IEstimable#Estimate(System.Double[][])">
            <summary>
              Estimates kernel parameters from the data.
            </summary>
            
            <param name="inputs">The input data.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian`1.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Gaussian`1.Sigma">
            <summary>
              Gets or sets the sigma value for the kernel. When setting
              sigma, gamma gets updated accordingly (gamma = 0.5/sigma^2).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Gaussian`1.SigmaSquared">
            <summary>
              Gets or sets the sigma² value for the kernel. When setting
              sigma², gamma gets updated accordingly (gamma = 0.5/sigma²).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Gaussian`1.Gamma">
            <summary>
              Gets or sets the gamma value for the kernel. When setting
              gamma, sigma gets updated accordingly (gamma = 0.5/sigma^2).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Pearson">
            <summary>
              Pearson VII universal kernel (PUK).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Pearson.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a new Pearson VII universal kernel.
            </summary>
            
            <param name="omega">The Pearson's omega parameter w. Default is 1.</param>
            <param name="sigma">The Pearson's sigma parameter s. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Pearson.#ctor">
            <summary>
              Constructs a new Pearson VII universal kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Pearson.Function(System.Double[],System.Double[])">
            <summary>
              Pearson Universal kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Pearson.Function(System.Double)">
            <summary>
              Pearson Universal function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Pearson.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Pearson.Omega">
            <summary>
              Gets or sets the kernel's parameter omega. Default is 1.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Pearson.Sigma">
            <summary>
              Gets or sets the kernel's parameter sigma. Default is 1.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Normalized`1">
            <summary>
              Normalized Kernel.
            </summary>
            
            <remarks>
              This kernel definition can be used to provide normalized versions
              of other kernel classes, such as the <see cref="T:Accord.Statistics.Kernels.Polynomial"/>. A
              normalized kernel will always produce distances between -1 and 1.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Normalized`1.#ctor(`0)">
            <summary>
              Constructs a new Cauchy Kernel.
            </summary>
            
            <param name="kernel">The kernel function to be normalized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Normalized`1.Function(System.Double[],System.Double[])">
            <summary>
              Normalized Kernel Function
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Normalized`1.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Normalized`1.Kernel">
            <summary>
              Gets or sets the inner kernel function 
              whose results should be normalized.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.InverseMultiquadric">
            <summary>
              Inverse Multiquadric Kernel.
            </summary>
            
            <remarks>
              The inverse multiquadric kernel is only conditionally positive definite.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.InverseMultiquadric.#ctor(System.Double)">
            <summary>
              Constructs a new Inverse Multiquadric Kernel.
            </summary>
            
            <param name="constant">The constant term theta.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.InverseMultiquadric.#ctor">
            <summary>
              Constructs a new Inverse Multiquadric Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.InverseMultiquadric.Function(System.Double[],System.Double[])">
            <summary>
              Inverse Multiquadric Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.InverseMultiquadric.Function(System.Double)">
            <summary>
              Inverse Multiquadric Kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.InverseMultiquadric.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.InverseMultiquadric.Constant">
            <summary>
              Gets or sets the kernel's constant value.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.NormalizedPolynomial">
            <summary>
              Normalized Polynomial Kernel. This class is equivalent to the
              Normalized&gt;Polynomial> kernel but has more efficient
              implementation.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.NormalizedPolynomial.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a new Normalized Polynomial kernel of a given degree.
            </summary>
            
            <param name="degree">The polynomial degree for this kernel.</param>
            <param name="constant">The polynomial constant for this kernel. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.NormalizedPolynomial.#ctor(System.Int32)">
            <summary>
              Constructs a new Normalized Polynomial kernel of a given degree.
            </summary>
            
            <param name="degree">The polynomial degree for this kernel.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.NormalizedPolynomial.Function(System.Double[],System.Double[])">
            <summary>
              Normalized polynomial kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.NormalizedPolynomial.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.NormalizedPolynomial.Degree">
            <summary>
              Gets or sets the kernel's polynomial degree.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.NormalizedPolynomial.Constant">
            <summary>
              Gets or sets the kernel's polynomial constant term.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.KernelFunctionCache">
            <summary>
              Value cache for kernel function evaluations.
            </summary>
            
            <remarks>
            <para>
              This class works as a least-recently-used cache for elements
              computed from a the kernel (Gram) matrix. Elements which have
              not been needed for some time are discarded from the cache;
              while elements which are constantly requested remains cached.</para>
              
            <para>
              The use of cache may speedup learning by a large factor; however
              the actual speedup may vary according to the choice of cache size.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.KernelFunctionCache.#ctor(Accord.Statistics.Kernels.IKernel,System.Double[][])">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Kernels.KernelFunctionCache"/>.
            </summary>
            
            <param name="kernel">The kernel function.</param>
            <param name="inputs">The inputs values.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.KernelFunctionCache.#ctor(Accord.Statistics.Kernels.IKernel,System.Double[][],System.Int32)">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Kernels.KernelFunctionCache"/>.
            </summary>
            
            <param name="kernel">The kernel function.</param>
            <param name="inputs">The inputs values.</param>
            <param name="cacheSize">
              The size for the cache, measured in number of 
              elements from the <paramref name="inputs"/> set.
              Default is to use all elements.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.KernelFunctionCache.GetOrCompute(System.Int32)">
            <summary>
              Attempts to retrieve the value of the kernel function
              from the diagonal of the kernel matrix. If the value
              is not available, it is immediately computed and inserted
              in the cache.
            </summary>
            
            <param name="i">Index of the point to compute.</param>
            
            <remarks>The result of the kernel function k(p[i], p[i]).</remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.KernelFunctionCache.GetOrCompute(System.Int32,System.Int32)">
            <summary>
              Attempts to retrieve the kernel function evaluated between point at index i
              and j. If it is not cached, it will be computed and the cache will be updated.
            </summary>
            
            <param name="i">The index of the first point <c>p</c> to compute.</param>
            <param name="j">The index of the second point <c>p</c> to compute.</param>
            
            <remarks>The result of the kernel function k(p[i], p[j]).</remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.KernelFunctionCache.Clear">
            <summary>
              Clears the cache.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.KernelFunctionCache.Reset">
            <summary>
              Resets cache statistics.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.KernelFunctionCache.GetIndexFromKey(System.Int32)">
            <summary>
              Gets the pair of indices associated with a given key.
            </summary>
            
            <param name="key">The key.</param>
            
            <returns>A pair of indices of indicating which
            element from the Kernel matrix is associated
            with the given key.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.KernelFunctionCache.GetKeyFromIndex(System.Int32,System.Int32)">
            <summary>
              Gets the key from the given indices.
            </summary>
            
            <param name="i">The index i.</param>
            <param name="j">The index j.</param>
            
            <returns>The key associated with the given indices.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.KernelFunctionCache.GetDataCache">
            <summary>
              Gets a copy of the data cache.
            </summary>
            
            <returns>A copy of the data cache.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.KernelFunctionCache.GetLeastRecentlyUsedList">
            <summary>
              Gets a copy of the Least Recently Used (LRU) List of
              Kernel Matrix elements. Elements on the start of the
              list have been used most; elements at the end are
              about to be discarded from the cache.
            </summary>
            
            <returns>The Least Recently Used list of kernel matrix elements.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.KernelFunctionCache.Size">
            <summary>
              Gets the size of the cache,
              measured in number of samples.
            </summary>
            
            <value>The size of this cache.</value>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.KernelFunctionCache.Hits">
            <summary>
              Gets the total number of cache hits.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.KernelFunctionCache.Misses">
            <summary>
              Gets the total number of cache misses.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.KernelFunctionCache.Usage">
            <summary>
              Gets the percentage of the cache currently in use.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.KernelFunctionCache.Item(System.Int32)">
            <summary>
              Attempts to retrieve the value of the kernel function
              from the diagonal of the kernel matrix. If the value
              is not available, it is immediately computed and inserted
              in the cache.
            </summary>
            
            <param name="i">Index of the point to compute.</param>
            
            <remarks>The result of the kernel function k(p[i], p[i]).</remarks>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.KernelFunctionCache.Item(System.Int32,System.Int32)">
            <summary>
              Attempts to retrieve the kernel function evaluated between point at index i
              and j. If it is not cached, it will be computed and the cache will be updated.
            </summary>
            
            <param name="i">The index of the first point <c>p</c> to compute.</param>
            <param name="j">The index of the second point <c>p</c> to compute.</param>
            
            <remarks>The result of the kernel function k(p[i], p[j]).</remarks>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Quadratic">
            <summary>
              Quadratic Kernel.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.IReverseDistance">
             <summary>
               Input space distance interface for kernel functions.
             </summary>
             
             <remarks>
               Kernels which implement this interface can be used to solve the pre-image
               problem in <see cref="T:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis">
               Kernel Principal Component Analysis</see> and other methods based in Multi-
               Dimensional Scaling.
             </remarks>
            
             <seealso cref="T:Accord.Statistics.Kernels.IKernel"/>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.IReverseDistance.ReverseDistance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in input space
              between two points given in feature space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            
            <returns>Squared distance between <c>x</c> and <c>y</c> in input space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Quadratic.#ctor(System.Double)">
            <summary>
              Constructs a new Quadratic kernel.
            </summary>
            
            <param name="constant">The polynomial constant for this kernel. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Quadratic.#ctor">
            <summary>
              Constructs a new Quadratic kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Quadratic.Function(System.Double[],System.Double[])">
            <summary>
              Quadratic kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Quadratic.Function(System.Double)">
            <summary>
              Quadratic kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Quadratic.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in input space
              between two points given in feature space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Quadratic.ReverseDistance(System.Double[],System.Double[])">
            <summary>
              Computes the distance in input space
              between two points given in feature space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Quadratic.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Quadratic.Transform(System.Double[])">
            <summary>
              Projects an input point into feature space.
            </summary>
            
            <param name="input">The input point to be projected into feature space.</param>
            
            <returns>
              The feature space representation of the given <paramref name="input"/> point.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Quadratic.Transform(System.Double[],System.Double)">
            <summary>
              Projects an input point into feature space.
            </summary>
            
            <param name="input">The input point to be projected into feature space.</param>
            <param name="constant">The <see cref="P:Accord.Statistics.Kernels.Quadratic.Constant"/> parameter of the kernel.</param>
            
            <returns>
              The feature space representation of the given <paramref name="input"/> point.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Quadratic.Constant">
            <summary>
              Gets or sets the kernel's polynomial constant term.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.SymmetricTriangle">
            <summary>
              Symmetric Triangle Kernel.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description>
                 Chaudhuri et al, A Comparative Study of Kernels for the Multi-class Support Vector
                 Machine, 2008. Available on: http://www.computer.org/portal/web/csdl/doi/10.1109/ICNC.2008.803 </description></item>
               </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.SymmetricTriangle.#ctor(System.Double)">
            <summary>
              Constructs a new Symmetric Triangle Kernel
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.SymmetricTriangle.Function(System.Double[],System.Double[])">
            <summary>
              Symmetric Triangle Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.SymmetricTriangle.Function(System.Double)">
            <summary>
              Symmetric Triangle Kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.SymmetricTriangle.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.SymmetricTriangle.Gamma">
            <summary>
              Gets or sets the gamma value for the kernel.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.SquaredSinc">
            <summary>
              Squared Sinc Kernel.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description>
                 Chaudhuri et al, A Comparative Study of Kernels for the Multi-class Support Vector
                 Machine, 2008. Available on: http://www.computer.org/portal/web/csdl/doi/10.1109/ICNC.2008.803 </description></item>
               </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.SquaredSinc.#ctor(System.Double)">
            <summary>
              Constructs a new Squared Sinc Kernel
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.SquaredSinc.Function(System.Double[],System.Double[])">
            <summary>
              Squared Sine Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.SquaredSinc.Function(System.Double)">
            <summary>
              Squared Sine Kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.SquaredSinc.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.SquaredSinc.Gamma">
            <summary>
              Gets or sets the gamma value for the kernel.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Custom">
            <summary>
              Custom Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Custom.#ctor(System.Func{System.Double[],System.Double[],System.Double})">
            <summary>
              Constructs a new Custom kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Custom.Function(System.Double[],System.Double[])">
            <summary>
              Custom kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Dirichlet">
            <summary>
              Dirichlet Kernel.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description>
                 A Tutorial on Support Vector Machines (1998). Available on: http://www.umiacs.umd.edu/~joseph/support-vector-machines4.pdf </description></item>
               </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Dirichlet.#ctor(System.Int32)">
            <summary>
              Constructs a new Dirichlet Kernel
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Dirichlet.Function(System.Double[],System.Double[])">
            <summary>
              Dirichlet Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Dirichlet.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Dirichlet.Dimension">
            <summary>
              Gets or sets the dimension for the kernel. 
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.DynamicTimeWarping">
             <summary>
               Dynamic Time Warping Sequence Kernel.
             </summary>
             
             <remarks>
             <para>
               The Dynamic Time Warping Sequence Kernel is a sequence kernel, accepting
               vector sequences of variable size as input. Despite the sequences being
               variable in size, the vectors contained in such sequences should have its
               size fixed and should be informed at the construction of this kernel.</para>
             <para>
               The conversion of the DTW global distance to a dot product uses a combination
               of a technique known as spherical normalization and the polynomial kernel. The
               degree of the polynomial kernel and the alpha for the spherical normalization
               should be given at the construction of the kernel. For more information,
               please see the referenced papers shown below.</para>
               
             <para>
               The use of a <see cref="T:Accord.Statistics.Kernels.KernelFunctionCache">cache</see> is highly advisable
               when using this kernel.</para>
               
             <para>
               <list type="bullet">
               References:
                 <item><description>
                 V. Wan, J. Carmichael; Polynomial Dynamic Time Warping Kernel Support
                 Vector Machines for Dysarthric Speech Recognition with Sparse Training
                 Data. Interspeech'2005 - Eurospeech - 9th European Conference on Speech
                 Communication and Technology. Lisboa, 2005.</description></item>
               </list></para>
             
             </remarks>
             
             <example>
             <para>
               The following example demonstrates how to create and learn a Support Vector
               Machine (SVM) to recognize sequences using the Dynamic Time Warping kernel.</para>
               
             <code>
             // Suppose you have sequences of multivariate observations, and that
             // those sequences could be of arbitrary length. On the other hand, 
             // each observation have a fixed, delimited number of dimensions.
             
             // In this example, we have sequences of 3-dimensional observations. 
             // Each sequence can have an arbitrary length, but each observation
             // will always have length 3:
             
             double[][][] sequences =
             {
                 new double[][] // first sequence
                 {
                     new double[] { 1, 1, 1 }, // first observation of the first sequence
                     new double[] { 1, 2, 1 }, // second observation of the first sequence
                     new double[] { 1, 4, 2 }, // third observation of the first sequence
                     new double[] { 2, 2, 2 }, // fourth observation of the first sequence
                 },
            
                 new double[][] // second sequence (note that this sequence has a different length)
                 {
                     new double[] { 1, 1, 1 }, // first observation of the second sequence
                     new double[] { 1, 5, 6 }, // second observation of the second sequence
                     new double[] { 2, 7, 1 }, // third observation of the second sequence
                 },
             
                 new double[][] // third sequence 
                 {
                     new double[] { 8, 2, 1 }, // first observation of the third sequence
                 },
             
                 new double[][] // fourth sequence 
                 {
                     new double[] { 8, 2, 5 }, // first observation of the fourth sequence
                     new double[] { 1, 5, 4 }, // second observation of the fourth sequence
                 }
             };
             
             // Now, we will also have different class labels associated which each 
             // sequence. We will assign -1 to sequences whose observations start 
             // with { 1, 1, 1 } and +1 to those that do not:
             
             int[] outputs =
             {
                 -1,-1,  // First two sequences are of class -1 (those start with {1,1,1})
                     1, 1,  // Last two sequences are of class +1  (don't start with {1,1,1})
             };
             
             // At this point, we will have to "flat" out the input sequences from double[][][]
             // to a double[][] so they can be properly understood by the SVMs. The problem is 
             // that, normally, SVMs usually expect the data to be comprised of fixed-length 
             // input vectors and associated class labels. But in this case, we will be feeding
             // them arbitrary-length sequences of input vectors and class labels associated with
             // each sequence, instead of each vector.
             
             double[][] inputs = new double[sequences.Length][];
             for (int i = 0; i &lt; sequences.Length; i++)
                 inputs[i] = Matrix.Concatenate(sequences[i]);
             
             
             // Now we have to setup the Dynamic Time Warping kernel. We will have to
             // inform the length of the fixed-length observations contained in each
             // arbitrary-length sequence:
             // 
             DynamicTimeWarping kernel = new DynamicTimeWarping(length: 3);
             
             // Now we can create the machine. When using variable-length
             // kernels, we will need to pass zero as the input length:
             var svm = new KernelSupportVectorMachine(kernel, inputs: 0);
             
             
             // Create the Sequential Minimal Optimization learning algorithm
             var smo = new SequentialMinimalOptimization(svm, inputs, outputs)
             {
                 Complexity = 1.5
             };
             
             // And start learning it!
             double error = smo.Run(); // error will be 0.0
             
             
             // At this point, we should have obtained an useful machine. Let's
             // see if it can understand a few examples it hasn't seem before:
             
             double[][] a = 
             { 
                 new double[] { 1, 1, 1 },
                 new double[] { 7, 2, 5 },
                 new double[] { 2, 5, 1 },
             };
             
             double[][] b =
             {
                 new double[] { 7, 5, 2 },
                 new double[] { 4, 2, 5 },
                 new double[] { 1, 1, 1 },
             };
             
             // Following the aforementioned logic, sequence (a) should be
             // classified as -1, and sequence (b) should be classified as +1.
             
             int resultA = System.Math.Sign(svm.Compute(Matrix.Concatenate(a))); // -1
             int resultB = System.Math.Sign(svm.Compute(Matrix.Concatenate(b))); // +1
             </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.#ctor(System.Int32)">
            <summary>
              Constructs a new Dynamic Time Warping kernel.
            </summary>
            
            <param name="length">
               The length of the feature vectors
               contained in each sequence.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a new Dynamic Time Warping kernel.
            </summary>
            
            <param name="length">
               The length of the feature vectors
               contained in each sequence.
            </param>
            
            <param name="alpha">
               The hypersphere ratio. Default value is 1.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.#ctor(System.Int32,System.Double,System.Int32)">
            <summary>
              Constructs a new Dynamic Time Warping kernel.
            </summary>
            
            <param name="length">
               The length of the feature vectors
               contained in each sequence.
            </param>
            
            <param name="alpha">
               The hypersphere ratio. Default value is 1.
            </param>
            
            <param name="degree">
               The degree of the kernel. Default value is 1 (linear kernel).
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.Function(System.Double[],System.Double[])">
            <summary>
              Dynamic Time Warping kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in feature space
              between two points given in input space.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>
              Squared distance between <c>x</c> and <c>y</c> in feature (kernel) space.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.D(Accord.Statistics.Kernels.DynamicTimeWarping.Locals,System.Double[],System.Double[])">
            <summary>
              Global distance D(X,Y) between two sequences of vectors.
            </summary>
            
            <param name="locals">The current thread local storage.</param>
            <param name="sequence1">A sequence of vectors.</param>
            <param name="sequence2">A sequence of vectors.</param>
            
            <returns>The global distance between X and Y.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.snorm(System.Double[])">
            <summary>
              Projects vectors from a sequence of vectors into
              a hypersphere, augmenting their size in one unit
              and normalizing them to be unit vectors.
            </summary>
            
            <param name="input">A sequence of vectors.</param>
            
            <returns>A sequence of vector projections.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, 
              releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.Finalize">
            <summary>
              Releases unmanaged resources and performs other cleanup operations 
              before the <see cref="T:Accord.Statistics.Kernels.DynamicTimeWarping"/> is reclaimed by garbage collection.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.Dispose(System.Boolean)">
             <summary>
               Releases unmanaged and - optionally - managed resources
             </summary>
             
             <param name="disposing"><c>true</c> to release both managed
             and unmanaged resources; <c>false</c> to release only unmanaged
             resources.</param>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.DynamicTimeWarping.Length">
            <summary>
              Gets or sets the length for the feature vectors
              contained in each sequence used by the kernel.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.DynamicTimeWarping.Alpha">
            <summary>
              Gets or sets the hypersphere ratio.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.DynamicTimeWarping.Degree">
            <summary>
              Gets or sets the polynomial degree for this kernel.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Gaussian">
            <summary>
              Gaussian Kernel.
            </summary>
            
            <remarks>
            <para>
              The Gaussian kernel requires tuning for the proper value of σ. Different approaches
              to this problem includes the use of brute force (i.e. using a grid-search algorithm)
              or a gradient ascent optimization.</para>
               
            <para>
              References:
              <list type="bullet">
                <item><description>
                 P. F. Evangelista, M. J. Embrechts, and B. K. Szymanski. Some Properties
                 of the Gaussian Kernel for One Class Learning. Available on: 
                 http://www.cs.rpi.edu/~szymansk/papers/icann07.pdf </description></item>
               </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.#ctor">
            <summary>
              Constructs a new Gaussian Kernel
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.#ctor(System.Double)">
            <summary>
              Constructs a new Gaussian Kernel
            </summary>
            
            <param name="sigma">The kernel's sigma parameter.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Function(System.Double[],System.Double[])">
            <summary>
              Gaussian Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Function(System.Double)">
            <summary>
              Gaussian Kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in feature space
              between two points given in input space.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Squared distance between <c>x</c> and <c>y</c> in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.ReverseDistance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in input space
              between two points given in feature space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            
            <returns>
              Squared distance between <c>x</c> and <c>y</c> in input space.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.ReverseDistance(System.Double)">
            <summary>
              Computes the distance in input space given
              a distance computed in feature space.
            </summary>
            
            <param name="df">Distance in feature space.</param>
            <returns>Distance in input space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Estimate(System.Double[][])">
            <summary>
              Estimate appropriate values for sigma given a data set.
            </summary>
            
            <remarks>
              This method uses a simple heuristic to obtain appropriate values
              for sigma in a radial basis function kernel. The heuristic is shown
              by Caputo, Sim, Furesjo and Smola, "Appearance-based object
              recognition using SVMs: which kernel should I use?", 2002.
            </remarks>
            
            <param name="inputs">The data set.</param>
            
            <returns>A Gaussian kernel initialized with an appropriate sigma value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Estimate(System.Double[][],AForge.DoubleRange@)">
            <summary>
              Estimate appropriate values for sigma given a data set.
            </summary>
            
            <remarks>
              This method uses a simple heuristic to obtain appropriate values
              for sigma in a radial basis function kernel. The heuristic is shown
              by Caputo, Sim, Furesjo and Smola, "Appearance-based object
              recognition using SVMs: which kernel should I use?", 2002.
            </remarks>
            
            <param name="inputs">The data set.</param>
            <param name="range">The range of suitable values for sigma.</param>
            
            <returns>A Gaussian kernel initialized with an appropriate sigma value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Estimate(System.Double[][],System.Int32)">
            <summary>
              Estimates appropriate values for sigma given a data set.
            </summary>
            
            <remarks>
              This method uses a simple heuristic to obtain appropriate values
              for sigma in a radial basis function kernel. The heuristic is shown
              by Caputo, Sim, Furesjo and Smola, "Appearance-based object
              recognition using SVMs: which kernel should I use?", 2002.
            </remarks>
            
            <param name="inputs">The data set.</param>
            <param name="samples">The number of random samples to analyze.</param>
            
            <returns>A Gaussian kernel initialized with an appropriate sigma value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Estimate(System.Double[][],System.Int32,AForge.DoubleRange@)">
            <summary>
              Estimates appropriate values for sigma given a data set.
            </summary>
            
            <remarks>
              This method uses a simple heuristic to obtain appropriate values
              for sigma in a radial basis function kernel. The heuristic is shown
              by Caputo, Sim, Furesjo and Smola, "Appearance-based object
              recognition using SVMs: which kernel should I use?", 2002.
            </remarks>
            
            <param name="inputs">The data set.</param>
            <param name="samples">The number of random samples to analyze.</param>
            <param name="range">The range of suitable values for sigma.</param>
            
            <returns>A Gaussian kernel initialized with an appropriate sigma value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Distances(System.Double[][],System.Int32)">
            <summary>
              Computes the set of all distances between 
              all points in a random subset of the data.
            </summary>
            
            <param name="inputs">The inputs points.</param>
            <param name="samples">The number of samples.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Accord#Statistics#Kernels#IEstimable#Estimate(System.Double[][])">
            <summary>
              Estimates kernel parameters from the data.
            </summary>
            
            <param name="inputs">The input data.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.OnSigmaChanging">
            <summary>
              Called when the value for any of the
              kernel's parameters has changed.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Estimate``1(``0,System.Double[][])">
            <summary>
              Estimate appropriate values for sigma given a data set.
            </summary>
            
            <remarks>
              This method uses a simple heuristic to obtain appropriate values
              for sigma in a radial basis function kernel. The heuristic is shown
              by Caputo, Sim, Furesjo and Smola, "Appearance-based object
              recognition using SVMs: which kernel should I use?", 2002.
            </remarks>
            
            <param name="kernel">The inner kernel.</param>
            <param name="inputs">The data set.</param>
            
            <returns>A Gaussian kernel initialized with an appropriate sigma value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Estimate``1(``0,System.Double[][],AForge.DoubleRange@)">
            <summary>
              Estimate appropriate values for sigma given a data set.
            </summary>
            
            <remarks>
              This method uses a simple heuristic to obtain appropriate values
              for sigma in a radial basis function kernel. The heuristic is shown
              by Caputo, Sim, Furesjo and Smola, "Appearance-based object
              recognition using SVMs: which kernel should I use?", 2002.
            </remarks>
            
            <param name="kernel">The inner kernel.</param>
            <param name="inputs">The data set.</param>
            <param name="range">The range of suitable values for sigma.</param>
            
            <returns>A Gaussian kernel initialized with an appropriate sigma value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Estimate``1(``0,System.Double[][],System.Int32)">
            <summary>
              Estimates appropriate values for sigma given a data set.
            </summary>
            
            <remarks>
              This method uses a simple heuristic to obtain appropriate values
              for sigma in a radial basis function kernel. The heuristic is shown
              by Caputo, Sim, Furesjo and Smola, "Appearance-based object
              recognition using SVMs: which kernel should I use?", 2002.
            </remarks>
            
            <param name="kernel">The inner kernel.</param>
            <param name="inputs">The data set.</param>
            <param name="samples">The number of random samples to analyze.</param>
            
            <returns>A Gaussian kernel initialized with an appropriate sigma value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Estimate``1(``0,System.Double[][],System.Int32,AForge.DoubleRange@)">
            <summary>
              Estimates appropriate values for sigma given a data set.
            </summary>
            
            <remarks>
              This method uses a simple heuristic to obtain appropriate values
              for sigma in a radial basis function kernel. The heuristic is shown
              by Caputo, Sim, Furesjo and Smola, "Appearance-based object
              recognition using SVMs: which kernel should I use?", 2002.
            </remarks>
            
            <param name="kernel">The inner kernel.</param>
            <param name="inputs">The data set.</param>
            <param name="samples">The number of random samples to analyze.</param>
            <param name="range">The range of suitable values for sigma.</param>
            
            <returns>A Gaussian kernel initialized with an appropriate sigma value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Distances``1(``0,System.Double[][],System.Int32)">
            <summary>
              Computes the set of all distances between 
              all points in a random subset of the data.
            </summary>
            
            <param name="kernel">The inner kernel.</param>
            <param name="inputs">The inputs points.</param>
            <param name="samples">The number of samples.</param>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Gaussian.Sigma">
            <summary>
              Gets or sets the sigma value for the kernel. When setting
              sigma, gamma gets updated accordingly (gamma = 0.5/sigma^2).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Gaussian.SigmaSquared">
            <summary>
              Gets or sets the sigma² value for the kernel. When setting
              sigma², gamma gets updated accordingly (gamma = 0.5/sigma²).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Gaussian.Gamma">
            <summary>
              Gets or sets the gamma value for the kernel. When setting
              gamma, sigma gets updated accordingly (gamma = 0.5/sigma^2).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.HistogramIntersection">
            <summary>
              Generalized Histogram Intersection Kernel.
            </summary>
            
            <remarks>
              The Generalized Histogram Intersection kernel is built based on the
              Histogram Intersection Kernel for image classification but applies
              in a much larger variety of contexts (Boughorbel, 2005).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.HistogramIntersection.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a new Generalized Histogram Intersection Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.HistogramIntersection.Function(System.Double[],System.Double[])">
            <summary>
              Generalized Histogram Intersection Kernel Function
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.HistogramIntersection.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Hypersecant">
            <summary>
              Hyperbolic Secant Kernel.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description>
                 Chaudhuri et al, A Comparative Study of Kernels for the Multi-class Support Vector
                 Machine, 2008. Available on: http://www.computer.org/portal/web/csdl/doi/10.1109/ICNC.2008.803 </description></item>
               </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Hypersecant.#ctor(System.Double)">
            <summary>
              Constructs a new Hyperbolic Secant Kernel
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Hypersecant.Function(System.Double[],System.Double[])">
            <summary>
              Hyperbolic Secant Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Hypersecant.Function(System.Double)">
            <summary>
              Hyperbolic Secant Kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Hypersecant.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Hypersecant.Gamma">
            <summary>
              Gets or sets the gamma value for the kernel. 
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Laplacian">
            <summary>
              Laplacian Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.#ctor">
            <summary>
              Constructs a new Laplacian Kernel
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.#ctor(System.Double)">
            <summary>
              Constructs a new Laplacian Kernel
            </summary>
            
            <param name="sigma">The sigma slope value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.Function(System.Double[],System.Double[])">
            <summary>
              Laplacian Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.Function(System.Double)">
            <summary>
              Laplacian Kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in input space
              between two points given in feature space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            
            <returns>Squared distance between <c>x</c> and <c>y</c> in input space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.ReverseDistance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in input space
              between two points given in feature space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            
            <returns>
              Squared distance between <c>x</c> and <c>y</c> in input space.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.ReverseDistance(System.Double)">
            <summary>
              Computes the distance in input space given
              a distance computed in feature space.
            </summary>
            
            <param name="df">Distance in feature space.</param>
            <returns>Distance in input space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.Estimate(System.Double[][])">
            <summary>
              Estimate appropriate values for sigma given a data set.
            </summary>
            
            <remarks>
              This method uses a simple heuristic to obtain appropriate values
              for sigma in a radial basis function kernel. The heuristic is shown
              by Caputo, Sim, Furesjo and Smola, "Appearance-based object
              recognition using SVMs: which kernel should I use?", 2002.
            </remarks>
            
            <param name="inputs">The data set.</param>
            
            <returns>A Laplacian kernel initialized with an appropriate sigma value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.Estimate(System.Double[][],System.Int32,AForge.DoubleRange@)">
            <summary>
              Estimate appropriate values for sigma given a data set.
            </summary>
            
            <remarks>
              This method uses a simple heuristic to obtain appropriate values
              for sigma in a radial basis function kernel. The heuristic is shown
              by Caputo, Sim, Furesjo and Smola, "Appearance-based object
              recognition using SVMs: which kernel should I use?", 2002.
            </remarks>
            
            <param name="inputs">The data set.</param>
            <param name="samples">The number of random samples to analyze.</param>
            <param name="range">The range of suitable values for sigma.</param>
            
            <returns>A Laplacian kernel initialized with an appropriate sigma value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Laplacian.Sigma">
            <summary>
              Gets or sets the sigma value for the kernel. When setting
              sigma, gamma gets updated accordingly (gamma = 0.5*/sigma^2).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Laplacian.Gamma">
            <summary>
              Gets or sets the gamma value for the kernel. When setting
              gamma, sigma gets updated accordingly (gamma = 0.5*/sigma^2).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Linear">
            <summary>
              Linear Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.#ctor(System.Double)">
            <summary>
              Constructs a new Linear kernel.
            </summary>
            
            <param name="constant">A constant intercept term. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.#ctor">
            <summary>
              Constructs a new Linear Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.Function(System.Double[],System.Double[])">
            <summary>
              Linear kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.Function(System.Double)">
            <summary>
              Linear kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in input space
              between two points given in feature space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            
            <returns>Squared distance between <c>x</c> and <c>y</c> in input space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.ReverseDistance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in input space
              between two points given in feature space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            
            <returns>
              Squared distance between <c>x</c> and <c>y</c> in input space.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.Transform(System.Double[])">
            <summary>
              Projects an input point into feature space.
            </summary>
            
            <param name="input">The input point to be projected into feature space.</param>
            
            <returns>
              The feature space representation of the given <paramref name="input"/> point.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.Transform(System.Double[],System.Double)">
            <summary>
              Projects an input point into feature space.
            </summary>
            
            <param name="input">The input point to be projected into feature space.</param>
            <param name="constant">The <see cref="P:Accord.Statistics.Kernels.Linear.Constant"/> parameter of the kernel.</param>
            
            <returns>
              The feature space representation of the given <paramref name="input"/> point.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Linear.Constant">
            <summary>
              Gets or sets the kernel's intercept term. Default is 0.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Log">
            <summary>
              Logarithm Kernel.
            </summary>
            
            <remarks>
              The Log kernel seems to be particularly interesting for
              images, but is only conditionally positive definite.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Log.#ctor(System.Int32)">
            <summary>
              Constructs a new Log Kernel
            </summary>
            
            <param name="degree">The kernel's degree.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Log.#ctor(System.Double)">
            <summary>
              Constructs a new Log Kernel
            </summary>
            
            <param name="degree">The kernel's degree.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Log.Function(System.Double[],System.Double[])">
            <summary>
              Log Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Log.Function(System.Double)">
            <summary>
              Log Kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Log.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Log.Degree">
            <summary>
              Gets or sets the kernel's degree.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Multiquadric">
            <summary>
              Multiquadric Kernel.
            </summary>
            
            <remarks>
              The multiquadric kernel is only conditionally positive-definite.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Multiquadric.#ctor(System.Double)">
            <summary>
              Constructs a new Multiquadric Kernel.
            </summary>
            
            <param name="constant">The constant term theta.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Multiquadric.#ctor">
            <summary>
              Constructs a new Multiquadric Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Multiquadric.Function(System.Double[],System.Double[])">
            <summary>
              Multiquadric Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Multiquadric.Function(System.Double)">
            <summary>
              Multiquadric Kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Multiquadric.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Multiquadric.Constant">
            <summary>
              Gets or sets the kernel's constant value.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Polynomial">
            <summary>
              Polynomial Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a new Polynomial kernel of a given degree.
            </summary>
            
            <param name="degree">The polynomial degree for this kernel.</param>
            <param name="constant">The polynomial constant for this kernel. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.#ctor(System.Int32)">
            <summary>
              Constructs a new Polynomial kernel of a given degree.
            </summary>
            
            <param name="degree">The polynomial degree for this kernel.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.Function(System.Double[],System.Double[])">
            <summary>
              Polynomial kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.Function(System.Double)">
            <summary>
              Polynomial kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in feature space
              between two points given in input space.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Squared distance between <c>x</c> and <c>y</c> in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.ReverseDistance(System.Double[],System.Double[])">
            <summary>
              Computes the distance in input space
              between two points given in feature space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.Transform(System.Double[])">
            <summary>
              Projects an input point into feature space.
            </summary>
            
            <param name="input">The input point to be projected into feature space.</param>
            
            <returns>
              The feature space representation of the given <paramref name="input"/> point.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.Transform(System.Double[],System.Int32,System.Double)">
            <summary>
              Projects an input point into feature space.
            </summary>
            
            <param name="input">The input point to be projected into feature space.</param>
            <param name="constant">The <see cref="P:Accord.Statistics.Kernels.Polynomial.Constant"/> parameter of the kernel.</param>
            <param name="degree">The <see cref="P:Accord.Statistics.Kernels.Polynomial.Degree"/> parameter of the kernel.</param>
            
            <returns>
              The feature space representation of the given <paramref name="input"/> point.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Polynomial.Degree">
            <summary>
              Gets or sets the kernel's polynomial degree.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Polynomial.Constant">
            <summary>
              Gets or sets the kernel's polynomial constant term.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Power">
            <summary>
              Power Kernel, also known as the (Unrectified) Triangular Kernel.
            </summary>
            
            <remarks>
              The Power kernel is also known as the (unrectified) triangular kernel.
              It is an example of scale-invariant kernel (Sahbi and Fleuret, 2004) 
              and is also only conditionally positive definite.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Power.#ctor(System.Int32)">
            <summary>
              Constructs a new Power Kernel.
            </summary>
            
            <param name="degree">The kernel's degree.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Power.#ctor(System.Double)">
            <summary>
              Constructs a new Power Kernel.
            </summary>
            
            <param name="degree">The kernel's degree.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Power.Function(System.Double[],System.Double[])">
            <summary>
              Power Kernel Function
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Power.Function(System.Double)">
            <summary>
              Power Kernel Function
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Power.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Power.Degree">
            <summary>
              Gets or sets the kernel's degree.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Precomputed">
            <summary>
              Precomputed Gram Matrix Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Precomputed.#ctor(System.Double[0:,0:])">
            <summary>
              Constructs a new Precomputed Matrix Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Precomputed.Function(System.Double[],System.Double[])">
            <summary>
              Kernel function.
            </summary>
            
            <param name="x">An array containing a first element with the index for input vector <c>x</c>.</param>
            <param name="y">An array containing a first element with the index for input vector <c>y</c>.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Precomputed.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Precomputed.Matrix">
            <summary>
              Gets or sets the precomputed Gram matrix for this kernel.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.RationalQuadratic">
            <summary>
              Rational Quadratic Kernel.
            </summary>
            
            <remarks>
              The Rational Quadratic kernel is less computationally intensive than
              the Gaussian kernel and can be used as an alternative when using the
              Gaussian becomes too expensive.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.RationalQuadratic.#ctor(System.Double)">
            <summary>
              Constructs a new Rational Quadratic Kernel.
            </summary>
            
            <param name="constant">The constant term theta.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.RationalQuadratic.Function(System.Double[],System.Double[])">
            <summary>
              Rational Quadratic Kernel Function
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.RationalQuadratic.Function(System.Double)">
            <summary>
              Rational Quadratic Kernel Function
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.RationalQuadratic.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.RationalQuadratic.Constant">
            <summary>
              Gets or sets the kernel's constant term.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Sigmoid">
            <summary>
              Sigmoid Kernel.
            </summary>
            
            <remarks>
              Sigmoid kernel of the form k(x,z) = tanh(a * x'z + c). Sigmoid kernels are only
              conditionally positive definite for some values of a and c, and therefore may not
              induce a reproducing kernel Hilbert space. However, they have been successfully 
              used in practice (Schölkopf and Smola, 2002).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sigmoid.Estimate(System.Double[][])">
            <summary>
              Estimates suitable values for the sigmoid kernel
              by exploring the response area of the tanh function.
            </summary>
            
            <param name="inputs">An input data set.</param>
            
            <returns>A Sigmoid kernel initialized with appropriate values.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sigmoid.Estimate(System.Double[][],System.Int32,AForge.DoubleRange@)">
            <summary>
              Estimates suitable values for the sigmoid kernel
              by exploring the response area of the tanh function.
            </summary>
            
            <param name="inputs">An input data set.</param>
            <param name="samples">The size of the subset to use in the estimation.</param>
            <param name="range">The interquartile range for the data.</param>
            
            <returns>A Sigmoid kernel initialized with appropriate values.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sigmoid.Products(System.Double[][],System.Int32)">
            <summary>
              Computes the set of all distances between 
              all points in a random subset of the data.
            </summary>
            
            <param name="inputs">The inputs points.</param>
            <param name="samples">The number of samples.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sigmoid.#ctor">
            <summary>
              Constructs a Sigmoid kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sigmoid.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Sigmoid kernel.
            </summary>
            
            <param name="alpha">
              Alpha parameter. Typically should be set to
              a small positive value. Default is 0.01.</param>
            <param name="constant">
              Constant parameter. Typically should be set to
              a negative value. Default is -e (Euler's constant).</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sigmoid.Function(System.Double[],System.Double[])">
            <summary>
              Sigmoid kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sigmoid.Function(System.Double)">
            <summary>
              Sigmoid kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sigmoid.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Sigmoid.Alpha">
            <summary>
              Gets or sets the kernel's alpha parameter.
            </summary>
            
            <remarks>
              In a sigmoid kernel, alpha is a inner product
              coefficient for the hyperbolic tangent function.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Sigmoid.Constant">
            <summary>
              Gets or sets the kernel's constant term.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Sparse.SparseCauchy">
            <summary>
              Sparse Cauchy Kernel.
            </summary>
            <remarks>
              The Cauchy kernel comes from the Cauchy distribution (Basak, 2008). It is a
              long-tailed kernel and can be used to give long-range influence and sensitivity
              over the high dimension space.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseCauchy.#ctor(System.Double)">
            <summary>
              Constructs a new Sparse Cauchy Kernel.
            </summary>
            
            <param name="sigma">The value for sigma.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseCauchy.Function(System.Double[],System.Double[])">
            <summary>
              Cauchy Kernel Function
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseCauchy.Sigma">
            <summary>
              Gets or sets the kernel's sigma value.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Sparse.SparseGaussian">
            <summary>
              Sparse Gaussian Kernel.
            </summary>
            
            <remarks>
            <para>
              The Gaussian kernel requires tuning for the proper value of σ. Different approaches
              to this problem includes the use of brute force (i.e. using a grid-search algorithm)
              or a gradient ascent optimization.</para>
              
            <para>
              For an example on how to create a sparse kernel, please see the <see cref="T:Accord.Statistics.Kernels.Sparse.SparseLinear"/> page.</para>
               
            <para>
              References:
              <list type="bullet">
                <item><description>
                 P. F. Evangelista, M. J. Embrechts, and B. K. Szymanski. Some Properties of the
                 Gaussian Kernel for One Class Learning. Available on: http://www.cs.rpi.edu/~szymansk/papers/icann07.pdf </description></item>
               </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseGaussian.#ctor">
            <summary>
              Constructs a new Sparse Gaussian Kernel
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseGaussian.#ctor(System.Double)">
            <summary>
              Constructs a new Sparse Gaussian Kernel
            </summary>
            
            <param name="sigma">The standard deviation for the Gaussian distribution. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseGaussian.Function(System.Double[],System.Double[])">
            <summary>
            Gaussian Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseGaussian.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the distance in input space
              between two points given in feature space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            
            <returns>
              Distance between <c>x</c> and <c>y</c> in input space.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseGaussian.ReverseDistance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in input space
              between two points given in feature space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            
            <returns>
              Squared distance between <c>x</c> and <c>y</c> in input space.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseGaussian.Estimate(System.Double[][],System.Int32,AForge.DoubleRange@)">
            <summary>
              Estimate appropriate values for sigma given a data set.
            </summary>
            
            <remarks>
              This method uses a simple heuristic to obtain appropriate values
              for sigma in a radial basis function kernel. The heuristic is shown
              by Caputo, Sim, Furesjo and Smola, "Appearance-based object
              recognition using SVMs: which kernel should I use?", 2002.
            </remarks>
            
            <param name="inputs">The data set.</param>
            <param name="samples">The number of random samples to analyze.</param>
            <param name="range">The range of suitable values for sigma.</param>
            <returns>A Gaussian kernel initialized with an appropriate sigma value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseGaussian.Sigma">
            <summary>
              Gets or sets the sigma value for the kernel. When setting
              sigma, gamma gets updated accordingly (gamma = 0.5*/sigma^2).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseGaussian.Gamma">
            <summary>
              Gets or sets the gamma value for the kernel. When setting
              gamma, sigma gets updated accordingly (gamma = 0.5*/sigma^2).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Sparse.SparseLaplacian">
            <summary>
              Sparse Laplacian Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLaplacian.#ctor">
            <summary>
              Constructs a new Laplacian Kernel
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLaplacian.#ctor(System.Double)">
            <summary>
              Constructs a new Laplacian Kernel
            </summary>
            
            <param name="sigma">The sigma slope value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLaplacian.Function(System.Double[],System.Double[])">
            <summary>
              Laplacian Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLaplacian.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the distance in input space
              between two points given in feature space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLaplacian.Estimate(System.Double[][],System.Int32,AForge.DoubleRange@)">
            <summary>
              Estimate appropriate values for sigma given a data set.
            </summary>
            
            <remarks>
              This method uses a simple heuristic to obtain appropriate values
              for sigma in a radial basis function kernel. The heuristic is shown
              by Caputo, Sim, Furesjo and Smola, "Appearance-based object
              recognition using SVMs: which kernel should I use?", 2002.
            </remarks>
            
            <param name="inputs">The data set.</param>
            <param name="samples">The number of random samples to analyze.</param>
            <param name="range">The range of suitable values for sigma.</param>
            
            <returns>A Laplacian kernel initialized with an appropriate sigma value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseLaplacian.Sigma">
            <summary>
              Gets or sets the sigma value for the kernel. When setting
              sigma, gamma gets updated accordingly (gamma = 0.5*/sigma^2).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseLaplacian.Gamma">
            <summary>
              Gets or sets the gamma value for the kernel. When setting
              gamma, sigma gets updated accordingly (gamma = 0.5*/sigma^2).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Sparse.SparseLinear">
            <summary>
              Sparse Linear Kernel.
            </summary>
            
            <remarks>
              The Sparse Linear kernel accepts inputs in the libsvm sparse format.
            </remarks>
            
            <example>
            <para>
              The following example shows how to teach a kernel support vector machine using
              the linear sparse kernel to perform the AND classification task using sparse 
              vectors.</para>
              
            <code>
            // Example AND problem
            double[][] inputs =
            {
                new double[] {          }, // 0 and 0: 0 (label -1)
                new double[] {      2,1 }, // 0 and 1: 0 (label -1)
                new double[] { 1,1      }, // 1 and 0: 0 (label -1)
                new double[] { 1,1, 2,1 }  // 1 and 1: 1 (label +1)
            };
            
            // Dichotomy SVM outputs should be given as [-1;+1]
            int[] labels =
            {
                // 0,  0,  0, 1
                    -1, -1, -1, 1
            };
            
            // Create a Support Vector Machine for the given inputs
            // (sparse machines should use 0 as the number of inputs)
            var machine = new KernelSupportVectorMachine(new SparseLinear(), inputs: 0); 
            
            // Instantiate a new learning algorithm for SVMs
            var smo = new SequentialMinimalOptimization(machine, inputs, labels);
            
            // Set up the learning algorithm
            smo.Complexity = 100000.0;
            
            // Run
            double error = smo.Run(); // should be zero
            
            double[] predicted = inputs.Apply(machine.Compute).Sign();
            
            // Outputs should be -1, -1, -1, +1
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLinear.#ctor(System.Double)">
            <summary>
              Constructs a new Linear kernel.
            </summary>
            
            <param name="constant">A constant intercept term. Default is 0.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLinear.#ctor">
            <summary>
              Constructs a new Linear Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLinear.Function(System.Double[],System.Double[])">
            <summary>
              Sparse Linear kernel function.
            </summary>
            
            <param name="x">Sparse vector <c>x</c> in input space.</param>
            <param name="y">Sparse vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLinear.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the squared distance in feature space
              between two points given in input space.
            </summary>
            
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLinear.Product(System.Double[],System.Double[])">
            <summary>
              Computes the product of two vectors given in sparse representation.
            </summary>
            
            <param name="x">The first vector <c>x</c>.</param>
            <param name="y">The second vector <c>y</c>.</param>
            
            <returns>The inner product <c>x * y</c> between the given vectors.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLinear.SquaredEuclidean(System.Double[],System.Double[])">
            <summary>
              Computes the squared Euclidean distance of two vectors given in sparse representation.
            </summary>
            
            <param name="x">The first vector <c>x</c>.</param>
            <param name="y">The second vector <c>y</c>.</param>
            
            <returns>
              The squared Euclidean distance <c>d² = |x - y|²</c> between the given vectors.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseLinear.Constant">
            <summary>
              Gets or sets the kernel's intercept term.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Sparse.SparsePolynomial">
            <summary>
              Sparse Polynomial Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparsePolynomial.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a new Sparse Polynomial kernel of a given degree.
            </summary>
            
            <param name="degree">The polynomial degree for this kernel.</param>
            <param name="constant">The polynomial constant for this kernel. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparsePolynomial.#ctor(System.Int32)">
            <summary>
              Constructs a new Polynomial kernel of a given degree.
            </summary>
            
            <param name="degree">The polynomial degree for this kernel.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparsePolynomial.Function(System.Double[],System.Double[])">
            <summary>
              Polynomial kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparsePolynomial.Degree">
            <summary>
              Gets or sets the kernel's polynomial degree.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparsePolynomial.Constant">
            <summary>
              Gets or sets the kernel's polynomial constant term.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Sparse.SparseSigmoid">
            <summary>
              Sparse Sigmoid Kernel.
            </summary>
            
            <remarks>
              Sigmoid kernels are not positive definite and therefore do not induce
              a reproducing kernel Hilbert space. However, they have been successfully
              used in practice (Schölkopf and Smola, 2002).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseSigmoid.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Sparse Sigmoid kernel.
            </summary>
            
            <param name="alpha">Alpha parameter.</param>
            <param name="constant">Constant parameter.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseSigmoid.#ctor">
            <summary>
              Constructs a Sparse Sigmoid kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseSigmoid.Function(System.Double[],System.Double[])">
            <summary>
              Sigmoid kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseSigmoid.Gamma">
            <summary>
              Gets or sets the kernel's gamma parameter.
            </summary>
            
            <remarks>
              In a sigmoid kernel, gamma is a inner product
              coefficient for the hyperbolic tangent function.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseSigmoid.Constant">
            <summary>
              Gets or sets the kernel's constant term.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Spherical">
            <summary>
              Spherical Kernel.
            </summary>
            
            <remarks>
              The spherical kernel comes from a statistics perspective. It is an example
              of an isotropic stationary kernel and is positive definite in R^3.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Spherical.#ctor(System.Double)">
            <summary>
              Constructs a new Spherical Kernel.
            </summary>
            
            <param name="sigma">Value for sigma.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Spherical.Function(System.Double[],System.Double[])">
            <summary>
              Spherical Kernel Function
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Spherical.Function(System.Double)">
            <summary>
              Spherical Kernel Function
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Spherical.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Spherical.Sigma">
            <summary>
              Gets or sets the kernel's sigma value.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Spline">
            <summary>
              Infinite Spline Kernel function.
            </summary>
            
            <remarks>
              The Spline kernel is given as a piece-wise cubic
              polynomial, as derived in the works by Gunn (1998).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Spline.#ctor">
            <summary>
              Constructs a new Spline Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Spline.Function(System.Double[],System.Double[])">
            <summary>
              Spline Kernel Function
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Spline.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.TaylorGaussian">
            <summary>
              Taylor approximation for the explicit Gaussian kernel.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description>
                 Lin, Keng-Pei, and Ming-Syan Chen. "Efficient kernel approximation for large-scale support 
                 vector machine classification." Proceedings of the Eleventh SIAM International Conference on
                 Data Mining. 2011. Available on: http://epubs.siam.org/doi/pdf/10.1137/1.9781611972818.19 
                 </description></item>
               </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.TaylorGaussian.#ctor">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Kernels.TaylorGaussian"/> kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.TaylorGaussian.#ctor(System.Double)">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Kernels.TaylorGaussian"/> kernel with the given sigma.
            </summary>
            
            <param name="sigma">The kernel's sigma parameter.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.TaylorGaussian.#ctor(System.Double,System.Int32)">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Kernels.TaylorGaussian"/> kernel with the given sigma.
            </summary>
            
            <param name="sigma">The kernel's sigma parameter.</param>
            <param name="degree">The Gaussian approximation degree. Default is 1024.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.TaylorGaussian.Transform(System.Double[])">
            <summary>
              Projects an input point into feature space.
            </summary>
            
            <param name="input">The input point to be projected into feature space.</param>
            
            <returns>
              The feature space representation of the given <paramref name="input"/> point.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.TaylorGaussian.OnSigmaChanging">
            <summary>
              Called when the value for any of the
              kernel's parameters has changed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.TaylorGaussian.Degree">
            <summary>
              Gets or sets the approximation degree 
              for this kernel. Default is 1024.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Tensor">
            <summary>
              Tensor Product combination of Kernels.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Tensor.#ctor(Accord.Statistics.Kernels.IKernel[])">
            <summary>
              Constructs a new additive kernel.
            </summary>
            
            <param name="kernels">Kernels to combine.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Tensor.Function(System.Double[],System.Double[])">
            <summary>
              Tensor Product Kernel Combination function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.TStudent">
            <summary>
              Generalized T-Student Kernel.
            </summary>
            
            <remarks>
              The Generalized T-Student Kernel is a Mercer Kernel and thus forms
              a positive semi-definite Kernel matrix (Boughorbel, 2004). It has
              a similar form to the <see cref="T:Accord.Statistics.Kernels.Multiquadric">Inverse Multiquadric Kernel.</see>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.TStudent.#ctor(System.Int32)">
            <summary>
              Constructs a new Generalized T-Student Kernel.
            </summary>
            
            <param name="degree">The kernel's degree.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.TStudent.Function(System.Double[],System.Double[])">
            <summary>
              Generalized T-Student Kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.TStudent.Function(System.Double)">
            <summary>
              Generalized T-Student Kernel function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.TStudent.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.TStudent.Degree">
            <summary>
              Gets or sets the degree of this kernel.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Wave">
            <summary>
              Wave Kernel.
            </summary>
            
            <remarks>
              The Wave kernel is symmetric positive semi-definite (Huang, 2008).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wave.#ctor(System.Double)">
            <summary>
              Constructs a new Wave Kernel.
            </summary>
            
            <param name="sigma">Value for sigma.</param>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wave.Function(System.Double[],System.Double[])">
            <summary>
              Wave Kernel Function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wave.Function(System.Double)">
            <summary>
              Wave Kernel Function.
            </summary>
            
            <param name="z">Distance <c>z</c> in input space.</param>
            
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wave.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Wave.Sigma">
            <summary>
              Gets or sets the kernel's sigma value.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Wavelet">
            <summary>
              Wavelet Kernel.
            </summary>
            
            <remarks>
            <para>
              In Wavelet analysis theory, one of the common goals is to express or
              approximate a signal or function using a family of functions generated
              by dilations and translations of a function called the mother wavelet.</para>
            <para>
              The Wavelet kernel uses a mother wavelet function together with dilation
              and translation constants to produce such representations and build a
              inner product which can be used by kernel methods. The default wavelet
              used by this class is the mother function <c>h(x) = cos(1.75x)*exp(-x²/2)</c>.</para>
                
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Li Zhang, Weida Zhou, and Licheng Jiao; Wavelet Support Vector Machine. IEEE
                  Transactions on Systems, Man, and Cybernetics—Part B: Cybernetics, Vol. 34, 
                  No. 1, February 2004.</description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.#ctor(System.Boolean)">
            <summary>
              Constructs a new Wavelet kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.#ctor(System.Boolean,System.Double)">
            <summary>
              Constructs a new Wavelet kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.#ctor(System.Boolean,System.Double,System.Func{System.Double,System.Double})">
            <summary>
              Constructs a new Wavelet kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a new Wavelet kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.#ctor(System.Double,System.Double,System.Func{System.Double,System.Double})">
            <summary>
              Constructs a new Wavelet kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.Function(System.Double[],System.Double[])">
            <summary>
              Wavelet kernel function.
            </summary>
            
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Wavelet.Mother">
            <summary>
              Gets or sets the Mother wavelet for this kernel.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Wavelet.Dilation">
            <summary>
              Gets or sets the wavelet dilation for this kernel.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Wavelet.Translation">
            <summary>
              Gets or sets the wavelet translation for this kernel.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Kernels.Wavelet.Invariant">
            <summary>
              Gets or sets whether this is
              an invariant Wavelet kernel.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Links.AbsoluteLinkFunction">
            <summary>
              Absolute link function.
            </summary>
            
            <remarks>
            <para>
              Link functions can be used in many models, such as in
              <see cref="T:Accord.Statistics.Models.Regression.GeneralizedLinearRegression"/> and Support
              Vector Machines.</para>    
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Links.ILinkFunction"/>
            <seealso cref="T:Accord.Statistics.Models.Regression.GeneralizedLinearRegression"/>
            
        </member>
        <member name="T:Accord.Statistics.Links.ILinkFunction">
            <summary>
              Link function interface.
            </summary>
            
            <remarks>
            <para>
              The link function provides the relationship between the linear predictor and the 
              mean of the distribution function. There are many commonly used link functions, and 
              their choice can be somewhat arbitrary. It can be convenient to match the domain of
              the link function to the range of the distribution function's mean.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Generalized_linear_model#Link_function">
                  Wikipedia contributors. "Generalized linear model." Wikipedia, The Free Encyclopedia.</a></description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Links.ProbitLinkFunction"/>
            <seealso cref="T:Accord.Statistics.Links.LogitLinkFunction"/>
            <seealso cref="T:Accord.Statistics.Models.Regression.GeneralizedLinearRegression"/>
            
        </member>
        <member name="M:Accord.Statistics.Links.ILinkFunction.Function(System.Double)">
            <summary>
              The link function.
            </summary>
            
            <param name="x">An input value.</param>
            
            <returns>The transformed input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.ILinkFunction.Inverse(System.Double)">
            <summary>
              The mean (activation) function.
            </summary>
            
            <param name="x">A transformed value.</param>
            
            <returns>The reverse transformed value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.ILinkFunction.Derivative(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.ILinkFunction.Inverse(System.Double)"/> function.
            </summary>
            
            <param name="x">The input value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.ILinkFunction.Derivative2(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.ILinkFunction.Inverse(System.Double)"/>
              function expressed in terms of it's output.
            </summary>
            
            <param name="y">The reverse transformed value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.AbsoluteLinkFunction.#ctor(System.Double)">
            <summary>
              Creates a new Absolute link function.
            </summary>
            
            <param name="beta">The beta value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Links.AbsoluteLinkFunction.#ctor">
            <summary>
              Creates a new Absolute link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.AbsoluteLinkFunction.Function(System.Double)">
            <summary>
              The Absolute link function.
            </summary>
            
            <param name="x">An input value.</param>
            
            <returns>The transformed input value.</returns>
            
            <remarks>
              The absolute link function is given by <c>f(x) = abs(x) / b</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.AbsoluteLinkFunction.Inverse(System.Double)">
            <summary>
              The mean function.
            </summary>
            
            <param name="x">A transformed value.</param>
            
            <returns>The reverse transformed value.</returns>
            
            <remarks>
              The inverse absolute link function is given by <c>g(x) = B * abs(x)</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.AbsoluteLinkFunction.Derivative(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.AbsoluteLinkFunction.Inverse(System.Double)"/> function.
            </summary>
            
            <param name="x">The input value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
            <remarks>
              The first derivative of the absolute link function 
              is given by <c>f'(x) = B</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.AbsoluteLinkFunction.Derivative2(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.AbsoluteLinkFunction.Inverse(System.Double)"/>
              function expressed in terms of it's output.
            </summary>
            
            <param name="y">The reverse transformed value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
            <remarks>
              The first derivative of the absolute link function 
              in terms of y = f(x) is given by <c>f'(y) = B</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.AbsoluteLinkFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Links.AbsoluteLinkFunction.B">
            <summary>
              Linear scaling coefficient b (slope).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Links.CauchitLinkFunction">
            <summary>
              Cauchy link function.
            </summary>
            
            <remarks>
            <para>
              The Cauchy link function is associated with the
              <see cref="T:Accord.Statistics.Distributions.Univariate.CauchyDistribution">Cauchy distribution</see>.</para>
              
            <para>
              Link functions can be used in many models, such as in
              <see cref="T:Accord.Statistics.Models.Regression.GeneralizedLinearRegression"/> and Support
              Vector Machines.</para>    
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Links.ILinkFunction"/>
            <seealso cref="T:Accord.Statistics.Models.Regression.GeneralizedLinearRegression"/>
            
        </member>
        <member name="M:Accord.Statistics.Links.CauchitLinkFunction.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new Cauchit link function.
            </summary>
            
            <param name="beta">The beta value. Default is 1/pi.</param>
            <param name="constant">The constant value. Default is 0.5.</param>
            
        </member>
        <member name="M:Accord.Statistics.Links.CauchitLinkFunction.#ctor">
            <summary>
              Creates a new Cauchit link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.CauchitLinkFunction.Function(System.Double)">
            <summary>
              The Cauchit link function.
            </summary>
            
            <param name="x">An input value.</param>
            
            <returns>The transformed input value.</returns>
            
            <remarks>
              The Cauchit link function is given by <c>f(x) = tan((x - A) / B)</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.CauchitLinkFunction.Inverse(System.Double)">
            <summary>
              The Cauchit mean (activation) function.
            </summary>
            
            <param name="x">A transformed value.</param>
            
            <returns>The reverse transformed value.</returns>
            
            <remarks>
              The inverse Cauchit link function is given by <c>g(x) = tan(x) * B + A</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.CauchitLinkFunction.Derivative(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.CauchitLinkFunction.Inverse(System.Double)"/> function.
            </summary>
            
            <param name="x">The input value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
            <remarks>
              The first derivative of the Cauchit link function 
              in terms of y = f(x) is given by 
              
                <c>f'(y) =  B / (x * x + 1)</c>
                
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.CauchitLinkFunction.Derivative2(System.Double)">
            <summary>
              First derivative of the mean function
              expressed in terms of it's output.
            </summary>
            
            <param name="y">The reverse transformed value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
            <remarks>
              The first derivative of the Cauchit link function 
              in terms of y = f(x) is given by 
              
                <c>f'(y) = B / (tan((y - A) / B)² + 1)</c>
                
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.CauchitLinkFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Links.CauchitLinkFunction.A">
            <summary>
              Linear scaling coefficient a (intercept).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Links.CauchitLinkFunction.B">
            <summary>
              Linear scaling coefficient b (slope).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Links.ThresholdLinkFunction">
            <summary>
              Threshold link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.ThresholdLinkFunction.#ctor(System.Double)">
            <summary>
              Creates a new Absolute link function.
            </summary>
            
            <param name="threshold">The threshold value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Links.ThresholdLinkFunction.#ctor">
            <summary>
              Creates a new Absolute link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.ThresholdLinkFunction.Function(System.Double)">
            <summary>
              The Absolute link function.
            </summary>
            
            <param name="x">An input value.</param>
            
            <returns>The transformed input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.ThresholdLinkFunction.Inverse(System.Double)">
            <summary>
              The mean function.
            </summary>
            
            <param name="x">A transformed value.</param>
            
            <returns>The reverse transformed value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.ThresholdLinkFunction.Derivative(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.ThresholdLinkFunction.Inverse(System.Double)"/> function.
            </summary>
            
            <param name="x">The input value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.ThresholdLinkFunction.Derivative2(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.ThresholdLinkFunction.Inverse(System.Double)"/>
              function expressed in terms of it's output.
            </summary>
            
            <param name="y">The reverse transformed value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.ThresholdLinkFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Links.ThresholdLinkFunction.Threshold">
            <summary>
              Threshold coefficient b.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Links.SinLinkFunction">
            <summary>
              Sin link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.SinLinkFunction.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new Sin link function.
            </summary>
            
            <param name="beta">The beta value.</param>
            <param name="constant">The constant value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Links.SinLinkFunction.#ctor">
            <summary>
              Creates a new Sin link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.SinLinkFunction.Function(System.Double)">
            <summary>
              The Sin link function.
            </summary>
            
            <param name="x">An input value.</param>
            
            <returns>The transformed input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.SinLinkFunction.Inverse(System.Double)">
            <summary>
              The Sin mean (activation) function.
            </summary>
            
            <param name="x">A transformed value.</param>
            
            <returns>The reverse transformed value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.SinLinkFunction.Derivative(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.SinLinkFunction.Inverse(System.Double)"/> function.
            </summary>
            
            <param name="x">The input value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.SinLinkFunction.Derivative2(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.SinLinkFunction.Inverse(System.Double)"/>
              function expressed in terms of it's output.
            </summary>
            
            <param name="y">The reverse transformed value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.SinLinkFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Links.SinLinkFunction.A">
            <summary>
              Linear scaling coefficient a (intercept).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Links.SinLinkFunction.B">
            <summary>
              Linear scaling coefficient b (slope).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Links.LogLogLinkFunction">
            <summary>
              Natural logarithm of natural logarithm link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLogLinkFunction.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new Log-Log link function.
            </summary>
            
            <param name="beta">The beta value.</param>
            <param name="constant">The constant value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLogLinkFunction.#ctor">
            <summary>
              Creates a new Log-Log link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLogLinkFunction.Complementary">
            <summary>
              Creates a Complementary Log-Log link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLogLinkFunction.Function(System.Double)">
            <summary>
            The Log-log link function.
            </summary>
            
            <param name="x">An input value.</param>
            
            <returns>The transformed input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLogLinkFunction.Inverse(System.Double)">
            <summary>
              The Log-log mean (activation) function.
            </summary>
            
            <param name="x">A transformed value.</param>
            
            <returns>The reverse transformed value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLogLinkFunction.Derivative(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.LogLogLinkFunction.Inverse(System.Double)"/> function.
            </summary>
            
            <param name="x">The input value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLogLinkFunction.Derivative2(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.LogLogLinkFunction.Inverse(System.Double)"/>
              function expressed in terms of it's output.
            </summary>
            
            <param name="y">The reverse transformed value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLogLinkFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Links.LogLogLinkFunction.A">
            <summary>
              Linear scaling coefficient a (intercept).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Links.LogLogLinkFunction.B">
            <summary>
              Linear scaling coefficient b (slope).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Links.LogLinkFunction">
            <summary>
              Natural logarithm link function.
            </summary>
            
            <remarks>
              The natural logarithm link function is associated with
              the <see cref="T:Accord.Statistics.Distributions.Univariate.PoissonDistribution">Poisson distribution</see>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLinkFunction.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new Log link function.
            </summary>
            
            <param name="beta">The beta value. Default is 1.</param>
            <param name="constant">The constant value. Default is 0.</param>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLinkFunction.#ctor">
            <summary>
              Creates a new Log link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLinkFunction.Function(System.Double)">
            <summary>
              The link function.
            </summary>
            
            <param name="x">An input value.</param>
            
            <returns>The transformed input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLinkFunction.Inverse(System.Double)">
            <summary>
              The mean (activation) function.
            </summary>
            
            <param name="x">A transformed value.</param>
            
            <returns>The reverse transformed value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLinkFunction.Derivative(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.LogLinkFunction.Inverse(System.Double)"/> function.
            </summary>
            
            <param name="x">The input value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLinkFunction.Derivative2(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.LogLinkFunction.Inverse(System.Double)"/>
              function expressed in terms of it's output.
            </summary>
            
            <param name="y">The reverse transformed value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogLinkFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Links.LogLinkFunction.A">
            <summary>
              Linear scaling coefficient a (intercept).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Links.LogLinkFunction.B">
            <summary>
              Linear scaling coefficient b (slope).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Links.InverseSquaredLinkFunction">
            <summary>
              Inverse squared link function.
            </summary>
            
            <remarks>
              The inverse squared link function is associated with the
              <see cref="T:Accord.Statistics.Distributions.Univariate.InverseGaussianDistribution">Inverse Gaussian distribution</see>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseSquaredLinkFunction.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new Inverse squared Link function.
            </summary>
            
            <param name="beta">The beta value.</param>
            <param name="constant">The constant value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseSquaredLinkFunction.#ctor">
            <summary>
              Creates a new Inverse squared Link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseSquaredLinkFunction.Function(System.Double)">
            <summary>
              The Inverse Squared link function.
            </summary>
            
            <param name="x">An input value.</param>
            
            <returns>The transformed input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseSquaredLinkFunction.Inverse(System.Double)">
            <summary>
              The Inverse Squared mean (activation) function.
            </summary>
            
            <param name="x">A transformed value.</param>
            
            <returns>The reverse transformed value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseSquaredLinkFunction.Derivative(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.InverseSquaredLinkFunction.Inverse(System.Double)"/> function.
            </summary>
            
            <param name="x">The input value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseSquaredLinkFunction.Derivative2(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.InverseSquaredLinkFunction.Inverse(System.Double)"/>
              function expressed in terms of it's output.
            </summary>
            
            <param name="y">The reverse transformed value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseSquaredLinkFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Links.InverseSquaredLinkFunction.A">
            <summary>
              Linear scaling coefficient a (intercept).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Links.InverseSquaredLinkFunction.B">
            <summary>
              Linear scaling coefficient b (slope).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Links.ProbitLinkFunction">
            <summary>
              Probit link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.ProbitLinkFunction.#ctor">
            <summary>
              Creates a new Probit link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.ProbitLinkFunction.Function(System.Double)">
            <summary>
              The Probit link function.
            </summary>
            
            <param name="x">An input value.</param>
            
            <returns>The transformed input value.</returns>
            
            <remarks>
              The Probit link function is given by <c>f(x) = Phi^-1(x)</c>,
              in which <see cref="M:Accord.Math.Normal.Inverse(System.Double)">Phi^-1</see> is the
              <see cref="M:Accord.Math.Normal.Inverse(System.Double)">inverse Normal (Gaussian) cumulative 
              distribution function</see>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.ProbitLinkFunction.Inverse(System.Double)">
            <summary>
              The Probit mean (activation) function.
            </summary>
            
            <param name="x">A transformed value.</param>
            
            <returns>The reverse transformed value.</returns>
            
            <remarks>
              The Probit link function is given by <c>g(x) = Phi(x)</c>,
              in which <see cref="M:Accord.Math.Normal.Function(System.Double)">Phi</see> is the
              <see cref="M:Accord.Math.Normal.Function(System.Double)">Normal (Gaussian) cumulative 
              distribution function</see>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.ProbitLinkFunction.Derivative(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.ProbitLinkFunction.Inverse(System.Double)"/> function.
            </summary>
            
            <param name="x">The input value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
            <remarks>
              The first derivative of the identity link function is 
              given by <c>f'(x) = exp(c - (Phi^-1(x))² * 0.5)</c> in
              which <c>c = -<see cref="F:Accord.Math.Constants.LogSqrt2PI">log(sqrt(2*π)</see></c>
              and <see cref="M:Accord.Math.Normal.Inverse(System.Double)">Phi^-1</see> is the <see cref="M:Accord.Math.Normal.Inverse(System.Double)">
              inverse Normal (Gaussian) cumulative distribution function</see>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.ProbitLinkFunction.Derivative2(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.ProbitLinkFunction.Inverse(System.Double)"/>
              function expressed in terms of it's output.
            </summary>
            
            <param name="y">The reverse transformed value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
            <remarks>
              The first derivative of the identity link function in terms
              of y = f(x) is given by <c>f'(y) = exp(c - x * x * 0.5)</c>
              in which <c>c = -<see cref="F:Accord.Math.Constants.LogSqrt2PI">log(sqrt(2*π)</see></c>
              and <c>x = </c>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.ProbitLinkFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Tools">
            <summary>
              Set of statistics functions.
            </summary>
            
            <remarks>
              This class represents collection of common functions used in statistics.
              Every Matrix function assumes data is organized in a table-like model,
              where Columns represents variables and Rows represents a observation of
              each variable.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[])">
            <summary>
              Computes the mean of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            
            <returns>The mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Int32[])">
            <summary>
              Computes the mean of the given values.
            </summary>
            
            <param name="values">An integer array containing the vector members.</param>
            
            <returns>The mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.GeometricMean(System.Double[])">
            <summary>
              Computes the Geometric mean of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            
            <returns>The geometric mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.LogGeometricMean(System.Double[])">
            <summary>
              Computes the log geometric mean of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            
            <returns>The log geometric mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.GeometricMean(System.Int32[])">
            <summary>
              Computes the geometric mean of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            
            <returns>The geometric mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.LogGeometricMean(System.Int32[])">
            <summary>
              Computes the log geometric mean of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            
            <returns>The log geometric mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.GrandMean(System.Double[],System.Int32[])">
            <summary>
              Computes the (weighted) grand mean of a set of samples.
            </summary>
            
            <param name="means">A double array containing the sample means.</param>
            <param name="samples">A integer array containing the sample's sizes.</param>
            
            <returns>The grand mean of the samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.UInt16[])">
            <summary>
              Computes the mean of the given values.
            </summary>
            
            <param name="values">A unsigned short array containing the vector members.</param>
            
            <returns>The mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Single[])">
            <summary>
              Computes the mean of the given values.
            </summary>
            
            <param name="values">A float array containing the vector members.</param>
            
            <returns>The mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.TruncatedMean(System.Double[],System.Double,System.Boolean,System.Boolean)">
            <summary>
              Computes the truncated (trimmed) mean of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="inPlace">Whether to perform operations in place, overwriting the original vector.</param>
            <param name="alreadySorted">A boolean parameter informing if the given values have already been sorted.</param>
            <param name="percent">The percentage of observations to drop from the sample.</param>
            
            <returns>The mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.ContraHarmonicMean(System.Double[],System.Int32)">
            <summary>
              Computes the contraharmonic mean of the given values.
            </summary>
            
            <param name="values">A unsigned short array containing the vector members.</param>
            <param name="order">The order of the harmonic mean. Default is 1.</param>
            
            <returns>The contraharmonic mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.ContraHarmonicMean(System.Double[])">
            <summary>
              Computes the contraharmonic mean of the given values.
            </summary>
            
            <param name="values">A unsigned short array containing the vector members.</param>
            
            <returns>The contraharmonic mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Double[],System.Boolean)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="unbiased">
              Pass true to compute the standard deviation using the sample variance.
              Pass false to compute it using the population variance. See remarks
              for more details.</param>
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the standard deviation σ using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true will
                thus compute σ using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
              
            <returns>The standard deviation of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Single[])">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            
            <returns>The standard deviation of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Double[],System.Double,System.Boolean)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="mean">The mean of the vector, if already known.</param>
            <param name="unbiased">
              Pass true to compute the standard deviation using the sample variance.
              Pass false to compute it using the population variance. See remarks
              for more details.</param>
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the standard deviation σ using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true will
                thus compute σ using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
              
            <returns>The standard deviation of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Single[],System.Single)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            <param name="values">A float array containing the vector members.</param>
            <param name="mean">The mean of the vector, if already known.</param>
            <returns>The standard deviation of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Int32[],System.Double)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            <param name="values">An integer array containing the vector members.</param>
            <param name="mean">The mean of the vector, if already known.</param>
            <returns>The standard deviation of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardError(System.Int32,System.Double)">
            <summary>
              Computes the Standard Error for a sample size, which estimates the
              standard deviation of the sample mean based on the population mean.
            </summary>
            <param name="samples">The sample size.</param>
            <param name="standardDeviation">The sample standard deviation.</param>
            <returns>The standard error for the sample.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardError(System.Double[])">
            <summary>
              Computes the Standard Error for a sample size, which estimates the
              standard deviation of the sample mean based on the population mean.
            </summary>
            <param name="values">A double array containing the samples.</param>
            <returns>The standard error for the sample.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Median(System.Double[])">
            <summary>
              Computes the Median of the given values.
            </summary>
            <param name="values">A double array containing the vector members.</param>
            <returns>The median of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Median(System.Double[],System.Boolean)">
            <summary>
              Computes the Median of the given values.
            </summary>
            
            <param name="values">An integer array containing the vector members.</param>
            <param name="alreadySorted">A boolean parameter informing if the given values have already been sorted.</param>
            <returns>The median of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Median(System.Double[],System.Int32,System.Int32,System.Boolean)">
            <summary>
              Computes the Median of the given values.
            </summary>
            
            <param name="values">An integer array containing the vector members.</param>
            <param name="alreadySorted">A boolean parameter informing if the given values have already been sorted.</param>
            <param name="length">The length of the subarray, starting at <paramref name="startIndex"/>.</param>
            <param name="startIndex">The starting index of the array.</param>
            
            <returns>The median of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Quartiles(System.Double[],AForge.DoubleRange@,System.Boolean)">
            <summary>
              Computes the Quartiles of the given values.
            </summary>
            
            <param name="values">An integer array containing the vector members.</param>
            <param name="alreadySorted">A boolean parameter informing if the given values have already been sorted.</param>
            <param name="range">The inter-quartile range for the values.</param>
            <returns>The second quartile, the median of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Quartiles(System.Double[],System.Double@,System.Double@,System.Boolean)">
            <summary>
              Computes the Quartiles of the given values.
            </summary>
            
            <param name="values">An integer array containing the vector members.</param>
            <param name="q1">The first quartile.</param>
            <param name="q3">The third quartile.</param>
            <param name="alreadySorted">A boolean parameter informing if the given values have already been sorted.</param>
            <returns>The second quartile, the median of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[])">
            <summary>
              Computes the Variance of the given values.
            </summary>
            
            <param name="values">A double precision number array containing the vector members.</param>
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[],System.Boolean)">
            <summary>
              Computes the Variance of the given values.
            </summary>
            
            <param name="values">A double precision number array containing the vector members.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute 
              the population variance. See remarks for more details.</param>
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the variance σ² using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true 
                will thus compute σ² using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Int32[])">
            <summary>
              Computes the Variance of the given values.
            </summary>
            
            <param name="values">An integer number array containing the vector members.</param>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Int32[],System.Boolean)">
            <summary>
              Computes the Variance of the given values.
            </summary>
            
            <param name="values">An integer number array containing the vector members.</param>
            
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute 
              the population variance. See remarks for more details.</param>
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the variance σ² using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true 
                will thus compute σ² using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Single[])">
            <summary>
              Computes the Variance of the given values.
            </summary>
            <param name="values">A single precision number array containing the vector members.</param>
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[],System.Double)">
            <summary>
              Computes the Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="mean">The mean of the array, if already known.</param>
              
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[],System.Double,System.Boolean)">
            <summary>
              Computes the Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="mean">The mean of the array, if already known.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute 
              the population variance. See remarks for more details.</param>
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the variance σ² using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true 
                will thus compute σ² using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
            
              
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Int32[],System.Double,System.Boolean)">
            <summary>
              Computes the Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="mean">The mean of the array, if already known.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute 
              the population variance. See remarks for more details.</param>
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the variance σ² using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true 
                will thus compute σ² using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
            
              
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Single[],System.Single)">
            <summary>
              Computes the Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="mean">The mean of the array, if already known.</param>
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.PooledStandardDeviation(System.Boolean,System.Double[][])">
            <summary>
              Computes the pooled standard deviation of the given values.
            </summary>
            
            <param name="samples">The grouped samples.</param>
            <param name="unbiased">
              True to compute a pooled standard deviation using unbiased estimates
              of the population variance; false otherwise. Default is true.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.PooledStandardDeviation(System.Double[][])">
            <summary>
              Computes the pooled standard deviation of the given values.
            </summary>
            
            <param name="samples">The grouped samples.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.PooledStandardDeviation(System.Int32[],System.Double[],System.Boolean)">
            <summary>
              Computes the pooled standard deviation of the given values.
            </summary>
            
            <param name="sizes">The number of samples used to compute the <paramref name="variances"/>.</param>
            <param name="variances">The unbiased variances for the samples.</param>
            <param name="unbiased">
              True to compute a pooled standard deviation using unbiased estimates
              of the population variance; false otherwise. Default is true.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.PooledVariance(System.Double[][])">
            <summary>
              Computes the pooled variance of the given values.
            </summary>
            
            <param name="samples">The grouped samples.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.PooledVariance(System.Boolean,System.Double[][])">
            <summary>
              Computes the pooled variance of the given values.
            </summary>
            
            <param name="unbiased">
              True to obtain an unbiased estimate of the population
              variance; false otherwise. Default is true.</param>
            
            <param name="samples">The grouped samples.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.PooledVariance(System.Int32[],System.Double[],System.Boolean)">
            <summary>
              Computes the pooled variance of the given values.
            </summary>
            
            <param name="sizes">The number of samples used to compute the <paramref name="variances"/>.</param>
            <param name="variances">The unbiased variances for the samples.</param>
            <param name="unbiased">
              True to obtain an unbiased estimate of the population
              variance; false otherwise. Default is true.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mode``1(``0[])">
            <summary>
              Computes the Mode of the given values.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            
            <returns>The most common value in the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mode``1(``0[],System.Int32@)">
            <summary>
              Computes the Mode of the given values.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="count">Returns how many times the detected mode happens in the values.</param>
            
            <returns>The most common value in the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mode``1(``0[],System.Boolean,System.Boolean)">
            <summary>
              Computes the Mode of the given values.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="inPlace">True to perform the operation in place, altering the original input vector.</param>
            <param name="alreadySorted">Pass true if the list of values is already sorted.</param>
            
            <returns>The most common value in the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mode``1(``0[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
              Computes the Mode of the given values.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="inPlace">True to perform the operation in place, altering the original input vector.</param>
            <param name="alreadySorted">Pass true if the list of values is already sorted.</param>
            <param name="count">Returns how many times the detected mode happens in the values.</param>
            
            <returns>The most common value in the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[],System.Double[],System.Boolean)">
            <summary>
              Computes the Covariance between two arrays of values.
            </summary>
            
            <param name="vector1">A number array containing the first vector elements.</param>
            <param name="vector2">A number array containing the second vector elements.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute 
              the population variance. See remarks for more details.</param>
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the variance σ² using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true 
                will thus compute σ² using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[],System.Double,System.Double[],System.Double,System.Boolean)">
            <summary>
              Computes the Covariance between two arrays of values.
            </summary>
            
            <param name="vector1">A number array containing the first vector elements.</param>
            <param name="vector2">A number array containing the second vector elements.</param>
            <param name="mean1">The mean value of <paramref name="vector1"/>, if known.</param>
            <param name="mean2">The mean value of <paramref name="vector2"/>, if known.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute 
              the population variance. See remarks for more details.</param>
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the variance σ² using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true 
                will thus compute σ² using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Skewness(System.Double[],System.Boolean)">
            <summary>
              Computes the Skewness for the given values.
            </summary>
            
            <remarks>
              Skewness characterizes the degree of asymmetry of a distribution
              around its mean. Positive skewness indicates a distribution with
              an asymmetric tail extending towards more positive values. Negative
              skewness indicates a distribution with an asymmetric tail extending
              towards more negative values.
            </remarks>
            
            <param name="values">A number array containing the vector values.</param>
            
            <param name="unbiased">
              True to compute the unbiased estimate of the population
              skewness, false otherwise. Default is true (compute the 
              unbiased estimator).</param>
              
            <returns>The skewness of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Skewness(System.Double[],System.Double,System.Boolean)">
            <summary>
              Computes the Skewness for the given values.
            </summary>
            
            <remarks>
              Skewness characterizes the degree of asymmetry of a distribution
              around its mean. Positive skewness indicates a distribution with
              an asymmetric tail extending towards more positive values. Negative
              skewness indicates a distribution with an asymmetric tail extending
              towards more negative values.
            </remarks>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="mean">The values' mean, if already known.</param>
            <param name="unbiased">
              True to compute the unbiased estimate of the population
              skewness, false otherwise. Default is true (compute the 
              unbiased estimator).</param>
            
            <returns>The skewness of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Kurtosis(System.Double[],System.Boolean)">
             <summary>
               Computes the Kurtosis for the given values.
             </summary>
             
             <remarks>
               The framework uses the same definition used by default in SAS and SPSS.
             </remarks>
            
             <param name="values">A number array containing the vector values.</param>
             <param name="unbiased">
               True to compute the unbiased estimate of the population
               kurtosis, false otherwise. Default is true (compute the 
               unbiased estimator).</param>
             
             <returns>The kurtosis of the given data.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Tools.Kurtosis(System.Double[],System.Double,System.Boolean)">
             <summary>
               Computes the Kurtosis for the given values.
             </summary>
             
             <remarks>
               The framework uses the same definition used by default in SAS and SPSS.
             </remarks>
            
             <param name="values">A number array containing the vector values.</param>
             <param name="mean">The values' mean, if already known.</param>
             <param name="unbiased">
               True to compute the unbiased estimate of the population
               kurtosis, false otherwise. Default is true (compute the 
               unbiased estimator).</param>
             
             <returns>The kurtosis of the given data.</returns>
             
        </member>
        <member name="M:Accord.Statistics.Tools.Entropy(System.Double[],System.Func{System.Double,System.Double})">
            <summary>
              Computes the entropy function for a set of numerical values in a 
              given <see cref="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.ProbabilityDensityFunction(System.Double)"/>.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="pdf">A probability distribution function.</param>
            
            <returns>The distribution's entropy for the given values.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedEntropy(System.Double[],System.Double[],System.Func{System.Double,System.Double})">
            <summary>
              Computes the entropy function for a set of numerical values in a 
              given <see cref="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.ProbabilityDensityFunction(System.Double)"/>.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="pdf">A probability distribution function.</param>
            <param name="weights">The importance for each sample.</param>
            
            <returns>The distribution's entropy for the given values.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedEntropy(System.Double[],System.Int32[],System.Func{System.Double,System.Double})">
            <summary>
              Computes the entropy function for a set of numerical values in a 
              given <see cref="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.ProbabilityDensityFunction(System.Double)"/>.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="pdf">A probability distribution function.</param>
            <param name="weights">The repetition counts for each sample.</param>
            
            <returns>The distribution's entropy for the given values.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Entropy(System.Double[])">
            <summary>
              Computes the entropy for the given values.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            
            <returns>The calculated entropy for the given values.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Entropy(System.Double[],System.Double)">
            <summary>
              Computes the entropy for the given values.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="eps">A small constant to avoid <see cref="F:System.Double.NaN"/>s in
              case the there is a zero between the given <paramref name="values"/>.</param>
            
            <returns>The calculated entropy for the given values.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Entropy(System.Double[0:,0:],System.Double)">
            <summary>
              Computes the entropy for the given values.
            </summary>
            
            <param name="values">A number matrix containing the matrix values.</param>
            <param name="eps">A small constant to avoid <see cref="F:System.Double.NaN"/>s in
              case the there is a zero between the given <paramref name="values"/>.</param>
            
            <returns>The calculated entropy for the given values.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Entropy(System.Double[0:,0:])">
            <summary>
              Computes the entropy for the given values.
            </summary>
            
            <param name="values">A number matrix containing the matrix values.</param>
            
            <returns>The calculated entropy for the given values.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Entropy(System.Int32[],System.Int32,System.Int32)">
            <summary>
              Computes the entropy for the given values.
            </summary>
            
            <param name="values">An array of integer symbols.</param>
            <param name="startValue">The starting symbol.</param>
            <param name="endValue">The ending symbol.</param>
            <returns>The evaluated entropy.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Entropy(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
              Computes the entropy for the given values.
            </summary>
            
            <param name="values">An array of integer symbols.</param>
            <param name="startValue">The starting symbol.</param>
            <param name="endValue">The ending symbol.</param>
            <returns>The evaluated entropy.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Entropy(System.Int32[],AForge.IntRange)">
            <summary>
              Computes the entropy for the given values.
            </summary>
            
            <param name="values">An array of integer symbols.</param>
            <param name="valueRange">The range of symbols.</param>
            <returns>The evaluated entropy.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Entropy(System.Int32[],System.Int32)">
            <summary>
              Computes the entropy for the given values.
            </summary>
            
            <param name="values">An array of integer symbols.</param>
            <param name="classes">The number of distinct classes.</param>
            <returns>The evaluated entropy.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Entropy(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
              Computes the entropy for the given values.
            </summary>
            
            <param name="values">An array of integer symbols.</param>
            <param name="classes">The number of distinct classes.</param>
            <returns>The evaluated entropy.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[0:,0:])">
            <summary>
              Calculates the matrix Mean vector.
            </summary>
            
            <param name="matrix">A matrix whose means will be calculated.</param>
            
            <returns>Returns a row vector containing the column means of the given matrix.</returns>
            
            <example>
              <code>
              double[,] matrix = 
              {
                 { 2, -1.0, 5 },
                 { 7,  0.5, 9 },
              };
               
              // column means are equal to (4.5, -0.25, 7.0)
              double[] means = Accord.Statistics.Tools.Mean(matrix);
              </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[0:,0:],System.Int32)">
            <summary>
              Calculates the matrix Mean vector.
            </summary>
            
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="dimension">
              The dimension along which the means will be calculated. Pass
              0 to compute a row vector containing the mean of each column,
              or 1 to compute a column vector containing the mean of each row.
              Default value is 0.
            </param>
            
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
            <example>
              <code>
              double[,] matrix = 
              {
                 { 2, -1.0, 5 },
                 { 7,  0.5, 9 },
              };
              
              // column means are equal to (4.5, -0.25, 7.0)
              double[] colMeans = Accord.Statistics.Tools.Mean(matrix, 0);
                
              // row means are equal to (2.0, 5.5)
              double[] rowMeans = Accord.Statistics.Tools.Mean(matrix, 1);
              </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[][])">
            <summary>
              Calculates the matrix Mean vector.
            </summary>
            
            <param name="matrix">A matrix whose means will be calculated.</param>
            
            <returns>Returns a row vector containing the column means of the given matrix.</returns>
            
            <example>
              <code>
              double[][] matrix = 
              {
                  new double[] { 2, -1.0, 5 },
                  new double[] { 7,  0.5, 9 },
              };
               
              // column means are equal to (4.5, -0.25, 7.0)
              double[] means = Accord.Statistics.Tools.Mean(matrix);
              </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[][],System.Int32)">
            <summary>
              Calculates the matrix Mean vector.
            </summary>
            
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="dimension">
              The dimension along which the means will be calculated. Pass
              0 to compute a row vector containing the mean of each column,
              or 1 to compute a column vector containing the mean of each row.
              Default value is 0.
            </param>
            
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
            <example>
              <code>
              double[][] matrix = 
              {
                  new double[] { 2, -1.0, 5 },
                  new double[] { 7,  0.5, 9 },
              };
              
              // column means are equal to (4.5, -0.25, 7.0)
              double[] colMeans = Accord.Statistics.Tools.Mean(matrix, 0);
                
              // row means are equal to (2.0, 5.5)
              double[] rowMeans = Accord.Statistics.Tools.Mean(matrix, 1);
              </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the matrix Mean vector.
            </summary>
            
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="sums">The sum vector containing already calculated sums for each column of the matrix.</param>
            
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[][],System.Double[])">
            <summary>
              Calculates the matrix Mean vector.
            </summary>
            
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="sums">The sum vector containing already calculated sums for each column of the matrix.</param>
            
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Double[0:,0:])">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Double[][],System.Double[],System.Boolean)">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="unbiased">
              Pass true to compute the standard deviation using the sample variance.
              Pass false to compute it using the population variance. See remarks
              for more details.</param>
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the standard deviation σ using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true will
                thus compute σ using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
              
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Double[][],System.Boolean)">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="unbiased">
              Pass true to compute the standard deviation using the sample variance.
              Pass false to compute it using the population variance. See remarks
              for more details.</param>
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the standard deviation σ using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true will
                thus compute σ using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
            
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Center(System.Double[])">
            <summary>
              Centers an observation, subtracting the empirical 
              mean from each element in the observation vector.
            </summary>
            
            <param name="observation">An array of double precision floating-point numbers.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Center(System.Double[],System.Double)">
            <summary>
              Centers an observation, subtracting the empirical 
              mean from each element in the observation vector.
            </summary>
            
            <param name="values">An array of double precision floating-point numbers.</param>
            <param name="mean">The mean of the <paramref name="values"/>, if already known.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[0:,0:])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="means">The mean vector containing already
            calculated means for each column of the matrix.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[][])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[][],System.Double[],System.Boolean)">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute 
              the population variance. See remarks for more details.</param>
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the variance σ² using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true 
                will thus compute σ² using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
              
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Median(System.Double[0:,0:])">
            <summary>
              Calculates the matrix Medians vector.
            </summary>
            
            <param name="matrix">A matrix whose medians will be calculated.</param>
            
            <returns>Returns a vector containing the medians of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Median(System.Double[][])">
            <summary>
              Calculates the matrix Medians vector.
            </summary>
            
            <param name="matrix">A matrix whose medians will be calculated.</param>
            
            <returns>Returns a vector containing the medians of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Quartiles(System.Double[0:,0:],AForge.DoubleRange[]@)">
            <summary>
              Computes the Quartiles of the given values.
            </summary>
            
            
            <param name="matrix">A matrix whose medians and quartiles will be calculated.</param>
            <param name="range">The inter-quartile range for the values.</param>
            
            <returns>The second quartile, the median of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Quartiles(System.Double[][],AForge.DoubleRange[]@)">
            <summary>
              Computes the Quartiles of the given values.
            </summary>
            
            <param name="matrix">A matrix whose medians and quartiles will be calculated.</param>
            <param name="range">The inter-quartile range for the values.</param>
            
            <returns>The second quartile, the median of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Quartiles(System.Double[][],System.Double[]@,System.Double[]@)">
            <summary>
              Computes the Quartiles of the given values.
            </summary>
            
            
            <param name="matrix">A matrix whose medians and quartiles will be calculated.</param>
            <param name="q1">The first quartile for each column.</param>
            <param name="q3">The third quartile for each column.</param>
            
            <returns>The second quartile, the median of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Quartiles(System.Double[0:,0:],System.Double[]@,System.Double[]@)">
            <summary>
              Computes the Quartiles of the given values.
            </summary>
            
            <param name="matrix">A matrix whose medians and quartiles will be calculated.</param>
            <param name="q1">The first quartile for each column.</param>
            <param name="q3">The third quartile for each column.</param>
            
            <returns>The second quartile, the median of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mode``1(``0[0:,0:])">
            <summary>
              Calculates the matrix Modes vector.
            </summary>
            
            <param name="matrix">A matrix whose modes will be calculated.</param>
            
            <returns>Returns a vector containing the modes of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mode``1(``0[][])">
            <summary>
              Calculates the matrix Modes vector.
            </summary>
            
            <param name="matrix">A matrix whose modes will be calculated.</param>
            
            <returns>Returns a vector containing the modes of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Skewness(System.Double[0:,0:],System.Boolean)">
            <summary>
              Computes the Skewness for the given values.
            </summary>
            
            <remarks>
              Skewness characterizes the degree of asymmetry of a distribution
              around its mean. Positive skewness indicates a distribution with
              an asymmetric tail extending towards more positive values. Negative
              skewness indicates a distribution with an asymmetric tail extending
              towards more negative values.
            </remarks>
            
            <param name="matrix">A number matrix containing the matrix values.</param>
            <param name="unbiased">
              True to compute the unbiased estimate of the population
              skewness, false otherwise. Default is true (compute the 
              unbiased estimator).</param>
            
            <returns>The skewness of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Skewness(System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
              Computes the Skewness vector for the given matrix.
            </summary>
            
            <remarks>
              Skewness characterizes the degree of asymmetry of a distribution
              around its mean. Positive skewness indicates a distribution with
              an asymmetric tail extending towards more positive values. Negative
              skewness indicates a distribution with an asymmetric tail extending
              towards more negative values.
            </remarks>
            
            <param name="matrix">A number array containing the vector values.</param>
            <param name="means">The mean value for the given values, if already known.</param>
            <param name="unbiased">
              True to compute the unbiased estimate of the population
              skewness, false otherwise. Default is true (compute the 
              unbiased estimator).</param>
            
            <returns>The skewness of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Skewness(System.Double[][],System.Boolean)">
            <summary>
              Computes the Skewness for the given values.
            </summary>
            
            <remarks>
              Skewness characterizes the degree of asymmetry of a distribution
              around its mean. Positive skewness indicates a distribution with
              an asymmetric tail extending towards more positive values. Negative
              skewness indicates a distribution with an asymmetric tail extending
              towards more negative values.
            </remarks>
            
            <param name="matrix">A number matrix containing the matrix values.</param>
            <param name="unbiased">
              True to compute the unbiased estimate of the population
              skewness, false otherwise. Default is true (compute the 
              unbiased estimator).</param>
            
            <returns>The skewness of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Skewness(System.Double[][],System.Double[],System.Boolean)">
            <summary>
              Computes the Skewness vector for the given matrix.
            </summary>
            
            <remarks>
              Skewness characterizes the degree of asymmetry of a distribution
              around its mean. Positive skewness indicates a distribution with
              an asymmetric tail extending towards more positive values. Negative
              skewness indicates a distribution with an asymmetric tail extending
              towards more negative values.
            </remarks>
            
            <param name="matrix">A number array containing the vector values.</param>
            <param name="means">The column means, if known.</param>
            <param name="unbiased">
              True to compute the unbiased estimate of the population
              skewness, false otherwise. Default is true (compute the 
              unbiased estimator).</param>
            
            <returns>The skewness of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Kurtosis(System.Double[0:,0:],System.Boolean)">
            <summary>
              Computes the Kurtosis vector for the given matrix.
            </summary>
            
            <remarks>
              The framework uses the same definition used by default in SAS and SPSS.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="unbiased">
              True to compute the unbiased estimate of the population
              kurtosis, false otherwise. Default is true (compute the 
              unbiased estimator).</param>
            
            <returns>The kurtosis vector of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Kurtosis(System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
              Computes the sample Kurtosis vector for the given matrix.
            </summary>
            
            <remarks>
              The framework uses the same definition used by default in SAS and SPSS.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="unbiased">
              True to compute the unbiased estimate of the population
              kurtosis, false otherwise. Default is true (compute the 
              unbiased estimator).</param>
            
            <returns>The sample kurtosis vector of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Kurtosis(System.Double[][],System.Boolean)">
            <summary>
              Computes the Kurtosis vector for the given matrix.
            </summary>
            
            <remarks>
              The framework uses the same definition used by default in SAS and SPSS.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="unbiased">
              True to compute the unbiased estimate of the population
              kurtosis, false otherwise. Default is true (compute the 
              unbiased estimator).</param>
            
            <returns>The kurtosis vector of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Kurtosis(System.Double[][],System.Double[],System.Boolean)">
            <summary>
              Computes the Kurtosis vector for the given matrix.
            </summary>
            
            <remarks>
              The framework uses the same definition used by default in SAS and SPSS.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="unbiased">
              True to compute the unbiased estimate of the population
              kurtosis, false otherwise. Default is true (compute the 
              unbiased estimator).</param>
              
            <returns>The kurtosis vector of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.StandardError(System.Double[0:,0:])">
            <summary>
              Computes the Standard Error vector for a given matrix.
            </summary>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <returns>Returns the standard error vector for the matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.StandardError(System.Int32,System.Double[])">
            <summary>
              Computes the Standard Error vector for a given matrix.
            </summary>
            
            <param name="samples">The number of samples in the matrix.</param>
            <param name="standardDeviations">The values' standard deviation vector, if already known.</param>
            
            <returns>Returns the standard error vector for the matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[0:,0:])">
            <summary>
              Calculates the covariance matrix of a sample matrix.
            </summary>
            
            <remarks>
              In statistics and probability theory, the covariance matrix is a matrix of
              covariances between elements of a vector. It is the natural generalization
              to higher dimensions of the concept of the variance of a scalar-valued
              random variable.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[0:,0:],System.Int32)">
            <summary>
              Calculates the covariance matrix of a sample matrix.
            </summary>
            
            <remarks>
              In statistics and probability theory, the covariance matrix is a matrix of
              covariances between elements of a vector. It is the natural generalization
              to higher dimensions of the concept of the variance of a scalar-valued
              random variable.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="dimension">
              The dimension of the matrix to consider as observations. Pass 0 if the matrix has
              observations as rows and variables as columns, pass 1 otherwise. Default is 0.
            </param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the covariance matrix of a sample matrix.
            </summary>        
            
            <remarks>
              In statistics and probability theory, the covariance matrix is a matrix of
              covariances between elements of a vector. It is the natural generalization
              to higher dimensions of the concept of the variance of a scalar-valued
              random variable.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[0:,0:],System.Double[],System.Double)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="divisor">A real number to divide each member of the matrix.</param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[0:,0:],System.Double[],System.Double,System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="divisor">A real number to divide each member of the matrix.</param>
            <param name="dimension">
              Pass 0 if the mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[][])">
            <summary>
              Calculates the covariance matrix of a sample matrix.
            </summary> 
            
            <remarks>
              In statistics and probability theory, the covariance matrix is a matrix of
              covariances between elements of a vector. It is the natural generalization
              to higher dimensions of the concept of the variance of a scalar-valued
              random variable.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[][],System.Int32)">
            <summary>
              Calculates the covariance matrix of a sample matrix.
            </summary>
            
            <remarks>
              In statistics and probability theory, the covariance matrix is a matrix of
              covariances between elements of a vector. It is the natural generalization
              to higher dimensions of the concept of the variance of a scalar-valued
              random variable.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="dimension">
              The dimension of the matrix to consider as observations. Pass 0 if the matrix has
              observations as rows and variables as columns, pass 1 otherwise. Default is 0.
            </param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[][],System.Double[])">
            <summary>
              Calculates the covariance matrix of a sample matrix.
            </summary> 
            
            <remarks>
              In statistics and probability theory, the covariance matrix is a matrix of
              covariances between elements of a vector. It is the natural generalization
              to higher dimensions of the concept of the variance of a scalar-valued
              random variable.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[][],System.Double[])">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[][],System.Double[],System.Double)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="divisor">A real number to divide each member of the matrix.</param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[][],System.Double,System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="divisor">A real number to divide each member of the matrix.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[][],System.Double[],System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[][],System.Double[],System.Double,System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="divisor">A real number to divide each member of the matrix.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Correlation(System.Double[0:,0:])">
            <summary>
              Calculates the correlation matrix for a matrix of samples.
            </summary>
            <remarks>
              In statistics and probability theory, the correlation matrix is the same
              as the covariance matrix of the standardized random variables.
            </remarks>
            <param name="matrix">A multi-dimensional array containing the matrix values.</param>
            <returns>The correlation matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Correlation(System.Double[0:,0:],System.Double[],System.Double[])">
            <summary>
              Calculates the correlation matrix for a matrix of samples.
            </summary>
            
            <remarks>
              In statistics and probability theory, the correlation matrix is the same
              as the covariance matrix of the standardized random variables.
            </remarks>
            
            <param name="matrix">A multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="standardDeviations">The values' standard deviation vector, if already known.</param>
            
            <returns>The correlation matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Correlation(System.Double[][],System.Double[],System.Double[])">
            <summary>
              Calculates the correlation matrix for a matrix of samples.
            </summary>
            
            <remarks>
              In statistics and probability theory, the correlation matrix is the same
              as the covariance matrix of the standardized random variables.
            </remarks>
            
            <param name="matrix">A multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="standardDeviations">The values' standard deviation vector, if already known.</param>
            
            <returns>The correlation matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.ZScores(System.Double[0:,0:])">
            <summary> 
              Generates the Standard Scores, also known as Z-Scores, from the given data. 
            </summary> 
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param> 
            
            <returns>The Z-Scores for the matrix.</returns> 
            
        </member>
        <member name="M:Accord.Statistics.Tools.ZScores(System.Double[0:,0:],System.Double[],System.Double[])">
            <summary> 
              Generates the Standard Scores, also known as Z-Scores, from the given data. 
            </summary> 
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param> 
            <param name="means">The mean value of the given values, if already known.</param> 
            <param name="standardDeviations">The values' standard deviation vector, if already known.</param> 
            
            <returns>The Z-Scores for the matrix.</returns> 
            
        </member>
        <member name="M:Accord.Statistics.Tools.ZScores(System.Double[][])">
            <summary> 
              Generates the Standard Scores, also known as Z-Scores, from the given data. 
            </summary> 
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param> 
            
            <returns>The Z-Scores for the matrix.</returns> 
            
        </member>
        <member name="M:Accord.Statistics.Tools.ZScores(System.Double[][],System.Double[],System.Double[])">
            <summary> 
              Generates the Standard Scores, also known as Z-Scores, from the given data. 
            </summary> 
             
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param> 
            <param name="means">The mean value of the given values, if already known.</param> 
            <param name="standardDeviations">The values' standard deviation vector, if already known.</param> 
             
            <returns>The Z-Scores for the matrix.</returns> 
             
        </member>
        <member name="M:Accord.Statistics.Tools.Center(System.Double[0:,0:],System.Boolean)">
            <summary>
              Centers column data, subtracting the empirical mean from each variable.
            </summary>
            
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
            <param name="inPlace">True to perform the operation in place, altering the original input matrix.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Center(System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
              Centers column data, subtracting the empirical mean from each variable.
            </summary>   
            
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="inPlace">True to perform the operation in place, altering the original input matrix.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Center(System.Double[][],System.Boolean)">
            <summary>
              Centers column data, subtracting the empirical mean from each variable.
            </summary>
            
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
            <param name="inPlace">True to perform the operation in place, altering the original input matrix.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Center(System.Double[][],System.Double[],System.Boolean)">
            <summary>Centers column data, subtracting the empirical mean from each variable.</summary>
            
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="inPlace">True to perform the operation in place, altering the original input matrix.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Standardize(System.Double[],System.Boolean)">
            <summary>
              Standardizes column data, removing the empirical standard deviation from each variable.
            </summary>
            
            <remarks>This method does not remove the empirical mean prior to execution.</remarks>
            
            <param name="values">An array of double precision floating-point numbers.</param>
            <param name="inPlace">True to perform the operation in place, 
              altering the original input matrix.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Standardize(System.Double[],System.Double,System.Boolean)">
            <summary>
              Standardizes column data, removing the empirical standard deviation from each variable.
            </summary>
            
            <remarks>This method does not remove the empirical mean prior to execution.</remarks>
            
            <param name="values">An array of double precision floating-point numbers.</param>
            <param name="standardDeviation">The standard deviation of the given 
            <paramref name="values"/>, if already known.</param>
            <param name="inPlace">True to perform the operation in place, altering the original input matrix.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Standardize(System.Double[0:,0:],System.Boolean)">
            <summary>
              Standardizes column data, removing the empirical standard deviation from each variable.
            </summary>
            
            <remarks>This method does not remove the empirical mean prior to execution.</remarks>
            
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
            <param name="inPlace">True to perform the operation in place, altering the original input matrix.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Standardize(System.Double[0:,0:],System.Double[],System.Boolean)">
             <summary>
               Standardizes column data, removing the empirical standard deviation from each variable.
             </summary>
             
             <remarks>This method does not remove the empirical mean prior to execution.</remarks>
            
             <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
             <param name="standardDeviations">The values' standard deviation vector, if already known.</param>
             <param name="inPlace">True to perform the operation in place, altering the original input matrix.</param>
             
        </member>
        <member name="M:Accord.Statistics.Tools.Standardize(System.Double[][],System.Boolean)">
            <summary>
              Standardizes column data, removing the empirical standard deviation from each variable.
            </summary>
            
            <remarks>This method does not remove the empirical mean prior to execution.</remarks>
            
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
            <param name="inPlace">True to perform the operation in place, altering the original input matrix.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Standardize(System.Double[][],System.Double[],System.Boolean)">
             <summary>
               Standardizes column data, removing the empirical standard deviation from each variable.
             </summary>
            
             <remarks>This method does not remove the empirical mean prior to execution.</remarks>
             
             <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
             <param name="standardDeviations">The values' standard deviation vector, if already known.</param>
             <param name="inPlace">True to perform the operation in place, altering the original input matrix.</param>
             
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMean(System.Double[][],System.Double[])">
            <summary>
              Calculates the weighted matrix Mean vector.
            </summary>
            
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="weights">A vector containing the importance of each sample in the matrix.</param>
            
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMean(System.Double[][],System.Double[],System.Int32)">
            <summary>
              Calculates the weighted matrix Mean vector.
            </summary>
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="weights">A vector containing the importance of each sample in the matrix.</param>
            <param name="dimension">
              The dimension along which the means will be calculated. Pass
              0 to compute a row vector containing the mean of each column,
              or 1 to compute a column vector containing the mean of each row.
              Default value is 0.
            </param>
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMean(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the weighted matrix Mean vector.
            </summary>
            
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="weights">A vector containing the importance of each sample in the matrix.</param>
            
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMean(System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
              Calculates the weighted matrix Mean vector.
            </summary>
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="weights">A vector containing the importance of each sample in the matrix.</param>
            <param name="dimension">
              The dimension along which the means will be calculated. Pass
              0 to compute a row vector containing the mean of each column,
              or 1 to compute a column vector containing the mean of each row.
              Default value is 0.
            </param>
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMean(System.Double[][],System.Int32[])">
            <summary>
              Calculates the weighted matrix Mean vector.
            </summary>
            
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="weights">A vector containing the importance of each sample in the matrix.</param>
            
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMean(System.Double[][],System.Int32[],System.Int32)">
            <summary>
              Calculates the weighted matrix Mean vector.
            </summary>
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="weights">A vector containing the importance of each sample in the matrix.</param>
            <param name="dimension">
              The dimension along which the means will be calculated. Pass
              0 to compute a row vector containing the mean of each column,
              or 1 to compute a column vector containing the mean of each row.
              Default value is 0.
            </param>
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMean(System.Double[0:,0:],System.Int32[])">
            <summary>
              Calculates the weighted matrix Mean vector.
            </summary>
            
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="weights">A vector containing the importance of each sample in the matrix.</param>
            
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMean(System.Double[0:,0:],System.Int32[],System.Int32)">
            <summary>
              Calculates the weighted matrix Mean vector.
            </summary>
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="weights">A vector containing the importance of each sample in the matrix.</param>
            <param name="dimension">
              The dimension along which the means will be calculated. Pass
              0 to compute a row vector containing the mean of each column,
              or 1 to compute a column vector containing the mean of each row.
              Default value is 0.
            </param>
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[0:,0:],System.Int32[])">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[0:,0:],System.Int32[],System.Double[])">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[][],System.Int32[],System.Double[],System.Boolean)">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="unbiased">
              Pass true to compute the standard deviation using the sample variance.
              Pass false to compute it using the population variance. See remarks
              for more details.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the standard deviation σ using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true will
                thus compute σ using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
              
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[][],System.Int32[],System.Boolean)">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="unbiased">
              Pass true to compute the standard deviation using the sample variance.
              Pass false to compute it using the population variance. See remarks
              for more details.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the standard deviation σ using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true will
                thus compute σ using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
            
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[0:,0:],System.Double[],System.Double[])">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[][],System.Double[],System.Double[],System.Boolean)">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="unbiased">
              Pass true to compute the standard deviation using the sample variance.
              Pass false to compute it using the population variance. See remarks
              for more details.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
              
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the standard deviation σ using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true will
                thus compute σ using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
              
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[][],System.Double[],System.Boolean)">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="unbiased">
              Pass true to compute the standard deviation using the sample variance.
              Pass false to compute it using the population variance. See remarks
              for more details.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
              
            <remarks>
              <para>
                Setting <paramref name="unbiased"/> to <c>true</c> will make this method 
                compute the standard deviation σ using the sample variance, which is an unbiased 
                estimator of the true population variance. Setting this parameter to true will
                thus compute σ using the following formula:</para>
                <code>
                                      N
                   σ² = 1 / (N - 1)  ∑   (x_i − μ)²
                                      i=1
                </code>
              <para>
                Setting <paramref name="unbiased"/> to <c>false</c> will assume the given values
                already represent the whole population, and will compute the population variance
                using the formula: </para>
                <code>
                                      N
                   σ² =   (1 / N)    ∑   (x_i − μ)²
                                      i=1
                </code>
            </remarks>
            
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedCovariance(System.Double[][],System.Double[],System.Double[])">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedCovariance(System.Double[][],System.Double[],System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedCovariance(System.Double[][],System.Int32[],System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="weights">The number of times each sample should be repeated.</param>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedCovariance(System.Double[][],System.Double[],System.Double[],System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedCovariance(System.Double[][],System.Int32[],System.Double[],System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="weights">The number of times each sample should be repeated.</param>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedScatter(System.Double[][],System.Double[],System.Double[],System.Double,System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="factor">A real number to multiply each member of the matrix.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedScatter(System.Double[][],System.Int32[],System.Double[],System.Double,System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            
            <param name="weights">The number of times each sample should be repeated.</param>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The mean value of the given values, if already known.</param>
            <param name="factor">A real number to multiply each member of the matrix.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            
            <returns>The covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMean(System.Double[],System.Double[])">
            <summary>
              Computes the Weighted Mean of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
              in <see param="values"/>.</param>
            
            <returns>The mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMean(System.Double[],System.Int32[])">
            <summary>
              Computes the Weighted Mean of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="weights">A vector containing how many times each element
            in <see param="values"/> repeats itself in the non-weighted data.</param>
            
            <returns>The mean of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[],System.Double[])">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            
            <returns>The standard deviation of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[],System.Double[],Accord.Statistics.WeightType)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>.</param>
            <param name="weightType">How the weights should be interpreted for the bias correction.</param>
            
            <returns>The standard deviation of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[],System.Double[],System.Boolean,Accord.Statistics.WeightType)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute the 
              population variance. For <see cref="F:Accord.Statistics.WeightType.Repetition">integers weights
              </see>, the bias correction is equivalent to the non-weighted case. For 
              <see cref="F:Accord.Statistics.WeightType.Fraction">fractional weights</see>, the variance
              bias cannot be completely eliminated.</param>
            <param name="weightType">How the weights should be interpreted for the bias correction.</param>
            
            <returns>The standard deviation of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[],System.Double[],System.Double)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="mean">The mean of the vector, if already known.</param>
            
            <returns>The standard deviation of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[],System.Double[],System.Double,System.Boolean,Accord.Statistics.WeightType)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="mean">The mean of the vector, if already known.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute the 
              population variance. For <see cref="F:Accord.Statistics.WeightType.Repetition">integers weights
              </see>, the bias correction is equivalent to the non-weighted case. For 
              <see cref="F:Accord.Statistics.WeightType.Fraction">fractional weights</see>, the variance
              bias cannot be completely eliminated.</param>
            <param name="weightType">How the weights should be interpreted for the bias correction.</param>
            
            <returns>The standard deviation of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[],System.Double[])">
            <summary>
              Computes the weighted Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[],System.Double[],Accord.Statistics.WeightType)">
            <summary>
              Computes the weighted Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>.</param>
            <param name="weightType">How the weights should be interpreted for the bias correction.</param>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[],System.Double[],System.Boolean)">
            <summary>
              Computes the weighted Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute the 
              population variance. For <see cref="F:Accord.Statistics.WeightType.Repetition">integers weights
              </see>, the bias correction is equivalent to the non-weighted case. For 
              <see cref="F:Accord.Statistics.WeightType.Fraction">fractional weights</see>, the variance
              bias cannot be completely eliminated.</param>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[],System.Double[],System.Boolean,Accord.Statistics.WeightType)">
            <summary>
              Computes the weighted Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute the 
              population variance. For <see cref="F:Accord.Statistics.WeightType.Repetition">integers weights
              </see>, the bias correction is equivalent to the non-weighted case. For 
              <see cref="F:Accord.Statistics.WeightType.Fraction">fractional weights</see>, the variance
              bias cannot be completely eliminated.</param>
            <param name="weightType">How the weights should be interpreted for the bias correction.</param>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[],System.Double[],System.Double)">
            <summary>
              Computes the weighted Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="mean">The mean of the array, if already known.</param>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[],System.Double[],System.Double,System.Boolean,Accord.Statistics.WeightType)">
            <summary>
              Computes the weighted Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="mean">The mean of the array, if already known.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute the 
              population variance. For <see cref="F:Accord.Statistics.WeightType.Repetition">integers weights
              </see>, the bias correction is equivalent to the non-weighted case. For 
              <see cref="F:Accord.Statistics.WeightType.Fraction">fractional weights</see>, the variance
              bias cannot be completely eliminated.</param>
            <param name="weightType">How the weights should be interpreted for the bias correction.</param>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[],System.Int32[])">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="weights">A vector containing how many times each element
            in <see param="values"/> repeats itself in the non-weighted data.</param>
            
            <returns>The standard deviation of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[],System.Int32[],System.Double)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="weights">A vector containing how many times each element
            in <see param="values"/> repeats itself in the non-weighted data.</param>
            <param name="mean">The mean of the vector, if already known.</param>
            
            <returns>The standard deviation of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[],System.Int32[],System.Double,System.Boolean)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            
            <param name="values">A double array containing the vector members.</param>
            <param name="weights">A vector containing how many times each element
            in <see param="values"/> repeats itself in the non-weighted data.</param>
            <param name="mean">The mean of the vector, if already known.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute the 
              population variance. For <see cref="F:Accord.Statistics.WeightType.Repetition">integers weights
              </see>, the bias correction is equivalent to the non-weighted case. For 
              <see cref="F:Accord.Statistics.WeightType.Fraction">fractional weights</see>, the variance
              bias cannot be completely eliminated.</param>
            
            <returns>The standard deviation of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[],System.Int32[])">
            <summary>
              Computes the weighted Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="weights">A vector containing how many times each element
            in <see param="values"/> repeats itself in the non-weighted data.</param>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[],System.Int32[],System.Boolean)">
            <summary>
              Computes the weighted Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="weights">A vector containing how many times each element
            in <see param="values"/> repeats itself in the non-weighted data.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute the 
              population variance. For <see cref="F:Accord.Statistics.WeightType.Repetition">integers weights
              </see>, the bias correction is equivalent to the non-weighted case. For 
              <see cref="F:Accord.Statistics.WeightType.Fraction">fractional weights</see>, the variance
              bias cannot be completely eliminated.</param>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[],System.Int32[],System.Double)">
            <summary>
              Computes the weighted Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="weights">A vector containing how many times each element
            in <see param="values"/> repeats itself in the non-weighted data.</param>
            <param name="mean">The mean of the array, if already known.</param>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[],System.Int32[],System.Double,System.Boolean)">
            <summary>
              Computes the weighted Variance of the given values.
            </summary>
            
            <param name="values">A number array containing the vector members.</param>
            <param name="weights">A vector containing how many times each element
            in <see param="values"/> repeats itself in the non-weighted data.</param>
            <param name="mean">The mean of the array, if already known.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute the 
              population variance. For <see cref="F:Accord.Statistics.WeightType.Repetition">integers weights
              </see>, the bias correction is equivalent to the non-weighted case. For 
              <see cref="F:Accord.Statistics.WeightType.Fraction">fractional weights</see>, the variance
              bias cannot be completely eliminated.</param>
            
            <returns>The variance of the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[][],System.Double[])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[][],System.Double[],System.Double[])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[][],System.Double[],System.Double[],System.Boolean,Accord.Statistics.WeightType)">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="weightType">How the weights should be interpreted for the bias correction.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute the 
              population variance. For <see cref="F:Accord.Statistics.WeightType.Repetition">integers weights
              </see>, the bias correction is equivalent to the non-weighted case. For 
              <see cref="F:Accord.Statistics.WeightType.Fraction">fractional weights</see>, the variance
              bias cannot be completely eliminated.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[0:,0:],System.Double[],Accord.Statistics.WeightType)">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>.</param>
            <param name="weightType">How the weights should be interpreted for the bias correction.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[0:,0:],System.Double[],System.Double[])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[0:,0:],System.Double[],System.Double[],Accord.Statistics.WeightType)">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="weightType">How the weights should be interpreted for the bias correction.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[0:,0:],System.Double[],System.Double[],System.Boolean,Accord.Statistics.WeightType)">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="weights">An unit vector containing the importance of each sample
              in <see param="values"/>. How those values are interpreted depend on the
              value for <paramref name="weightType"/>.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute the 
              population variance. For <see cref="F:Accord.Statistics.WeightType.Repetition">integers weights
              </see>, the bias correction is equivalent to the non-weighted case. For 
              <see cref="F:Accord.Statistics.WeightType.Fraction">fractional weights</see>, the variance
              bias cannot be completely eliminated.</param>
            <param name="weightType">How the weights should be interpreted for the bias correction.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[][],System.Int32[])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[][],System.Int32[],System.Double[])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[][],System.Int32[],System.Double[],System.Boolean)">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute the 
              population variance. For <see cref="F:Accord.Statistics.WeightType.Repetition">integers weights
              </see>, the bias correction is equivalent to the non-weighted case. For 
              <see cref="F:Accord.Statistics.WeightType.Fraction">fractional weights</see>, the variance
              bias cannot be completely eliminated.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[0:,0:],System.Int32[])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[0:,0:],System.Int32[],System.Double[])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[0:,0:],System.Int32[],System.Double[],System.Boolean)">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matrix.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            <param name="unbiased">
              Pass true to compute the sample variance; or pass false to compute the 
              population variance. For <see cref="F:Accord.Statistics.WeightType.Repetition">integers weights
              </see>, the bias correction is equivalent to the non-weighted case. For 
              <see cref="F:Accord.Statistics.WeightType.Fraction">fractional weights</see>, the variance
              bias cannot be completely eliminated.</param>
            
            <returns>Returns a vector containing the variances of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMode``1(``0[],System.Double[],System.Boolean,System.Boolean)">
            <summary>
              Computes the Mode of the given values.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            <param name="inPlace">True to perform the operation in place, altering the original input vector.</param>
            <param name="alreadySorted">Pass true if the list of values is already sorted.</param>
            
            <returns>The most common value in the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMode``1(``0[],System.Int32[],System.Boolean,System.Boolean)">
            <summary>
              Computes the Mode of the given values.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            <param name="inPlace">True to perform the operation in place, altering the original input vector.</param>
            <param name="alreadySorted">Pass true if the list of values is already sorted.</param>
            
            <returns>The most common value in the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMax(System.Double[],System.Double[],System.Int32@,System.Boolean)">
            <summary>
              Gets the maximum value in a vector of observations that has a weight higher than zero.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="weights">A vector containing the importance of each sample in <see param="values"/>.</param>
            <param name="imax">The index of the maximum element in the vector, or -1 if it could not be found.</param>
            <param name="alreadySorted">Pass true if the list of values is already sorted.</param>
            
            <returns>The maximum value in the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMin(System.Double[],System.Double[],System.Int32@,System.Boolean)">
            <summary>
              Gets the minimum value in a vector of observations that has a weight higher than zero.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="weights">A vector containing the importance of each sample in <see param="values"/>.</param>
            <param name="imin">The index of the minimum element in the vector, or -1 if it could not be found.</param>
            <param name="alreadySorted">Pass true if the list of values is already sorted.</param>
            
            <returns>The minimum value in the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMax(System.Double[],System.Int32[],System.Int32@,System.Boolean)">
            <summary>
              Gets the maximum value in a vector of observations that has a weight higher than zero.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            <param name="imax">The index of the maximum element in the vector, or -1 if it could not be found.</param>
            <param name="alreadySorted">Pass true if the list of values is already sorted.</param>
            
            <returns>The maximum value in the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMin(System.Double[],System.Int32[],System.Int32@,System.Boolean)">
            <summary>
              Gets the minimum value in a vector of observations that has a weight higher than zero.
            </summary>
            
            <param name="values">A number array containing the vector values.</param>
            <param name="weights">The number of times each sample should be repeated.</param>
            <param name="imin">The index of the minimum element in the vector, or -1 if it could not be found.</param>
            <param name="alreadySorted">Pass true if the list of values is already sorted.</param>
            
            <returns>The minimum value in the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.InnerFence(AForge.DoubleRange)">
            <summary>
              Creates Tukey's box plot inner fence.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Tools.OuterFence(AForge.DoubleRange)">
            <summary>
              Creates Tukey's box plot outer fence.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Proportions(System.Int32[],System.Int32[])">
            <summary>
              Calculates the prevalence of a class for each variable.
            </summary>
            
            <param name="positives">An array of counts detailing the occurrence of the first class.</param>
            <param name="negatives">An array of counts detailing the occurrence of the second class.</param>
            
            <returns>An array containing the proportion of the first class over the total of occurrences.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Proportions(System.Int32[][],System.Int32,System.Int32)">
            <summary>
              Calculates the prevalence of a class.
            </summary>
            
            <param name="data">A matrix containing counted, grouped data.</param>
            <param name="positiveColumn">The index for the column which contains counts for occurrence of the first class.</param>
            <param name="negativeColumn">The index for the column which contains counts for occurrence of the second class.</param>
            
            <returns>An array containing the proportion of the first class over the total of occurrences.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Group(System.Int32[][],System.Int32,System.Int32)">
            <summary>
              Groups the occurrences contained in data matrix of binary (dichotomous) data.
            </summary>
            
            <param name="data">A data matrix containing at least a column of binary data.</param>
            <param name="labelColumn">Index of the column which contains the group label name.</param>
            <param name="dataColumn">Index of the column which contains the binary [0,1] data.</param>
            
            <returns>
               A matrix containing the group label in the first column, the number of occurrences of the first class
               in the second column and the number of occurrences of the second class in the third column.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Expand(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
              Extends a grouped data into a full observation matrix.
            </summary>
            
            <param name="data">The group labels.</param>
            <param name="positives">
              An array containing he occurrence of the positive class
              for each of the groups.</param>
            <param name="negatives">
              An array containing he occurrence of the negative class
              for each of the groups.</param>
              
            <returns>A full sized observation matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Expand(System.Int32[][],System.Int32,System.Int32,System.Int32)">
            <summary>
              Expands a grouped data into a full observation matrix.
            </summary>
            
            <param name="data">The grouped data matrix.</param>
            <param name="labelColumn">Index of the column which contains the labels
            in the grouped data matrix. </param>
            <param name="positiveColumn">Index of the column which contains
              the occurrences for the first class.</param>
            <param name="negativeColumn">Index of the column which contains
              the occurrences for the second class.</param>
              
            <returns>A full sized observation matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Expand(System.Int32[])">
            <summary>
              Expands a grouped data into a full observation matrix.
            </summary>
            
            <param name="labels">The class labels.</param>
            
            <returns>A jagged matrix where each row corresponds to each element 
              given in the <paramref name="labels"/> parameter, and each row has
              the same length as the number of <paramref name="labels"/> in the
              problem. Each row contains the value 1 on the position corresponding
              to the label index.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Expand(System.Int32[],System.Double,System.Double)">
            <summary>
              Expands a grouped data into a full observation matrix.
            </summary>
            
            <param name="labels">The class labels.</param>
            <param name="negative">The negative value to indicate the absence of the class.</param>
            <param name="positive">The positive value to indicate the presence of the class.</param>
            
            <returns>A jagged matrix where each row corresponds to each element 
              given in the <paramref name="labels"/> parameter, and each row has
              the same length as the number of <paramref name="labels"/> in the
              problem. Each row contains the positive value on the position corresponding
              to the label index, and the negative value on all others.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Expand(System.Int32[],System.Int32)">
            <summary>
              Expands a grouped data into a full observation matrix.
            </summary>
            
            <param name="labels">The class labels.</param>
            <param name="classes">The number of classes.</param>
            
            <returns>A jagged matrix where each row corresponds to each element 
              given in the <paramref name="labels"/> parameter, and each row has
              the same length as the number of <paramref name="classes"/> in the
              problem. Each row contains the positive value on the position corresponding
              to the label index, and the negative value on all others.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Expand(System.Int32[],System.Int32,System.Double,System.Double)">
            <summary>
              Expands a grouped data into a full observation matrix.
            </summary>
            
            <param name="labels">The class labels.</param>
            <param name="classes">The number of classes.</param>
            <param name="negative">The negative value to indicate the absence of the class.</param>
            <param name="positive">The positive value to indicate the presence of the class.</param>
            
            <returns>A jagged matrix where each row corresponds to each element 
              given in the <paramref name="labels"/> parameter, and each row has
              the same length as the number of <paramref name="classes"/> in the
              problem. Each row contains the value 1 on the position corresponding
              to the label index.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Determination(System.Double[],System.Double[])">
            <summary>
              Gets the coefficient of determination, as known as the R-Squared (R²)
            </summary>
            
            <remarks>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.
               
               The R^2 coefficient of determination is a statistical measure of how well the
               regression approximates the real data points. An R^2 of 1.0 indicates that the
               regression perfectly fits the data.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Tools.RandomSample(System.Int32,System.Int32)">
            <summary>
              Returns a random sample of size k from a population of size n.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Tools.RandomGroups(System.Int32,System.Int32)">
            <summary>
              Returns a random group assignment for a sample.
            </summary>
            
            <param name="size">The sample size.</param>
            <param name="groups">The number of groups.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.RandomGroups(System.Int32,System.Double)">
            <summary>
              Returns a random group assignment for a sample
              into two mutually exclusive groups.
            </summary>
            
            <param name="size">The sample size.</param>
            <param name="proportion">The proportion of samples between the groups.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.RandomGroups(System.Int32[],System.Int32,System.Int32)">
            <summary>
              Returns a random group assignment for a sample, making
              sure different class labels are distributed evenly among
              the groups.
            </summary>
            
            <param name="labels">A vector containing class labels.</param>
            <param name="classes">The number of different classes in <paramref name="labels"/>.</param>
            <param name="groups">The number of groups.</param>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Random(System.Int32)">
            <summary>
              Returns a random permutation of size n.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Shuffle``1(``0[])">
            <summary>
              Shuffles an array.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
              Shuffles a collection.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Whitening(System.Double[0:,0:],System.Double[0:,0:]@)">
            <summary>
              Computes the whitening transform for the given data, making
              its covariance matrix equals the identity matrix.
            </summary>
            <param name="value">A matrix where each column represent a
              variable and each row represent a observation.</param>
            <param name="transformMatrix">The base matrix used in the
              transformation.</param>
            <returns>
              The transformed source data (which now has unit variance).
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Rank(System.Double[],System.Boolean)">
            <summary>
              Gets the rank of a sample, often used with order statistics.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Tools.DistinctCount(System.Double[0:,0:])">
            <summary>
              Gets the number of distinct values 
              present in each column of a matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Tools.DistinctCount(System.Double[][])">
            <summary>
              Gets the number of distinct values 
              present in each column of a matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Tools.DistinctCount(System.Double[])">
            <summary>
              Gets the number of distinct values 
              present in each column of a matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Tools.RandomCovariance(System.Int32,System.Double,System.Double)">
            <summary>
              Generates a random <see cref="M:Accord.Statistics.Tools.Covariance(System.Double[],System.Double[],System.Boolean)"/> matrix.
            </summary>
            
            <param name="size">The size of the square matrix.</param>
            <param name="minValue">The minimum value for a diagonal element.</param>
            <param name="maxValue">The maximum size for a diagonal element.</param>
            
            <returns>A square, positive-definite matrix which 
              can be interpreted as a covariance matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Distance(Accord.Statistics.Kernels.IKernel,System.Double[],System.Double[])">
            <summary>
              Computes the kernel distance for a kernel function even if it doesn't
              implement the <see cref="T:Accord.Statistics.Kernels.IDistance"/> interface. Can be used to check
              the proper implementation of the distance function.
            </summary>
            
            <param name="kernel">The kernel function whose distance needs to be evaluated.</param>
            <param name="x">An input point <c>x</c> given in input space.</param>
            <param name="y">An input point <c>y</c> given in input space.</param>
            
            <returns>
              The distance between <paramref name="x"/> and <paramref name="y"/> in kernel (feature) space.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.NamespaceDoc">
            <summary>
             Contains statistical models with direct applications in machine learning, such as
             <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">Hidden Markov Models</see>, <see cref="T:Accord.Statistics.Models.Fields.ConditionalRandomField`1">
             Conditional Random Fields</see>, <see cref="T:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1">Hidden Conditional 
             Random Fields</see> and <see cref="T:Accord.Statistics.Models.Regression.Linear.ILinearRegression">linear</see> and <see cref="T:Accord.Statistics.Models.Regression.LogisticRegression">
             logistic regressions</see>.
            </summary>
            
            <remarks>
            <para>
              The main algorithms and techniques available on this namespaces are certainly
              the <see cref="N:Accord.Statistics.Models.Markov">hidden Markov models</see>.
              The Accord.NET Framework contains one of the most popular and well-tested
              offerings for creating, training and validating Markov models using either
              discrete observations or any arbitrary discrete, continuous or mixed <see cref="N:Accord.Statistics.Distributions">probability distributions</see> to 
              model the observations.</para>
              
            <para>
              This namespace also brings <see cref="N:Accord.Statistics.Models.Fields">
              Conditional Random Fields</see>, that alongside the Markov models can be
              used to build <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier">sequence classifiers</see>,
              perform gesture recognition, and can even be combined with neural networks
              to create <see cref="T:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovClassifier">hybrid models</see>. Other 
              models include <see cref="N:Accord.Statistics.Models.Regression">regression
              and survival models</see>.</para>
              
              
            <para>
              The namespace class diagram is shown below. </para>
              <img src="..\diagrams\classes\Accord.Statistics.Models.png"/>
              
            <para>
              Please note that class diagrams for each of the inner namespaces are 
              also available within their own documentation pages.</para>
            </remarks>
            
            <seealso cref="N:Accord.Statistics.Models.Fields"/>
            <seealso cref="N:Accord.Statistics.Models.Markov"/>
            <seealso cref="N:Accord.Statistics.Models.Regression"/>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.NamespaceDoc">
            <summary>
              Contains classes related to <see cref="T:Accord.Statistics.Models.Fields.ConditionalRandomField`1">Conditional Random
              Fields</see>, <see cref="T:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1">Hidden Conditional Random
              Fields</see> and their <see cref="N:Accord.Statistics.Models.Fields.Learning">learning
              algorithms</see>.
            </summary>
            
            <remarks>
            <para>
              The namespace class diagram is shown below. </para>
              <img src="..\diagrams\classes\Accord.Statistics.Models.Fields.png"/>
              
            <para>
              Please note that class diagrams for each of the inner namespaces are 
              also available within their own documentation pages.</para>
            </remarks>
            
            <seealso cref="N:Accord.Statistics.Models"/>
            <seealso cref="N:Accord.Statistics.Models.Fields"/>
            <seealso cref="N:Accord.Statistics.Models.Fields.Learning"/>
            <seealso cref="N:Accord.Statistics.Models.Fields.Functions"/>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Learning.NamespaceDoc">
             <summary>
               Contains learning algorithms for <see cref="T:Accord.Statistics.Models.Fields.ConditionalRandomField`1">CRFs</see> and
               <see cref="T:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1">HCRFs</see>, such as 
               <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1">Conjugate Gradient</see>, 
               <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenQuasiNewtonLearning`1">L-BFGS</see> and 
               <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1">RProp-based</see> learning.
             </summary>
             
             <remarks>
             <para>
               The namespace class diagram is shown below. </para>
               <img src="..\diagrams\classes\Accord.Statistics.Models.Fields.png"/>
             </remarks>
            
             <seealso cref="N:Accord.Statistics.Models.Fields"/>
             <seealso cref="N:Accord.Statistics.Models.Fields.Functions"/>
             
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovIndependentFactor">
            <summary>
              Factor Potential function for a Markov model whose states are independent 
              distributions composed of discrete and Normal distributed components.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Functions.FactorPotential`1">
            <summary>
              Factor Potential (Clique Potential) function.
            </summary>
            
            <typeparam name="T">The type of the observations being modeled.</typeparam>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Creates a new factor (clique) potential function.
            </summary>
            
            <param name="owner">The owner <see cref="T:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1"/>.</param>
            <param name="states">The number of states in this clique potential.</param>
            <param name="factorIndex">The index of this factor potential in the <paramref name="owner"/>.</param>
            <param name="edgeIndex">The index of the first edge feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="edgeCount">The number of edge features in this factor.</param>
            <param name="stateIndex">The index of the first state feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="stateCount">The number of state features in this factor.</param>
            <param name="classIndex">The index of the first class feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="classCount">The number of class features in this factor.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0},System.Int32,System.Int32)">
            <summary>
              Creates a new factor (clique) potential function.
            </summary>
            
            <param name="owner">The owner <see cref="T:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1"/>.</param>
            <param name="states">The number of states in this clique potential.</param>
            <param name="factorIndex">The index of this factor potential in the <paramref name="owner"/>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.Compute(System.Int32[],`0[],System.Int32)">
            <summary>
              Computes the factor potential function for the given parameters.
            </summary>
            
            <param name="states">A state sequence.</param>
            <param name="observations">A sequence of observations.</param>
            <param name="output">The output class label for the sequence.</param>
            <returns>The value of the factor potential function evaluated for the given parameters.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.GetFeatureVector(System.Int32[],`0[],System.Int32)">
            <summary>
              Computes the factor potential function for the given parameters.
            </summary>
            
            <param name="states">A state sequence.</param>
            <param name="observations">A sequence of observations.</param>
            <param name="output">The output class label for the sequence.</param>
            <returns>The value of the factor potential function evaluated for the given parameters.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.Compute(System.Int32,System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
              Computes the factor potential function for the given parameters.
            </summary>
            
            <param name="previousState">The previous state in a given sequence of states.</param>
            <param name="currentState">The current state in a given sequence of states.</param>
            <param name="observations">The observation vector.</param>
            <param name="index">The index of the observation in the current state of the sequence.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            <returns>The value of the factor potential function evaluated for the given parameters.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through all features in this factor potential function.
            </summary>
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through all features in this factor potential function.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.Clone(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0})">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.Owner">
            <summary>
              Gets the <see cref="T:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1"/> 
              to which this factor potential belongs.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.States">
            <summary>
              Gets the number of model states
              assumed by this function.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.Index">
            <summary>
              Gets the index of this factor in the 
              <see cref="P:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.Owner"/> potential function.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.FactorParameters">
            <summary>
              Gets the segment of the parameter vector which contains
              parameters respective to all features from this factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.EdgeParameters">
            <summary>
              Gets the segment of the parameter vector which contains
              parameters respective to the edge features.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.StateParameters">
            <summary>
              Gets the segment of the parameter vector which contains
              parameters respective to the state features.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.FactorPotential`1.OutputParameters">
            <summary>
              Gets the segment of the parameter vector which contains
              parameters respective to the output features.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovIndependentFactor.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double[]},System.Int32,System.Int32,System.Int32[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Creates a new factor (clique) potential function.
            </summary>
            
            <param name="owner">The owner <see cref="T:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1"/>.</param>
            <param name="states">The number of states in this clique potential.</param>
            <param name="factorIndex">The index of this factor potential in the <paramref name="owner"/>.</param>
            <param name="stateTable">The lookup table of states where the independent distributions begin.</param>
            <param name="classIndex">The index of the first class label feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="classCount">The number of class label features in this factor.</param>
            <param name="edgeIndex">The index of the first edge feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="edgeCount">The number of edge features in this factor.</param>
            <param name="stateIndex">The index of the first state feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="stateCount">The number of state features in this factor.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovIndependentFactor.Compute(System.Int32,System.Int32,System.Double[][],System.Int32,System.Int32)">
            <summary>
              Computes the factor potential function for the given parameters.
            </summary>
            
            <param name="previousState">The previous state in a given sequence of states.</param>
            <param name="currentState">The current state in a given sequence of states.</param>
            <param name="observations">The observation vector.</param>
            <param name="index">The index of the observation in the current state of the sequence.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            <returns>The value of the factor potential function evaluated for the given parameters.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.BaseViterbiLearning`1">
            <summary>
              Base class for implementations of the Viterbi learning algorithm.
              This class cannot be instantiated.
            </summary>
            
            <remarks>
            <para>
              This class uses a template method pattern so specialized classes
              can be written for each kind of hidden Markov model emission density
              (either discrete or continuous).</para>
              
            <para>
              For the actual Viterbi classes, please refer to <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning"/>
              or <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1"/>. For other kinds of algorithms, please
              see <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning"/> and <see cref="T:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning"/>
              and their generic counter-parts.</para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseViterbiLearning`1.#ctor">
            <summary>
              Creates a new instance of the Viterbi learning algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseViterbiLearning`1.Run(`0[])">
            <summary>
              Runs the learning algorithm.
            </summary>
            
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseViterbiLearning`1.ComputeLogLikelihood(`0[])">
            <summary>
              Computes the log-likelihood for the current model for the given observations.
            </summary>
            
            <param name="observations">The observation vectors.</param>
            
            <returns>The log-likelihood of the observations belonging to the model.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseViterbiLearning`1.RunEpoch(`0[],System.Int32[][])">
            <summary>
              Runs one single epoch (iteration) of the learning algorithm.
            </summary>
            
            <param name="inputs">The observation sequences.</param>
            <param name="outputs">A vector to be populated with the decoded Viterbi sequences.</param>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaseViterbiLearning`1.Tolerance">
            <summary>
              Gets or sets the maximum change in the average log-likelihood
              after an iteration of the algorithm used to detect convergence.
            </summary>
            
            <remarks>
              This is the likelihood convergence limit L between two iterations of the algorithm. The
              algorithm will stop when the change in the likelihood for two consecutive iterations
              has not changed by more than L percent of the likelihood. If left as zero, the
              algorithm will ignore this parameter and iterate over a number of fixed iterations
              specified by the previous parameter.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaseViterbiLearning`1.Iterations">
            <summary>
              Gets or sets the maximum number of iterations
              performed by the learning algorithm.
            </summary>
            
            <remarks>
              This is the maximum number of iterations to be performed by the learning algorithm. If
              specified as zero, the algorithm will learn until convergence of the model average
              likelihood respecting the desired limit.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaseViterbiLearning`1.Batches">
            <summary>
              Gets or sets on how many batches the learning data should be divided during learning.
              Batches are used to estimate adequately the first models so they can better compute
              the Viterbi paths for subsequent passes of the algorithm. Default is 1.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Running.IRunning`1">
            <summary>
              Common interface for running statistics.
            </summary>
            <remarks>
              Running statistics are measures computed as data becomes available.
              When using running statistics, there is no need to know the number of
              samples a priori, such as in the case of the direct <see cref="M:Accord.Statistics.Tools.Mean(System.Double[])"/>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Running.IRunning`1.Push(`0)">
            <summary>
              Registers the occurrence of a value.
            </summary>
            
            <param name="value">The value to be registered.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.IRunning`1.Clear">
            <summary>
              Clears all measures previously computed.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Hybrid.IHybridMarkovModel">
            <summary>
              Common interface for Hybrid Hidden Markov Models.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Hybrid.IHybridMarkovModel.Decode(System.Double[][],System.Double@)">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence.
            </summary>
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm.
            </remarks>
            <param name="observations">
              A sequence of observations.</param>
            <param name="logLikelihood">
              The state optimized probability.</param>
            <returns>
              The sequence of states that most likely produced the sequence.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Hybrid.IHybridMarkovModel.Evaluate(System.Double[][])">
            <summary>
              Calculates the probability that this model has generated the given sequence.
            </summary>
            <remarks>
              Evaluation problem. Given the HMM  M = (A, B, pi) and  the observation
              sequence O = {o1, o2, ..., oK}, calculate the probability that model
              M has generated sequence O. This can be computed efficiently using the
              Forward algorithm. </remarks>
            <param name="observations">
              A sequence of observations. </param>
            <returns>
              The probability that the given sequence has been generated by this model.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Hybrid.IHybridMarkovModel.Dimension">
            <summary>
              Gets the expected number of dimensions in each observation.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Hybrid.IHybridMarkovModel.States">
            <summary>
              Gets the number of states of this model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Hybrid.IHybridMarkovModel.Tag">
            <summary>
              Gets or sets a user-defined tag.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovClassifier">
            <summary>
              Hybrid Markov classifier for arbitrary state-observation functions.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovClassifier.#ctor(System.Collections.Generic.IEnumerable{Accord.Statistics.Models.Markov.Hybrid.IHybridMarkovModel})">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="models">
              The models specializing in each of the classes of 
              the classification problem.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovClassifier.Compute(System.Double[][])">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">
            threshold model</see>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovClassifier.Compute(System.Double[][],System.Double@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            <param name="response">The probability of the assigned class.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">
            threshold model</see>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovClassifier.Compute(System.Double[][],System.Double[]@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            <param name="responsibilities">The class responsibilities (or
            the probability of the sequence to belong to each class). When
            using threshold models, the sum of the probabilities will not
            equal one, and the amount left was the threshold probability.
            If a threshold model is not being used, the array should sum to
            one.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">
            threshold model</see>.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovClassifier.Models">
            <summary>
              Gets the Markov models for each sequence class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovClassifier.Dimension">
            <summary>
              Gets the number of dimensions of the 
              observations handled by this classifier.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Hybrid.GeneralMarkovFunction">
            <summary>
              General Markov function for arbitrary state-emission density definitions.
            </summary>
            
            <param name="previous">The previous state index.</param>
            <param name="observation">The observation at the current state.</param>
            <returns>An array containing the values for the observations in each next possible state.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovModel">
            <summary>
              Hybrid Markov model for arbitrary state-observation functions.
            </summary>
            
            <remarks>
              This class can be used to implement HMM hybrids such as ANN-HMM
              or SVM-HMMs through the specification of a custom <see cref="T:Accord.Statistics.Models.Markov.Hybrid.GeneralMarkovFunction"/>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovModel.#ctor(Accord.Statistics.Models.Markov.Hybrid.GeneralMarkovFunction,System.Int32,System.Int32)">
            <summary>
               Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovModel"/> class.
            </summary>
            
            <param name="function">A function specifying a probability for a transition-emission pair.</param>
            <param name="states">The number of states in the model.</param>
            <param name="dimension">The number of dimensions in the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovModel.Decode(System.Double[][],System.Double@)">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence.
            </summary>
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm.
            </remarks>
            <param name="observations">
              A sequence of observations.</param>
            <param name="logLikelihood">
              The state optimized probability.</param>
            <returns>
              The sequence of states that most likely produced the sequence.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovModel.Evaluate(System.Double[][])">
            <summary>
              Calculates the probability that this model has generated the given sequence.
            </summary>
            <remarks>
              Evaluation problem. Given the HMM  M = (A, B, pi) and  the observation
              sequence O = {o1, o2, ..., oK}, calculate the probability that model
              M has generated sequence O. This can be computed efficiently using the
              Forward algorithm. </remarks>
            <param name="observations">
              A sequence of observations. </param>
            <returns>
              The probability that the given sequence has been generated by this model.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovModel.Function">
            <summary>
              Gets the Markov function, which takes the previous state, the
              next state and a observation and produces a probability value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovModel.States">
            <summary>
              Gets the number of states in the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovModel.Dimension">
            <summary>
              Gets the number of dimensions of the 
              observations handled by this model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Hybrid.HybridMarkovModel.Tag">
            <summary>
              Gets or sets an user-defined object associated with this model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.MultipleBaumWelchLearning">
            <summary>
              Multiple-trials Baum-Welch learning.
            </summary>
            
            <remarks>
              This class can be used to perform multiple attempts on <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning">
              Baum-Welch learning</see> with multiple different initialization points. It can also
              be used as a replacement inside <see cref="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning"/> algorithms
              wherever a standard <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning"/> class would be used.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.IUnsupervisedLearning">
            <summary>
              Common interface for unsupervised learning algorithms for hidden
              Markov models such as the <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning">Baum-Welch
              learning</see> and the <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning">Viterbi learning
              </see> algorithms.
            </summary>
            
            <remarks>
            <para>
              In the context of <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">hidden Markov models</see>, 
              unsupervised algorithms are algorithms which consider that the sequence
              of states in a system is hidden, and just the system's outputs can be seen 
              (or are known) during training. This is in contrast with <see cref="T:Accord.Statistics.Models.Markov.Learning.ISupervisedLearning">
              supervised learning algorithms</see> such as the <see cref="T:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning">
              Maximum Likelihood (MLE)</see>, which consider that both the sequence of observations
              and the sequence of states are observable during training.
            </para>
            </remarks>
            
            <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning"/>
            <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1"/>
            <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning"/>
            <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.IUnsupervisedLearning.Run(System.Array[])">
            <summary>
              Runs the learning algorithm.
            </summary>
            
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            
            <param name="observations">The observations.</param>
            
        </member>
        <member name="T:Accord.Statistics.Models.IConvergenceLearning">
            <summary>
              Common interface for Hidden Conditional Random Fields learning algorithms.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.IConvergenceLearning.Tolerance">
            <summary>
              Gets or sets the maximum change in the average log-likelihood
              after an iteration of the algorithm used to detect convergence.
            </summary>
            
            <remarks>
              This is the likelihood convergence limit L between two iterations of the algorithm. The
              algorithm will stop when the change in the likelihood for two consecutive iterations
              has not changed by more than L percent of the likelihood. If left as zero, the
              algorithm will ignore this parameter and iterate over a number of fixed iterations
              specified by the previous parameter.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Models.IConvergenceLearning.Iterations">
            <summary>
              Gets or sets the maximum number of iterations
              performed by the learning algorithm.
            </summary>
            
            <remarks>
              This is the maximum number of iterations to be performed by the learning algorithm. If
              specified as zero, the algorithm will learn until convergence of the model average
              likelihood respecting the desired limit.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.IUnsupervisedLearning`1">
            <summary>
              Common interface for unsupervised learning algorithms for hidden
              Markov models such as the <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning">Baum-Welch
              learning</see> and the <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning">Viterbi learning
              </see> algorithms.
            </summary>
            
            <remarks>
            <para>
              In the context of <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">hidden Markov models</see>, 
              unsupervised algorithms are algorithms which consider that the sequence
              of states in a system is hidden, and just the system's outputs can be seen 
              (or are known) during training. This is in contrast with <see cref="T:Accord.Statistics.Models.Markov.Learning.ISupervisedLearning">
              supervised learning algorithms</see> such as the <see cref="T:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning">
              Maximum Likelihood (MLE)</see>, which consider that both the sequence of observations
              and the sequence of states are observable during training.
            </para>
            </remarks>
            
            <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning"/>
            <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1"/>
            <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning"/>
            <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.IUnsupervisedLearning`1.Run(`0[])">
            <summary>
              Runs the learning algorithm.
            </summary>
            
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            
            <param name="observations">The observations.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.MultipleBaumWelchLearning.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel,Accord.Statistics.Models.Markov.Topology.ITopology,System.Int32)">
            <summary>
              Creates a new instance of the Baum-Welch learning algorithm.
            </summary>
            
            <param name="attempts">The number of inner models to be learned.</param>
            <param name="model">The template model used to create all subsequent inner models.</param>
            <param name="topology">The topology to be used by the inner models. To be useful,
              this needs to be a topology configured to create random initialization matrices.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.MultipleBaumWelchLearning.Run(System.Int32[][])">
            <summary>
              Runs the learning algorithm.
            </summary>
            
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.MultipleBaumWelchLearning.Accord#Statistics#Models#Markov#Learning#IUnsupervisedLearning#Run(System.Array[])">
            <summary>
              Runs the learning algorithm.
            </summary>
            
            <param name="observations">The observations.</param>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.MultipleBaumWelchLearning.Model">
            <summary>
              Gets the template model, used to create all other instances.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.MultipleBaumWelchLearning.Topology">
            <summary>
              Gets the topology used on the inner models.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.MultipleBaumWelchLearning.Trials">
            <summary>
              Gets or sets how many trials should be attempted
              before the model with highest log-likelihood is
              selected as the best model found.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.MultipleBaumWelchLearning.Tolerance">
            <summary>
              Gets or sets the maximum change in the average log-likelihood
              after an iteration of the algorithm used to detect convergence.
            </summary>
            
            <remarks>
              This is the likelihood convergence limit L between two iterations of the algorithm. The
              algorithm will stop when the change in the likelihood for two consecutive iterations
              has not changed by more than L percent of the likelihood. If left as zero, the
              algorithm will ignore this parameter and iterate over a number of fixed iterations
              specified by the previous parameter.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.MultipleBaumWelchLearning.Iterations">
            <summary>
              Gets or sets the maximum number of iterations
              performed by the learning algorithm.
            </summary>
            
            <remarks>
              This is the maximum number of iterations to be performed by the learning algorithm. If
              specified as zero, the algorithm will learn until convergence of the model average
              likelihood respecting the desired limit.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.MultipleBaumWelchLearning.Candidate">
            <summary>
              inner class to hold information about a inner model.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.MarkovHelperMethods">
            <summary>
              Internal methods for validation and other shared functions.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.MarkovHelperMethods.convertNoCheck(System.Array,System.Int32)">
            <summary>
              Converts a univariate or multivariate array
              of observations into a two-dimensional jagged array.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.MarkovHelperMethods.checkAndConvert(System.Array,System.Int32)">
            <summary>
              Converts a univariate or multivariate array
              of observations into a two-dimensional jagged array.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Fitting.NonlinearLeastSquares">
            <summary>
              Non-linear Least Squares for <see cref="T:Accord.Statistics.Models.Regression.NonlinearRegression"/> optimization.
            </summary>
            
            <example>
            <code>
            // Suppose we would like to map the continuous values in the
            // second column to the integer values in the first column.
            double[,] data =
            {
                { -40,    -21142.1111111111 },
                { -30,    -21330.1111111111 },
                { -20,    -12036.1111111111 },
                { -10,      7255.3888888889 },
                {   0,     32474.8888888889 },
                {  10,     32474.8888888889 },
                {  20,      9060.8888888889 },
                {  30,    -11628.1111111111 },
                {  40,    -15129.6111111111 },
            };
            
            // Extract inputs and outputs
            double[][] inputs = data.GetColumn(0).ToArray();
            double[] outputs = data.GetColumn(1);
            
            // Create a Nonlinear regression using 
            var regression = new NonlinearRegression(3,
            
                // Let's assume a quadratic model function: ax² + bx + c
                function: (w, x) =&gt; w[0] * x[0] * x[0] + w[1] * x[0] + w[2], 
            
                // Derivative in respect to the weights:
                gradient: (w, x, r) =&gt;
                {
                    r[0] = 2 * w[0]; // w.r.t a: 2a  
                    r[1] = w[1];     // w.r.t b: b
                    r[2] = w[2];     // w.r.t c: 0
                }
            );
            
            // Create a non-linear least squares teacher
            var nls = new NonlinearLeastSquares(regression);
            
            // Initialize to some random values
            regression.Coefficients[0] = 4.2;
            regression.Coefficients[1] = 0.3;
            regression.Coefficients[2] = 1;
            
            // Run the function estimation algorithm
            double error;
            for (int i = 0; i &lt; 100; i++)
                error = nls.Run(inputs, outputs);
            
            // Use the function to compute the input values
            double[] predict = inputs.Apply(regression.Compute);
            </code>
            </example>
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Fitting.IRegressionFitting">
            <summary>
              Common interface for regression fitting methods.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.IRegressionFitting.Run(System.Double[][],System.Double[])">
            <summary>
              Runs the fitting algorithm.
            </summary>
            
            <param name="inputs">The input training data.</param>
            <param name="outputs">The output associated with each of the outputs.</param>
            
            <returns>The sum of squared errors after the learning.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.NonlinearLeastSquares.#ctor(Accord.Statistics.Models.Regression.NonlinearRegression)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Regression.Fitting.NonlinearLeastSquares"/> class.
            </summary>
            
            <param name="regression">The regression model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.NonlinearLeastSquares.#ctor(Accord.Statistics.Models.Regression.NonlinearRegression,Accord.Math.Optimization.ILeastSquaresMethod)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Regression.Fitting.NonlinearLeastSquares"/> class.
            </summary>
            
            <param name="regression">The regression model.</param>
            <param name="algorithm">The <see cref="T:Accord.Math.Optimization.ILeastSquaresMethod">least squares</see>
            algorithm to be used to estimate the regression parameters. Default is to
            use a <see cref="T:Accord.Math.Optimization.LevenbergMarquardt">Levenberg-Marquardt</see> algorithm.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.NonlinearLeastSquares.Run(System.Double[][],System.Double[])">
            <summary>
              Runs the fitting algorithm.
            </summary>
            
            <param name="inputs">The input training data.</param>
            <param name="outputs">The output associated with each of the outputs.</param>
            
            <returns>
              The sum of squared errors after the learning.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.NonlinearLeastSquares.ComputeStandardErrors">
            <summary>
              Gets or sets a value indicating whether standard
              errors should be computed in the next iteration.
            </summary>
            <value>
            	<c>true</c> to compute standard errors; otherwise, <c>false</c>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.NonlinearLeastSquares.Algorithm">
            <summary>
              Gets the <see cref="T:Accord.Math.Optimization.ILeastSquaresMethod">Least-Squares</see>
              optimization algorithm used to perform the actual learning.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.GeneralizedLinearRegression">
             <summary>
               Generalized Linear Model Regression.
             </summary>
             
             <remarks>
             
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Bishop, Christopher M.; Pattern Recognition and Machine Learning. 
                   Springer; 1st ed. 2006.</description></item>
                 <item><description>
                   Amos Storkey. (2005). Learning from Data: Learning Logistic Regressors. School of Informatics.
                   Available on: http://www.inf.ed.ac.uk/teaching/courses/lfd/lectures/logisticlearn-print.pdf </description></item>
                 <item><description>
                   Cosma Shalizi. (2009). Logistic Regression and Newton's Method. Available on:
                   http://www.stat.cmu.edu/~cshalizi/350/lectures/26/lecture-26.pdf </description></item>
                 <item><description>
                   Edward F. Conor. Logistic Regression. Website. Available on: 
                   http://userwww.sfsu.edu/~efc/classes/biol710/logistic/logisticreg.htm </description></item>
               </list></para>  
             </remarks>
             
             <example>
               <code>
                // Suppose we have the following data about some patients.
                // The first variable is continuous and represent patient
                // age. The second variable is dichotomic and give whether
                // they smoke or not (This is completely fictional data).
                double[][] input =
                {
                    new double[] { 55, 0 }, // 0 - no cancer
                    new double[] { 28, 0 }, // 0
                    new double[] { 65, 1 }, // 0
                    new double[] { 46, 0 }, // 1 - have cancer
                    new double[] { 86, 1 }, // 1
                    new double[] { 56, 1 }, // 1
                    new double[] { 85, 0 }, // 0
                    new double[] { 33, 0 }, // 0
                    new double[] { 21, 1 }, // 0
                    new double[] { 42, 1 }, // 1
                };
            
                // We also know if they have had lung cancer or not, and 
                // we would like to know whether smoking has any connection
                // with lung cancer (This is completely fictional data).
                double[] output =
                {
                    0, 0, 0, 1, 1, 1, 0, 0, 0, 1
                };
            
            
                // To verify this hypothesis, we are going to create a GLM
                // regression model for those two inputs (age and smoking).
                var regression = new GeneralizedLinearRegression(new ProbitLinkFunction(), inputs: 2);
            
                // Next, we are going to estimate this model. For this, we
                // will use the Iteratively Reweighted Least Squares method.
                var teacher = new IterativeReweightedLeastSquares(regression);
            
                // Now, we will iteratively estimate our model. The Run method returns
                // the maximum relative change in the model parameters and we will use
                // it as the convergence criteria.
            
                double delta = 0;
                do
                {
                    // Perform an iteration
                    delta = teacher.Run(input, output);
            
                } while (delta > 0.001);
            
               </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.#ctor(Accord.Statistics.Links.ILinkFunction,System.Int32)">
            <summary>
              Creates a new Generalized Linear Regression Model.
            </summary>
            
            <param name="function">The link function to use.</param>
            <param name="inputs">The number of input variables for the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.#ctor(Accord.Statistics.Links.ILinkFunction,System.Int32,System.Double)">
            <summary>
              Creates a new Generalized Linear Regression Model.
            </summary>
            
            <param name="function">The link function to use.</param>
            <param name="inputs">The number of input variables for the model.</param>
            <param name="intercept">The starting intercept value. Default is 0.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.#ctor(Accord.Statistics.Links.ILinkFunction,System.Double[],System.Double[])">
            <summary>
              Creates a new Generalized Linear Regression Model.
            </summary>
            
            <param name="function">The link function to use.</param>
            <param name="coefficients">The coefficient vector.</param>
            <param name="standardErrors">The standard error vector.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.Compute(System.Double[])">
            <summary>
              Computes the model output for the given input vector.
            </summary>
            
            <param name="input">The input vector.</param>
            
            <returns>The output value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.Compute(System.Double[][])">
            <summary>
              Computes the model output for each of the given input vectors.
            </summary>
            
            <param name="input">The array of input vectors.</param>
            
            <returns>The array of output values.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.GetWaldTest(System.Int32)">
            <summary>
              Gets the Wald Test for a given coefficient.
            </summary>
            
            <remarks>
              The Wald statistical test is a test for a model parameter in which
              the estimated parameter θ is compared with another proposed parameter
              under the assumption that the difference between them will be approximately
              normal. There are several problems with the use of the Wald test. Please
              take a look on substitute tests based on the log-likelihood if possible.
            </remarks>
            
            <param name="index">
              The coefficient's index. The first value
              (at zero index) is the intercept value.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.GetLogLikelihood(System.Double[][],System.Double[])">
            <summary>
              Gets the Log-Likelihood for the model.
            </summary>
            
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <returns>
              The Log-Likelihood (a measure of performance) of
              the model calculated over the given data sets.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.GetLogLikelihood(System.Double[][],System.Double[],System.Double[])">
            <summary>
              Gets the Log-Likelihood for the model.
            </summary>
            
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <param name="weights">The weights associated with each input vector.</param>
            
            <returns>
              The Log-Likelihood (a measure of performance) of
              the model calculated over the given data sets.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.GetDeviance(System.Double[][],System.Double[])">
            <summary>
              Gets the Deviance for the model.
            </summary>
            
            <remarks>
              The deviance is defined as -2*Log-Likelihood.
            </remarks>
            
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <returns>
              The deviance (a measure of performance) of the model
              calculated over the given data sets.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.GetDeviance(System.Double[][],System.Double[],System.Double[])">
            <summary>
              Gets the Deviance for the model.
            </summary>
            
            <remarks>
              The deviance is defined as -2*Log-Likelihood.
            </remarks>
            
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <param name="weights">The weights associated with each input vector.</param>
            
            <returns>
              The deviance (a measure of performance) of the model
              calculated over the given data sets.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.GetLogLikelihoodRatio(System.Double[][],System.Double[],Accord.Statistics.Models.Regression.GeneralizedLinearRegression)">
            <summary>
              Gets the Log-Likelihood Ratio between two models.
            </summary>
            
            <remarks>
              The Log-Likelihood ratio is defined as 2*(LL - LL0).
            </remarks>
            
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <param name="regression">Another Logistic Regression model.</param>
            
            <returns>The Log-Likelihood ratio (a measure of performance
            between two models) calculated over the given data sets.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.GetLogLikelihoodRatio(System.Double[][],System.Double[],System.Double[],Accord.Statistics.Models.Regression.GeneralizedLinearRegression)">
            <summary>
              Gets the Log-Likelihood Ratio between two models.
            </summary>
            
            <remarks>
              The Log-Likelihood ratio is defined as 2*(LL - LL0).
            </remarks>
            
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <param name="weights">The weights associated with each input vector.</param>
            <param name="regression">Another Logistic Regression model.</param>
            
            <returns>The Log-Likelihood ratio (a measure of performance
            between two models) calculated over the given data sets.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.ChiSquare(System.Double[][],System.Double[])">
            <summary>
              The likelihood ratio test of the overall model, also called the model chi-square test.
            </summary>
            
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            
            <remarks>
              <para>
              The Chi-square test, also called the likelihood ratio test or the log-likelihood test
              is based on the deviance of the model (-2*log-likelihood). The log-likelihood ratio test 
              indicates whether there is evidence of the need to move from a simpler model to a more
              complicated one (where the simpler model is nested within the complicated one).</para>
              <para>
              The difference between the log-likelihood ratios for the researcher's model and a
              simpler model is often called the "model chi-square".</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.ChiSquare(System.Double[][],System.Double[],System.Double[])">
            <summary>
              The likelihood ratio test of the overall model, also called the model chi-square test.
            </summary>
            
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <param name="weights">The weights associated with each input vector.</param>
            
            <remarks>
              <para>
              The Chi-square test, also called the likelihood ratio test or the log-likelihood test
              is based on the deviance of the model (-2*log-likelihood). The log-likelihood ratio test 
              indicates whether there is evidence of the need to move from a simpler model to a more
              complicated one (where the simpler model is nested within the complicated one).</para>
              <para>
              The difference between the log-likelihood ratios for the researcher's model and a
              simpler model is often called the "model chi-square".</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.Clone">
            <summary>
              Creates a new GeneralizedLinearRegression that is a copy of the current instance.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.FromLogisticRegression(Accord.Statistics.Models.Regression.LogisticRegression,System.Boolean)">
            <summary>
              Creates a GeneralizedLinearRegression from a <see cref="T:Accord.Statistics.Models.Regression.LogisticRegression"/> object. 
            </summary>
            
            <param name="regression">A <see cref="T:Accord.Statistics.Models.Regression.LogisticRegression"/> object.</param>
            <param name="makeCopy">True to make a copy of the logistic regression values, false
            to use the actual values. If the actual values are used, changes done on one model
            will be reflected on the other model.</param>
            
            <returns>A new <see cref="T:Accord.Statistics.Models.Regression.GeneralizedLinearRegression"/> which is a copy of the 
            given <see cref="T:Accord.Statistics.Models.Regression.LogisticRegression"/>.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.Coefficients">
            <summary>
              Gets the coefficient vector, in which the
              first value is always the intercept value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.StandardErrors">
            <summary>
              Gets the standard errors associated with each
              coefficient during the model estimation phase.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.Inputs">
            <summary>
              Gets the number of inputs handled by this model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.Link">
            <summary>
              Gets the link function used by
              this generalized linear model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.Intercept">
            <summary>
              Gets or sets the intercept term. This is always the 
              first value of the <see cref="P:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.Coefficients"/> array.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Fitting.LogisticGradientDescent">
            <summary>
              Stochastic Gradient Descent learning for Logistic Regression fitting.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.LogisticGradientDescent.#ctor(Accord.Statistics.Models.Regression.LogisticRegression)">
            <summary>
              Constructs a new Gradient Descent algorithm.
            </summary>
            
            <param name="regression">The regression to estimate.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.LogisticGradientDescent.Run(System.Double[][],System.Double[][])">
            <summary>
              Runs one iteration of the Reweighted Least Squares algorithm.
            </summary>
            
            <param name="inputs">The input data.</param>
            <param name="outputs">The outputs associated with each input vector.</param>
            
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.LogisticGradientDescent.Run(System.Double[],System.Double)">
            <summary>
              Runs a single pass of the gradient descent algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.LogisticGradientDescent.Run(System.Double[][],System.Double[])">
            <summary>
              Runs one iteration of the Reweighted Least Squares algorithm.
            </summary>
            <param name="inputs">The input data.</param>
            <param name="outputs">The outputs associated with each input vector.</param>
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.LogisticGradientDescent.ComputeError(System.Double[][],System.Double[])">
            <summary>
              Computes the sum-of-squared error between the
              model outputs and the expected outputs.
            </summary>
            
            <param name="inputs">The input data set.</param>
            <param name="outputs">The output values.</param>
            
            <returns>The sum-of-squared errors.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LogisticGradientDescent.Previous">
            <summary>
              Gets the previous values for the coefficients which were
              in place before the last learning iteration was performed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LogisticGradientDescent.Solution">
            <summary>
              Gets the current values for the coefficients.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LogisticGradientDescent.Gradient">
            <summary>
              Gets the Gradient vector computed in
              the last Newton-Raphson iteration.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LogisticGradientDescent.Parameters">
            <summary>
              Gets the total number of parameters in the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LogisticGradientDescent.Stochastic">
            <summary>
              Gets or sets whether this algorithm should use
              stochastic updates or not. Default is false.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LogisticGradientDescent.LearningRate">
            <summary>
              Gets or sets the algorithm
              learning rate. Default is 0.1.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.RegressionFunction">
            <summary>
              Regression function delegate.
            </summary>
            
            <remarks>
              This delegate represents a parameterized function that, given a set of
              <paramref name="coefficients">model coefficients</paramref> and an input
              vector, produces an associated output value.
            </remarks>
            
            <param name="coefficients">The model coefficients, also known as parameters or coefficients.</param>
            <param name="input">An input vector.</param>
            
            <returns>The output value produced given the
            <paramref name="coefficients"/> and <paramref name="input"/> vector.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.RegressionGradientFunction">
            <summary>
              Gradient function delegate.
            </summary>
            
            <remarks>
              This delegate represents the gradient of <see cref="T:Accord.Statistics.Models.Regression.RegressionFunction">regression 
              function</see>. A regression function is a parameterized function that, given a set
              of <paramref name="coefficients">model coefficients</paramref> and an input vector,
              produces an associated output value. This function should compute the gradient vector
              in respect to the function <paramref name="coefficients"/>.
            </remarks>
            
            <param name="coefficients">The model coefficients, also known as parameters or coefficients.</param>
            <param name="input">An input vector.</param>
            <param name="result">The resulting gradient vector (w.r.t to the coefficients).</param>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.NonlinearRegression">
            <summary>
              Nonlinear Regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.NonlinearRegression.#ctor(System.Int32,Accord.Statistics.Models.Regression.RegressionFunction)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Regression.NonlinearRegression"/> class.
            </summary>
            
            <param name="parameters">The number of variables (free parameters) in the model.</param>
            <param name="function">The regression function implementing the regression model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.NonlinearRegression.#ctor(System.Int32,Accord.Statistics.Models.Regression.RegressionFunction,Accord.Statistics.Models.Regression.RegressionGradientFunction)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Regression.NonlinearRegression"/> class.
            </summary>
            
            <param name="parameters">The number of variables (free parameters) in the model.</param>
            <param name="function">The regression function implementing the regression model.</param>
            <param name="gradient">The function that computes the gradient for <paramref name="function"/>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.NonlinearRegression.Compute(System.Double[])">
            <summary>
              Computes the model output for the given input vector.
            </summary>
            
            <param name="inputs">The input vector.</param>
            
            <returns>The output value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.NonlinearRegression.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.NonlinearRegression.Coefficients">
            <summary>
              Gets the regression coefficients.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.NonlinearRegression.StandardErrors">
            <summary>
              Gets the standard errors for the regression coefficients.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.NonlinearRegression.Function">
            <summary>
              Gets the model function, mapping inputs to 
              outputs given a suitable parameter vector.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.NonlinearRegression.Gradient">
            <summary>
              Gets or sets a function that computes the gradient of the
              <see cref="P:Accord.Statistics.Models.Regression.NonlinearRegression.Function"/> in respect to the <see cref="P:Accord.Statistics.Models.Regression.NonlinearRegression.Coefficients"/>.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.ProportionalHazards">
            <summary>
              Cox's Proportional Hazards Model.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.#ctor(System.Int32)">
            <summary>
              Creates a new Cox Proportional-Hazards Model.
            </summary>
            
            <param name="inputs">The number of input variables for the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.#ctor(System.Int32,Accord.Statistics.Distributions.IUnivariateDistribution)">
            <summary>
              Creates a new Cox Proportional-Hazards Model.
            </summary>
            
            <param name="inputs">The number of input variables for the model.</param>
            <param name="baseline">The initial baseline hazard distribution.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.Compute(System.Double[])">
            <summary>
              Computes the model output for the given input vector.
            </summary>
            
            <param name="input">The input vector.</param>
            <returns>The output value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.Compute(System.Double[][])">
            <summary>
              Computes the model output for the given input vector.
            </summary>
            
            <param name="input">The input vector.</param>
            <returns>The output value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.Compute(System.Double[],System.Double)">
            <summary>
              Computes the model output for the given input vector.
            </summary>
            
            <param name="input">The input vector.</param>
            <param name="time">The event time.</param>
            
            <returns>The probabilities of the event occurring at 
            the given time for the given observation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.Compute(System.Double)">
            <summary>
              Computes the model output for the given time.
            </summary>
            
            <param name="time">The event time.</param>
            
            <returns>The probabilities of the event occurring at the given time.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.Survival(System.Double)">
            <summary>
              Computes the model's baseline survival function. This method
              simply calls the <see cref="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.ComplementaryDistributionFunction(System.Double)"/>
              of the <see cref="P:Accord.Statistics.Models.Regression.ProportionalHazards.BaselineHazard"/> function.
            </summary>
            
            <param name="time">The event time.</param>
            
            <returns>The baseline survival function at the given time.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.Compute(System.Double[][],System.Double[])">
            <summary>
              Computes the model output for the given input vector.
            </summary>
            
            <param name="input">The input vector.</param>
            <param name="time">The event times.</param>
            
            <returns>The probabilities of the event occurring at 
            the given times for the given observations.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.GetLogHazardRatio(System.Double[],System.Double[])">
            <summary>
              Gets the Log-Hazard Ratio between two observations.
            </summary>
            
            <param name="x">The first observation.</param>
            <param name="y">The second observation.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.GetDeviance(System.Double[][],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])">
            <summary>
              Gets the Deviance for the model.
            </summary>
            
            <remarks>
              The deviance is defined as -2*Log-Likelihood.
            </remarks>
            
            <param name="inputs">A set of input data.</param>
            <param name="time">The time-to-event before the output occurs.</param>
            <param name="output">The corresponding output data.</param>
            
            <returns>
              The deviance (a measure of performance) of the model
              calculated over the given data sets.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.GetPartialLogLikelihood(System.Double[][],System.Double[],System.Int32[])">
             <summary>
               Gets the Partial Log-Likelihood for the model.
             </summary>
             
             <param name="inputs">A set of input data.</param>
             <param name="time">The time-to-event before the output occurs.</param>
             <param name="output">The corresponding output data.</param>
            
             <returns>
               The Partial Log-Likelihood (a measure of performance)
               of the model calculated over the given data set.
             </returns>
             
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.GetPartialLogLikelihood(System.Double[][],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])">
             <summary>
               Gets the Partial Log-Likelihood for the model.
             </summary>
             
             <param name="inputs">A set of input data.</param>
             <param name="time">The time-to-event before the output occurs.</param>
             <param name="output">The corresponding output data.</param>
            
             <returns>
               The Partial Log-Likelihood (a measure of performance)
               of the model calculated over the given data set.
             </returns>
             
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.GetPartialLogLikelihood(System.Double[],System.Int32[])">
             <summary>
               Gets the Partial Log-Likelihood for the model.
             </summary>
             
             <param name="time">The time-to-event before the output occurs.</param>
             <param name="output">The corresponding output data.</param>
            
             <returns>
               The Partial Log-Likelihood (a measure of performance)
               of the model calculated over the given data set.
             </returns>
             
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.GetPartialLogLikelihood(System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])">
             <summary>
               Gets the Partial Log-Likelihood for the model.
             </summary>
             
             <param name="time">The time-to-event before the output occurs.</param>
             <param name="output">The corresponding output data.</param>
            
             <returns>
               The Partial Log-Likelihood (a measure of performance)
               of the model calculated over the given data set.
             </returns>
             
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.GetConfidenceInterval(System.Int32)">
            <summary>
              Gets the 95% confidence interval for the
              Hazard Ratio for a given coefficient.
            </summary>
            
            <param name="index">
              The coefficient's index.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.GetWaldTest(System.Int32)">
            <summary>
              Gets the Wald Test for a given coefficient.
            </summary>
            
            <remarks>
              The Wald statistical test is a test for a model parameter in which
              the estimated parameter θ is compared with another proposed parameter
              under the assumption that the difference between them will be approximately
              normal. There are several problems with the use of the Wald test. Please
              take a look on substitute tests based on the log-likelihood if possible.
            </remarks>
            
            <param name="index">
              The coefficient's index. The first value
              (at zero index) is the intercept value.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.GetLogLikelihoodRatio(System.Double[][],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[],Accord.Statistics.Models.Regression.ProportionalHazards)">
            <summary>
              Gets the Log-Likelihood Ratio between two models.
            </summary>
            
            <remarks>
              The Log-Likelihood ratio is defined as 2*(LL - LL0).
            </remarks>
            
            <param name="input">A set of input data.</param>
            <param name="time">The time-to-event before the output occurs.</param>
            <param name="output">The corresponding output data.</param>
            <param name="hazards">Another Cox Proportional Hazards model.</param>
            
            <returns>The Log-Likelihood ratio (a measure of performance
            between two models) calculated over the given data sets.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.ChiSquare(System.Double[][],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])">
            <summary>
              The likelihood ratio test of the overall model, also called the model chi-square test.
            </summary>
            
            <param name="input">A set of input data.</param>
            <param name="time">The time-to-event before the output occurs.</param>
            <param name="output">The corresponding output data.</param>
            
            <remarks>
              <para>
              The Chi-square test, also called the likelihood ratio test or the log-likelihood test
              is based on the deviance of the model (-2*log-likelihood). The log-likelihood ratio test 
              indicates whether there is evidence of the need to move from a simpler model to a more
              complicated one (where the simpler model is nested within the complicated one).</para>
              <para>
              The difference between the log-likelihood ratios for the researcher's model and a
              simpler model is often called the "model chi-square".</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.Clone">
            <summary>
              Creates a new Cox's Proportional Hazards that is a copy of the current instance.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.ProportionalHazards.GetHazardRatio(System.Int32)">
            <summary>
              Gets the Hazard Ratio for a given coefficient.
            </summary>
            
            <remarks>
              The hazard ratio can be computed raising Euler's number
              (e ~~ 2.71) to the power of the associated coefficient.
            </remarks>
            <param name="index">
              The coefficient's index. 
            </param>
            <returns>
              The Hazard Ratio for the given coefficient.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.ProportionalHazards.Offsets">
            <summary>
              Gets the mean vector used to center
              observations before computations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.ProportionalHazards.Coefficients">
            <summary>
              Gets the coefficient vector, in which the
              first value is always the intercept value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.ProportionalHazards.StandardErrors">
            <summary>
              Gets the standard errors associated with each
              coefficient during the model estimation phase.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.ProportionalHazards.BaselineHazard">
            <summary>
              Gets the baseline hazard function, if specified.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.ProportionalHazards.Inputs">
            <summary>
              Gets the number of inputs handled by this model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.ConditionalRandomField`1">
            <summary>
              Linear-Chain Conditional Random Field (CRF).
            </summary>
            <remarks>
              <para>A conditional random field (CRF) is a type of discriminative undirected
              probabilistic graphical model. It is most often used for labeling or parsing
              of sequential data, such as natural language text or biological sequences
              and computer vision.</para>
              
              <para>This implementation is currently experimental.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField`1.#ctor(System.Int32,Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Fields.ConditionalRandomField`1"/> class.
            </summary>
            
            <param name="states">The number of states for the model.</param>
            <param name="function">The potential function to be used by the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField`1.Partition(`0[])">
            <summary>
              Computes the partition function, as known as Z(x),
              for the specified observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField`1.LogPartition(`0[])">
            <summary>
              Computes the Log of the partition function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField`1.LogLikelihood(`0[],System.Int32[])">
            <summary>
              Computes the log-likelihood of the model for the given observations.
              This method is equivalent to the <see cref="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Evaluate(System.Int32[],System.Int32[])"/>
              method.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField`1.Compute(`0[],System.Double@)">
            <summary>
              Computes the most likely state labels for the given observations,
              returning the overall sequence probability for this model.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField`1.LogLikelihood(`0[][],System.Int32[][])">
            <summary>
              Computes the most likely state labels for the given observations,
              returning the overall sequence log-likelihood for this model.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField`1.Save(System.IO.Stream)">
            <summary>
              Saves the random field to a stream.
            </summary>
            
            <param name="stream">The stream to which the random field is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField`1.Save(System.String)">
            <summary>
              Saves the random field to a stream.
            </summary>
            
            <param name="path">The stream to which the random field is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField`1.Load(System.IO.Stream)">
            <summary>
              Loads a random field from a stream.
            </summary>
            
            <param name="stream">The stream from which the random field is to be deserialized.</param>
            
            <returns>The deserialized random field.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField`1.Load(System.String)">
            <summary>
              Loads a random field from a file.
            </summary>
            
            <param name="path">The path to the file from which the random field is to be deserialized.</param>
            
            <returns>The deserialized random field.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField`1.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Models.Fields.ConditionalRandomField`1.States">
            <summary>
              Gets the number of states in this
              linear-chain Conditional Random Field.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.ConditionalRandomField`1.Function">
            <summary>
              Gets the potential function encompassing
              all feature functions for this model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.IFeature`1">
            <summary>
              Common interface for <see cref="T:Accord.Statistics.Models.Fields.ConditionalRandomField`1">Conditional Random Fields</see>
              <see cref="T:Accord.Statistics.Models.Fields.Features.IFeature`1">feature functions</see>
            </summary>
            
            <typeparam name="TObservation">The type of the observations being modeled.</typeparam>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.IFeature`1.Compute(System.Int32,System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="previousState">The previous state.</param>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="observationIndex">The index of the current observation.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.IFeature`1.Compute(System.Int32[],`0[],System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="states">The sequence of states.</param>
            <param name="observations">The sequence of observations.</param>
            <param name="output">The output class label for the sequence.</param>
            
            <returns>The result of the feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.IFeature`1.Marginal(System.Double[0:,0:],System.Double[0:,0:],`0[],System.Int32)">
            <summary>
              Computes the probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="fwd">The matrix of forward state probabilities.</param>
            <param name="bwd">The matrix of backward state probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.IFeature`1.LogMarginal(System.Double[0:,0:],System.Double[0:,0:],`0[],System.Int32)">
            <summary>
              Computes the log-probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="lnFwd">The matrix of forward state log-probabilities.</param>
            <param name="lnBwd">The matrix of backward state log-probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.IFeature`1.Clone(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0})">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Features.IFeature`1.Owner">
            <summary>
              Gets the potential function containing this feature.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.FeatureBase`1">
            <summary>
              Base implementation for <see cref="T:Accord.Statistics.Models.Fields.ConditionalRandomField`1">Conditional Random Fields</see>
              <see cref="T:Accord.Statistics.Models.Fields.Features.IFeature`1">feature functions</see>.
            </summary>
            
            <typeparam name="T">The type of the observations being modeled.</typeparam>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.FeatureBase`1.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0},System.Int32)">
            <summary>
              Creates a new feature.
            </summary>
            
            <param name="owner">The potential function to which this feature belongs.</param>
            <param name="factorIndex">The index of the potential factor to which this feature belongs.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.FeatureBase`1.Compute(System.Int32[],`0[],System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="states">The sequence of states.</param>
            <param name="observations">The sequence of observations.</param>
            <param name="output">The output class label for the sequence.</param>
            
            <returns>The result of the feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.FeatureBase`1.Compute(System.Int32,System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="previousState">The previous state.</param>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="observationIndex">The index of the current observation.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.FeatureBase`1.Marginal(System.Double[0:,0:],System.Double[0:,0:],`0[],System.Int32)">
            <summary>
              Computes the probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="fwd">The matrix of forward state probabilities.</param>
            <param name="bwd">The matrix of backward state probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.FeatureBase`1.LogMarginal(System.Double[0:,0:],System.Double[0:,0:],`0[],System.Int32)">
            <summary>
              Computes the log-probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="lnFwd">The matrix of forward state log-probabilities.</param>
            <param name="lnBwd">The matrix of backward state log-probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Features.FeatureBase`1.Owner">
            <summary>
              Gets the potential function containing this feature.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Features.FeatureBase`1.FactorIndex">
            <summary>
              Gets the potential factor to which this feature belongs.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.MultivariateEmissionFeature">
            <summary>
              State feature for Hidden Markov Model symbol emission probabilities.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateEmissionFeature.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double[]},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a new symbol emission feature.
            </summary>
            
            <param name="owner">The potential function to which this feature belongs.</param>
            <param name="factorIndex">The index of the potential factor to which this feature belongs.</param>
            <param name="state">The state for the emission.</param>
            <param name="symbol">The emission symbol.</param>
            <param name="dimension">The observation dimension this emission feature applies to.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateEmissionFeature.Compute(System.Int32,System.Int32,System.Double[][],System.Int32,System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="previousState">The previous state.</param>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="observationIndex">The index of the current observation.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateEmissionFeature.Marginal(System.Double[0:,0:],System.Double[0:,0:],System.Double[][],System.Int32)">
            <summary>
              Computes the probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="fwd">The matrix of forward state probabilities.</param>
            <param name="bwd">The matrix of backward state probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateEmissionFeature.LogMarginal(System.Double[0:,0:],System.Double[0:,0:],System.Double[][],System.Int32)">
            <summary>
              Computes the log-probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="lnFwd">The matrix of forward state log-probabilities.</param>
            <param name="lnBwd">The matrix of backward state log-probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateEmissionFeature.Clone(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double[]})">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.OccupancyFeature`1">
            <summary>
              State occupancy function for modeling continuous-
              density Hidden Markov Model state emission features.
            </summary>
            
            <typeparam name="T"></typeparam>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.OccupancyFeature`1.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0},System.Int32,System.Int32)">
            <summary>
              Constructs a state occupancy feature.
            </summary>
            
            <param name="owner">The potential function to which this feature belongs.</param>
            <param name="factorIndex">The index of the potential factor to which this feature belongs.</param>
            <param name="state">The current state.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.OccupancyFeature`1.Compute(System.Int32,System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="previousState">The previous state.</param>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="observationIndex">The index of the current observation.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.OccupancyFeature`1.Marginal(System.Double[0:,0:],System.Double[0:,0:],`0[],System.Int32)">
            <summary>
              Computes the probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="fwd">The matrix of forward state probabilities.</param>
            <param name="bwd">The matrix of backward state probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.OccupancyFeature`1.LogMarginal(System.Double[0:,0:],System.Double[0:,0:],`0[],System.Int32)">
            <summary>
              Computes the log-probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="lnFwd">The matrix of forward state log-probabilities.</param>
            <param name="lnBwd">The matrix of backward state log-probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.OccupancyFeature`1.Clone(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0})">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.MultivariateSecondMomentFeature">
            <summary>
              State feature for second moment Gaussian emission probabilities.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateSecondMomentFeature.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double[]},System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a new symbol emission feature.
            </summary>
            
            <param name="owner">The potential function to which this feature belongs.</param>
            <param name="factorIndex">The index of the potential factor to which this feature belongs.</param>
            <param name="state">The state for the emission.</param>
            <param name="dimension">The dimension of the multidimensional
            observation this feature should respond to.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateSecondMomentFeature.Compute(System.Int32,System.Int32,System.Double[][],System.Int32,System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="previousState">The previous state.</param>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="observationIndex">The index of the current observation.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateSecondMomentFeature.Marginal(System.Double[0:,0:],System.Double[0:,0:],System.Double[][],System.Int32)">
            <summary>
              Computes the probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="fwd">The matrix of forward state probabilities.</param>
            <param name="bwd">The matrix of backward state probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateSecondMomentFeature.LogMarginal(System.Double[0:,0:],System.Double[0:,0:],System.Double[][],System.Int32)">
            <summary>
              Computes the log-probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="lnFwd">The matrix of forward state log-probabilities.</param>
            <param name="lnBwd">The matrix of backward state log-probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateSecondMomentFeature.Clone(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double[]})">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.MultivariateFirstMomentFeature">
            <summary>
              State feature for first moment multivariate Gaussian emission probabilities.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateFirstMomentFeature.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double[]},System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a new first moment emission feature.
            </summary>
            
            <param name="owner">The potential function to which this feature belongs.</param>
            <param name="factorIndex">The index of the potential factor to which this feature belongs.</param>
            <param name="state">The state for the emission.</param>
            <param name="dimension">The multivariate dimension to consider in the computation.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateFirstMomentFeature.Compute(System.Int32,System.Int32,System.Double[][],System.Int32,System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="previousState">The previous state.</param>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="observationIndex">The index of the current observation.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateFirstMomentFeature.Marginal(System.Double[0:,0:],System.Double[0:,0:],System.Double[][],System.Int32)">
            <summary>
              Computes the probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="fwd">The matrix of forward state probabilities.</param>
            <param name="bwd">The matrix of backward state probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateFirstMomentFeature.LogMarginal(System.Double[0:,0:],System.Double[0:,0:],System.Double[][],System.Int32)">
            <summary>
              Computes the log-probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="lnFwd">The matrix of forward state log-probabilities.</param>
            <param name="lnBwd">The matrix of backward state log-probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.MultivariateFirstMomentFeature.Clone(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double[]})">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.SecondMomentFeature">
            <summary>
              State feature for second moment Gaussian emission probabilities.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.SecondMomentFeature.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double},System.Int32,System.Int32)">
            <summary>
              Constructs a new second moment emission feature.
            </summary>
            
            <param name="owner">The potential function to which this feature belongs.</param>
            <param name="factorIndex">The index of the potential factor to which this feature belongs.</param>
            <param name="state">The state for the emission.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.SecondMomentFeature.Compute(System.Int32,System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="previousState">The previous state.</param>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="observationIndex">The index of the current observation.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.SecondMomentFeature.Marginal(System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
              Computes the probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="fwd">The matrix of forward state probabilities.</param>
            <param name="bwd">The matrix of backward state probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.SecondMomentFeature.LogMarginal(System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
              Computes the log-probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="lnFwd">The matrix of forward state log-probabilities.</param>
            <param name="lnBwd">The matrix of backward state log-probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.SecondMomentFeature.Clone(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double})">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.FirstMomentFeature">
            <summary>
              State feature for first moment Gaussian emission probabilities.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.FirstMomentFeature.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double},System.Int32,System.Int32)">
            <summary>
              Constructs a new first moment emission feature.
            </summary>
            
            <param name="owner">The potential function to which this feature belongs.</param>
            <param name="factorIndex">The index of the potential factor to which this feature belongs.</param>
            <param name="state">The state for the emission.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.FirstMomentFeature.Compute(System.Int32,System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="previousState">The previous state.</param>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="observationIndex">The index of the current observation.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.FirstMomentFeature.Marginal(System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
              Computes the probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="fwd">The matrix of forward state probabilities.</param>
            <param name="bwd">The matrix of backward state probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.FirstMomentFeature.LogMarginal(System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
              Computes the log-probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="lnFwd">The matrix of forward state log-probabilities.</param>
            <param name="lnBwd">The matrix of backward state log-probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.FirstMomentFeature.Clone(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double})">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.InitialFeature`1">
            <summary>
              Edge feature for Hidden Markov Model state transition probabilities.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.InitialFeature`1.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0},System.Int32,System.Int32)">
            <summary>
              Constructs a initial state transition feature.
            </summary>
            
            <param name="owner">The potential function to which this feature belongs.</param>
            <param name="factorIndex">The index of the potential factor to which this feature belongs.</param>
            <param name="state">The destination state.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.InitialFeature`1.Compute(System.Int32,System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="previousState">The previous state.</param>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="observationIndex">The index of the current observation.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.InitialFeature`1.Marginal(System.Double[0:,0:],System.Double[0:,0:],`0[],System.Int32)">
            <summary>
              Computes the probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="fwd">The matrix of forward state probabilities.</param>
            <param name="bwd">The matrix of backward state probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.InitialFeature`1.LogMarginal(System.Double[0:,0:],System.Double[0:,0:],`0[],System.Int32)">
            <summary>
              Computes the log-probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="lnFwd">The matrix of forward state log-probabilities.</param>
            <param name="lnBwd">The matrix of backward state log-probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.InitialFeature`1.Clone(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0})">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.OutputFeature`1">
            <summary>
              State feature for Hidden Markov Model output class symbol probabilities.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.OutputFeature`1.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0},System.Int32,System.Int32)">
            <summary>
              Constructs a new output class symbol feature.
            </summary>
            
            <param name="owner">The potential function to which this feature belongs.</param>
            <param name="factorIndex">The index of the potential factor to which this feature belongs.</param>
            <param name="classSymbol">The emission symbol.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.OutputFeature`1.Compute(System.Int32,System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="previousState">The previous state.</param>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="observationIndex">The index of the current observation.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.OutputFeature`1.Marginal(System.Double[0:,0:],System.Double[0:,0:],`0[],System.Int32)">
            <summary>
              Computes the probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="fwd">The matrix of forward state probabilities.</param>
            <param name="bwd">The matrix of backward state probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.OutputFeature`1.LogMarginal(System.Double[0:,0:],System.Double[0:,0:],`0[],System.Int32)">
            <summary>
              Computes the log-probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="lnFwd">The matrix of forward state log-probabilities.</param>
            <param name="lnBwd">The matrix of backward state log-probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.OutputFeature`1.Clone(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0})">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.EmissionFeature">
            <summary>
              State feature for Hidden Markov Model symbol emission probabilities.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.EmissionFeature.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a new symbol emission feature.
            </summary>
            
            <param name="owner">The potential function to which this feature belongs.</param>
            <param name="factorIndex">The index of the potential factor to which this feature belongs.</param>
            <param name="state">The state for the emission.</param>
            <param name="symbol">The emission symbol.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.EmissionFeature.Compute(System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="previousState">The previous state.</param>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="observationIndex">The index of the current observation.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.EmissionFeature.Marginal(System.Double[0:,0:],System.Double[0:,0:],System.Int32[],System.Int32)">
            <summary>
              Computes the probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="fwd">The matrix of forward state probabilities.</param>
            <param name="bwd">The matrix of backward state probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.EmissionFeature.LogMarginal(System.Double[0:,0:],System.Double[0:,0:],System.Int32[],System.Int32)">
            <summary>
              Computes the log-probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="lnFwd">The matrix of forward state log-probabilities.</param>
            <param name="lnBwd">The matrix of backward state log-probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.EmissionFeature.Clone(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Int32})">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.TransitionFeature`1">
            <summary>
              Edge feature for Hidden Markov Model state transition probabilities.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.TransitionFeature`1.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a state transition feature.
            </summary>
            
            <param name="owner">The potential function to which this feature belongs.</param>
            <param name="factorIndex">The index of the potential factor to which this feature belongs.</param>
            <param name="previous">The originating state.</param>
            <param name="current">The destination state.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.TransitionFeature`1.Compute(System.Int32,System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            
            <param name="previousState">The previous state.</param>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="observationIndex">The index of the current observation.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.TransitionFeature`1.Marginal(System.Double[0:,0:],System.Double[0:,0:],`0[],System.Int32)">
            <summary>
              Computes the probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="fwd">The matrix of forward state probabilities.</param>
            <param name="bwd">The matrix of backward state probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.TransitionFeature`1.LogMarginal(System.Double[0:,0:],System.Double[0:,0:],`0[],System.Int32)">
            <summary>
              Computes the log-probability of occurrence of this 
              feature given a sequence of observations.
            </summary>
            
            <param name="lnFwd">The matrix of forward state log-probabilities.</param>
            <param name="lnBwd">The matrix of backward state log-probabilities.</param>
            <param name="x">The observation sequence.</param>
            <param name="y">The output class label for the sequence.</param>
            
            <returns>The probability of occurrence of this feature.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.TransitionFeature`1.Clone(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0})">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm">
            <summary>
              Forward-Backward algorithms for Conditional Random Fields.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.Forward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32,System.Double[],System.Double[0:,0:])">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.Forward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32)">
            <summary>
              Computes Forward probabilities for a given potential function and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.Forward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32,System.Double@)">
            <summary>
              Computes Forward probabilities for a given potential function and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.Forward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32,System.Double[]@)">
            <summary>
              Computes Forward probabilities for a given potential function and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.Forward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32,System.Double[]@,System.Double@)">
            <summary>
              Computes Forward probabilities for a given potential function and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.Backward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32,System.Double[],System.Double[0:,0:])">
            <summary>
              Computes Backward probabilities for a given potential function and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.Backward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32)">
            <summary>
              Computes Backward probabilities for a given potential function and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.Backward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32,System.Double[])">
            <summary>
              Computes Backward probabilities for a given potential function and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.Backward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32,System.Double@)">
            <summary>
              Computes Backward probabilities for a given potential function and a set of observations(no scaling).
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.LogForward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32,System.Double[0:,0:])">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.LogForward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32)">
            <summary>
              Computes Forward probabilities for a given potential function and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.LogForward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32,System.Double@)">
            <summary>
              Computes Forward probabilities for a given potential function and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.LogBackward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32,System.Double[0:,0:])">
            <summary>
              Computes Backward probabilities for a given potential function and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.LogBackward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32)">
            <summary>
              Computes Backward probabilities for a given potential function and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.LogBackward``1(Accord.Statistics.Models.Fields.Functions.FactorPotential{``0},``0[],System.Int32,System.Double@)">
            <summary>
              Computes Backward probabilities for a given potential function and a set of observations(no scaling).
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Fields.IHiddenRandomFieldGradient">
            <summary>
              Common interface for gradient evaluators for <see cref="T:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1">
              Hidden Conditional Random Fields </see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.IHiddenRandomFieldGradient.Gradient">
            <summary>
              Computes the gradient using the 
              input/outputs stored in this object.
            </summary>
            
            <returns>The value of the gradient vector for the given parameters.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.IHiddenRandomFieldGradient.Objective">
            <summary>
              Computes the objective (cost) function for the Hidden
              Conditional Random Field (negative log-likelihood) using
              the input/outputs stored in this object.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovNormalFactor">
            <summary>
              Normal-density Markov Factor Potential (Clique Potential) function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovNormalFactor.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Creates a new factor (clique) potential function.
            </summary>
            
            <param name="owner">The owner <see cref="T:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1"/>.</param>
            <param name="states">The number of states in this clique potential.</param>
            <param name="factorIndex">The index of this factor potential in the <paramref name="owner"/>.</param>
            <param name="classIndex">The index of the first class label feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="classCount">The number of class label features in this factor.</param>
            <param name="edgeIndex">The index of the first edge feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="edgeCount">The number of edge features in this factor.</param>
            <param name="stateIndex">The index of the first state feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="stateCount">The number of state features in this factor.</param> 
             
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovNormalFactor.Compute(System.Int32,System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>
              Computes the factor potential function for the given parameters.
            </summary>
            
            <param name="previousState">The previous state in a given sequence of states.</param>
            <param name="currentState">The current state in a given sequence of states.</param>
            <param name="observations">The observation vector.</param>
            <param name="index">The index of the observation in the current state of the sequence.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            <returns>The value of the factor potential function evaluated for the given parameters.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovMultivariateNormalFactor">
            <summary>
              Multivariate Normal Markov Model Factor Potential (Clique Potential) function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovMultivariateNormalFactor.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Double[]},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Creates a new factor (clique) potential function.
            </summary>
            
            <param name="owner">The owner <see cref="T:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1"/>.</param>
            <param name="states">The number of states in this clique potential.</param>
            <param name="factorIndex">The index of this factor potential in the <paramref name="owner"/>.</param>
            <param name="dimensions">The number of dimensions for the multivariate observations.</param>
            <param name="classIndex">The index of the first class label feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="classCount">The number of class label features in this factor.</param>
            <param name="edgeIndex">The index of the first edge feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="edgeCount">The number of edge features in this factor.</param>
            <param name="stateIndex">The index of the first state feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="stateCount">The number of state features in this factor.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovMultivariateNormalFactor.Compute(System.Int32,System.Int32,System.Double[][],System.Int32,System.Int32)">
            <summary>
              Computes the factor potential function for the given parameters.
            </summary>
            
            <param name="previousState">The previous state in a given sequence of states.</param>
            <param name="currentState">The current state in a given sequence of states.</param>
            <param name="observations">The observation vector.</param>
            <param name="index">The index of the observation in the current state of the sequence.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            <returns>The value of the factor potential function evaluated for the given parameters.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovDiscreteFactor">
            <summary>
              Discrete-density Markov Factor Potential (Clique Potential) function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovDiscreteFactor.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Creates a new factor (clique) potential function.
            </summary>
            
            <param name="owner">The owner <see cref="T:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1"/>.</param>
            <param name="states">The number of states in this clique potential.</param>
            <param name="factorIndex">The index of this factor potential in the <paramref name="owner"/>.</param>
            <param name="symbols">The number of symbols in the discrete alphabet.</param>
            <param name="classIndex">The index of the first class label feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="classCount">The number of class label features in this factor.</param>
            <param name="edgeIndex">The index of the first edge feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="edgeCount">The number of edge features in this factor.</param>
            <param name="stateIndex">The index of the first state feature in the <paramref name="owner"/>'s parameter vector.</param>
            <param name="stateCount">The number of state features in this factor.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovDiscreteFactor.Compute(System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
              Computes the factor potential function for the given parameters.
            </summary>
            
            <param name="previousState">The previous state in a given sequence of states.</param>
            <param name="currentState">The current state in a given sequence of states.</param>
            <param name="observations">The observation vector.</param>
            <param name="index">The index of the observation in the current state of the sequence.</param>
            <param name="outputClass">The output class label for the sequence.</param>
            <returns>The value of the factor potential function evaluated for the given parameters.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.Specialized.MarkovDiscreteFactor.Symbols">
            <summary>
              Gets the number of symbols in the discrete
              alphabet used by this Markov model factor.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Functions.MarkovContinuousFunction">
            <summary>
              Potential function modeling <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier">Hidden Markov Classifiers</see>.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Functions.PotentialFunctionBase`1">
            <summary>
              Base implementation for <see cref="T:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1">potential functions</see>.
            </summary>
            
            <typeparam name="T">The type of the observations modeled.</typeparam>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.PotentialFunctionBase`1.GetFeatureVector(System.Int32[],`0[],System.Int32)">
            <summary>
              Computes the factor potential function for the given parameters.
            </summary>
            
            <param name="states">A state sequence.</param>
            <param name="observations">A sequence of observations.</param>
            <param name="output">The output class label for the sequence.</param>
            <returns>The value of the factor potential function evaluated for the given parameters.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.PotentialFunctionBase`1.Factors">
            <summary>
              Gets the factor potentials (also known as clique potentials) 
              functions composing this potential function.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.PotentialFunctionBase`1.Outputs">
            <summary>
              Gets the number of output classes assumed by this function.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.PotentialFunctionBase`1.Weights">
            <summary>
              Gets or sets the set of weights for each feature function.
            </summary>
            
            <value>The weights for each of the feature functions.</value>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.PotentialFunctionBase`1.Features">
            <summary>
            Gets the feature functions composing this potential function.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1">
            <summary>
              Common interface for CRF's Potential functions.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1.GetFeatureVector(System.Int32[],`0[],System.Int32)">
            <summary>
              Gets the feature vector for a given input and sequence of states.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1.Factors">
            <summary>
              Gets the factor potentials (also known as clique potentials) 
              functions composing this potential function.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1.Outputs">
            <summary>
              Gets the number of output classes assumed by this function.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1.Weights">
            <summary>
              Gets or sets the set of weights for each feature function.
            </summary>
            
            <value>The weights for each of the feature functions.</value>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.IPotentialFunction`1.Features">
            <summary>
              Gets the feature functions composing this potential function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.MarkovContinuousFunction.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovClassifier{Accord.Statistics.Distributions.Univariate.NormalDistribution})">
            <summary>
              Constructs a new potential function modeling Hidden Markov Models.
            </summary>
            
            <param name="classifier">A hidden Markov sequence classifier.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.MarkovContinuousFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Functions.MarkovMultivariateFunction">
            <summary>
              Potential function modeling Hidden Markov Models.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.MarkovMultivariateFunction.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovClassifier{Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution},System.Boolean)">
            <summary>
              Constructs a new potential function modeling Hidden Markov Models.
            </summary>
            
            <param name="classifier">A hidden Markov sequence classifier.</param>
            <param name="includePriors">True to include class features (priors), false otherwise.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.MarkovMultivariateFunction.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovClassifier{Accord.Statistics.Distributions.Multivariate.Independent{Accord.Statistics.Distributions.Univariate.NormalDistribution}},System.Boolean)">
            <summary>
              Constructs a new potential function modeling Hidden Markov Models.
            </summary>
            
            <param name="classifier">A hidden Markov sequence classifier.</param>
            <param name="includePriors">True to include class features (priors), false otherwise.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.MarkovMultivariateFunction.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel{Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution})">
            <summary>
              Constructs a new potential function modeling Hidden Markov Models.
            </summary>
            
            <param name="model">A normal density hidden Markov.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.MarkovMultivariateFunction.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovClassifier{Accord.Statistics.Distributions.Multivariate.Independent},System.Boolean)">
            <summary>
              Constructs a new potential function modeling Hidden Markov Models.
            </summary>
            
            <param name="classifier">A hidden Markov sequence classifier.</param>
            <param name="includePriors">True to include class features (priors), false otherwise.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.MarkovMultivariateFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.MarkovMultivariateFunction.Dimensions">
            <summary>
              Gets the total number of dimensions for 
              this multivariate potential function.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Functions.MarkovDiscreteFunction">
            <summary>
              Potential function modeling Hidden Markov Models.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.MarkovDiscreteFunction.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a new potential function modeling Hidden Markov Models.
            </summary>
            
            <param name="states">The number of states.</param>
            <param name="symbols">The number of symbols.</param>
            <param name="outputClasses">The number of output classes.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.MarkovDiscreteFunction.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovClassifier,System.Boolean)">
            <summary>
              Constructs a new potential function modeling Hidden Markov Models.
            </summary>
            
            <param name="classifier">The classifier model.</param>
            <param name="includePriors">True to include class features (priors), false otherwise.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.MarkovDiscreteFunction.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new potential function modeling Hidden Markov Models.
            </summary>
            
            <param name="states">The number of states.</param>
            <param name="symbols">The number of symbols.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.MarkovDiscreteFunction.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel)">
            <summary>
              Constructs a new potential function modeling Hidden Markov Models.
            </summary>
            
            <param name="model">The hidden Markov model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.MarkovDiscreteFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.MarkovDiscreteFunction.Symbols">
            <summary>
              Gets the number of symbols assumed by this function.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1">
             <summary>
               Hidden Conditional Random Field (HCRF).
             </summary>
             
             <remarks>
             <para>
               Conditional random fields (CRFs) are a class of statistical modeling method often applied 
               in pattern recognition and machine learning, where they are used for structured prediction. 
               Whereas an ordinary classifier predicts a label for a single sample without regard to "neighboring"
               samples, a CRF can take context into account; e.g., the linear chain CRF popular in natural 
               language processing predicts sequences of labels for sequences of input samples.</para>
               
             <para>
               While Conditional Random Fields can be seen as a generalization of Markov models, Hidden
               Conditional Random Fields can be seen as a generalization of Hidden Markov Model Classifiers.
               The (linear-chain) Conditional Random Field is the discriminative counterpart of the Markov model.
               An observable Markov Model assumes the sequences of states y to be visible, rather than hidden.
               Thus they can be used in a different set of problems than the hidden Markov models. Those models
               are often used for sequence component labeling, also known as part-of-sequence tagging. After a model
               has been trained, they are mostly used to tag parts of a sequence using the Viterbi algorithm.
               This is very handy to perform, for example, classification of parts of a speech utterance, such as 
               classifying phonemes inside an audio signal.  </para>
               
             <para>    
               References:
               <list type="bullet">
                 <item><description><a href="http://www.codeproject.com/Articles/559535/Sequence-Classifiers-in-Csharp-Part-II-Hidden-Cond">
                   C. Souza, Sequence Classifiers in C# - Part II: Hidden Conditional Random Fields. CodeProject. Available at:
                   http://www.codeproject.com/Articles/559535/Sequence-Classifiers-in-Csharp-Part-II-Hidden-Cond </a></description></item>
                 <item><description>
                   Chan, Tony F.; Golub, Gene H.; LeVeque, Randall J. (1983). Algorithms for 
                   Computing the Sample Variance: Analysis and Recommendations. The American
                   Statistician 37, 242-247.</description></item>
               </list></para>
             </remarks>
             
             <example>
             <para>
               In this example, we will create a sequence classifier using a hidden Markov
               classifier. Afterwards, we will transform this Markov classifier into an
               equivalent Hidden Conditional Random Field by choosing a suitable feature
               function.</para>
               
             <code>
             // Let's say we would like to do a very simple mechanism for
             // gesture recognition. In this example, we will be trying to
             // create a classifier that can distinguish between the words
             // "hello", "car", and "wardrobe". 
                         
             // Let's say we decided to acquire some data, and we asked some
             // people to perform those words in front of a Kinect camera, and,
             // using Microsoft's SDK, we were able to captured the x and y
             // coordinates of each hand while the word was being performed.
             
             // Let's say we decided to represent our frames as:
             // 
             //    double[] frame = { leftHandX, leftHandY, rightHandX, rightHandY };
             //
             // Since we captured words, this means we captured sequences of
             // frames as we described above. Let's write some of those as 
             // rough examples to explain how gesture recognition can be done:
             
             double[][] hello =
             {
                 new double[] { 1.0, 0.1, 0.0, 0.0 }, // let's say the word
                 new double[] { 0.0, 1.0, 0.1, 0.1 }, // hello took 6 frames
                 new double[] { 0.0, 1.0, 0.1, 0.1 }, // to be recorded.
                 new double[] { 0.0, 0.0, 1.0, 0.0 },
                 new double[] { 0.0, 0.0, 1.0, 0.0 },
                 new double[] { 0.0, 0.0, 0.1, 1.1 },
             };
             
             double[][] car =
             {
                 new double[] { 0.0, 0.0, 0.0, 1.0 }, // the car word
                 new double[] { 0.1, 0.0, 1.0, 0.1 }, // took only 4.
                 new double[] { 0.0, 0.0, 0.1, 0.0 },
                 new double[] { 1.0, 0.0, 0.0, 0.0 },
             };
             
             double[][] wardrobe =
             {
                 new double[] { 0.0, 0.0, 1.0, 0.0 }, // same for the
                 new double[] { 0.1, 0.0, 1.0, 0.1 }, // wardrobe word.
                 new double[] { 0.0, 0.1, 1.0, 0.0 },
                 new double[] { 0.1, 0.0, 1.0, 0.1 },
             };
             
             // Here, please note that a real-world example would involve *lots*
             // of samples for each word. Here, we are considering just one from
             // each class which is clearly sub-optimal and should _never_ be done
             // on practice. For example purposes, however, please disregard this.
             
             // Those are the words we have in our vocabulary:
             //
             double[][][] words = { hello, car, wardrobe }; 
             
             // Now, let's associate integer labels with them. This is needed
             // for the case where there are multiple samples for each word.
             //
             int[] labels = { 0, 1, 2 };
             
             
             // We will create our classifiers assuming an independent
             // Gaussian distribution for each component in our feature
             // vectors (like assuming a Naive Bayes assumption).
             
             var initial = new Independent&lt;NormalDistribution&gt;
             (
                 new NormalDistribution(0, 1), 
                 new NormalDistribution(0, 1), 
                 new NormalDistribution(0, 1), 
                 new NormalDistribution(0, 1)  
             );
             
             
             // Now, we can proceed and create our classifier. 
             //
             int numberOfWords = 3;  // we are trying to distinguish between 3 words
             int numberOfStates = 5; // this value can be found by trial-and-error
             
             var hmm = new HiddenMarkovClassifier&lt;Independent&lt;NormalDistribution&gt;&gt;
             (
                 classes: numberOfWords, 
                 topology: new Forward(numberOfStates), // word classifiers should use a forward topology
                 initial: initial
             );
             
             // Create a new learning algorithm to train the sequence classifier
             var teacher = new HiddenMarkovClassifierLearning&lt;Independent&lt;NormalDistribution&gt;&gt;(hmm,
             
                 // Train each model until the log-likelihood changes less than 0.001
                 modelIndex =&gt; new BaumWelchLearning&lt;Independent&lt;NormalDistribution&gt;&gt;(hmm.Models[modelIndex])
                 {
                     Tolerance = 0.001,
                     Iterations = 100,
             
                     // This is necessary so the code doesn't blow up when it realize
                     // there is only one sample per word class. But this could also be
                     // needed in normal situations as well.
                     //
                     FittingOptions = new IndependentOptions()
                     {
                         InnerOption = new NormalOptions() { Regularization = 1e-5 }
                     }
                 }
             );
             
             // Finally, we can run the learning algorithm!
             double logLikelihood = teacher.Run(words, labels);
             
             // At this point, the classifier should be successfully 
             // able to distinguish between our three word classes:
             //
             int tc1 = hmm.Compute(hello);    // should be 0
             int tc2 = hmm.Compute(car);      // should be 1
             int tc3 = hmm.Compute(wardrobe); // should be 2
             
             
             // Now, we can use the Markov classifier to initialize a HCRF
             var function = new MarkovMultivariateFunction(hmm);
             var hcrf = new HiddenConditionalRandomField&lt;double[]&gt;(function);
             
             // We can check that both are equivalent, although they have
             // formulations that can be learned with different methods
             //
             for (int i = 0; i &lt; words.Length; i++)
             {
                 // Should be the same
                 int expected = hmm.Compute(words[i]);
                 int actual = hcrf.Compute(words[i]);
             
                 // Should be the same
                 double h0 = hmm.LogLikelihood(words[i], 0);
                 double c0 = hcrf.LogLikelihood(words[i], 0);
             
                 double h1 = hmm.LogLikelihood(words[i], 1);
                 double c1 = hcrf.LogLikelihood(words[i], 1);
             
                 double h2 = hmm.LogLikelihood(words[i], 2);
                 double c2 = hcrf.LogLikelihood(words[i], 2);
             }
             
            
             // Now we can learn the HCRF using one of the best learning
             // algorithms available, Resilient Backpropagation learning:
             
             // Create a learning algorithm
             var rprop = new HiddenResilientGradientLearning&lt;double[]&gt;(hcrf)
             {
                 Iterations = 50,
                 Tolerance = 1e-5
             };
            
             // Run the algorithm and learn the models
             double error = rprop.Run(words, labels);
            
             // At this point, the HCRF should be successfully 
             // able to distinguish between our three word classes:
             //
             int hc1 = hcrf.Compute(hello);    // Should be 0
             int hc2 = hcrf.Compute(car);      // Should be 1
             int hc3 = hcrf.Compute(wardrobe); // Should be 2
             </code>
             
             <para>
               In order to see how this HCRF can be trained to the data, please take a look 
               at the <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1"/> page. Resilient Propagation
               is one of the best algorithms for HCRF training.</para>
             </example>
             
             <typeparam name="T">The type of the observations modeled by the field.</typeparam>
             
             <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1"/>
             
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.#ctor(Accord.Statistics.Models.Fields.Functions.IPotentialFunction{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1"/> class.
            </summary>
            
            <param name="function">The potential function to be used by the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Compute(`0[])">
            <summary>
              Computes the most likely output for the given observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Compute(`0[],System.Double[]@)">
            <summary>
              Computes the most likely output for the given observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Compute(`0[],System.Double@)">
            <summary>
              Computes the most likely output for the given observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Decode(`0[],System.Int32)">
            <summary>
              Computes the most likely state labels for the given observations,
              returning the overall sequence probability for this model.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Decode(`0[],System.Int32,System.Double@)">
            <summary>
              Computes the most likely state labels for the given observations,
              returning the overall sequence probability for this model.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.LogLikelihood(`0[],System.Int32)">
            <summary>
              Computes the log-likelihood that the given 
              observations belong to the desired output.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.LogLikelihood(`0[],System.Int32,System.Double[]@)">
            <summary>
              Computes the log-likelihood that the given 
              observations belong to the desired output.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.LogLikelihood(`0[][],System.Int32[])">
            <summary>
              Computes the log-likelihood that the given 
              observations belong to the desired outputs.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.LogLikelihood(`0[][],System.Int32[],System.Double[][]@)">
            <summary>
              Computes the log-likelihood that the given 
              observations belong to the desired outputs.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Partition(`0[],System.Int32)">
            <summary>
              Computes the partition function Z(x,y).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.LogPartition(`0[],System.Int32)">
            <summary>
              Computes the log-partition function ln Z(x,y).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Partition(`0[])">
            <summary>
              Computes the partition function Z(x).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.LogPartition(`0[])">
            <summary>
              Computes the log-partition function ln Z(x).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Save(System.IO.Stream)">
            <summary>
              Saves the random field to a stream.
            </summary>
            
            <param name="stream">The stream to which the random field is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Save(System.String)">
            <summary>
              Saves the random field to a stream.
            </summary>
            
            <param name="path">The stream to which the random field is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Load(System.IO.Stream)">
            <summary>
              Loads a random field from a stream.
            </summary>
            
            <param name="stream">The stream from which the random field is to be deserialized.</param>
            
            <returns>The deserialized random field.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Load(System.String)">
            <summary>
              Loads a random field from a file.
            </summary>
            
            <param name="path">The path to the file from which the random field is to be deserialized.</param>
            
            <returns>The deserialized random field.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Outputs">
            <summary>
              Gets the number of outputs assumed by the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1.Function">
            <summary>
              Gets the potential function encompassing
              all feature functions for this model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1">
            <summary>
              Linear Gradient calculator class for <see cref="T:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1">
              Hidden Conditional Random Fields</see>.
            </summary>
            
            <typeparam name="T">The type of the observations being modeled.</typeparam>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.#ctor(Accord.Statistics.Models.Fields.HiddenConditionalRandomField{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1"/> class.
            </summary>
            
            <param name="model">The model to be trained.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Gradient(System.Double[],`0[],System.Int32)">
            <summary>
              Computes the gradient (vector of derivatives) vector for
              the cost function, which may be used to guide optimization.
            </summary>
            
            <param name="parameters">The parameter vector lambda to use in the model.</param>
            <param name="input">The inputs to compute the cost function.</param>
            <param name="output">The respective outputs to compute the cost function.</param>
            <returns>The value of the gradient vector for the given parameters.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Gradient(System.Double[],`0[][],System.Int32[])">
            <summary>
              Computes the gradient (vector of derivatives) vector for
              the cost function, which may be used to guide optimization.
            </summary>
            
            <param name="parameters">The parameter vector lambda to use in the model.</param>
            <param name="inputs">The inputs to compute the cost function.</param>
            <param name="outputs">The respective outputs to compute the cost function.</param>
            <returns>The value of the gradient vector for the given parameters.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Gradient(System.Double[])">
            <summary>
              Computes the gradient using the 
              input/outputs stored in this object.
            </summary>
            
            <param name="parameters">The parameter vector lambda to use in the model.</param>
            <returns>The value of the gradient vector for the given parameters.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Gradient">
            <summary>
              Computes the gradient using the 
              input/outputs stored in this object.
            </summary>
            
            <returns>The value of the gradient vector for the given parameters.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Objective(System.Double[],`0[][],System.Int32[])">
            <summary>
              Computes the objective (cost) function for the Hidden
              Conditional Random Field (negative log-likelihood).
            </summary>
            
            <param name="parameters">The parameter vector lambda to use in the model.</param>
            <param name="inputs">The inputs to compute the cost function.</param>
            <param name="outputs">The respective outputs to compute the cost function.</param>
            <returns>The value of the objective function for the given parameters.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Objective(System.Double[])">
            <summary>
              Computes the objective (cost) function for the Hidden
              Conditional Random Field (negative log-likelihood) using
              the input/outputs stored in this object.
            </summary>
            
            <param name="parameters">The parameter vector lambda to use in the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Objective">
            <summary>
              Computes the objective (cost) function for the Hidden
              Conditional Random Field (negative log-likelihood) using
              the input/outputs stored in this object.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing,
              releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Finalize">
            <summary>
              Releases unmanaged resources and performs other cleanup operations before
              the <see cref="T:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1"/> is reclaimed by garbage
              collection.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources
            </summary>
            
            <param name="disposing"><c>true</c> to release both managed 
            and unmanaged resources; <c>false</c> to release only unmanaged
            resources.</param>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Inputs">
            <summary>
              Gets or sets the inputs to be used in the next
              call to the Objective or Gradient functions.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Outputs">
            <summary>
              Gets or sets the outputs to be used in the next
              call to the Objective or Gradient functions.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Parameters">
            <summary>
              Gets or sets the current parameter 
              vector for the model being learned.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.LastError">
            <summary>
              Gets the error computed in the last call
              to the gradient or objective functions.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Regularization">
            <summary>
              Gets or sets the amount of the parameter weights
              which should be included in the objective function.
              Default is 0 (do not include regularization).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1.Model">
            <summary>
              Gets the model being trained.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Learning.IHiddenConditionalRandomFieldLearning`1">
             <summary>
               Common interface for Hidden Conditional Random Fields learning algorithms.
             </summary>
            
             <example>
             <para>
               For an example on how to learn Hidden Conditional Random Fields, please see the
               <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1">Hidden Resilient Gradient Learning</see>
               page. All learning algorithms can be utilized in a similar manner.</para>
             </example>
             
             
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.IHiddenConditionalRandomFieldLearning`1.Run(`0[],System.Int32)">
            <summary>
              Runs one iteration of the learning algorithm with the
              specified input training observation and corresponding
              output label.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="output">The observation labels.</param>
            
            <returns>The error in the last iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.IHiddenConditionalRandomFieldLearning`1.RunEpoch(`0[][],System.Int32[])">
            <summary>
              Runs one iteration of learning algorithm with the specified
              input training observations and corresponding output labels.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="outputs">The observations' labels.</param>
            
            <returns>The error in the last iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.IHiddenConditionalRandomFieldLearning`1.Run(`0[][],System.Int32[])">
            <summary>
              Runs the learning algorithm with the specified input
              training observation and corresponding output label
              until convergence.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="outputs">The observations' labels.</param>
            
            <returns>The error in the last iteration.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Learning.IConditionalRandomFieldLearning`1">
            <summary>
              Common interface for Conditional Random Fields learning algorithms.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.IConditionalRandomFieldLearning`1.Run(`0[][],System.Int32[][])">
            <summary>
              Runs the learning algorithm with the specified input
              training observations and corresponding output labels.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="labels">The observation's labels.</param>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1">
            <summary>
              Conjugate Gradient learning algorithm for <see cref="T:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1">
              Hidden Conditional Hidden Fields</see>.
            </summary>
            
            <example>
            <para>
              For an example on how to learn Hidden Conditional Random Fields, please see the
              <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1">Hidden Resilient Gradient Learning</see>
              page. All learning algorithms can be utilized in a similar manner.</para>
            </example>
            
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.#ctor(Accord.Statistics.Models.Fields.HiddenConditionalRandomField{`0})">
            <summary>
              Constructs a new Conjugate Gradient learning algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.Run(`0[][],System.Int32[])">
            <summary>
              Runs the learning algorithm with the specified input
              training observations and corresponding output labels.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="outputs">The observation's labels.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.Run(`0[],System.Int32)">
            <summary>
              Online learning is not supported.
            </summary>
              
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.RunEpoch(`0[][],System.Int32[])">
            <summary>
              Online learning is not supported.
            </summary>
              
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing,
              releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.Finalize">
            <summary>
              Releases unmanaged resources and performs other cleanup operations before
              the <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1"/> is reclaimed by garbage
              collection.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources
            </summary>
            
            <param name="disposing"><c>true</c> to release both managed 
            and unmanaged resources; <c>false</c> to release only unmanaged
            resources.</param>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.Model">
            <summary>
              Gets or sets the model being trained.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.Regularization">
            <summary>
              Gets or sets the amount of the parameter weights
              which should be included in the objective function.
              Default is 0 (do not include regularization).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.Converged">
            <summary>
              Gets whether the model has converged
              or if the line search has failed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.CurrentIteration">
            <summary>
              Gets the total number of iterations performed
              by the conjugate gradient algorithm.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.Tolerance">
            <summary>
              Gets or sets the maximum change in the average log-likelihood
              after an iteration of the algorithm used to detect convergence.
            </summary>
            
            <remarks>
              This is the likelihood convergence limit L between two iterations of the algorithm. The
              algorithm will stop when the change in the likelihood for two consecutive iterations
              has not changed by more than L percent of the likelihood. If left as zero, the
              algorithm will ignore this parameter and iterate over a number of fixed iterations
              specified by the previous parameter.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.Iterations">
            <summary>
              Gets or sets the maximum number of iterations
              performed by the learning algorithm.
            </summary>
            
            <remarks>
              This is the maximum number of iterations to be performed by the learning algorithm. If
              specified as zero, the algorithm will learn until convergence of the model average
              likelihood respecting the desired limit.
            </remarks>
            
        </member>
        <member name="E:Accord.Statistics.Models.Fields.Learning.HiddenConjugateGradientLearning`1.ProgressChanged">
            <summary>
              Occurs when the current learning progress has changed.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Learning.HiddenQuasiNewtonLearning`1">
            <summary>
              Quasi-Newton (L-BFGS) learning algorithm for <see cref="T:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1">
              Hidden Conditional Hidden Fields</see>.
            </summary>
            
            <typeparam name="T">The type of the observations.</typeparam>
            
            <example>
            <para>
              For an example on how to learn Hidden Conditional Random Fields, please see the
              <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1">Hidden Resilient Gradient Learning</see>
              page. All learning algorithms can be utilized in a similar manner.</para>
            </example>
            
            <seealso cref="T:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenQuasiNewtonLearning`1.#ctor(Accord.Statistics.Models.Fields.HiddenConditionalRandomField{`0})">
            <summary>
              Constructs a new L-BFGS learning algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenQuasiNewtonLearning`1.Run(`0[][],System.Int32[])">
            <summary>
              Runs the learning algorithm with the specified input
              training observations and corresponding output labels.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="outputs">The observation's labels.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenQuasiNewtonLearning`1.Run(`0[],System.Int32)">
            <summary>
              Online learning is not supported.
            </summary>
              
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenQuasiNewtonLearning`1.RunEpoch(`0[][],System.Int32[])">
            <summary>
              Online learning is not supported.
            </summary>
              
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenQuasiNewtonLearning`1.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing,
              releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenQuasiNewtonLearning`1.Finalize">
            <summary>
              Releases unmanaged resources and performs other cleanup operations before
              the <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenQuasiNewtonLearning`1"/> is reclaimed by garbage
              collection.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenQuasiNewtonLearning`1.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources
            </summary>
            
            <param name="disposing"><c>true</c> to release both managed 
            and unmanaged resources; <c>false</c> to release only unmanaged
            resources.</param>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenQuasiNewtonLearning`1.Model">
            <summary>
              Gets or sets the model being trained.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenQuasiNewtonLearning`1.Regularization">
            <summary>
              Gets or sets the amount of the parameter weights
              which should be included in the objective function.
              Default is 0 (do not include regularization).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Learning.QuasiNewtonLearning`1">
            <summary>
              Quasi-Newton (L-BFGS) learning algorithm for <see cref="T:Accord.Statistics.Models.Fields.ConditionalRandomField`1">
              Conditional Hidden Fields</see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.QuasiNewtonLearning`1.#ctor(Accord.Statistics.Models.Fields.ConditionalRandomField{`0})">
            <summary>
              Constructs a new L-BFGS learning algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.QuasiNewtonLearning`1.Run(`0[][],System.Int32[][])">
            <summary>
              Runs the learning algorithm with the specified input
              training observations and corresponding output labels.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="labels">The observation's labels.</param>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1">
            <summary>
              Stochastic Gradient Descent learning algorithm for <see cref="T:Accord.Statistics.Models.Fields.HiddenConditionalRandomField`1">
              Hidden Conditional Hidden Fields</see>.
            </summary>
            
            <example>
            <para>
              For an example on how to learn Hidden Conditional Random Fields, please see the
              <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1">Hidden Resilient Gradient Learning</see>
              page. All learning algorithms can be utilized in a similar manner.</para>
            </example>
            
            <typeparam name="T">The type of the observations.</typeparam>
            
            <seealso cref="T:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.#ctor(Accord.Statistics.Models.Fields.HiddenConditionalRandomField{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1"/> class.
            </summary>
            
            <param name="model">The model to be trained.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.Reset">
            <summary>
              Resets the step size.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.RunEpoch(`0[][],System.Int32[])">
            <summary>
              Runs the learning algorithm with the specified input
              training observations and corresponding output labels.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="outputs">The observation's labels.</param>
            
            <returns>The error in the last iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.Run(`0[][],System.Int32[])">
            <summary>
              Runs the learning algorithm with the specified input
              training observations and corresponding output labels.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="outputs">The observation's labels.</param>
            
            <returns>The error in the last iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.Run(`0[],System.Int32)">
            <summary>
              Runs one iteration of the learning algorithm with the
              specified input training observation and corresponding
              output label.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="output">The observation's labels.</param>
            
            <returns>The error in the last iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
              Raises the <see cref="E:ProgressChanged"/> event.
            </summary>
            
            <param name="args">The <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> instance containing the event data.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing,
              releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.Finalize">
            <summary>
              Releases unmanaged resources and performs other cleanup operations before
              the <see cref="T:Accord.Statistics.Models.Fields.Learning.ForwardBackwardGradient`1"/> is reclaimed by garbage
              collection.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources
            </summary>
            
            <param name="disposing"><c>true</c> to release both managed 
            and unmanaged resources; <c>false</c> to release only unmanaged
            resources.</param>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.LearningRate">
            <summary>
              Gets or sets the learning rate to use as the gradient
              descent step size. Default value is 1e-1.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.Tolerance">
            <summary>
              Gets or sets the maximum change in the average log-likelihood
              after an iteration of the algorithm used to detect convergence.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.Iterations">
            <summary>
              Gets or sets the maximum number of iterations
              performed by the learning algorithm.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.Stochastic">
            <summary>
              Gets or sets a value indicating whether this <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1"/>
              should use stochastic gradient updates.
            </summary>
            
            <value><c>true</c> for stochastic updates; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.Regularization">
            <summary>
              Gets or sets the amount of the parameter weights
              which should be included in the objective function.
              Default is 0 (do not include regularization).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.Model">
            <summary>
              Gets or sets the model being trained.
            </summary>
            
        </member>
        <member name="E:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1.ProgressChanged">
            <summary>
              Occurs when the current learning progress has changed.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Links.IdentityLinkFunction">
            <summary>
              Identity link function.
            </summary>
            
            <remarks>
            <para>
              The identity link function is associated with the
              <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution">Normal distribution</see>.</para>
              
            <para>
              Link functions can be used in many models, such as in
              <see cref="T:Accord.Statistics.Models.Regression.GeneralizedLinearRegression"/> and Support
              Vector Machines.</para>    
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Links.ILinkFunction"/>
            <seealso cref="T:Accord.Statistics.Models.Regression.GeneralizedLinearRegression"/>
            
        </member>
        <member name="M:Accord.Statistics.Links.IdentityLinkFunction.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new Identity link function.
            </summary>
            
            <param name="beta">The variance value.</param>
            <param name="constant">The mean value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Links.IdentityLinkFunction.#ctor">
            <summary>
              Creates a new Identity link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.IdentityLinkFunction.Function(System.Double)">
            <summary>
              The Identity link function.
            </summary>
            
            <param name="x">An input value.</param>
            
            <returns>The transformed input value.</returns>
            
            <remarks>
              The Identity link function is given by <c>f(x) = (x - A) / B</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.IdentityLinkFunction.Inverse(System.Double)">
            <summary>
              The mean function.
            </summary>
            
            <param name="x">A transformed value.</param>
            
            <returns>The reverse transformed value.</returns>
            
            <remarks>
              The inverse Identity link function is given by <c>g(x) = B * x + A</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.IdentityLinkFunction.Derivative(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.IdentityLinkFunction.Inverse(System.Double)"/> function.
            </summary>
            
            <param name="x">The input value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
            <remarks>
              The first derivative of the identity link 
              function is given by <c>f'(x) = B</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.IdentityLinkFunction.Derivative2(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.IdentityLinkFunction.Inverse(System.Double)"/>
              function expressed in terms of it's output.
            </summary>
            
            <param name="y">The reverse transformed value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
            <remarks>
              The first derivative of the identity link function 
              in terms of y = f(x) is given by <c>f'(y) = B</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.IdentityLinkFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Links.IdentityLinkFunction.A">
            <summary>
              Linear scaling coefficient a (intercept).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Links.IdentityLinkFunction.B">
            <summary>
              Linear scaling coefficient b (slope).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Links.LogitLinkFunction">
            <summary>
              Logit link function.
            </summary>
            
            <remarks>
              The Logit link function is associated with the
              <see cref="T:Accord.Statistics.Distributions.Univariate.BinomialDistribution">Binomial</see> and
              <see cref="T:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution">Multinomial</see> distributions.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogitLinkFunction.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new Logit link function.
            </summary>
            
            <param name="beta">The beta value. Default is 1.</param>
            <param name="constant">The constant value. Default is 0.</param>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogitLinkFunction.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Links.LogitLinkFunction"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogitLinkFunction.Function(System.Double)">
            <summary>
              The Logit link function.
            </summary>
            
            <param name="x">An input value.</param>
            
            <returns>The transformed input value.</returns>
            
            <remarks>
              The inverse Logit link function is given by
              <c>f(x) = (Math.Log(x / (1.0 - x)) - A) / B</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogitLinkFunction.Inverse(System.Double)">
            <summary>
              The Logit mean (activation) function.
            </summary>
            
            <param name="x">A transformed value.</param>
            
            <returns>The reverse transformed value.</returns>
            
            <remarks>
              The inverse Logit link function is given by
              <c>g(x) = 1.0 / (1.0 + Math.Exp(-z)</c> in
              which <c>z =  B * x + A</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogitLinkFunction.Derivative(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.LogitLinkFunction.Inverse(System.Double)"/> function.
            </summary>
            
            <param name="x">The input value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
            <remarks>
              The first derivative of the identity link 
              function is given by <c>f'(x) = y * (1.0 - y)</c>
              where <c>y = f(x)</c> is the <see cref="M:Accord.Statistics.Links.LogitLinkFunction.Function(System.Double)">
              Logit function</see>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogitLinkFunction.Derivative2(System.Double)">
            <summary>
              First derivative of the mean function
              expressed in terms of it's output.
            </summary>
            
            <param name="y">The reverse transformed value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
            <remarks>
              The first derivative of the Logit link function 
              in terms of y = f(x) is given by <c>y * (1.0 - y)</c>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.LogitLinkFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Links.LogitLinkFunction.A">
            <summary>
              Linear scaling coefficient a (intercept).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Links.LogitLinkFunction.B">
            <summary>
              Linear scaling coefficient b (slope).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Links.InverseLinkFunction">
            <summary>
              Inverse link function.
            </summary>
            
            <remarks>
              The inverse link function is associated with the
              <see cref="T:Accord.Statistics.Distributions.Univariate.ExponentialDistribution">Exponential</see> and
              <see cref="T:Accord.Statistics.Distributions.Univariate.GammaDistribution">Gamma</see> distributions.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseLinkFunction.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new Inverse link function.
            </summary>
            
            <param name="beta">The alpha value.</param>
            <param name="constant">The constant value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseLinkFunction.#ctor">
            <summary>
              Creates a new Inverse link function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseLinkFunction.Function(System.Double)">
            <summary>
              The Inverse link function.
            </summary>
            
            <param name="x">An input value.</param>
            
            <returns>The transformed input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseLinkFunction.Inverse(System.Double)">
            <summary>
              The Inverse mean (activation) function.
            </summary>
            
            <param name="x">A transformed value.</param>
            
            <returns>The reverse transformed value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseLinkFunction.Derivative(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.InverseLinkFunction.Inverse(System.Double)"/> function.
            </summary>
            
            <param name="x">The input value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseLinkFunction.Derivative2(System.Double)">
            <summary>
              First derivative of the <see cref="M:Accord.Statistics.Links.InverseLinkFunction.Inverse(System.Double)"/>
              function expressed in terms of it's output.
            </summary>
            
            <param name="y">The reverse transformed value.</param>
            
            <returns>The first derivative of the input value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Links.InverseLinkFunction.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Links.InverseLinkFunction.A">
            <summary>
              Linear scaling coefficient a (intercept).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Links.InverseLinkFunction.B">
            <summary>
              Linear scaling coefficient b (slope).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1">
             <summary>
               Resilient Gradient Learning.
             </summary>
             
             <typeparam name="T">The type of the observations being modeled.</typeparam>
            
             <example>
             <code>
             // Suppose we would like to learn how to classify the
             // following set of sequences among three class labels: 
             
             int[][] inputSequences =
             {
                 // First class of sequences: starts and
                 // ends with zeros, ones in the middle:
                 new[] { 0, 1, 1, 1, 0 },        
                 new[] { 0, 0, 1, 1, 0, 0 },     
                 new[] { 0, 1, 1, 1, 1, 0 },     
              
                 // Second class of sequences: starts with
                 // twos and switches to ones until the end.
                 new[] { 2, 2, 2, 2, 1, 1, 1, 1, 1 },
                 new[] { 2, 2, 1, 2, 1, 1, 1, 1, 1 },
                 new[] { 2, 2, 2, 2, 2, 1, 1, 1, 1 },
              
                 // Third class of sequences: can start
                 // with any symbols, but ends with three.
                 new[] { 0, 0, 1, 1, 3, 3, 3, 3 },
                 new[] { 0, 0, 0, 3, 3, 3, 3 },
                 new[] { 1, 0, 1, 2, 2, 2, 3, 3 },
                 new[] { 1, 1, 2, 3, 3, 3, 3 },
                 new[] { 0, 0, 1, 1, 3, 3, 3, 3 },
                 new[] { 2, 2, 0, 3, 3, 3, 3 },
                 new[] { 1, 0, 1, 2, 3, 3, 3, 3 },
                 new[] { 1, 1, 2, 3, 3, 3, 3 },
             };
             
             // Now consider their respective class labels
             int[] outputLabels =
             {
                 /* Sequences  1-3 are from class 0: */ 0, 0, 0,
                 /* Sequences  4-6 are from class 1: */ 1, 1, 1,
                 /* Sequences 7-14 are from class 2: */ 2, 2, 2, 2, 2, 2, 2, 2
             };
             
             
             // Create the Hidden Conditional Random Field using a set of discrete features
             var function = new MarkovDiscreteFunction(states: 3, symbols: 4, outputClasses: 3);
             var classifier = new HiddenConditionalRandomField&lt;int>(function);
             
             // Create a learning algorithm
             var teacher = new HiddenResilientGradientLearning&lt;int>(classifier)
             {
                 Iterations = 50
             };
             
             // Run the algorithm and learn the models
             teacher.Run(inputSequences, outputLabels);
             
             
             // After training has finished, we can check the 
             // output classification label for some sequences. 
             
             int y1 = classifier.Compute(new[] { 0, 1, 1, 1, 0 });    // output is y1 = 0
             int y2 = classifier.Compute(new[] { 0, 0, 1, 1, 0, 0 }); // output is y1 = 0
             
             int y3 = classifier.Compute(new[] { 2, 2, 2, 2, 1, 1 }); // output is y2 = 1
             int y4 = classifier.Compute(new[] { 2, 2, 1, 1 });       // output is y2 = 1
             
             int y5 = classifier.Compute(new[] { 0, 0, 1, 3, 3, 3 }); // output is y3 = 2
             int y6 = classifier.Compute(new[] { 2, 0, 2, 2, 3, 3 }); // output is y3 = 2
             </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.#ctor(Accord.Statistics.Models.Fields.HiddenConditionalRandomField{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1"/> class.
            </summary>
            
            <param name="model">Model to teach.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.Run(`0[][],System.Int32[])">
            <summary>
              Runs one iteration of the learning algorithm with the
              specified input training observation and corresponding
              output label.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="outputs">The observation's labels.</param>
            
            <returns>The error in the last iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.RunEpoch(`0[][],System.Int32[])">
            <summary>
              Runs the learning algorithm with the specified input
              training observations and corresponding output labels.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="outputs">The observation's labels.</param>
            
            <returns>The error in the last iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.Run(`0[],System.Int32)">
            <summary>
              Runs one iteration of the learning algorithm with the
              specified input training observation and corresponding
              output label.
            </summary>
            
            <param name="observations">The training observations.</param>
            <param name="output">The observation's labels.</param>
            
            <returns>The error in the last iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
              Raises the <see cref="E:ProgressChanged"/> event.
            </summary>
            
            <param name="args">The <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> instance containing the event data.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.Reset(System.Double)">
            <summary>
              Resets the current update steps using the given learning rate.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing,
              releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.Finalize">
            <summary>
              Releases unmanaged resources and performs other cleanup operations before
              the <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1"/> is reclaimed by garbage
              collection.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources
            </summary>
            
            <param name="disposing"><c>true</c> to release both managed 
            and unmanaged resources; <c>false</c> to release only unmanaged
            resources.</param>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.Model">
            <summary>
              Gets or sets the model being trained.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.Stochastic">
            <summary>
              Gets or sets a value indicating whether this <see cref="T:Accord.Statistics.Models.Fields.Learning.HiddenGradientDescentLearning`1"/>
              should use stochastic gradient updates. Default is true.
            </summary>
            
            <value><c>true</c> for stochastic updates; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.Regularization">
            <summary>
              Gets or sets the amount of the parameter weights
              which should be included in the objective function.
              Default is 0 (do not include regularization).
            </summary>
            
        </member>
        <member name="E:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.ProgressChanged">
            <summary>
              Occurs when the current learning progress has changed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.UpdateUpperBound">
            <summary>
              Gets or sets the maximum possible update step,
              also referred as delta min. Default is 50.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.UpdateLowerBound">
            <summary>
              Gets or sets the minimum possible update step,
              also referred as delta max. Default is 1e-6.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.DecreaseFactor">
            <summary>
              Gets the decrease parameter, also 
              referred as eta minus. Default is 0.5.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.IncreaseFactor">
            <summary>
              Gets the increase parameter, also
              referred as eta plus. Default is 1.2.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.Tolerance">
            <summary>
              Gets or sets the maximum change in the average log-likelihood
              after an iteration of the algorithm used to detect convergence.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Learning.HiddenResilientGradientLearning`1.Iterations">
            <summary>
              Gets or sets the maximum number of iterations
              performed by the learning algorithm.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning`1">
            <summary>
               Maximum Likelihood learning algorithm for discrete-density Hidden Markov Models.
            </summary>
            
            <remarks>
            <para>
              The maximum likelihood estimate is a <see cref="T:Accord.Statistics.Models.Markov.Learning.ISupervisedLearning">
              supervised learning algorithm</see>. It considers both the sequence
              of observations as well as the sequence of states in the Markov model
              are visible and thus during training. </para>
              
            <para>
              Often, the Maximum Likelihood Estimate can be used to give a starting
              point to a unsupervised algorithm, making possible to use semi-supervised
              techniques with HMMs. It is possible, for example, to use MLE to guess
              initial values for an HMM given a small set of manually labeled labels,
              and then further estimate this model using the <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning">
              Viterbi learning algorithm</see>.</para>
            </remarks>
            
            <example>
            <para>
              The following example comes from Prof. Yechiam Yemini slides on Hidden Markov
              Models, available at http://www.cs.columbia.edu/4761/notes07/chapter4.3-HMM.pdf.
              In this example, we will be specifying both the sequence of observations and
              the sequence of states assigned to each observation in each sequence to learn
              our Markov model.
            </para>
            <code>
            // Those are the observation sequences. Each sequence contains a variable number
            // of observation (although in this example they have all the same length, this
            // is just a coincidence and not something required).
            
            int[][] observations = 
            {
                new int[] { 0,0,0,1,0,0 }, 
                new int[] { 1,0,0,1,0,0 },
                new int[] { 0,0,1,0,0,0 },
                new int[] { 0,0,0,0,1,0 },
                new int[] { 1,0,0,0,1,0 },
                new int[] { 0,0,0,1,1,0 },
                new int[] { 1,0,0,0,0,0 },
                new int[] { 1,0,1,0,0,0 },
            };
            
            // Now those are the visible states associated with each observation in each 
            // observation sequence above. Note that there is always one state assigned
            // to each observation, so the lengths of the sequence of observations and 
            // the sequence of states must always match.
            
            int[][] paths = 
            {
                new int[] { 0,0,1,0,1,0 },
                new int[] { 1,0,1,0,1,0 },
                new int[] { 1,0,0,1,1,0 },
                new int[] { 1,0,1,1,1,0 },
                new int[] { 1,0,0,1,0,1 },
                new int[] { 0,0,1,0,0,1 },
                new int[] { 0,0,1,1,0,1 },
                new int[] { 0,1,1,1,0,0 },
            };
            
            // Since the observation sequences are composed of discrete symbols, we can specify
            // a GeneralDiscreteDistribution to simulate a standard discrete HiddenMarkovModel.
            var initial = new GeneralDiscreteDistribution(symbols: 2);
            
            // Create our Markov model with two states (0, 1) and two symbols (0, 1)
            HiddenMarkovModel model = new HiddenMarkovModel&lt;(states: 2, symbols: 2);
            
            // Now we can create our learning algorithm
            MaximumLikelihoodLearning teacher = new MaximumLikelihoodLearning(model)
            {
               // Set some options
               UseLaplaceRule = false
            };
            
            // and finally learn a model using the algorithm
            double logLikelihood = teacher.Run(observations, paths);
            
            
            // To check what has been learned, we can extract the emission
            // and transition matrices, as well as the initial probability
            // vector from the HMM to compare against expected values:
            
            var pi = Matrix.Exp(model.Probabilities); // { 0.5, 0.5 }
            var A = Matrix.Exp(model.Transitions);    // { { 7/20, 13/20 }, { 14/20, 6/20 } }
            var B = Matrix.Exp(model.Emissions);      // { { 17/25, 8/25 }, { 19/23, 4/23 } }
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1"/>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.ISupervisedLearning">
             <summary>
               Common interface for supervised learning algorithms for <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">
               hidden Markov models</see> such as the <see cref="T:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning">
               Maximum Likelihood (MLE)</see> learning algorithm.
             </summary>
             
             <remarks>
             <para>
               In the context of <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">hidden Markov models</see>, 
               supervised algorithms are algorithms which consider that both the sequence
               of observations and the sequence of states are visible (or known) during
               training. This is in contrast with <see cref="T:Accord.Statistics.Models.Markov.Learning.IUnsupervisedLearning">
               unsupervised learning algorithms</see> such as the <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning">
               Baum-Welch</see>, which consider that the sequence of states is hidden.
             </para>
             </remarks>
            
             <see cref="T:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning"/>
             <see cref="T:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning`1"/>
             
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ISupervisedLearning.Run(System.Array[],System.Int32[][])">
            <summary>
              Runs the learning algorithm.
            </summary>
            
            <remarks>
              Supervised learning problem. Given some training observation sequences 
              O = {o1, o2, ..., oK} and sequence of hidden states H = {h1, h2, ..., hK}
              and general structure of HMM (numbers of hidden and visible states), 
              determine HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning`1.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel{`0})">
            <summary>
              Creates a new instance of the Maximum Likelihood learning algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning`1.Run(System.Array[],System.Int32[][])">
            <summary>
              Runs the Maximum Likelihood learning algorithm for hidden Markov models.
            </summary>
            
            <param name="observations">An array of observation sequences to be used to train the model.</param>
            <param name="paths">An array of state labels associated to each observation sequence.</param>
            
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
            
            <remarks>
              Supervised learning problem. Given some training observation sequences O = {o1, o2, ..., oK},
              known training state paths H = {h1, h2, ..., hK} and general structure of HMM (numbers of 
              hidden and visible states), determine HMM parameters M = (A, B, pi) that best fit training data.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning`1.Accord#Statistics#Models#Markov#Learning#ISupervisedLearning#Run(System.Array[],System.Int32[][])">
            <summary>
              Runs the Maximum Likelihood learning algorithm for hidden Markov models.
            </summary>
            
            <param name="observations">An array of observation sequences to be used to train the model.</param>
            <param name="paths">An array of state labels associated to each observation sequence.</param>
            
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
            
            <remarks>
              Supervised learning problem. Given some training observation sequences O = {o1, o2, ..., oK},
              known training state paths H = {h1, h2, ..., hK} and general structure of HMM (numbers of 
              hidden and visible states), determine HMM parameters M = (A, B, pi) that best fit training data.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning`1.convert(System.Array,System.Int32)">
            <summary>
              Converts a univariate or multivariate array
              of observations into a two-dimensional jagged array.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning`1.Model">
            <summary>
              Gets the model being trained.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning`1.UseWeights">
            <summary>
              Gets or sets whether the emission fitting algorithm should
              present weighted samples or simply the clustered samples to
              the <see cref="M:Accord.Statistics.Distributions.IDistribution.Fit(System.Array)">density estimation 
              methods</see>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning`1.UseLaplaceRule">
            <summary>
              Gets or sets whether to use Laplace's rule
              of succession to avoid zero probabilities.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning`1.FittingOptions">
            <summary>
              Gets or sets the distribution fitting options
              to use when estimating distribution densities
              during learning.
            </summary>
            <value>The distribution fitting options.</value>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning">
            <summary>
               Maximum Likelihood learning algorithm for <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">
               discrete-density Hidden Markov Models</see>.
            </summary>
            
            <remarks>
            <para>
              The maximum likelihood estimate is a <see cref="T:Accord.Statistics.Models.Markov.Learning.ISupervisedLearning">
              supervised learning algorithm</see>. It considers both the sequence
              of observations as well as the sequence of states in the Markov model
              are visible and thus during training. </para>
              
            <para>
              Often, the Maximum Likelihood Estimate can be used to give a starting
              point to a unsupervised algorithm, making possible to use semi-supervised
              techniques with HMMs. It is possible, for example, to use MLE to guess
              initial values for an HMM given a small set of manually labeled labels,
              and then further estimate this model using the <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning">
              Viterbi learning algorithm</see>.</para>
            </remarks>
            
            <example>
            <para>
              The following example comes from Prof. Yechiam Yemini slides on Hidden Markov
              Models, available at http://www.cs.columbia.edu/4761/notes07/chapter4.3-HMM.pdf.
              In this example, we will be specifying both the sequence of observations and
              the sequence of states assigned to each observation in each sequence to learn
              our Markov model.
            </para>
            <code>
            // Those are the observation sequences. Each sequence contains a variable number
            // of observation (although in this example they have all the same length, this
            // is just a coincidence and not something required).
            
            int[][] observations = 
            {
                new int[] { 0,0,0,1,0,0 }, 
                new int[] { 1,0,0,1,0,0 },
                new int[] { 0,0,1,0,0,0 },
                new int[] { 0,0,0,0,1,0 },
                new int[] { 1,0,0,0,1,0 },
                new int[] { 0,0,0,1,1,0 },
                new int[] { 1,0,0,0,0,0 },
                new int[] { 1,0,1,0,0,0 },
            };
            
            // Now those are the visible states associated with each observation in each 
            // observation sequence above. Note that there is always one state assigned
            // to each observation, so the lengths of the sequence of observations and 
            // the sequence of states must always match.
            
            int[][] paths = 
            {
                new int[] { 0,0,1,0,1,0 },
                new int[] { 1,0,1,0,1,0 },
                new int[] { 1,0,0,1,1,0 },
                new int[] { 1,0,1,1,1,0 },
                new int[] { 1,0,0,1,0,1 },
                new int[] { 0,0,1,0,0,1 },
                new int[] { 0,0,1,1,0,1 },
                new int[] { 0,1,1,1,0,0 },
            };
            
            // Create our Markov model with two states (0, 1) and two symbols (0, 1)
            HiddenMarkovModel model = new HiddenMarkovModel(states: 2, symbols: 2);
            
            // Now we can create our learning algorithm
            MaximumLikelihoodLearning teacher = new MaximumLikelihoodLearning(model)
            {
               // Set some options
               UseLaplaceRule = false
            };
            
            // and finally learn a model using the algorithm
            double logLikelihood = teacher.Run(observations, paths);
            
            
            // To check what has been learned, we can extract the emission
            // and transition matrices, as well as the initial probability
            // vector from the HMM to compare against expected values:
            
            var pi = Matrix.Exp(model.Probabilities); // { 0.5, 0.5 }
            var A = Matrix.Exp(model.Transitions);    // { { 7/20, 13/20 }, { 14/20, 6/20 } }
            var B = Matrix.Exp(model.Emissions);      // { { 17/25, 8/25 }, { 19/23, 4/23 } }
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel)">
            <summary>
              Creates a new instance of the Maximum Likelihood learning algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning.Run(System.Int32[][],System.Int32[][])">
            <summary>
              Runs the Maximum Likelihood learning algorithm for hidden Markov models.
            </summary>
            
            <param name="observations">An array of observation sequences to be used to train the model.</param>
            <param name="paths">An array of state labels associated to each observation sequence.</param>
            
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
            
            <remarks>
              Supervised learning problem. Given some training observation sequences O = {o1, o2, ..., oK},
              known training state paths H = {h1, h2, ..., hK} and general structure of HMM (numbers of 
              hidden and visible states), determine HMM parameters M = (A, B, pi) that best fit training data.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning.Accord#Statistics#Models#Markov#Learning#ISupervisedLearning#Run(System.Array[],System.Int32[][])">
            <summary>
              Runs the Maximum Likelihood learning algorithm for hidden Markov models.
            </summary>
            
            <param name="observations">An array of observation sequences to be used to train the model.</param>
            <param name="paths">An array of state labels associated to each observation sequence.</param>
            
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
            
            <remarks>
              Supervised learning problem. Given some training observation sequences O = {o1, o2, ..., oK},
              known training state paths H = {h1, h2, ..., hK} and general structure of HMM (numbers of 
              hidden and visible states), determine HMM parameters M = (A, B, pi) that best fit training data.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning.Model">
            <summary>
              Gets the model being trained.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning.UseLaplaceRule">
            <summary>
              Gets or sets whether to use Laplace's rule
              of succession to avoid zero probabilities.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1">
            <summary>
              Viterbi learning algorithm.
            </summary>
            
            <remarks>
            <para>
              The Viterbi learning algorithm is an alternate learning algorithms
              for hidden Markov models. It works by obtaining the Viterbi path
              for the set of training observation sequences and then computing
              the maximum likelihood estimates for the model parameters. Those
              operations are repeated iteratively until model convergence.</para>
              
            <para>
              The Viterbi learning algorithm is also known as the Segmental K-Means
              algorithm.</para>
            
            <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning"/>
            <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1"/>
            
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel{`0})">
            <summary>
              Creates a new instance of the Viterbi learning algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1.Run(System.Array[])">
            <summary>
              Runs the learning algorithm.
            </summary>
            
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1.RunEpoch(System.Double[][][],System.Int32[][])">
            <summary>
              Runs one single epoch (iteration) of the learning algorithm.
            </summary>
            
            <param name="inputs">The observation sequences.</param>
            <param name="outputs">A vector to be populated with the decoded Viterbi sequences.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1.ComputeLogLikelihood(System.Double[][][])">
            <summary>
              Computes the log-likelihood for the current model for the given observations.
            </summary>
            
            <param name="observations">The observation vectors.</param>
            
            <returns>The log-likelihood of the observations belonging to the model.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1.convert(System.Array,System.Int32)">
            <summary>
              Converts a univariate or multivariate array
              of observations into a two-dimensional jagged array.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1.Model">
            <summary>
              Gets the model being trained.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1.FittingOptions">
            <summary>
              Gets or sets the distribution fitting options
              to use when estimating distribution densities
              during learning.
            </summary>
            <value>The distribution fitting options.</value>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1.UseLaplaceRule">
            <summary>
              Gets or sets whether to use Laplace's rule
              of succession to avoid zero probabilities.
            </summary>
            
            <remarks>
              When this property is set, it will only affect the estimation
              of the transition and initial state probabilities. To control
              the estimation of the emission probabilities, please use the
              corresponding <see cref="P:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1.FittingOptions"/> property.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning">
            <summary>
              Viterbi learning algorithm.
            </summary>
            
            <remarks>
            <para>
              The Viterbi learning algorithm is an alternate learning algorithms
              for hidden Markov models. It works by obtaining the Viterbi path
              for the set of training observation sequences and then computing
              the maximum likelihood estimates for the model parameters. Those
              operations are repeated iteratively until model convergence.</para>
              
            <para>
              The Viterbi learning algorithm is also known as the Segmental K-Means
              algorithm.</para>
            
            <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning`1"/>
            <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning"/>
            
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ViterbiLearning.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel)">
            <summary>
              Creates a new instance of the Viterbi learning algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ViterbiLearning.RunEpoch(System.Int32[][],System.Int32[][])">
            <summary>
              Runs one single epoch (iteration) of the learning algorithm.
            </summary>
            
            <param name="inputs">The observation sequences.</param>
            <param name="outputs">A vector to be populated with the decoded Viterbi sequences.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ViterbiLearning.ComputeLogLikelihood(System.Int32[][])">
            <summary>
              Computes the log-likelihood for the current model for the given observations.
            </summary>
            
            <param name="observations">The observation vectors.</param>
            
            <returns>The log-likelihood of the observations belonging to the model.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ViterbiLearning.Accord#Statistics#Models#Markov#Learning#IUnsupervisedLearning#Run(System.Array[])">
            <summary>
              Runs the learning algorithm.
            </summary>
            
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.ViterbiLearning.Model">
            <summary>
              Gets the model being trained.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.ViterbiLearning.UseLaplaceRule">
            <summary>
              Gets or sets whether to use Laplace's rule
              of succession to avoid zero probabilities.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Fitting.IMultipleRegressionFitting">
            <summary>
              Common interface for multiple regression fitting methods.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.IMultipleRegressionFitting.Run(System.Double[][],System.Double[][])">
            <summary>
              Runs the fitting algorithm.
            </summary>
            
            <param name="inputs">The input training data.</param>
            <param name="outputs">The output associated with each of the outputs.</param>
            
            <returns>The error.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Fitting.ISurvivalFitting">
            <summary>
              Common interface for regression fitting methods.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.ISurvivalFitting.Run(System.Double[][],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])">
            <summary>
              Runs the fitting algorithm.
            </summary>
            
            <param name="inputs">The input training data.</param>
            <param name="time">The time until the output happened.</param>
            <param name="censor">The indication variables used to signal
              if the event occurred or if it was censored.</param>
            
            <returns>The error.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.ISurvivalFitting.Run(System.Double[][],System.Double[],System.Int32[])">
            <summary>
              Runs the fitting algorithm.
            </summary>
            
            <param name="inputs">The input training data.</param>
            <param name="time">The time until the output happened.</param>
            <param name="censor">The indication variables used to signal
              if the event occurred or if it was censored.</param>
            
            <returns>The error.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares">
             <summary>
               Iterative Reweighted Least Squares for Logistic Regression fitting.
             </summary>
             
             <remarks>
             <para>
               The Iterative Reweighted Least Squares is an iterative technique based
               on the Newton-Raphson iterative optimization scheme. The IRLS method uses
               a local quadratic approximation to the log-likelihood function.</para>
             <para>
               By applying the Newton-Raphson optimization scheme to the cross-entropy
               error function (defined as the negative logarithm of the likelihood), one
               arises at a weighted formulation for the Hessian matrix. </para>  
               
             <para>
               The Iterative Reweighted Least Squares algorithm can also be used to learn
               arbitrary generalized linear models. However, the use of this class to learn
               such models is currently experimental.
             </para>
             
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Bishop, Christopher M.; Pattern Recognition and Machine Learning. 
                   Springer; 1st ed. 2006.</description></item>
                 <item><description>
                   Amos Storkey. (2005). Learning from Data: Learning Logistic Regressors. School of Informatics.
                   Available on: http://www.inf.ed.ac.uk/teaching/courses/lfd/lectures/logisticlearn-print.pdf </description></item>
                 <item><description>
                   Cosma Shalizi. (2009). Logistic Regression and Newton's Method. Available on:
                   http://www.stat.cmu.edu/~cshalizi/350/lectures/26/lecture-26.pdf </description></item>
                 <item><description>
                   Edward F. Conor. Logistic Regression. Website. Available on: 
                   http://userwww.sfsu.edu/~efc/classes/biol710/logistic/logisticreg.htm </description></item>
               </list></para>  
             </remarks>
             
             <example>
               <code>
                // Suppose we have the following data about some patients.
                // The first variable is continuous and represent patient
                // age. The second variable is dichotomic and give whether
                // they smoke or not (This is completely fictional data).
                double[][] input =
                {
                    new double[] { 55, 0 }, // 0 - no cancer
                    new double[] { 28, 0 }, // 0
                    new double[] { 65, 1 }, // 0
                    new double[] { 46, 0 }, // 1 - have cancer
                    new double[] { 86, 1 }, // 1
                    new double[] { 56, 1 }, // 1
                    new double[] { 85, 0 }, // 0
                    new double[] { 33, 0 }, // 0
                    new double[] { 21, 1 }, // 0
                    new double[] { 42, 1 }, // 1
                };
            
                // We also know if they have had lung cancer or not, and 
                // we would like to know whether smoking has any connection
                // with lung cancer (This is completely fictional data).
                double[] output =
                {
                    0, 0, 0, 1, 1, 1, 0, 0, 0, 1
                };
            
            
                // To verify this hypothesis, we are going to create a logistic
                // regression model for those two inputs (age and smoking).
                LogisticRegression regression = new LogisticRegression(inputs: 2);
            
                // Next, we are going to estimate this model. For this, we
                // will use the Iteratively Reweighted Least Squares method.
                var teacher = new IterativeReweightedLeastSquares(regression);
            
                // Now, we will iteratively estimate our model. The Run method returns
                // the maximum relative change in the model parameters and we will use
                // it as the convergence criteria.
            
                double delta = 0;
                do
                {
                    // Perform an iteration
                    delta = teacher.Run(input, output);
            
                } while (delta > 0.001);
            
                // At this point, we can compute the odds ratio of our variables.
                // In the model, the variable at 0 is always the intercept term, 
                // with the other following in the sequence. Index 1 is the age
                // and index 2 is whether the patient smokes or not.
            
                // For the age variable, we have that individuals with
                //   higher age have 1.021 greater odds of getting lung
                //   cancer controlling for cigarette smoking.
                double ageOdds = regression.GetOddsRatio(1); // 1.0208597028836701
            
                // For the smoking/non smoking category variable, however, we
                //   have that individuals who smoke have 5.858 greater odds
                //   of developing lung cancer compared to those who do not 
                //   smoke, controlling for age (remember, this is completely
                //   fictional and for demonstration purposes only).
                double smokeOdds = regression.GetOddsRatio(2); // 5.8584748789881331
               </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.#ctor(Accord.Statistics.Models.Regression.LogisticRegression)">
            <summary>
              Constructs a new Iterative Reweighted Least Squares.
            </summary>
            
            <param name="regression">The regression to estimate.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.#ctor(Accord.Statistics.Models.Regression.GeneralizedLinearRegression)">
            <summary>
              Constructs a new Iterative Reweighted Least Squares.
            </summary>
            
            <param name="regression">The regression to estimate.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.Run(System.Double[][],System.Int32[])">
            <summary> 
            Runs one iteration of the Reweighted Least Squares algorithm. 
            </summary> 
            <param name="inputs">The input data.</param> 
            <param name="outputs">The outputs associated with each input vector.</param> 
            <returns>The maximum relative change in the parameters after the iteration.</returns> 
             
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.Run(System.Double[][],System.Int32[][])">
            <summary>
              Runs one iteration of the Reweighted Least Squares algorithm.
            </summary>
            
            <param name="inputs">The input data.</param>
            <param name="outputs">The outputs associated with each input vector.</param>
            
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.Run(System.Double[][],System.Double[][])">
            <summary>
              Runs one iteration of the Reweighted Least Squares algorithm.
            </summary>
            
            <param name="inputs">The input data.</param>
            <param name="outputs">The outputs associated with each input vector.</param>
            
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.Run(System.Double[][],System.Double[])">
            <summary>
              Runs one iteration of the Reweighted Least Squares algorithm.
            </summary>
            <param name="inputs">The input data.</param>
            <param name="outputs">The outputs associated with each input vector.</param>
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.Run(System.Double[][],System.Double[],System.Double[])">
            <summary>
              Runs one iteration of the Reweighted Least Squares algorithm.
            </summary>
            
            <param name="inputs">The input data.</param>
            <param name="outputs">The outputs associated with each input vector.</param>
            <param name="sampleWeights">An weight associated with each sample.</param>
            
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.ComputeError(System.Double[][],System.Double[])">
            <summary>
              Computes the sum-of-squared error between the
              model outputs and the expected outputs.
            </summary>
            
            <param name="inputs">The input data set.</param>
            <param name="outputs">The output values.</param>
            
            <returns>The sum-of-squared errors.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.Previous">
            <summary>
              Gets the previous values for the coefficients which were
              in place before the last learning iteration was performed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.Solution">
            <summary>
              Gets the current values for the coefficients.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.Hessian">
            <summary>
              Gets the Hessian matrix computed in 
              the last Newton-Raphson iteration.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.Gradient">
            <summary>
              Gets the Gradient vector computed in
              the last Newton-Raphson iteration.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.Parameters">
            <summary>
              Gets the total number of parameters in the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.ComputeStandardErrors">
            <summary>
              Gets or sets a value indicating whether standard
              errors should be computed in the next iteration.
            </summary>
            <value>
            	<c>true</c> to compute standard errors; otherwise, <c>false</c>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.IterativeReweightedLeastSquares.Regularization">
            <summary>
              Gets or sets the regularization value to be
              added in the objective function. Default is
              1e-10.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Fitting.LowerBoundNewtonRaphson">
             <summary>
               Lower-Bound Newton-Raphson for Multinomial logistic regression fitting.
             </summary>
             
             <remarks>
             <para>
               The Lower Bound principle consists of replacing the second derivative
               matrix by a global lower bound in the Leowner ordering [Böhning, 92].
               In the case of multinomial logistic regression estimation, the Hessian
               of the negative log-likelihood function can be replaced by one of those
               lower bounds, leading to a monotonically converging sequence of iterates.
               Furthermore, [Krishnapuram, Carin, Figueiredo and Hartemink, 2005] also
               have shown that a lower bound can be achieved which does not depend on 
               the coefficients for the current iteration.</para>
             
             <para>
               References:
               <list type="bullet">
                 <item><description>
                  B. Krishnapuram, L. Carin, M.A.T. Figueiredo, A. Hartemink. Sparse Multinomial 
                  Logistic Regression: Fast Algorithms and Generalization Bounds. 2005. Available on: 
                  http://www.lx.it.pt/~mtf/Krishnapuram_Carin_Figueiredo_Hartemink_2005.pdf </description></item>
                 <item><description>
                   D. Böhning. Multinomial logistic regression algorithm. Annals of the Institute
                   of Statistical Mathematics, 44(9):197 ˝U200, 1992. 2. M. Corney.</description></item>
                 <item><description>
                   Bishop, Christopher M.; Pattern Recognition and Machine Learning. 
                   Springer; 1st ed. 2006.</description></item>
               </list></para>
             </remarks>
            
             <example>
               <code>
               // Create a new Multinomial Logistic Regression for 3 categories
               var mlr = new MultinomialLogisticRegression(inputs: 2, categories: 3);
               
               // Create a estimation algorithm to estimate the regression
               LowerBoundNewtonRaphson lbnr = new LowerBoundNewtonRaphson(mlr);
               
               // Now, we will iteratively estimate our model. The Run method returns
               // the maximum relative change in the model parameters and we will use
               // it as the convergence criteria.
               
               double delta;
               int iteration = 0;
               
               do
               {
                   // Perform an iteration
                   delta = lbnr.Run(inputs, outputs);
                   iteration++;
               
               } while (iteration &lt; 100 &amp;&amp; delta > 1e-6);
               </code>
             </example>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.LowerBoundNewtonRaphson.#ctor(Accord.Statistics.Models.Regression.MultinomialLogisticRegression)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Models.Regression.Fitting.LowerBoundNewtonRaphson"/>.
            </summary>
            <param name="regression">The regression to estimate.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.LowerBoundNewtonRaphson.Run(System.Double[][],System.Int32[])">
            <summary>
              Runs one iteration of the Lower-Bound Newton-Raphson iteration.
            </summary>
            <param name="inputs">The input data.</param>
            <param name="classes">The outputs associated with each input vector.</param>
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.LowerBoundNewtonRaphson.Run(System.Double[][],System.Double[][])">
            <summary>
              Runs one iteration of the Lower-Bound Newton-Raphson iteration.
            </summary>
            <param name="inputs">The input data.</param>
            <param name="outputs">The outputs associated with each input vector.</param>
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LowerBoundNewtonRaphson.Previous">
            <summary>
              Gets the previous values for the coefficients which were
              in place before the last learning iteration was performed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LowerBoundNewtonRaphson.Solution">
            <summary>
              Gets the current values for the coefficients.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LowerBoundNewtonRaphson.UpdateLowerBound">
            <summary>
              Gets or sets a value indicating whether the
              lower bound should be updated using new data.
            </summary>
            
            <value>
              <c>true</c> if the lower bound should be
              updated; otherwise, <c>false</c>.</value>
              
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LowerBoundNewtonRaphson.HessianLowerBound">
            <summary>
              Gets the Lower-Bound matrix being used in place of
              the Hessian matrix in the Newton-Raphson iterations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LowerBoundNewtonRaphson.Gradient">
            <summary>
              Gets the Gradient vector computed in
              the last Newton-Raphson iteration.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LowerBoundNewtonRaphson.Parameters">
            <summary>
              Gets the total number of parameters in the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.LowerBoundNewtonRaphson.ComputeStandardErrors">
            <summary>
              Gets or sets a value indicating whether standard
              errors should be computed in the next iteration.
            </summary>
            <value>
            	<c>true</c> to compute standard errors; otherwise, <c>false</c>.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.MultinomialLogisticRegression">
            <summary>
              Nominal Multinomial Logistic Regression.
            </summary>
            
            <example>
              <code>
              // Create a new Multinomial Logistic Regression for 3 categories
              var mlr = new MultinomialLogisticRegression(inputs: 2, categories: 3);
              
              // Create a estimation algorithm to estimate the regression
              LowerBoundNewtonRaphson lbnr = new LowerBoundNewtonRaphson(mlr);
              
              // Now, we will iteratively estimate our model. The Run method returns
              // the maximum relative change in the model parameters and we will use
              // it as the convergence criteria.
              
              double delta;
              int iteration = 0;
              
              do
              {
                  // Perform an iteration
                  delta = lbnr.Run(inputs, outputs);
                  iteration++;
              
              } while (iteration &lt; 100 &amp;&amp; delta > 1e-6);
              </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.#ctor(System.Int32,System.Int32)">
            <summary>
              Creates a new Multinomial Logistic Regression Model.
            </summary>
            
            <param name="inputs">The number of input variables for the model.</param>
            <param name="categories">The number of categories for the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
              Creates a new Multinomial Logistic Regression Model.
            </summary>
            
            <param name="inputs">The number of input variables for the model.</param>
            <param name="categories">The number of categories for the model.</param>
            <param name="intercepts">The initial values for the intercepts.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.Compute(System.Double[])">
            <summary>
              Computes the model output for the given input vector.
            </summary>
            
            <remarks>
              The first category is always considered the baseline category.
            </remarks>
            
            <param name="input">The input vector.</param>
            
            <returns>The output value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.Compute(System.Double[][])">
            <summary>
              Computes the model outputs for the given input vectors.
            </summary>
            
            <remarks>
              The first category is always considered the baseline category.
            </remarks>
            
            <param name="input">The input vector.</param>
            
            <returns>The output value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.ChiSquare(System.Double[][],System.Double[][])">
            <summary>
              The likelihood ratio test of the overall model, also called the model chi-square test.
            </summary>
            
            <remarks>
              <para>
              The Chi-square test, also called the likelihood ratio test or the log-likelihood test
              is based on the deviance of the model (-2*log-likelihood). The log-likelihood ratio test 
              indicates whether there is evidence of the need to move from a simpler model to a more
              complicated one (where the simpler model is nested within the complicated one).</para>
              <para>
              The difference between the log-likelihood ratios for the researcher's model and a
              simpler model is often called the "model chi-square".</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.ChiSquare(System.Double[][],System.Int32[])">
            <summary>
              The likelihood ratio test of the overall model, also called the model chi-square test.
            </summary>
            
            <remarks>
              <para>
              The Chi-square test, also called the likelihood ratio test or the log-likelihood test
              is based on the deviance of the model (-2*log-likelihood). The log-likelihood ratio test 
              indicates whether there is evidence of the need to move from a simpler model to a more
              complicated one (where the simpler model is nested within the complicated one).</para>
              <para>
              The difference between the log-likelihood ratios for the researcher's model and a
              simpler model is often called the "model chi-square".</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.GetConfidenceInterval(System.Int32,System.Int32)">
            <summary>
              Gets the 95% confidence interval for the Odds Ratio for a given coefficient.
            </summary>
            
            <param name="category">The category's index. </param>
            
            <param name="coefficient">
              The coefficient's index. The first value
              (at zero index) is the intercept value.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.GetConfidenceInterval(System.Int32)">
            <summary>
              Gets the 95% confidence intervals for the Odds Ratios for all coefficients.
            </summary>
            
            <param name="category">The category's index.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.GetOddsRatio(System.Int32,System.Int32)">
            <summary>
              Gets the Odds Ratio for a given coefficient.
            </summary>
            
            <remarks>
              The odds ratio can be computed raising Euler's number
              (e ~~ 2.71) to the power of the associated coefficient.
            </remarks>
            
            <param name="category">The category index.</param>
            
            <param name="coefficient">
              The coefficient's index. The first value
              (at zero index) is the intercept value.
            </param>
            
            <returns>
              The Odds Ratio for the given coefficient.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.GetOddsRatio(System.Int32)">
            <summary>
              Gets the Odds Ratio for all coefficients.
            </summary>
            
            <remarks>
              The odds ratio can be computed raising Euler's number
              (e ~~ 2.71) to the power of the associated coefficient.
            </remarks>
            
            <param name="category">The category index.</param>
            
            <returns>
              The Odds Ratio for the given coefficient.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.GetWaldTest(System.Int32,System.Int32)">
            <summary>
              Gets the Wald Test for a given coefficient.
            </summary>
            
            <remarks>
              The Wald statistical test is a test for a model parameter in which
              the estimated parameter θ is compared with another proposed parameter
              under the assumption that the difference between them will be approximately
              normal. There are several problems with the use of the Wald test. Please
              take a look on substitute tests based on the log-likelihood if possible.
            </remarks>
            
            <param name="category">The category index.</param>
            
            <param name="coefficient">
              The coefficient's index. The first value
              (at zero index) is the intercept value.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.GetWaldTest(System.Int32)">
            <summary>
              Gets the Wald Test for all coefficients.
            </summary>
            
            <remarks>
              The Wald statistical test is a test for a model parameter in which
              the estimated parameter θ is compared with another proposed parameter
              under the assumption that the difference between them will be approximately
              normal. There are several problems with the use of the Wald test. Please
              take a look on substitute tests based on the log-likelihood if possible.
            </remarks>
            
            <param name="category">The category's index.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.GetDeviance(System.Double[][],System.Double[][])">
            <summary>
              Gets the Deviance for the model.
            </summary>
            
            <remarks>
              The deviance is defined as -2*Log-Likelihood.
            </remarks>
            
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <returns>
              The deviance (a measure of performance) of the model
              calculated over the given data sets.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.GetDeviance(System.Double[][],System.Int32[])">
            <summary>
              Gets the Deviance for the model.
            </summary>
            
            <remarks>
              The deviance is defined as -2*Log-Likelihood.
            </remarks>
            
            <param name="inputs">A set of input data.</param>
            <param name="classes">A set of output data.</param>
            <returns>
              The deviance (a measure of performance) of the model
              calculated over the given data sets.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.GetLogLikelihood(System.Double[][],System.Int32[])">
            <summary>
              Gets the Deviance for the model.
            </summary>
            
            <remarks>
              The deviance is defined as -2*Log-Likelihood.
            </remarks>
            
            <param name="inputs">A set of input data.</param>
            <param name="classes">A set of output data.</param>
            <returns>
              The deviance (a measure of performance) of the model
              calculated over the given data sets.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.GetLogLikelihood(System.Double[][],System.Double[][])">
            <summary>
              Gets the Log-Likelihood for the model.
            </summary>
            
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <returns>
              The Log-Likelihood (a measure of performance) of
              the model calculated over the given data sets.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.GetLogLikelihoodRatio(System.Double[][],System.Double[][],Accord.Statistics.Models.Regression.MultinomialLogisticRegression)">
            <summary>
              Gets the Log-Likelihood Ratio between two models.
            </summary>
            
            <remarks>
              The Log-Likelihood ratio is defined as 2*(LL - LL0).
            </remarks>
            
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <param name="regression">Another Logistic Regression model.</param>
            <returns>The Log-Likelihood ratio (a measure of performance
            between two models) calculated over the given data sets.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.Clone">
            <summary>
              Creates a new MultinomialLogisticRegression that is a copy of the current instance.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.Coefficients">
            <summary>
              Gets the coefficient vectors, in which the
              first columns are always the intercept values.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.StandardErrors">
            <summary>
              Gets the standard errors associated with each
              coefficient during the model estimation phase.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.Categories">
            <summary>
              Gets the number of categories of the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.MultinomialLogisticRegression.Inputs">
            <summary>
              Gets the number of inputs of the model.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.BaseHiddenMarkovModel">
            <summary>
              Base class for Hidden Markov Models. This class cannot
              be instantiated.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.BaseHiddenMarkovModel.#ctor(Accord.Statistics.Models.Markov.Topology.ITopology)">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovModel.States">
            <summary>
              Gets the number of states of this model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovModel.Probabilities">
            <summary>
              Gets the log-initial probabilities <c>log(pi)</c> for this model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovModel.Transitions">
            <summary>
              Gets the log-transition matrix <c>log(A)</c> for this model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovModel.Tag">
            <summary>
              Gets or sets a user-defined tag associated with this model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1">
            <summary>
              Base class for (HMM) Sequence Classifiers. 
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1"/> class.
            </summary>
            <param name="classes">The number of classes in the classification problem.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.#ctor(`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1"/> class.
            </summary>
            <param name="models">The models specializing in each of the classes of the classification problem.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Compute(System.Array)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">threshold model</see>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Compute(System.Array,System.Double@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            <param name="response">The probability of the assigned class.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">threshold model</see>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Compute(System.Array,System.Double[]@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            <param name="responsibilities">The probabilities for each class.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">threshold model</see>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.LogLikelihood(System.Array,System.Int32)">
            <summary>
              Computes the log-likelihood that a sequence
              belongs to a given class according to this
              classifier.
            </summary>
            <param name="sequence">The sequence of observations.</param>
            <param name="output">The output class label.</param>
            
            <returns>The log-likelihood of the sequence belonging to the given class.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.LogLikelihood(System.Array)">
            <summary>
              Computes the log-likelihood that a sequence
              belongs any of the classes in the classifier.
            </summary>
            <param name="sequence">The sequence of observations.</param>
            
            <returns>The log-likelihood of the sequence belonging to the classifier.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.LogLikelihood(System.Array[],System.Int32[])">
            <summary>
              Computes the log-likelihood of a set of sequences
              belonging to their given respective classes according
              to this classifier.
            </summary>
            <param name="sequences">A set of sequences of observations.</param>
            <param name="outputs">The output class label for each sequence.</param>
            
            <returns>The log-likelihood of the sequences belonging to the given classes.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the models in the classifier.
            </summary>
            
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that 
              can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the models in the classifier.
            </summary>
            
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that 
              can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">
            <summary>
              Gets or sets the threshold model.
            </summary>
            
            <remarks>
            <para>
              For gesture spotting, Lee and Kim introduced a threshold model which is
              composed of parts of the models in a hidden Markov sequence classifier.</para>
            <para>
              The threshold model acts as a baseline for decision rejection. If none of
              the classifiers is able to produce a higher likelihood than the threshold
              model, the decision is rejected.</para>
            <para>
              In the original Lee and Kim publication, the threshold model is constructed
              by creating a fully connected ergodic model by removing all outgoing transitions
              of states in all gesture models and fully connecting those states.</para>
            <para>
              References:
              <list type="bullet">
                <item><description>
                   H. Lee, J. Kim, An HMM-based threshold model approach for gesture
                   recognition, IEEE Trans. Pattern Anal. Mach. Intell. 21 (10) (1999)
                   961–973.</description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Sensitivity">
            <summary>
              Gets or sets a value governing the rejection given by
              a threshold model (if present). Increasing this value
              will result in higher rejection rates. Default is 1.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Models">
            <summary>
              Gets the collection of models specialized in each 
              class of the sequence classification problem.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Item(System.Int32)">
            <summary>
              Gets the <see cref="T:Accord.Statistics.Models.Markov.IHiddenMarkovModel">Hidden Markov
              Model</see> implementation responsible for recognizing
              each of the classes given the desired class label.
            </summary>
            <param name="label">The class label of the model to get.</param>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Classes">
            <summary>
              Gets the number of classes which can be recognized by this classifier.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Priors">
            <summary>
              Gets the prior distribution assumed for the classes.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.IHiddenMarkovClassifier">
            <summary>
              Common interface for sequence classifiers using <see cref="T:Accord.Statistics.Models.Markov.IHiddenMarkovModel">
              hidden Markov models</see>.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.IHiddenMarkovClassifier.Compute(System.Array,System.Double[]@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            <param name="responsibilities">The class responsibilities (or
            the probability of the sequence to belong to each class). When
            using threshold models, the sum of the probabilities will not
            equal one, and the amount left was the threshold probability.
            If a threshold model is not being used, the array should sum to
            one.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.IHiddenMarkovClassifier.Classes">
            <summary>
              Gets the number of classes which can be recognized by this classifier.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1">
            <summary>
              Arbitrary-density Hidden Markov Model.
            </summary>
            
            <remarks>
            <para>
              Hidden Markov Models (HMM) are stochastic methods to model temporal and sequence
              data. They are especially known for their application in temporal pattern recognition
              such as speech, handwriting, gesture recognition, part-of-speech tagging, musical
              score following, partial discharges and bioinformatics.</para>
              
            <para>
              This page refers to the arbitrary-density (continuous emission distributions) version
              of the model. For discrete distributions, please see <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/>.
            </para>
            
            <para>
              Dynamical systems of discrete nature assumed to be governed by a Markov chain emits
              a sequence of observable outputs. Under the Markov assumption, it is also assumed that
              the latest output depends only on the current state of the system. Such states are often
              not known from the observer when only the output values are observable.</para>
              
            <para>
              Hidden Markov Models attempt to model such systems and allow, among other things,
              <list type="number">
                <item><description>
                  To infer the most likely sequence of states that produced a given output sequence,</description></item>
                <item><description>
                  Infer which will be the most likely next state (and thus predicting the next output),</description></item>
                <item><description>
                  Calculate the probability that a given sequence of outputs originated from the system
                  (allowing the use of hidden Markov models for sequence classification).</description></item>
                </list></para>
                
             <para>     
              The “hidden” in Hidden Markov Models comes from the fact that the observer does not
              know in which state the system may be in, but has only a probabilistic insight on where
              it should be.</para>
              
             <para>
              The arbitrary-density Hidden Markov Model uses any probability density function (such
              as <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution">Gaussian</see>
              <see cref="T:Accord.Statistics.Distributions.Univariate.Mixture`1">Mixture Model</see>) for
              computing the state probability. In other words, in a continuous HMM the matrix of emission
              probabilities B is replaced by an array of either discrete or continuous probability density
              functions.</para>
             
             <para>
              If a <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution">general
              discrete distribution</see> is used as the underlying probability density function, the
              model becomes equivalent to the <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">discrete Hidden Markov Model</see>.
             </para>
             
            <para>
              For a more thorough explanation on some fundamentals on how Hidden Markov Models work,
              please see the <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/> documentation page. To learn a Markov
              model, you can find a list of both <see cref="T:Accord.Statistics.Models.Markov.Learning.ISupervisedLearning">supervised</see> and
              <see cref="T:Accord.Statistics.Models.Markov.Learning.IUnsupervisedLearning">unsupervised</see> learning algorithms in the
              <see cref="N:Accord.Statistics.Models.Markov.Learning"/> namespace.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia contributors. "Linear regression." Wikipedia, the Free Encyclopedia.
                  Available at: http://en.wikipedia.org/wiki/Hidden_Markov_model </description></item>
                <item><description>
                  Bishop, Christopher M.; Pattern Recognition and Machine Learning. 
                  Springer; 1st ed. 2006.</description></item>
              </list></para>
            </remarks>
            
            <example>
              <para>The example below reproduces the same example given in the Wikipedia
              entry for the Viterbi algorithm (http://en.wikipedia.org/wiki/Viterbi_algorithm).
              As an arbitrary density model, one can use it with any available <see cref="T:Accord.Statistics.Distributions.IDistribution">
              probability distributions</see>, including with a discrete probability. In the 
              following example, the generic model is used with a <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution"/>
              to reproduce the same example given in <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1"/>.
              Below, the model's parameters are initialized manually. However, it is possible to learn
              those automatically using <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1"/>.</para>
            
            <code>
              // Create the transition matrix A
              double[,] transitions = 
              {  
                  { 0.7, 0.3 },
                  { 0.4, 0.6 }
              };
              
              // Create the vector of emission densities B
              GeneralDiscreteDistribution[] emissions = 
              {  
                  new GeneralDiscreteDistribution(0.1, 0.4, 0.5),
                  new GeneralDiscreteDistribution(0.6, 0.3, 0.1)
              };
              
              // Create the initial probabilities pi
              double[] initial =
              {
                  0.6, 0.4
              };
              
              // Create a new hidden Markov model with discrete probabilities
              var hmm = new HiddenMarkovModel&lt;GeneralDiscreteDistribution&gt;(transitions, emissions, initial);
              
              // After that, one could, for example, query the probability
              // of a sequence occurring. We will consider the sequence
              double[] sequence = new double[] { 0, 1, 2 };
              
              // And now we will evaluate its likelihood
              double logLikelihood = hmm.Evaluate(sequence);
              
              // At this point, the log-likelihood of the sequence
              // occurring within the model is -3.3928721329161653.
              
              // We can also get the Viterbi path of the sequence
              int[] path = hmm.Decode(sequence, out logLikelihood);
              
              // At this point, the state path will be 1-0-0 and the
              // log-likelihood will be -4.3095199438871337
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1">Baum-Welch, one of the most famous 
              learning algorithms for Hidden Markov Models.</seealso>
            <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">Discrete-density Hidden Markov Model</seealso>
            <seealso cref="N:Accord.Statistics.Models.Markov.Learning"/>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.IHiddenMarkovModel">
            <summary>
              Common interface for Hidden Markov Models.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Decode(System.Array,System.Double@)">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence.
            </summary>
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm.
            </remarks>
            <param name="observations">
              A sequence of observations.</param>
            <param name="logLikelihood">
              The state optimized probability.</param>
            <returns>
              The sequence of states that most likely produced the sequence.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Evaluate(System.Array)">
            <summary>
              Calculates the probability that this model has generated the given sequence.
            </summary>
            <remarks>
              Evaluation problem. Given the HMM  M = (A, B, pi) and  the observation
              sequence O = {o1, o2, ..., oK}, calculate the probability that model
              M has generated sequence O. This can be computed efficiently using the
              Forward algorithm. </remarks>
            <param name="observations">
              A sequence of observations. </param>
            <returns>
              The probability that the given sequence has been generated by this model.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.IHiddenMarkovModel.States">
            <summary>
              Gets the number of states of this model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Probabilities">
            <summary>
              Gets the initial probabilities for this model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Transitions">
            <summary>
              Gets the Transition matrix (A) for this model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Tag">
            <summary>
              Gets or sets a user-defined tag.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.#ctor(Accord.Statistics.Models.Markov.Topology.ITopology,`0)">
            <summary>
              Constructs a new Hidden Markov Model with arbitrary-density state probabilities.
            </summary>
            
            <param name="topology">
              A <see cref="N:Accord.Statistics.Models.Markov.Topology"/> object specifying the initial values of the matrix of transition 
              probabilities <c>A</c> and initial state probabilities <c>pi</c> to be used by this model.
            </param>
            <param name="emissions">
              The initial emission probability distribution to be used by each of the states. This
              initial probability distribution will be cloned across all states.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.#ctor(Accord.Statistics.Models.Markov.Topology.ITopology,`0[])">
            <summary>
              Constructs a new Hidden Markov Model with arbitrary-density state probabilities.
            </summary>
            
            <param name="topology">
              A <see cref="N:Accord.Statistics.Models.Markov.Topology"/> object specifying the initial values of the matrix of transition 
              probabilities <c>A</c> and initial state probabilities <c>pi</c> to be used by this model.
            </param>
            <param name="emissions">
              The initial emission probability distributions for each state.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.#ctor(System.Double[0:,0:],`0[],System.Double[],System.Boolean)">
            <summary>
              Constructs a new Hidden Markov Model with arbitrary-density state probabilities.
            </summary>
            
            <param name="transitions">The transitions matrix A for this model.</param>
            <param name="emissions">The emissions matrix B for this model.</param>
            <param name="probabilities">The initial state probabilities for this model.</param>
            <param name="logarithm">Set to true if the matrices are given with logarithms of the
            intended probabilities; set to false otherwise. Default is false.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.#ctor(System.Int32,`0)">
            <summary>
              Constructs a new Hidden Markov Model with arbitrary-density state probabilities.
            </summary>
            
            <param name="states">The number of states for the model.</param>
            <param name="emissions">A initial distribution to be copied to all states in the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Decode(System.Array)">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence.
            </summary>
            
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm.
            </remarks>
            
            <param name="observations">A sequence of observations.</param>
            
            <returns>The sequence of states that most likely produced the sequence.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Decode(System.Array,System.Double@)">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence.
            </summary>
            
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm.
            </remarks>
            
            <param name="observations">A sequence of observations.</param>
            <param name="logLikelihood">The log-likelihood along the most likely sequence.</param>
            
            <returns>The sequence of states that most likely produced the sequence.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Posterior(System.Array)">
            <summary>
              Calculates the probability of each hidden state for each
              observation in the observation vector.
            </summary>
            
            <remarks>
              If there are 3 states in the model, and the <paramref name="observations"/>
              array contains 5 elements, the resulting vector will contain 5 vectors of
              size 3 each. Each vector of size 3 will contain probability values that sum
              up to one. By following those probabilities in order, we may decode those
              probabilities into a sequence of most likely states. However, the sequence
              of obtained states may not be valid in the model.
            </remarks>
            
            <param name="observations">A sequence of observations.</param>
            
            <returns>A vector of the same size as the observation vectors, containing
             the probabilities for each state in the model for the current observation.
             If there are 3 states in the model, and the <paramref name="observations"/>
             array contains 5 elements, the resulting vector will contain 5 vectors of
             size 3 each. Each vector of size 3 will contain probability values that sum
             up to one.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Posterior(System.Int32[],System.Int32[]@)">
            <summary>
              Calculates the probability of each hidden state for each observation 
              in the observation vector, and uses those probabilities to decode the
              most likely sequence of states for each observation in the sequence 
              using the posterior decoding method. See remarks for details.
            </summary>
            
            <remarks>
              If there are 3 states in the model, and the <paramref name="observations"/>
              array contains 5 elements, the resulting vector will contain 5 vectors of
              size 3 each. Each vector of size 3 will contain probability values that sum
              up to one. By following those probabilities in order, we may decode those
              probabilities into a sequence of most likely states. However, the sequence
              of obtained states may not be valid in the model.
            </remarks>
            
            <param name="observations">A sequence of observations.</param>
            <param name="path">The sequence of states most likely associated with each
              observation, estimated using the posterior decoding method.</param>
            
            <returns>A vector of the same size as the observation vectors, containing
             the probabilities for each state in the model for the current observation.
             If there are 3 states in the model, and the <paramref name="observations"/>
             array contains 5 elements, the resulting vector will contain 5 vectors of
             size 3 each. Each vector of size 3 will contain probability values that sum
             up to one.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Evaluate(System.Array)">
            <summary>
              Calculates the likelihood that this model has generated the given sequence.
            </summary>
            
            <remarks>
              Evaluation problem. Given the HMM  M = (A, B, pi) and  the observation
              sequence O = {o1, o2, ..., oK}, calculate the probability that model
              M has generated sequence O. This can be computed efficiently using the
              either the Viterbi or the Forward algorithms.
            </remarks>
            
            <param name="observations">
              A sequence of observations.
            </param>
            <returns>
              The log-likelihood that the given sequence has been generated by this model.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Evaluate(System.Array,System.Int32[])">
            <summary>
              Calculates the log-likelihood that this model has generated the
              given observation sequence along the given state path.
            </summary>
            
            <param name="observations">A sequence of observations. </param>
            <param name="path">A sequence of states. </param>
            
            <returns>
              The log-likelihood that the given sequence of observations has
              been generated by this model along the given sequence of states.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Predict(System.Double[][])">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Predict(System.Double[])">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observation that should be coming after the last observation in this sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Predict(System.Double[][],System.Double@)">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            <param name="logLikelihood">The log-likelihood of the given sequence, plus the predicted
              next observation. Exponentiate this value (use the System.Math.Exp function) to obtain
              a <c>likelihood</c> value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Predict(System.Double[],System.Double@)">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            <param name="logLikelihood">The log-likelihood of the given sequence, plus the predicted
              next observation. Exponentiate this value (use the System.Math.Exp function) to obtain
              a <c>likelihood</c> value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Predict``1(System.Double[][],System.Double@,Accord.Statistics.Distributions.Multivariate.MultivariateMixture{``0}@)">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            <param name="logLikelihood">The log-likelihood of the given sequence, plus the predicted
              next observation. Exponentiate this value (use the System.Math.Exp function) to obtain
              a <c>likelihood</c> value.</param>
            <param name="probabilities">The continuous probability distribution describing the next observations
              that are likely to be generated. Taking the mode of this distribution might give the most likely
              next value in the observed sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Predict``1(System.Double[][],Accord.Statistics.Distributions.Multivariate.MultivariateMixture{``0}@)">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            <param name="probabilities">The continuous probability distribution describing the next observations
              that are likely to be generated. Taking the mode of this distribution might give the most likely
              next value in the observed sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Predict``1(System.Double[],Accord.Statistics.Distributions.Univariate.Mixture{``0}@)">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            <param name="probabilities">The continuous probability distribution describing the next observations
              that are likely to be generated. Taking the mode of this distribution might give the most likely
              next value in the observed sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Predict``1(System.Double[],System.Double@,Accord.Statistics.Distributions.Univariate.Mixture{``0}@)">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            <param name="logLikelihood">The log-likelihood of the given sequence, plus the predicted
              next observation. Exponentiate this value (use the System.Math.Exp function) to obtain
              a <c>likelihood</c> value.</param>
            <param name="probabilities">The continuous probability distribution describing the next observations
              that are likely to be generated. Taking the mode of this distribution might give the most likely
              next value in the observed sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Predict(System.Double[][],System.Int32,System.Double@)">
            <summary>
              Predicts the next observations occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            <param name="next">The number of observations to be predicted. Default is 1.</param>
            <param name="logLikelihood">The log-likelihood of the given sequence, plus the predicted
              next observation. Exponentiate this value (use the System.Math.Exp function) to obtain
              a <c>likelihood</c> value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Predict(System.Double[],System.Int32,System.Double@)">
            <summary>
              Predicts the next observations occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            <param name="next">The number of observations to be predicted. Default is 1.</param>
            <param name="logLikelihood">The log-likelihood of the given sequence, plus the predicted
              next observations. Exponentiate this value (use the System.Math.Exp function) to obtain
              a <c>likelihood</c> value.</param>
              
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the model.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from the model.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Generate(System.Int32,System.Int32[]@,System.Double@)">
            <summary>
              Generates a random vector of observations from the model.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <param name="logLikelihood">The log-likelihood of the generated observation sequence.</param>
            <param name="path">The Viterbi path of the generated observation sequence.</param>
            
            <returns>A random vector of observations drawn from the model.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.predict``1(System.Double[][],System.Double@,Accord.Statistics.Distributions.Multivariate.MultivariateMixture{``0}@)">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.predict``1(System.Double[],System.Double@,Accord.Statistics.Distributions.Univariate.Mixture{``0}@)">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.predict(System.Double[][],System.Int32,System.Double@,System.Double[][]@)">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Save(System.IO.Stream)">
            <summary>
              Saves the hidden Markov model to a stream.
            </summary>
            
            <param name="stream">The stream to which the model is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Save(System.String)">
            <summary>
              Saves the hidden Markov model to a stream.
            </summary>
            
            <param name="path">The stream to which the model is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Load(System.IO.Stream)">
            <summary>
              Loads a hidden Markov model from a stream.
            </summary>
            
            <param name="stream">The stream from which the model is to be deserialized.</param>
            
            <returns>The deserialized model.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Load(System.String)">
            <summary>
              Loads a hidden Markov model from a file.
            </summary>
            
            <param name="path">The path to the file from which the model is to be deserialized.</param>
            
            <returns>The deserialized model.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Dimension">
            <summary>
              Gets the number of dimensions in the
              probability distributions for the states.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Emissions">
            <summary>
              Gets the Emission matrix (B) for this model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1">
            <summary>
              Arbitrary-density Hidden Markov Model Set for Sequence Classification.
            </summary>
            
            <remarks>
            <para>
              This class uses a set of <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1">density hidden
              Markov models</see> to classify sequences of real (double-precision floating point)
              numbers or arrays of those numbers. Each model will try to learn and recognize each 
              of the different output classes. For examples and details on how to learn such models,
              please take a look on the documentation for 
              <see cref="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1"/>.</para>
              
            <para>
              For the discrete version of this classifier, please see its non-generic counterpart 
              <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier"/>.</para>
            </remarks>
            
            <example>
            <para>
              Examples are available at the respective learning algorithm pages. For 
              example, see <see cref="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1"/>. </para>
            </example>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier"/>
              
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.#ctor(System.Int32,System.Int32[],`0)">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="states">An array specifying the number of hidden states for each
            of the classifiers. By default, and Ergodic topology will be used.</param>
            <param name="initial">The initial probability distributions for the hidden states.
            For multivariate continuous density distributions, such as Normal mixtures, the
            choice of initial values is crucial for a good performance.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology,`0)">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="topology">The topology of the hidden states. A forward-only topology
            is indicated to sequence classification problems, such as speech recognition.</param>
            <param name="initial">The initial probability distributions for the hidden states.
            For multivariate continuous density distributions, such as Normal mixtures, the
            choice of initial values is crucial for a good performance.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology,`0[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="topology">The topology of the hidden states. A forward-only topology
            is indicated to sequence classification problems, such as speech recognition.</param>
            <param name="initial">The initial probability distributions for the hidden states.
            For multivariate continuous density distributions, such as Normal mixtures, the
            choice of initial values is crucial for a good performance.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology[],`0[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="topology">The topology of the hidden states. A forward-only topology
            is indicated to sequence classification problems, such as speech recognition.</param>
            <param name="initial">The initial probability distributions for the hidden states.
            For multivariate continuous density distributions, such as Normal mixtures, the
            choice of initial values is crucial for a good performance.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology[],`0)">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="topology">The topology of the hidden states. A forward-only topology
            is indicated to sequence classification problems, such as speech recognition.</param>
            <param name="initial">The initial probability distributions for the hidden states.
            For multivariate continuous density distributions, such as Normal mixtures, the
            choice of initial values is crucial for a good performance.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology[],`0,System.String[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="topology">The topology of the hidden states. A forward-only topology
            is indicated to sequence classification problems, such as speech recognition.</param>
            <param name="initial">The initial probability distributions for the hidden states.
            For multivariate continuous density distributions, such as Normal mixtures, the
            choice of initial values is crucial for a good performance.</param>
            <param name="names">The class labels for each of the models.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel{`0}[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="models">
              The models specializing in each of the classes of 
              the classification problem.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology,`0,System.String[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="topology">The topology of the hidden states. A forward-only topology
            is indicated to sequence classification problems, such as speech recognition.</param>
            <param name="initial">The initial probability distributions for the hidden states.
            For multivariate continuous density distributions, such as Normal mixtures, the
            choice of initial values is crucial for a good performance.</param>
            <param name="names">The class labels for each of the models.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.Compute(System.Array)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">
            threshold model</see>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.Compute(System.Array,System.Double@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            <param name="response">The probability of the assigned class.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">
            threshold model</see>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.Compute(System.Array,System.Double[]@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            <param name="responsibilities">The class responsibilities (or
            the probability of the sequence to belong to each class). When
            using threshold models, the sum of the probabilities will not
            equal one, and the amount left was the threshold probability.
            If a threshold model is not being used, the array should sum to
            one.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">
            threshold model</see>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.LogLikelihood(System.Array,System.Int32)">
            <summary>
              Computes the log-likelihood of a sequence
              belong to a given class according to this
              classifier.
            </summary>
            <param name="sequence">The sequence of observations.</param>
            <param name="output">The output class label.</param>
            
            <returns>The log-likelihood of the sequence belonging to the given class.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.LogLikelihood(System.Array)">
            <summary>
              Computes the log-likelihood that a sequence
              belongs any of the classes in the classifier.
            </summary>
            <param name="sequence">The sequence of observations.</param>
            
            <returns>The log-likelihood of the sequence belonging to the classifier.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.LogLikelihood(System.Array[],System.Int32[])">
            <summary>
              Computes the log-likelihood of a set of sequences
              belonging to their given respective classes according
              to this classifier.
            </summary>
            <param name="sequences">A set of sequences of observations.</param>
            <param name="outputs">The output class label for each sequence.</param>
            
            <returns>The log-likelihood of the sequences belonging to the given classes.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.Save(System.IO.Stream)">
            <summary>
              Saves the classifier to a stream.
            </summary>
            
            <param name="stream">The stream to which the classifier is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.Save(System.String)">
            <summary>
              Saves the classifier to a stream.
            </summary>
            
            <param name="path">The stream to which the classifier is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.Load(System.IO.Stream)">
            <summary>
              Loads a classifier from a stream.
            </summary>
            
            <param name="stream">The stream from which the classifier is to be deserialized.</param>
            
            <returns>The deserialized classifier.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.Load(System.String)">
            <summary>
              Loads a classifier from a file.
            </summary>
            
            <param name="path">The path to the file from which the classifier is to be deserialized.</param>
            
            <returns>The deserialized classifier.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1.Dimension">
            <summary>
              Gets the number of dimensions of the 
              observations handled by this classifier.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">
            <summary>
              Discrete-density Hidden Markov Model.
            </summary>
            
            <remarks>
            <para>
              Hidden Markov Models (HMM) are stochastic methods to model temporal and sequence
              data. They are especially known for their application in temporal pattern recognition
              such as speech, handwriting, gesture recognition, part-of-speech tagging, musical
              score following, partial discharges and bioinformatics.</para>
              
            <para>
              This page refers to the discrete-density version of the model. For arbitrary
              density (probability distribution) definitions, please see 
              <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1"/>.
            </para>
              
            <para>
              Dynamical systems of discrete nature assumed to be governed by a Markov chain emits
              a sequence of observable outputs. Under the Markov assumption, it is also assumed that
              the latest output depends only on the current state of the system. Such states are often
              not known from the observer when only the output values are observable.</para>
              
             <para>
              Assuming the Markov probability, the probability of any sequence of observations 
              occurring when following a given sequence of states can be stated as</para>
                 
             <p align="center">
                 <img src="..\images\hmm\hmm-joint-probability.png" width="383" height="133"/></p>
                 
             <para>
             in which the probabilities <c>p(y<sub>t</sub>|y<sub>t-1</sub>)</c> can be read as the 
             probability of being currently in state <c>y<sub>t</sub></c> given we just were in the
             state<c> y<sub>t-1</sub></c> at the previous instant <c>t-1</c>, and the probability
             <c> p(x<sub>t</sub>|y<sub>t</sub>)</c> can be understood as the probability of observing 
             <c><strong>x<sub>t</sub></strong></c> at instant t given we are currently in the state 
             <c>y<sub>t</sub></c>. To compute those probabilities, we simple use two matrices <strong>
             <c><strong>A</strong></c></strong> and <strong><c><strong>B</strong></c></strong>. 
             The matrix <strong><c><strong>A</strong></c></strong> is the matrix of state probabilities:
             it gives the probabilities <c>p(y<sub>t</sub>|y<sub>t-1</sub>)</c> of jumping from one state
             to the other, and the matrix B is the matrix of observation probabilities, which gives the
             distribution density <c>p(<strong>x<sub>t</sub></strong>|y<sub>t</sub>)</c> associated 
             a given state <c>y<sub>t</sub></c>. In the discrete case, <c><strong><c><strong>
             B</strong></c></strong></c> is really a matrix. In the continuous case, <c><strong>
             B</strong></c> is a vector of probability distributions. The overall model definition
             can then be stated by the tuple</para>
             
             <p align="center">
                 <img src="..\images\hmm\hmm-tuple.png" width="159" height="42"/></p>
                 
            <para>
             in which <em><c><em>n</em></c></em> is an integer representing the total number 
             of states in the system, <strong><c><strong>A</strong></c></strong> is a matrix 
             of transition probabilities, <strong><c><strong>B</strong></c></strong> is either
             a matrix of observation probabilities (in the discrete case) or a vector of probability
             distributions (in the general case) and <c><strong>p</strong></c> is a vector of 
             initial state probabilities determining the probability of starting in each of the 
             possible states in the model.</para>
              
            <para>
              Hidden Markov Models attempt to model such systems and allow, among other things,
              <list type="number">
                <item><description>
                  To infer the most likely sequence of states that produced a given output sequence,</description></item>
                <item><description>
                  Infer which will be the most likely next state (and thus predicting the next output),</description></item>
                <item><description>
                  Calculate the probability that a given sequence of outputs originated from the system
                  (allowing the use of hidden Markov models for sequence classification).</description></item>
                </list></para>
                
            <para>     
              The “hidden” in Hidden Markov Models comes from the fact that the observer does not
              know in which state the system may be in, but has only a probabilistic insight on where
              it should be.</para>
              
            <para>
              To learn a Markov model, you can find a list of both <see cref="T:Accord.Statistics.Models.Markov.Learning.ISupervisedLearning">
              supervised</see> and <see cref="T:Accord.Statistics.Models.Markov.Learning.IUnsupervisedLearning">unsupervised</see> learning 
              algorithms in the <see cref="N:Accord.Statistics.Models.Markov.Learning"/> namespace.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia contributors. "Linear regression." Wikipedia, the Free Encyclopedia.
                  Available at: http://en.wikipedia.org/wiki/Hidden_Markov_model </description></item>
                <item><description>
                  Nikolai Shokhirev, Hidden Markov Models. Personal website. Available at:
                  http://www.shokhirev.com/nikolai/abc/alg/hmm/hmm.html </description></item>
                <item><description>
                  X. Huang, A. Acero, H. Hon. "Spoken Language Processing." pp 396-397. 
                  Prentice Hall, 2001.</description></item>
                <item><description>
                  Dawei Shen. Some mathematics for HMMs, 2008. Available at:
                  http://courses.media.mit.edu/2010fall/mas622j/ProblemSets/ps4/tutorial.pdf </description></item>
              </list></para>
            </remarks>
            
            <example>
              <para>The example below reproduces the same example given in the Wikipedia
              entry for the Viterbi algorithm (http://en.wikipedia.org/wiki/Viterbi_algorithm).
              In this example, the model's parameters are initialized manually. However, it is
              possible to learn those automatically using <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning"/>.</para>
              
            <code>
              // Create the transition matrix A
              double[,] transition = 
              {  
                  { 0.7, 0.3 },
                  { 0.4, 0.6 }
              };
              
              // Create the emission matrix B
              double[,] emission = 
              {  
                  { 0.1, 0.4, 0.5 },
                  { 0.6, 0.3, 0.1 }
              };
              
              // Create the initial probabilities pi
              double[] initial =
              {
                  0.6, 0.4
              };
              
              // Create a new hidden Markov model
              HiddenMarkovModel hmm = new HiddenMarkovModel(transition, emission, initial);
              
              // After that, one could, for example, query the probability
              // of a sequence occurring. We will consider the sequence
              int[] sequence = new int[] { 0, 1, 2 };
              
              // And now we will evaluate its likelihood
              double logLikelihood = hmm.Evaluate(sequence); 
                          
              // At this point, the log-likelihood of the sequence
              // occurring within the model is -3.3928721329161653.
              
              // We can also get the Viterbi path of the sequence
              int[] path = hmm.Decode(sequence, out logLikelihood); 
                          
              // At this point, the state path will be 1-0-0 and the
              // log-likelihood will be -4.3095199438871337
              </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning">Baum-Welch, one of the most famous 
              learning algorithms for Hidden Markov Models.</seealso>
            <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1">Arbitrary-density 
              Hidden Markov Model.</seealso>
            <seealso cref="N:Accord.Statistics.Models.Markov.Learning"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.#ctor(Accord.Statistics.Models.Markov.Topology.ITopology,System.Double[0:,0:],System.Boolean)">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            
            <param name="topology">
              A <see cref="N:Accord.Statistics.Models.Markov.Topology"/> object specifying the initial values of the matrix of transition 
              probabilities <c>A</c> and initial state probabilities <c>pi</c> to be used by this model.
            </param>
            <param name="emissions">The emissions matrix B for this model.</param>
            <param name="logarithm">Set to true if the matrices are given with logarithms of the
            intended probabilities; set to false otherwise. Default is false.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.#ctor(Accord.Statistics.Models.Markov.Topology.ITopology,System.Int32)">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            
            <param name="topology">
              A <see cref="N:Accord.Statistics.Models.Markov.Topology"/> object specifying the initial values of the matrix of transition 
              probabilities <c>A</c> and initial state probabilities <c>pi</c> to be used by this model.
            </param>
            <param name="symbols">The number of output symbols used for this model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.#ctor(Accord.Statistics.Models.Markov.Topology.ITopology,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            
            <param name="topology">
              A <see cref="N:Accord.Statistics.Models.Markov.Topology"/> object specifying the initial values of the matrix of transition 
              probabilities <c>A</c> and initial state probabilities <c>pi</c> to be used by this model.
            </param>
            <param name="symbols">The number of output symbols used for this model.</param>
            <param name="random">Whether to initialize emissions with random probabilities
              or uniformly with <c>1 / number of symbols</c>. Default is false (default is
              to use <c>1/symbols</c>).</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.#ctor(System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            
            <param name="transitions">The transitions matrix A for this model.</param>
            <param name="emissions">The emissions matrix B for this model.</param>
            <param name="initial">The initial state probabilities for this model.</param>
            <param name="logarithm">Set to true if the matrices are given with logarithms of the
            intended probabilities; set to false otherwise. Default is false.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            
            <param name="states">The number of states for this model.</param>
            <param name="symbols">The number of output symbols used for this model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            
            <param name="states">The number of states for this model.</param>
            <param name="symbols">The number of output symbols used for this model.</param>
            <param name="random">Whether to initialize the model transitions and emissions 
              with random probabilities or uniformly with <c>1 / number of states</c> (for
              transitions) and <c>1 / number of symbols</c> (for emissions). Default is false.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Decode(System.Int32[])">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence.
            </summary>
            
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm.
            </remarks>
            
            <param name="observations">A sequence of observations.</param>
            
            <returns>The sequence of states that most likely produced the sequence.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Decode(System.Int32[],System.Double@)">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence.
            </summary>
            
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm.
            </remarks>
            
            <param name="observations">A sequence of observations.</param>
            <param name="logLikelihood">The log-likelihood along the most likely sequence.</param>
            <returns>The sequence of states that most likely produced the sequence.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Posterior(System.Int32[])">
            <summary>
              Calculates the probability of each hidden state for each
              observation in the observation vector.
            </summary>
            
            <remarks>
              If there are 3 states in the model, and the <paramref name="observations"/>
              array contains 5 elements, the resulting vector will contain 5 vectors of
              size 3 each. Each vector of size 3 will contain probability values that sum
              up to one. By following those probabilities in order, we may decode those
              probabilities into a sequence of most likely states. However, the sequence
              of obtained states may not be valid in the model.
            </remarks>
            
            <param name="observations">A sequence of observations.</param>
            
            <returns>A vector of the same size as the observation vectors, containing
             the probabilities for each state in the model for the current observation.
             If there are 3 states in the model, and the <paramref name="observations"/>
             array contains 5 elements, the resulting vector will contain 5 vectors of
             size 3 each. Each vector of size 3 will contain probability values that sum
             up to one.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Posterior(System.Int32[],System.Int32[]@)">
            <summary>
              Calculates the probability of each hidden state for each observation 
              in the observation vector, and uses those probabilities to decode the
              most likely sequence of states for each observation in the sequence 
              using the posterior decoding method. See remarks for details.
            </summary>
            
            <remarks>
              If there are 3 states in the model, and the <paramref name="observations"/>
              array contains 5 elements, the resulting vector will contain 5 vectors of
              size 3 each. Each vector of size 3 will contain probability values that sum
              up to one. By following those probabilities in order, we may decode those
              probabilities into a sequence of most likely states. However, the sequence
              of obtained states may not be valid in the model.
            </remarks>
            
            <param name="observations">A sequence of observations.</param>
            <param name="path">The sequence of states most likely associated with each
              observation, estimated using the posterior decoding method.</param>
            
            <returns>A vector of the same size as the observation vectors, containing
             the probabilities for each state in the model for the current observation.
             If there are 3 states in the model, and the <paramref name="observations"/>
             array contains 5 elements, the resulting vector will contain 5 vectors of
             size 3 each. Each vector of size 3 will contain probability values that sum
             up to one.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Evaluate(System.Int32[])">
            <summary>
              Calculates the log-likelihood that this model has generated the given sequence.
            </summary>
            
            <remarks>
              Evaluation problem. Given the HMM  M = (A, B, pi) and  the observation
              sequence O = {o1, o2, ..., oK}, calculate the probability that model
              M has generated sequence O. This can be computed efficiently using the
              either the Viterbi or the Forward algorithms.
            </remarks>
            
            <param name="observations">
              A sequence of observations.
            </param>
            
            <returns>
              The log-likelihood that the given sequence has been generated by this model.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Evaluate(System.Int32[],System.Int32[])">
            <summary>
              Calculates the log-likelihood that this model has generated the
              given observation sequence along the given state path.
            </summary>
            
            <param name="observations">A sequence of observations. </param>
            <param name="path">A sequence of states. </param>
            
            <returns>
              The log-likelihood that the given sequence of observations has
              been generated by this model along the given sequence of states.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Predict(System.Int32[],System.Int32,System.Double@)">
            <summary>
              Predicts next observations occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            <param name="next">The number of observations to be predicted. Default is 1.</param>
            <param name="logLikelihood">The log-likelihood of the given sequence, plus the predicted
              next observations. Exponentiate this value (use the System.Math.Exp function) to obtain
              a <c>likelihood</c> value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Predict(System.Int32[],System.Int32)">
            <summary>
              Predicts next observations occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            <param name="next">The number of observations to be predicted. Default is 1.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Predict(System.Int32[],System.Int32,System.Double[][]@)">
            <summary>
              Predicts next observations occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            <param name="next">The number of observations to be predicted. Default is 1.</param>
            <param name="logLikelihoods">The log-likelihood of the different symbols for each predicted
              next observations. In order to convert those values to probabilities, exponentiate the
              values in the vectors (using the Exp function) and divide each value by their vector's sum.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Predict(System.Int32[],System.Double[]@)">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observation that should be coming after the last observation in this sequence.</param>
            <param name="logLikelihoods">The log-likelihood of the different symbols for the next observation.
              In order to convert those values to probabilities, exponentiate the values in the vector (using
              the Exp function) and divide each value by the vector sum. This will give the probability of each
              next possible symbol to be the next observation in the sequence.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Predict(System.Int32[],System.Int32,System.Double@,System.Double[][]@)">
            <summary>
              Predicts the next observations occurring after a given observation sequence.
            </summary>
            
            <param name="observations">A sequence of observations. Predictions will be made regarding 
              the next observations that should be coming after the last observation in this sequence.</param>
            <param name="next">The number of observations to be predicted. Default is 1.</param>
            <param name="logLikelihoods">The log-likelihood of the different symbols for each predicted
              next observations. In order to convert those values to probabilities, exponentiate the
              values in the vectors (using the Exp function) and divide each value by their vector's sum.</param>
            <param name="logLikelihood">The log-likelihood of the given sequence, plus the predicted
              next observations. Exponentiate this value (use the System.Math.Exp function) to obtain
              a <c>likelihood</c> value.</param>
              
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the model.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            
            <returns>A random vector of observations drawn from the model.</returns>
            
            <example>
            <code>
            Accord.Math.Tools.SetupGenerator(42);
            
            // Consider some phrases:
            //
            string[][] phrases =
            {
                new[] { "those", "are", "sample", "words", "from", "a", "dictionary" },
                new[] { "those", "are", "sample", "words" },
                new[] { "sample", "words", "are", "words" },
                new[] { "those", "words" },
                new[] { "those", "are", "words" },
                new[] { "words", "from", "a", "dictionary" },
                new[] { "those", "are", "words", "from", "a", "dictionary" }
            };
            
            // Let's begin by transforming them to sequence of
            // integer labels using a codification codebook:
            var codebook = new Codification("Words", phrases);
            
            // Now we can create the training data for the models:
            int[][] sequence = codebook.Translate("Words", phrases);
            
            // To create the models, we will specify a forward topology,
            // as the sequences have definite start and ending points.
            //
            var topology = new Forward(states: 4);
            int symbols = codebook["Words"].Symbols; // We have 7 different words
            
            // Create the hidden Markov model
            HiddenMarkovModel hmm = new HiddenMarkovModel(topology, symbols);
            
            // Create the learning algorithm
            BaumWelchLearning teacher = new BaumWelchLearning(hmm);
            
            // Teach the model about the phrases
            double error = teacher.Run(sequence);
            
            // Now, we can ask the model to generate new samples
            // from the word distributions it has just learned:
            //
            int[] sample = hmm.Generate(3);
            
            // And the result will be: "those", "are", "words".
            string[] result = codebook.Translate("Words", sample);
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Generate(System.Int32,System.Int32[]@,System.Double@)">
            <summary>
              Generates a random vector of observations from the model.
            </summary>
            
            <param name="samples">The number of samples to generate.</param>
            <param name="logLikelihood">The log-likelihood of the generated observation sequence.</param>
            <param name="path">The Viterbi path of the generated observation sequence.</param>
            
            <example>
              An usage example is available at the <see cref="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Generate(System.Int32)"/> documentation page.
            </example>
            
            <returns>A random vector of observations drawn from the model.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.ToContinuousModel">
            <summary>
              Converts this <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">Discrete density Hidden Markov Model</see>
              into a <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1">arbitrary density model</see>.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.op_Explicit(Accord.Statistics.Models.Markov.HiddenMarkovModel)~Accord.Statistics.Models.Markov.HiddenMarkovModel{Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution}">
            <summary>
              Converts this <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">Discrete density Hidden Markov Model</see>
              to a <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1">Continuous density model</see>.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.CreateGeneric(System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
              Constructs a new discrete-density Hidden Markov Model.
            </summary>
            
            <param name="transitions">The transitions matrix A for this model.</param>
            <param name="emissions">The emissions matrix B for this model.</param>
            <param name="probabilities">The initial state probabilities for this model.</param>
            <param name="logarithm">Set to true if the matrices are given with logarithms of the
            intended probabilities; set to false otherwise. Default is false.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.CreateGeneric(Accord.Statistics.Models.Markov.Topology.ITopology,System.Int32)">
            <summary>
              Constructs a new Hidden Markov Model with discrete state probabilities.
            </summary>
            
            <param name="topology">
              A <see cref="N:Accord.Statistics.Models.Markov.Topology"/> object specifying the initial values of the matrix of transition 
              probabilities <c>A</c> and initial state probabilities <c>pi</c> to be used by this model.
            </param>
            <param name="symbols">The number of output symbols used for this model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.CreateGeneric(Accord.Statistics.Models.Markov.Topology.ITopology,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Hidden Markov Model with discrete state probabilities.
            </summary>
            
            <param name="topology">
              A <see cref="N:Accord.Statistics.Models.Markov.Topology"/> object specifying the initial values of the matrix of transition 
              probabilities <c>A</c> and initial state probabilities <c>pi</c> to be used by this model.
            </param>
            <param name="symbols">The number of output symbols used for this model.</param>
            <param name="random">Whether to initialize emissions with random probabilities
              or uniformly with <c>1 / number of symbols</c>. Default is false (default is
              to use <c>1/symbols</c>).</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.CreateGeneric(System.Int32,System.Int32)">
            <summary>
              Constructs a new Hidden Markov Model with discrete state probabilities.
            </summary>
            
            <param name="states">The number of states for this model.</param>
            <param name="symbols">The number of output symbols used for this model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.CreateGeneric(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Hidden Markov Model with discrete state probabilities.
            </summary>
            
            <param name="states">The number of states for this model.</param>
            <param name="symbols">The number of output symbols used for this model.</param>
            <param name="random">Whether to initialize emissions with random probabilities
              or uniformly with <c>1 / number of symbols</c>. Default is false (default is
              to use <c>1/symbols</c>).</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Save(System.IO.Stream)">
            <summary>
              Saves the hidden Markov model to a stream.
            </summary>
            
            <param name="stream">The stream to which the model is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Save(System.String)">
            <summary>
              Saves the hidden Markov model  to a stream.
            </summary>
            
            <param name="path">The stream to which the model is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Load(System.IO.Stream)">
            <summary>
              Loads a hidden Markov model  from a stream.
            </summary>
            
            <param name="stream">The stream from which the model is to be deserialized.</param>
            
            <returns>The deserialized classifier.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Load(System.String)">
            <summary>
              Loads a hidden Markov model  from a file.
            </summary>
            
            <param name="path">The path to the file from which the model is to be deserialized.</param>
            
            <returns>The deserialized model.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Load``1(System.IO.Stream)">
            <summary>
              Loads a hidden Markov model  from a stream.
            </summary>
            
            <param name="stream">The stream from which the model is to be deserialized.</param>
            
            <returns>The deserialized model.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Load``1(System.String)">
            <summary>
              Loads a hidden Markov model  from a file.
            </summary>
            
            <param name="path">The path to the file from which the model is to be deserialized.</param>
            
            <returns>The deserialized model.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.HiddenMarkovModel.Symbols">
            <summary>
              Gets the number of symbols in this model's alphabet.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.HiddenMarkovModel.Emissions">
            <summary>
              Gets the log-emission matrix <c>log(B)</c> for this model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning">
             <summary>
               Learning algorithm for discrete-density <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier">
               generative hidden Markov sequence classifiers</see>.
             </summary>
             
             <remarks>
             <para>
               This class acts as a teacher for <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier">
               classifiers based on discrete hidden Markov models</see>. The learning
               algorithm uses a generative approach. It works by training each model in
               the generative classifier separately.</para>
               
             <para>
               This class implements discrete classifiers only. Discrete classifiers can
               be used whenever the sequence of observations is discrete or can be represented
               by discrete symbols, such as class labels, integers, and so on. If you need
               to classify sequences of other entities, such as real numbers, vectors (i.e.
               multivariate observations), then you can use 
               <see cref="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1">generic-density
               hidden Markov models</see>. Those models can be modeled after any kind of
               <see cref="T:Accord.Statistics.Distributions.IDistribution">probability distribution</see> implementing
               the <see cref="T:Accord.Statistics.Distributions.IDistribution"/> interface.</para>
               
             <para>
               For a more thorough explanation on <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">hidden Markov models</see>
               with practical examples on gesture recognition, please see 
               <a href="http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko">
               Sequence Classifiers in C#, Part I: Hidden Markov Models</a> [1].</para>
                 
             <para>
               [1]: <a href="http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko"> 
                       http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko </a>
             </para>
             </remarks>
             
             <example>
             <para>
               The following example shows how to create a hidden Markov model sequence classifier
               to classify discrete sequences into two disjoint labels: labels for class 0 and 
               labels for class 1. The training data is separated in inputs and outputs. The
               inputs are the sequences we are trying to learn, and the outputs are the labels
               associated with each input sequence.</para>
               
             <para>
               In this example we will be using the <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning">Baum-Welch</see>
               algorithm to learn each model in our generative classifier; however, any other
               <see cref="T:Accord.Statistics.Models.Markov.Learning.IUnsupervisedLearning">unsupervised learning algorithm</see> could be used.
             </para>
               
               <code>
               // Declare some testing data
               int[][] inputs = new int[][]
               {
                   new int[] { 0,1,1,0 },   // Class 0
                   new int[] { 0,0,1,0 },   // Class 0
                   new int[] { 0,1,1,1,0 }, // Class 0
                   new int[] { 0,1,0 },     // Class 0
               
                   new int[] { 1,0,0,1 },   // Class 1
                   new int[] { 1,1,0,1 },   // Class 1
                   new int[] { 1,0,0,0,1 }, // Class 1
                   new int[] { 1,0,1 },     // Class 1
               };
               
               int[] outputs = new int[]
               {
                   0,0,0,0, // First four sequences are of class 0
                   1,1,1,1, // Last four sequences are of class 1
               };
               
               
               // We are trying to predict two different classes
               int classes = 2;
            
               // Each sequence may have up to two symbols (0 or 1)
               int symbols = 2;
            
               // Nested models will have two states each
               int[] states = new int[] { 2, 2 };
            
               // Creates a new Hidden Markov Model Sequence Classifier with the given parameters
               HiddenMarkovClassifier classifier = new HiddenMarkovClassifier(classes, states, symbols);
               
               // Create a new learning algorithm to train the sequence classifier
               var teacher = new HiddenMarkovClassifierLearning(classifier,
               
                   // Train each model until the log-likelihood changes less than 0.001
                   modelIndex =&gt; new BaumWelchLearning(classifier.Models[modelIndex])
                   {
                       Tolerance = 0.001,
                       Iterations = 0
                   }
               );
               
               // Train the sequence classifier using the algorithm
               double likelihood = teacher.Run(inputs, outputs);
               
               </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1"/>
             
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2">
            <summary>
              Abstract base class for Sequence Classifier learning algorithms.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.#ctor(`0,Accord.Statistics.Models.Markov.Learning.ClassifierLearningAlgorithmConfiguration)">
            <summary>
              Creates a new instance of the learning algorithm for a given 
              Markov sequence classifier using the specified configuration
              function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.Run``1(``0[],System.Int32[])">
            <summary>
              Trains each model to recognize each of the output labels.
            </summary>
            <returns>The sum log-likelihood for all models after training.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.Threshold">
            <summary>
              Creates a new <see cref="M:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.Threshold">threshold model</see>
              for the current set of Markov models in this sequence classifier.
            </summary>
            <returns>A <see cref="M:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.Threshold">threshold Markov model</see>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.CreateThresholdTopology">
            <summary>
              Creates the state transition topology for the threshold model. This
              method can be used to help in the implementation of the <see cref="M:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.Threshold"/>
              abstract method which has to be defined for implementers of this class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.OnGenerativeClassModelLearningFinished(Accord.Statistics.Models.Markov.Learning.GenerativeLearningEventArgs)">
            <summary>
              Raises the <see cref="E:GenerativeClassModelLearningFinished"/> event.
            </summary>
            
            <param name="args">The <see cref="T:Accord.Statistics.Models.Markov.Learning.GenerativeLearningEventArgs"/> instance containing the event data.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.OnGenerativeClassModelLearningStarted(Accord.Statistics.Models.Markov.Learning.GenerativeLearningEventArgs)">
            <summary>
              Raises the <see cref="E:GenerativeClassModelLearningStarted"/> event.
            </summary>
            
            <param name="args">The <see cref="T:Accord.Statistics.Models.Markov.Learning.GenerativeLearningEventArgs"/> instance containing the event data.</param>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.Classifier">
            <summary>
              Gets the classifier being trained by this instance.
            </summary>
            <value>The classifier being trained by this instance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.Algorithm">
            <summary>
              Gets or sets the configuration function specifying which
              training algorithm should be used for each of the models
              in the hidden Markov model set.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.Rejection">
            <summary>
              Gets or sets a value indicating whether a threshold model
              should be created or updated after training to support rejection.
            </summary>
            <value><c>true</c> to update the threshold model after training;
            otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.Empirical">
            <summary>
              Gets or sets a value indicating whether the class priors
              should be estimated from the data, as in an empirical Bayes method.
            </summary>
            
        </member>
        <member name="E:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.ClassModelLearningStarted">
            <summary>
              Occurs when the learning of a class model has started.
            </summary>
            
        </member>
        <member name="E:Accord.Statistics.Models.Markov.Learning.BaseHiddenMarkovClassifierLearning`2.ClassModelLearningFinished">
            <summary>
              Occurs when the learning of a class model has finished.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovClassifier,Accord.Statistics.Models.Markov.Learning.ClassifierLearningAlgorithmConfiguration)">
            <summary>
              Creates a new instance of the learning algorithm for a given 
              Markov sequence classifier using the specified configuration
              function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning.Run(System.Int32[][],System.Int32[])">
            <summary>
              Trains each model to recognize each of the output labels.
            </summary>
            
            <returns>The sum log-likelihood for all models after training.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning.ComputeError(System.Int32[][],System.Int32[])">
            <summary>
              Compute model error for a given data set.
            </summary>
            
            <param name="inputs">The input points.</param>
            <param name="outputs">The output points.</param>
            
            <returns>The percent of misclassification errors for the data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning.Threshold">
            <summary>
              Creates a new <see cref="M:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning.Threshold">threshold model</see>
              for the current set of Markov models in this sequence classifier.
            </summary>
            
            <returns>
              A <see cref="M:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning.Threshold">threshold Markov model</see>.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning.Smoothing">
            <summary>
              Gets or sets the smoothing kernel's sigma
              for the threshold model.
            </summary>
            
            <value>The smoothing kernel's sigma.</value>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.ClassifierLearningAlgorithmConfiguration">
            <summary>
              Configuration function delegate for Sequence Classifier Learning algorithms.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.GenerativeLearningEventArgs">
            <summary>
              Submodel learning event arguments.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.GenerativeLearningEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Markov.Learning.GenerativeLearningEventArgs"/> class.
            </summary>
            
            <param name="classLabel">The class label.</param>
            <param name="classes">The total number of classes.</param>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.GenerativeLearningEventArgs.Class">
            <summary>
              Gets the generative class model to 
              which this event refers to.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.GenerativeLearningEventArgs.Total">
            <summary>
              Gets the total number of models
              to be learned.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.IWeightedUnsupervisedLearning">
            <summary>
              Common interface for unsupervised learning algorithms for hidden
              Markov models which support for weighted training samples.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.IWeightedUnsupervisedLearning.Run(System.Array[],System.Double[])">
            <summary>
              Runs the learning algorithm.
            </summary>
            
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning">
            <summary>
              Base class for implementations of the Baum-Welch learning algorithm.
              This class cannot be instantiated.
            </summary>
            
            <remarks>
            <para>
              This class uses a template method pattern so specialized classes
              can be written for each kind of hidden Markov model emission density
              (either discrete or continuous). The methods <see cref="M:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.UpdateEmissions"/>,
              <see cref="M:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.ComputeForwardBackward(System.Int32,System.Double[0:,0:],System.Double[0:,0:])"/> and <see cref="M:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.ComputeKsi(System.Int32,System.Double[0:,0:],System.Double[0:,0:])"/> should
              be overridden by inheriting classes to specify how those probabilities
              should be computed for the density being modeled.</para>
              
            <para>
              For the actual Baum-Welch classes, please refer to <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning"/>
              or <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1"/>. For other kinds of algorithms, please
              see <see cref="T:Accord.Statistics.Models.Markov.Learning.ViterbiLearning"/> and <see cref="T:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning"/>
              and their generic counter-parts.</para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.#ctor(Accord.Statistics.Models.Markov.IHiddenMarkovModel)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.Run(System.Array[])">
            <summary>
              Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            
            <param name="observations">
              The sequences of univariate or multivariate observations used to train the model.
              Can be either of type double[] (for the univariate case) or double[][] for the
              multivariate case.
            </param>
            
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.Run(System.Array[],System.Double[])">
            <summary>
              Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            
            <param name="observations">
              The sequences of univariate or multivariate observations used to train the model.
              Can be either of type double[] (for the univariate case) or double[][] for the
              multivariate case.</param>
            <param name="weights">
              The weight associated with each sequence.</param>
            
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.ComputeForwardBackward(System.Int32,System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
              Computes the forward and backward probabilities matrices
              for a given observation referenced by its index in the
              input training data.
            </summary>
            
            <param name="index">The index of the observation in the input training data.</param>
            <param name="lnFwd">Returns the computed forward probabilities matrix.</param>
            <param name="lnBwd">Returns the computed backward probabilities matrix.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.ComputeKsi(System.Int32,System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
              Computes the ksi matrix of probabilities for a given observation
              referenced by its index in the input training data.
            </summary>
            
            <param name="index">The index of the observation in the input training data.</param>
            <param name="lnFwd">The matrix of forward probabilities for the observation.</param>
            <param name="lnBwd">The matrix of backward probabilities for the observation.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.UpdateEmissions">
            <summary>
              Updates the emission probability matrix.
            </summary>
            
            <remarks>
              Implementations of this method should use the observations
              in the training data and the Gamma probability matrix to
              update the probability distributions of symbol emissions.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.Tolerance">
            <summary>
              Gets or sets the maximum change in the average log-likelihood
              after an iteration of the algorithm used to detect convergence.
            </summary>
            
            <remarks>
              This is the likelihood convergence limit L between two iterations of the algorithm. The
              algorithm will stop when the change in the likelihood for two consecutive iterations
              has not changed by more than L percent of the likelihood. If left as zero, the
              algorithm will ignore this parameter and iterate over a number of fixed iterations
              specified by the previous parameter.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.Iterations">
            <summary>
              Gets or sets the maximum number of iterations
              performed by the learning algorithm.
            </summary>
            
            <remarks>
              This is the maximum number of iterations to be performed by the learning algorithm. If
              specified as zero, the algorithm will learn until convergence of the model average
              likelihood respecting the desired limit.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.LogKsi">
            <summary>
              Gets the Ksi matrix of log probabilities created during
              the last iteration of the Baum-Welch learning algorithm.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.LogGamma">
            <summary>
              Gets the Gamma matrix of log probabilities created during
              the last iteration of the Baum-Welch learning algorithm.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaseBaumWelchLearning.LogWeights">
            <summary>
              Gets the sample weights in the last iteration of the
              Baum-Welch learning algorithm.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning">
            <summary>
              Baum-Welch learning algorithm for <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">
              discrete-density Hidden Markov Models</see>.
            </summary>
            
            <remarks>
              <para>
              The Baum-Welch algorithm is an <see cref="T:Accord.Statistics.Models.Markov.Learning.IUnsupervisedLearning">unsupervised algorithm</see>
              used to learn a single hidden Markov model object from a set of observation sequences. It works
              by using a variant of the <see cref="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.MixtureOptions)">
              Expectation-Maximization</see> algorithm to search a set of model parameters (i.e. the matrix
              of <see cref="P:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Transitions">transition probabilities A</see>, the matrix 
              of <see cref="P:Accord.Statistics.Models.Markov.HiddenMarkovModel.Emissions">emission probabilities B</see>, and the
              <see cref="P:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Probabilities">initial probability vector π</see>) that 
              would result in a model having a high likelihood of being able 
              to <see cref="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Generate(System.Int32)">generate</see> a set of training 
              sequences given to this algorithm.</para>
              
              <para>
              For increased accuracy, this class performs all computations using log-probabilities.</para>
                
              <para>
              For a more thorough explanation on <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">hidden Markov models</see>
              with practical examples on gesture recognition, please see 
              <a href="http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko">
              Sequence Classifiers in C#, Part I: Hidden Markov Models</a> [1].</para>
                
            <para>
              [1]: <a href="http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko"> 
                      http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko </a>
            </para>
            </remarks>
            
            <example>
              <code>
              // We will try to create a Hidden Markov Model which
              //  can detect if a given sequence starts with a zero
              //  and has any number of ones after that.
              int[][] sequences = new int[][] 
              {
                  new int[] { 0,1,1,1,1,0,1,1,1,1 },
                  new int[] { 0,1,1,1,0,1,1,1,1,1 },
                  new int[] { 0,1,1,1,1,1,1,1,1,1 },
                  new int[] { 0,1,1,1,1,1         },
                  new int[] { 0,1,1,1,1,1,1       },
                  new int[] { 0,1,1,1,1,1,1,1,1,1 },
                  new int[] { 0,1,1,1,1,1,1,1,1,1 },
              };
              
              // Creates a new Hidden Markov Model with 3 states for
              //  an output alphabet of two characters (zero and one)
              HiddenMarkovModel hmm = new HiddenMarkovModel(3, 2);
              
              // Try to fit the model to the data until the difference in
              //  the average log-likelihood changes only by as little as 0.0001
              var teacher = new BaumWelchLearning(hmm) { Tolerance = 0.0001, Iterations = 0 };
              
              double ll = teacher.Run(sequences);
              
              // Calculate the probability that the given
              //  sequences originated from the model
              double l1 = Math.Exp(hmm.Evaluate(new int[] { 0, 1 }));       // 0.999
              double l2 = Math.Exp(hmm.Evaluate(new int[] { 0, 1, 1, 1 })); // 0.916
              
              // Sequences which do not start with zero have much lesser probability.
              double l3 = Math.Exp(hmm.Evaluate(new int[] { 1, 1 }));       // 0.000
              double l4 = Math.Exp(hmm.Evaluate(new int[] { 1, 0, 0, 0 })); // 0.000
              
              // Sequences which contains few errors have higher probability
              //  than the ones which do not start with zero. This shows some
              //  of the temporal elasticity and error tolerance of the HMMs.
              double l5 = Math.Exp(hmm.Evaluate(new int[] { 0, 1, 0, 1, 1, 1, 1, 1, 1 })); // 0.034
              double l6 = Math.Exp(hmm.Evaluate(new int[] { 0, 1, 1, 1, 1, 1, 1, 0, 1 })); // 0.034
              </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel)">
            <summary>
              Creates a new instance of the Baum-Welch learning algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.Run(System.Int32[][])">
            <summary>
              Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            
            <param name="observations">An array of observation sequences to be used to train the model.</param>
            
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
            
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.Accord#Statistics#Models#Markov#Learning#IUnsupervisedLearning#Run(System.Array[])">
            <summary>
              Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            
            <param name="observations">The sequences of univariate or multivariate observations used to train the model.
              Can be either of type double[] (for the univariate case) or double[][] for the
              multivariate case.</param>
              
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
            
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.ComputeForwardBackward(System.Int32,System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
              Computes the forward and backward probabilities matrices
              for a given observation referenced by its index in the
              input training data.
            </summary>
            
            <param name="index">The index of the observation in the input training data.</param>
            <param name="lnFwd">Returns the computed forward probabilities matrix.</param>
            <param name="lnBwd">Returns the computed backward probabilities matrix.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.UpdateEmissions">
            <summary>
              Updates the emission probability matrix.
            </summary>
            
            <remarks>
              Implementations of this method should use the observations
              in the training data and the Gamma probability matrix to
              update the probability distributions of symbol emissions.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.ComputeKsi(System.Int32,System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
              Computes the ksi matrix of probabilities for a given observation
              referenced by its index in the input training data.
            </summary>
            
            <param name="index">The index of the observation in the input training data.</param>
            <param name="lnFwd">The matrix of forward probabilities for the observation.</param>
            <param name="lnBwd">The matrix of backward probabilities for the observation.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.FromMixtureModel(Accord.Statistics.Models.Markov.HiddenMarkovModel{Accord.Statistics.Distributions.Univariate.Mixture{Accord.Statistics.Distributions.Univariate.NormalDistribution}},Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Creates a Baum-Welch with default configurations for
              hidden Markov models with normal mixture densities.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.FromMixtureModel(Accord.Statistics.Models.Markov.HiddenMarkovModel{Accord.Statistics.Distributions.Multivariate.MultivariateMixture{Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution}},Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Creates a Baum-Welch with default configurations for
              hidden Markov models with normal mixture densities.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.Model">
            <summary>
              Gets the model being trained.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1">
             <summary>
               Baum-Welch learning algorithm for <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1">
               arbitrary-density (generic) Hidden Markov Models</see>.
             </summary>
             
             <remarks>
               <para>
               The Baum-Welch algorithm is an <see cref="T:Accord.Statistics.Models.Markov.Learning.IUnsupervisedLearning">unsupervised algorithm</see>
               used to learn a single hidden Markov model object from a set of observation sequences. It works
               by using a variant of the <see cref="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.MixtureOptions)">
               Expectation-Maximization</see> algorithm to search a set of model parameters (i.e. the matrix
               of <see cref="P:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Transitions">transition probabilities <c>A</c>
               </see>, the vector of <see cref="P:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Emissions">state probability distributions
               <c>B</c></see>, and the <see cref="P:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Probabilities">initial probability
               vector <c>π</c></see>) that would result in a model having a high likelihood of being able 
               to <see cref="M:Accord.Statistics.Models.Markov.HiddenMarkovModel`1.Generate(System.Int32)">generate</see> a set of training 
               sequences given to this algorithm.</para>
               
               <para>
               For increased accuracy, this class performs all computations using log-probabilities.</para>
                 
               <para>
               For a more thorough explanation on <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">hidden Markov models</see>
               with practical examples on gesture recognition, please see 
               <a href="http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko">
               Sequence Classifiers in C#, Part I: Hidden Markov Models</a> [1].</para>
                 
             <para>
               [1]: <a href="http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko"> 
                       http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko </a>
             </para>
             </remarks>
             
             
             <example>
             <para>
               In the following example, we will create a Continuous Hidden Markov Model using
               a univariate Normal distribution to model properly model continuous sequences.</para>
               
               <code>
               // Create continuous sequences. In the sequences below, there
               //  seems to be two states, one for values between 0 and 1 and
               //  another for values between 5 and 7. The states seems to be
               //  switched on every observation.
               double[][] sequences = new double[][] 
               {
                   new double[] { 0.1, 5.2, 0.3, 6.7, 0.1, 6.0 },
                   new double[] { 0.2, 6.2, 0.3, 6.3, 0.1, 5.0 },
                   new double[] { 0.1, 7.0, 0.1, 7.0, 0.2, 5.6 },
               };
             
                         
               // Specify a initial normal distribution for the samples.
               NormalDistribution density = new NormalDistribution();
             
               // Creates a continuous hidden Markov Model with two states organized in a forward
               //  topology and an underlying univariate Normal distribution as probability density.
               var model = new HiddenMarkovModel&lt;NormalDistribution&gt;(new Ergodic(2), density);
             
               // Configure the learning algorithms to train the sequence classifier until the
               // difference in the average log-likelihood changes only by as little as 0.0001
               var teacher = new BaumWelchLearning&lt;NormalDistribution&gt;(model)
               {
                   Tolerance = 0.0001,
                   Iterations = 0,
               };
             
               // Fit the model
               double likelihood = teacher.Run(sequences);
             
               // See the log-probability of the sequences learned
               double a1 = model.Evaluate(new[] { 0.1, 5.2, 0.3, 6.7, 0.1, 6.0 }); // -0.12799388666109757
               double a2 = model.Evaluate(new[] { 0.2, 6.2, 0.3, 6.3, 0.1, 5.0 }); // 0.01171157434400194
            
               // See the log-probability of an unrelated sequence
               double a3 = model.Evaluate(new[] { 1.1, 2.2, 1.3, 3.2, 4.2, 1.0 }); // -298.7465244473417
            
               // We can transform the log-probabilities to actual probabilities:
               double likelihood = Math.Exp(logLikelihood);
               a1 = Math.Exp(a1); // 0.879
               a2 = Math.Exp(a2); // 1.011
               a3 = Math.Exp(a3); // 0.000
               
               // We can also ask the model to decode one of the sequences. After
               // this step the state variable will contain: { 0, 1, 0, 1, 0, 1 }
               
               int[] states = model.Decode(new[] { 0.1, 5.2, 0.3, 6.7, 0.1, 6.0 });
             </code>
             
             <para>
               In the following example, we will create a Discrete Hidden Markov Model
               using a Generic Discrete Probability Distribution to reproduce the same
               code example given in <seealso cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning"/> documentation.</para>
               
               <code>
               // Arbitrary-density Markov Models can operate using any
               // probability distribution, including discrete ones. 
               
               // In the following example, we will try to create a
               // Discrete Hidden Markov Model using a discrete
               // distribution to detect if a given sequence starts
               // with a zero and has any number of ones after that.
               
               double[][] sequences = new double[][] 
               {
                   new double[] { 0,1,1,1,1,0,1,1,1,1 },
                   new double[] { 0,1,1,1,0,1,1,1,1,1 },
                   new double[] { 0,1,1,1,1,1,1,1,1,1 },
                   new double[] { 0,1,1,1,1,1         },
                   new double[] { 0,1,1,1,1,1,1       },
                   new double[] { 0,1,1,1,1,1,1,1,1,1 },
                   new double[] { 0,1,1,1,1,1,1,1,1,1 },
               };
               
               // Create a new Hidden Markov Model with 3 states and
               //  a generic discrete distribution with two symbols
               var hmm = new HiddenMarkovModel.CreateGeneric(3, 2);
               
               // We will try to fit the model to the data until the difference in
               //  the average log-likelihood changes only by as little as 0.0001
               var teacher = new BaumWelchLearning&lt;UniformDiscreteDistribution&gt;(hmm)
               { 
                   Tolerance = 0.0001,
                   Iterations = 0 
               };
               
               // Begin model training
               double ll = teacher.Run(sequences);
               
             
               // Calculate the likelihood that the given sequences originated
               // from the model. The commented values on the right are the 
               // likelihoods computed by taking an exp(x) of the log-likelihoods
               // returned by the Evaluate method.
               double l1 = Math.Exp(hmm.Evaluate(new double[] { 0, 1 }));       // 0.999
               double l2 = Math.Exp(hmm.Evaluate(new double[] { 0, 1, 1, 1 })); // 0.916
               
               // Sequences which do not start with zero have much lesser probability.
               double l3 = Math.Exp(hmm.Evaluate(new double[] { 1, 1 }));       // 0.000
               double l4 = Math.Exp(hmm.Evaluate(new double[] { 1, 0, 0, 0 })); // 0.000
               
               // Sequences which contains few errors have higher probability
               //  than the ones which do not start with zero. This shows some
               //  of the temporal elasticity and error tolerance of the HMMs.
               double l5 = Math.Exp(hmm.Evaluate(new double[] { 0, 1, 0, 1, 1, 1, 1, 1, 1 })); // 0.034
               double l6 = Math.Exp(hmm.Evaluate(new double[] { 0, 1, 1, 1, 1, 1, 1, 0, 1 })); // 0.034
               </code>
               
             <para>
               The next example shows how to create a multivariate model using
               a multivariate normal distribution. In this example, sequences
               contain vector-valued observations, such as in the case of (x,y)
               pairs.</para>
               
             <code>
             // Create sequences of vector-valued observations. In the
             // sequence below, a single observation is composed of two
             // coordinate values, such as (x, y). There seems to be two
             // states, one for (x,y) values less than (5,5) and another
             // for higher values. The states seems to be switched on
             // every observation.
             double[][][] sequences =
             {
                 new double[][] // sequence 1
                 {
                     new double[] { 1, 2 }, // observation 1 of sequence 1
                     new double[] { 6, 7 }, // observation 2 of sequence 1
                     new double[] { 2, 3 }, // observation 3 of sequence 1
                 },
                 new double[][] // sequence 2
                 {
                     new double[] { 2, 2 }, // observation 1 of sequence 2
                     new double[] { 9, 8 }, // observation 2 of sequence 2
                     new double[] { 1, 0 }, // observation 3 of sequence 2
                 },
                 new double[][] // sequence 3
                 {
                     new double[] { 1, 3 }, // observation 1 of sequence 3
                     new double[] { 8, 9 }, // observation 2 of sequence 3
                     new double[] { 3, 3 }, // observation 3 of sequence 3
                 },
             };
             
             
             // Specify a initial normal distribution for the samples.
             var density = new MultivariateNormalDistribution(dimension: 2);
             
             // Creates a continuous hidden Markov Model with two states organized in a forward
             //  topology and an underlying univariate Normal distribution as probability density.
             var model = new HiddenMarkovModel&lt;MultivariateNormalDistribution&gt;(new Forward(2), density);
             
             // Configure the learning algorithms to train the sequence classifier until the
             // difference in the average log-likelihood changes only by as little as 0.0001
             var teacher = new BaumWelchLearning&lt;MultivariateNormalDistribution&gt;(model)
             {
                 Tolerance = 0.0001,
                 Iterations = 0,
             };
             
             // Fit the model
             double logLikelihood = teacher.Run(sequences);
             
             // See the likelihood of the sequences learned
             double a1 = Math.Exp(model.Evaluate(new [] { 
                 new double[] { 1, 2 }, 
                 new double[] { 6, 7 },
                 new double[] { 2, 3 }})); // 0.000208
             
             double a2 = Math.Exp(model.Evaluate(new [] { 
                 new double[] { 2, 2 }, 
                 new double[] { 9, 8  },
                 new double[] { 1, 0 }})); // 0.0000376
             
             // See the likelihood of an unrelated sequence
             double a3 = Math.Exp(model.Evaluate(new [] { 
                 new double[] { 8, 7 }, 
                 new double[] { 9, 8  },
                 new double[] { 1, 0 }})); // 2.10 x 10^(-89)
             </code>
             
             <para>
               The following example shows how to create a hidden Markov model
               that considers each feature to be independent of each other. This
               is the same as following Bayes' assumption of independence for each
               feature in the feature vector.
             </para>
             
             <code>
             // Let's say we have 2 meteorological sensors gathering data
             // from different time periods of the day. Those periods are
             // represented below:
             
             double[][][] data =
             {
                 new double[][] // first sequence (we just repeated the measurements 
                 {              //  once, so there is only one observation sequence)
             
                     new double[] { 1, 2 }, // Day 1, 15:00 pm
                     new double[] { 6, 7 }, // Day 1, 16:00 pm
                     new double[] { 2, 3 }, // Day 1, 17:00 pm
                     new double[] { 2, 2 }, // Day 1, 18:00 pm
                     new double[] { 9, 8 }, // Day 1, 19:00 pm
                     new double[] { 1, 0 }, // Day 1, 20:00 pm
                     new double[] { 1, 3 }, // Day 1, 21:00 pm
                     new double[] { 8, 9 }, // Day 1, 22:00 pm
                     new double[] { 3, 3 }, // Day 1, 23:00 pm
                 }
             };
             
             // Let's assume those sensors are unrelated (for simplicity). As
             // such, let's assume the data gathered from the sensors may reside
             // into circular centroids denoting each state the underlying system
             // might be in.
             NormalDistribution[] initial_components = 
             {
                 new NormalDistribution(), // initial value for the first variable's distribution
                 new NormalDistribution()  // initial value for the second variable's distribution
             };
             
             // Specify a initial independent normal distribution for the samples.
             var density = new Independent&lt;NormalDistribution&gt;(initial_components);
             
             // Creates a continuous hidden Markov Model with two states organized in an Ergodic
             //  topology and an underlying independent Normal distribution as probability density.
             var model = new HiddenMarkovModel&lt;Independent&lt;NormalDistribution&gt;&gt;(new Ergodic(2), density);
             
             // Configure the learning algorithms to train the sequence classifier until the
             // difference in the average log-likelihood changes only by as little as 0.0001
             var teacher = new BaumWelchLearning&lt;Independent&lt;NormalDistribution&gt;&gt;(model)
             {
                 Tolerance = 0.0001,
                 Iterations = 0,
             };
             
             // Fit the model
             double error = teacher.Run(data);
             
             // Get the hidden state associated with each observation
             //
             double logLikelihood; // log-likelihood of the Viterbi path
             int[] hidden_states = model.Decode(data[0], out logLikelihood);
             </code>
             
             <para>
               Finally, the last example shows how to fit a mixture-density
               hidden Markov models.
             </para>
             
             <code>
             // Suppose we have a set of six sequences and we would like to
             // fit a hidden Markov model with mixtures of Normal distributions
             // as the emission densities. 
             
             // First, let's consider a set of univariate sequences:
             double[][] sequences =
             {
                 new double[] { 1, 1, 2, 2, 2, 3, 3, 3 },
                 new double[] { 1, 2, 2, 2, 3, 3 },
                 new double[] { 1, 2, 2, 3, 3, 5 },
                 new double[] { 2, 2, 2, 2, 3, 3, 3, 4, 5, 5, 1 },
                 new double[] { 1, 1, 1, 2, 2, 5 },
                 new double[] { 1, 2, 2, 4, 4, 5 },
             };
             
             
             // Now we can begin specifying a initial Gaussian mixture distribution. It is
             // better to add some different initial parameters to the mixture components:
             var density = new Mixture&lt;NormalDistribution&gt;(
                 new NormalDistribution(mean: 2, stdDev: 1.0), // 1st component in the mixture
                 new NormalDistribution(mean: 0, stdDev: 0.6), // 2nd component in the mixture
                 new NormalDistribution(mean: 4, stdDev: 0.4), // 3rd component in the mixture
                 new NormalDistribution(mean: 6, stdDev: 1.1)  // 4th component in the mixture
             );
             
             // Let's then create a continuous hidden Markov Model with two states organized in a forward
             //  topology with the underlying univariate Normal mixture distribution as probability density.
             var model = new HiddenMarkovModel&lt;Mixture&lt;NormalDistribution&gt;&gt;(new Forward(2), density);
             
             // Now we should configure the learning algorithms to train the sequence classifier. We will
             // learn until the difference in the average log-likelihood changes only by as little as 0.0001
             var teacher = new BaumWelchLearning&lt;Mixture&lt;NormalDistribution&gt;&gt;(model)
             {
                 Tolerance = 0.0001,
                 Iterations = 0,
             
                 // Note, however, that since this example is extremely simple and we have only a few
                 // data points, a full-blown mixture wouldn't really be needed. Thus we will have a
                 // great chance that the mixture would become degenerated quickly. We can avoid this
                 // by specifying some regularization constants in the Normal distribution fitting:
             
                 FittingOptions = new MixtureOptions()
                 {
                     Iterations = 1, // limit the inner e-m to a single iteration
             
                     InnerOptions = new NormalOptions()
                     {
                         Regularization = 1e-5 // specify a regularization constant
                         
                         // Please note that specifying a regularization constant avoids getting the exception
                         // "Variance is zero. Try specifying a regularization constant in the fitting options."
                     }
                 }
             };
             
             // Finally, we can fit the model
             double logLikelihood = teacher.Run(sequences);
             
             // And now check the likelihood of some approximate sequences.
             double a1 = Math.Exp(model.Evaluate(new double[] { 1, 1, 2, 2, 3 })); // 2.3413833128741038E+45
             double a2 = Math.Exp(model.Evaluate(new double[] { 1, 1, 2, 5, 5 })); // 9.94607618459872E+19
             
             // We can see that the likelihood of an unrelated sequence is much smaller:
             double a3 = Math.Exp(model.Evaluate(new double[] { 8, 2, 6, 4, 1 })); // 1.5063654166181737E-44
             </code>
             
             
             <para>
               When using Normal distributions, it is often the case we might find problems
               which are difficult to solve. Some problems may include constant variables or
               other numerical difficulties preventing a the proper estimation of a Normal 
               distribution from the data. </para>
               
             <para> 
               A sign of those difficulties arises when the learning algorithm throws the exception
               <c>"Variance is zero. Try specifying a regularization constant in the fitting options"</c> 
               for univariate distributions (e.g. <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/> or a <see cref="T:Accord.NonPositiveDefiniteMatrixException"/> informing that the <c>"Covariance matrix
               is not positive definite. Try specifying a regularization constant in the fitting options"</c>
               for multivariate distributions like the <see cref="T:Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution"/>.
               In both cases, this is an indication that the variables being learned can not be suitably 
               modeled by Normal distributions. To avoid numerical difficulties when estimating those
               probabilities, a small regularization constant can be added to the variances or to the
               covariance matrices until they become greater than zero or positive definite.</para>
             
             <para>
               To specify a regularization constant as given in the above message, we 
               can indicate a fitting options object for the model distribution using:
             </para>
             
             <code>
             var teacher = new BaumWelchLearning&lt;NormalDistribution&gt;(model)
             {
                 Tolerance = 0.0001,
                 Iterations = 0,
             
                 FittingOptions = new NormalOptions()
                 {
                     Regularization = 1e-5 // specify a regularization constant
                 }
             };
             </code>
             
             <para>
               Typically, any small value would suffice as a regularization constant,
               though smaller values may lead to longer fitting times. Too high values,
               on the other hand, would lead to decreased accuracy.</para>
             </example>
             
             
             
             
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1"/>
             
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel{`0})">
            <summary>
              Creates a new instance of the Baum-Welch learning algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1.Run(System.Array[])">
            <summary>
              Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            <param name="observations">
              The sequences of univariate or multivariate observations used to train the model.
              Can be either of type double[] (for the univariate case) or double[][] for the
              multivariate case.
            </param>
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1.ComputeKsi(System.Int32,System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
              Computes the ksi matrix of probabilities for a given observation
              referenced by its index in the input training data.
            </summary>
            <param name="index">The index of the observation in the input training data.</param>
            <param name="lnFwd">The matrix of forward probabilities for the observation.</param>
            <param name="lnBwd">The matrix of backward probabilities for the observation.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1.UpdateEmissions">
            <summary>
              Updates the emission probability matrix.
            </summary>
            <remarks>
              Implementations of this method should use the observations
              in the training data and the Gamma probability matrix to
              update the probability distributions of symbol emissions.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1.ComputeForwardBackward(System.Int32,System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
              Computes the forward and backward probabilities matrices
              for a given observation referenced by its index in the
              input training data.
            </summary>
            <param name="index">The index of the observation in the input training data.</param>
            <param name="lnFwd">Returns the computed forward probabilities matrix.</param>
            <param name="lnBwd">Returns the computed backward probabilities matrix.</param>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1.Model">
            <summary>
              Gets the model being trained.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning`1.FittingOptions">
            <summary>
              Gets or sets the distribution fitting options
              to use when estimating distribution densities
              during learning.
            </summary>
            <value>The distribution fitting options.</value>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1">
             <summary>
               Learning algorithm for <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1">
               arbitrary-density generative hidden Markov sequence classifiers</see>.
             </summary>
             
             <remarks>
             <para>
               This class acts as a teacher for <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1">
               classifiers based on arbitrary-density hidden Markov models</see>. The learning
               algorithm uses a generative approach. It works by training each model in the
               generative classifier separately.</para>
               
             <para>
               This can teach models that use any <see cref="T:Accord.Statistics.Distributions.IDistribution">probability
               distribution</see>. Such <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1">arbitrary-density models
               </see> can be used for any kind of observation values or vectors. When 
               
             
               be used whenever the sequence of observations is discrete or can be represented
               by discrete symbols, such as class labels, integers, and so on. If you need
               to classify sequences of other entities, such as real numbers, vectors (i.e.
               multivariate observations), then you can use 
               <see cref="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1">generic-density
               hidden Markov models</see>. Those models can be modeled after any kind of
               <see cref="T:Accord.Statistics.Distributions.IDistribution">probability distribution</see> implementing
               the <see cref="T:Accord.Statistics.Distributions.IDistribution"/> interface.</para>
               
             <para>
               For a more thorough explanation on <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">hidden Markov models</see>
               with practical examples on gesture recognition, please see 
               <a href="http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko">
               Sequence Classifiers in C#, Part I: Hidden Markov Models</a> [1].</para>
                 
             <para>
               [1]: <a href="http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko"> 
                       http://www.codeproject.com/Articles/541428/Sequence-Classifiers-in-Csharp-Part-I-Hidden-Marko </a>
             </para>
             </remarks>
             
             <example>
               <para>
               The following example creates a continuous-density hidden Markov model sequence
               classifier to recognize two classes of univariate observation sequences.</para>
               
               <code>
               // Create a Continuous density Hidden Markov Model Sequence Classifier
               // to detect a univariate sequence and the same sequence backwards.
               double[][] sequences = new double[][] 
               {
                   new double[] { 0,1,2,3,4 }, // This is the first  sequence with label = 0
                   new double[] { 4,3,2,1,0 }, // This is the second sequence with label = 1
               };
               
               // Labels for the sequences
               int[] labels = { 0, 1 };
            
               // Creates a new Continuous-density Hidden Markov Model Sequence Classifier
               //  containing 2 hidden Markov Models with 2 states and an underlying Normal
               //  distribution as the continuous probability density.
               NormalDistribution density = new NormalDistribution();
               var classifier = new HiddenMarkovClassifier&lt;NormalDistribution&gt;(2, new Ergodic(2), density);
            
               // Create a new learning algorithm to train the sequence classifier
               var teacher = new HiddenMarkovClassifierLearning&lt;NormalDistribution&gt;(classifier,
            
                   // Train each model until the log-likelihood changes less than 0.001
                   modelIndex =&gt; new BaumWelchLearning&lt;NormalDistribution&gt;(classifier.Models[modelIndex])
                   {
                       Tolerance = 0.0001,
                       Iterations = 0
                   }
               );
               
               // Train the sequence classifier using the algorithm
               teacher.Run(sequences, labels);
               
               
               // Calculate the probability that the given
               //  sequences originated from the model
               double likelihood;
               
               // Try to classify the first sequence (output should be 0)
               int c1 = classifier.Compute(sequences[0], out likelihood);
               
               // Try to classify the second sequence (output should be 1)
               int c2 = classifier.Compute(sequences[1], out likelihood);
               </code>
               
             
               <para>
               The following example creates a continuous-density hidden Markov model sequence
               classifier to recognize two classes of multivariate sequence of observations.
               This example uses multivariate Normal distributions as emission densities. </para>
               
               <para>
               When there is insufficient training data, or one of the variables is constant,
               the Normal distribution estimation may fail with a "Covariance matrix is not
               positive-definite". In this case, it is possible to sidestep this issue by
               specifying a small regularization constant to be added to the diagonal elements
               of the covariance matrix. </para>
               
               <code>
               // Create a Continuous density Hidden Markov Model Sequence Classifier
               // to detect a multivariate sequence and the same sequence backwards.
               
               double[][][] sequences = new double[][][]
               {
                   new double[][] 
                   { 
                       // This is the first  sequence with label = 0
                       new double[] { 0, 1 },
                       new double[] { 1, 2 },
                       new double[] { 2, 3 },
                       new double[] { 3, 4 },
                       new double[] { 4, 5 },
                   }, 
               
                   new double[][]
                   {
                           // This is the second sequence with label = 1
                       new double[] { 4,  3 },
                       new double[] { 3,  2 },
                       new double[] { 2,  1 },
                       new double[] { 1,  0 },
                       new double[] { 0, -1 },
                   }
               };
               
               // Labels for the sequences
               int[] labels = { 0, 1 };
               
               
               var initialDensity = new MultivariateNormalDistribution(2);
               
               // Creates a sequence classifier containing 2 hidden Markov Models with 2 states
               // and an underlying multivariate mixture of Normal distributions as density.
               var classifier = new HiddenMarkovClassifier&lt;MultivariateNormalDistribution&gt;(
                   classes: 2, topology: new Forward(2), initial: initialDensity);
               
               // Configure the learning algorithms to train the sequence classifier
               var teacher = new HiddenMarkovClassifierLearning&lt;MultivariateNormalDistribution&gt;(
                   classifier,
               
                   // Train each model until the log-likelihood changes less than 0.0001
                   modelIndex =&gt; new BaumWelchLearning&lt;MultivariateNormalDistribution&gt;(
                       classifier.Models[modelIndex])
                   {
                       Tolerance = 0.0001,
                       Iterations = 0,
               
                       FittingOptions = new NormalOptions()
                       {
                           Diagonal = true,      // only diagonal covariance matrices
                           Regularization = 1e-5 // avoid non-positive definite errors
                       }
                   }
               );
               
               // Train the sequence classifier using the algorithm
               double logLikelihood = teacher.Run(sequences, labels);
               
               
               // Calculate the probability that the given
               //  sequences originated from the model
               double likelihood, likelihood2;
               
               // Try to classify the 1st sequence (output should be 0)
               int c1 = classifier.Compute(sequences[0], out likelihood);
               
               // Try to classify the 2nd sequence (output should be 1)
               int c2 = classifier.Compute(sequences[1], out likelihood2);
               </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning"/>
             
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovClassifier{`0},Accord.Statistics.Models.Markov.Learning.ClassifierLearningAlgorithmConfiguration)">
            <summary>
              Creates a new instance of the learning algorithm for a given 
              Markov sequence classifier using the specified configuration
              function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1.Run(System.Array[],System.Int32[])">
            <summary>
              Trains each model to recognize each of the output labels.
            </summary>
            
            <returns>The sum log-likelihood for all models after training.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1.ComputeError(System.Array[],System.Int32[])">
            <summary>
              Compute model error for a given data set.
            </summary>
            
            <param name="inputs">The input points.</param>
            <param name="outputs">The output points.</param>
            
            <returns>The percent of misclassification errors for the data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1.Threshold">
            <summary>
              Creates a new <see cref="M:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1.Threshold">threshold model</see>
              for the current set of Markov models in this sequence classifier.
            </summary>
            
            <returns>
              A <see cref="M:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1.Threshold">threshold Markov model</see>.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm">
            <summary>
              Forward-Backward algorithms for Hidden Markov Models.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double[],System.Double[0:,0:])">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[])">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations (no scaling).
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double@)">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double[]@)">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double[]@,System.Double@)">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward``1(Accord.Statistics.Models.Markov.HiddenMarkovModel{``0},System.Double[][],System.Double[],System.Double[0:,0:])">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward``1(Accord.Statistics.Models.Markov.HiddenMarkovModel{``0},System.Double[][],System.Double@)">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward``1(Accord.Statistics.Models.Markov.HiddenMarkovModel{``0},System.Double[][],System.Double[]@)">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward``1(Accord.Statistics.Models.Markov.HiddenMarkovModel{``0},System.Double[][],System.Double[]@,System.Double@)">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Backward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double[],System.Double[0:,0:])">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Backward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[])">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations (no scaling).
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Backward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double[])">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Backward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double@)">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations (no scaling).
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Backward``1(Accord.Statistics.Models.Markov.HiddenMarkovModel{``0},System.Double[][],System.Double[],System.Double[0:,0:])">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Backward``1(Accord.Statistics.Models.Markov.HiddenMarkovModel{``0},System.Double[][],System.Double[])">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.LogForward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double[0:,0:])">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.LogForward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double@)">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.LogForward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[])">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.LogForward``1(Accord.Statistics.Models.Markov.HiddenMarkovModel{``0},System.Double[][],System.Double[0:,0:])">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.LogForward``1(Accord.Statistics.Models.Markov.HiddenMarkovModel{``0},System.Double[][],System.Double@)">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.LogForward``1(Accord.Statistics.Models.Markov.HiddenMarkovModel{``0},System.Double[][])">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.LogBackward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double[0:,0:])">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.LogBackward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[])">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.LogBackward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double@)">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations (no scaling).
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.LogBackward``1(Accord.Statistics.Models.Markov.HiddenMarkovModel{``0},System.Double[][],System.Double[0:,0:])">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.LogBackward``1(Accord.Statistics.Models.Markov.HiddenMarkovModel{``0},System.Double[][])">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.LogBackward``1(Accord.Statistics.Models.Markov.HiddenMarkovModel{``0},System.Double[][],System.Double@)">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations (no scaling).
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier">
            <summary>
              Discrete-density Hidden Markov Model Set for Sequence Classification.
            </summary>
            
            <remarks>
            <para>
              This class uses a set of <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">discrete hidden Markov models</see>
              to classify sequences of integer symbols. Each model will try to learn and recognize each 
              of the different output classes. For examples and details on how to learn such models,
              please take a look on the documentation for <see cref="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning"/>.</para>
            <para>
              For other type of sequences, such as discrete sequences (not necessarily symbols) or even
              continuous and multivariate variables, please see use the generic classifier counterpart 
              <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1"/></para>
            </remarks>
            
            <example>
            <para>
              Examples are available at the respective learning algorithm pages. For 
              example, see <see cref="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning"/>. </para>
            </example>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology,System.Int32,System.String[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="topology">The topology of the hidden states. A forward-only topology
            is indicated to sequence classification problems, such as speech recognition.</param>
            <param name="symbols">The number of symbols in the models' discrete alphabet.</param>
            <param name="names">The optional class names for each of the classifiers.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology,System.Int32)">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="topology">The topology of the hidden states. A forward-only topology
            is indicated to sequence classification problems, such as speech recognition.</param>
            <param name="symbols">The number of symbols in the models' discrete alphabet.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology[],System.Int32)">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="topology">The topology of the hidden states. A forward-only topology
            is indicated to sequence classification problems, such as speech recognition.</param>
            <param name="symbols">The number of symbols in the models' discrete alphabet.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology[],System.Int32,System.String[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="topology">The topology of the hidden states. A forward-only topology
            is indicated to sequence classification problems, such as speech recognition.</param>
            <param name="symbols">The number of symbols in the models' discrete alphabet.</param>
            <param name="names">The optional class names for each of the classifiers.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.#ctor(System.Int32,System.Int32[],System.Int32,System.String[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="states">An array specifying the number of hidden states for each
            of the classifiers. By default, and Ergodic topology will be used.</param>
            <param name="symbols">The number of symbols in the models' discrete alphabet.</param>
            <param name="names">The optional class names for each of the classifiers.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.#ctor(System.Int32,System.Int32[],System.Int32)">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="states">An array specifying the number of hidden states for each
            of the classifiers. By default, and Ergodic topology will be used.</param>
            <param name="symbols">The number of symbols in the models' discrete alphabet.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.Compute(System.Int32[])">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">
            threshold model</see>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.Compute(System.Int32[],System.Double@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            <param name="response">The class responsibilities (or
            the probability of the sequence to belong to each class). When
            using threshold models, the sum of the probabilities will not
            equal one, and the amount left was the threshold probability.
            If a threshold model is not being used, the array should sum to
            one.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">
            threshold model</see>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.Compute(System.Int32[],System.Double[]@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
            <param name="sequence">The sequence of observations.</param>
            <param name="responsibilities">The class responsibilities (or
            the probability of the sequence to belong to each class). When
            using threshold models, the sum of the probabilities will not
            equal one, and the amount left was the threshold probability.
            If a threshold model is not being used, the array should sum to
            one.</param>
            
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.BaseHiddenMarkovClassifier`1.Threshold">
            threshold model</see>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.LogLikelihood(System.Int32[],System.Int32)">
            <summary>
              Computes the log-likelihood of a sequence
              belong to a given class according to this
              classifier.
            </summary>
            <param name="sequence">The sequence of observations.</param>
            <param name="output">The output class label.</param>
            
            <returns>The log-likelihood of the sequence belonging to the given class.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.LogLikelihood(System.Int32[][],System.Int32[])">
            <summary>
              Computes the log-likelihood of a set of sequences
              belonging to their given respective classes according
              to this classifier.
            </summary>
            <param name="sequences">A set of sequences of observations.</param>
            <param name="outputs">The output class label for each sequence.</param>
            
            <returns>The log-likelihood of the sequences belonging to the given classes.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.LogLikelihood(System.Int32[])">
            <summary>
              Computes the log-likelihood that a sequence
              belongs any of the classes in the classifier.
            </summary>
            <param name="sequence">The sequence of observations.</param>
            
            <returns>The log-likelihood of the sequence belonging to the classifier.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.CreateGeneric(System.Int32,System.Int32[],System.Int32)">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
            
            <param name="classes">The number of classes in the classifier.</param>
            <param name="states">An array specifying the number of hidden states for each
            of the classifiers. By default, and Ergodic topology will be used.</param>
            <param name="symbols">The number of symbols in the models' discrete alphabet.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.Accord#Statistics#Models#Markov#IHiddenMarkovClassifier#Compute(System.Array,System.Double[]@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.Save(System.IO.Stream)">
            <summary>
              Saves the classifier to a stream.
            </summary>
            
            <param name="stream">The stream to which the classifier is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.Save(System.String)">
            <summary>
              Saves the classifier to a stream.
            </summary>
            
            <param name="path">The stream to which the classifier is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.Load(System.IO.Stream)">
            <summary>
              Loads a classifier from a stream.
            </summary>
            
            <param name="stream">The stream from which the classifier is to be deserialized.</param>
            
            <returns>The deserialized classifier.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.Load(System.String)">
            <summary>
              Loads a classifier from a file.
            </summary>
            
            <param name="path">The path to the file from which the classifier is to be deserialized.</param>
            
            <returns>The deserialized classifier.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.Load``1(System.IO.Stream)">
            <summary>
              Loads a classifier from a stream.
            </summary>
            
            <param name="stream">The stream from which the classifier is to be deserialized.</param>
            
            <returns>The deserialized classifier.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.Load``1(System.String)">
            <summary>
              Loads a classifier from a file.
            </summary>
            
            <param name="path">The path to the file from which the classifier is to be deserialized.</param>
            
            <returns>The deserialized classifier.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.HiddenMarkovClassifier.Symbols">
            <summary>
              Gets the number of symbols
              recognizable by the models.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Topology.Custom">
             <summary>
               Custom Topology for Hidden Markov Model.
             </summary>
             
             <remarks>
              <para>
               An Hidden Markov Model Topology specifies how many states and which
               initial probabilities a Markov model should have. Two common topologies
               can be discussed in terms of transition state probabilities and are
               available to construction through the <see cref="T:Accord.Statistics.Models.Markov.Topology.Ergodic"/> and
               <see cref="T:Accord.Statistics.Models.Markov.Topology.Forward"/> classes implementing the <see cref="T:Accord.Statistics.Models.Markov.Topology.ITopology"/>
               interface.</para>
               
              <para>Topology specification is important with regard to both learning and
               performance: A model with too many states (and thus too many settable
               parameters) will require too much training data while an model with an
               insufficient number of states will prohibit the HMM from capturing subtle
               statistical patterns.</para>
               
              <para>This custom implementation allows for arbitrarily specification of
               the state transition matrix and initial state probabilities for
               <see cref="T:Accord.Statistics.Models.Markov.IHiddenMarkovModel">hidden Markov models</see>.</para>
               
             </remarks>
               
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.ITopology"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Ergodic"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Forward"/>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Topology.ITopology">
            <summary>
              Hidden Markov model topology (architecture) specification.
            </summary>
            
            <remarks>
             <para>
              An Hidden Markov Model Topology specifies how many states and which
              initial probabilities a Markov model should have. Two common topologies
              can be discussed in terms of transition state probabilities and are
              available to construction through the <see cref="T:Accord.Statistics.Models.Markov.Topology.Ergodic"/> and
              <see cref="T:Accord.Statistics.Models.Markov.Topology.Forward"/> classes implementing this interface.</para>
              
             <para>Topology specification is important with regard to both learning and
              performance: A model with too many states (and thus too many settable
              parameters) will require too much training data while an model with an
              insufficient number of states will prohibit the HMM from capturing subtle
              statistical patterns.</para>
            
            
             <para>
              References:
              <list type="bullet">
                <item><description>
                  Alexander Schliep, "Learning Hidden Markov Model Topology".</description></item>
                <item><description>
                  Richard Hughey and Anders Krogh, "Hidden Markov models for sequence analysis: 
                  extension and analysis of the basic method", CABIOS 12(2):95-107, 1996. Available in:
                  http://compbio.soe.ucsc.edu/html_format_papers/hughkrogh96/cabios.html</description></item>
              </list></para>
              
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Ergodic"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Forward"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Custom"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.ITopology.Create(System.Boolean,System.Double[0:,0:]@,System.Double[]@)">
            <summary>
              Creates the state transitions matrix and the 
              initial state probabilities for this topology.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.ITopology.States">
            <summary>
              Gets the number of states in this topology.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Custom.#ctor(System.Double[0:,0:],System.Double[])">
            <summary>
              Creates a new custom topology with user-defined
              transition matrix and initial state probabilities.
            </summary>
            
            <param name="initial">The initial probabilities for the model.</param>
            <param name="transitions">The transition probabilities for the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Custom.#ctor(System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
              Creates a new custom topology with user-defined
              transition matrix and initial state probabilities.
            </summary>
            
            <param name="initial">The initial probabilities for the model.</param>
            <param name="transitions">The transition probabilities for the model.</param>
            <param name="logarithm">Set to true if the passed transitions are given 
              in log-probabilities. Default is false (given values are probabilities).</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Custom.Create(System.Boolean,System.Double[0:,0:]@,System.Double[]@)">
            <summary>
              Creates the state transitions matrix and the
              initial state probabilities for this topology.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Custom.States">
            <summary>
              Gets the number of states in this topology.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Custom.Initial">
            <summary>
              Gets the initial state probabilities.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Custom.Transitions">
            <summary>
              Gets the state-transitions matrix.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Topology.Ergodic">
             <summary>
               Ergodic (fully-connected) Topology for Hidden Markov Models.
             </summary>
             
             <remarks>
              <para>
               Ergodic models are commonly used to represent models in which a single
               (large) sequence of observations is used for training (such as when a
               training sequence does not have well defined starting and ending points
               and can potentially be infinitely long).</para>
               
              <para>Models starting with an ergodic transition-state topology typically
               have only a small number of states.</para>
               
              <para>
               References:
               <list type="bullet">
                 <item><description>
                   Alexander Schliep, "Learning Hidden Markov Model Topology".</description></item>
                 <item><description>
                   Richard Hughey and Anders Krogh, "Hidden Markov models for sequence analysis: 
                   extension and analysis of the basic method", CABIOS 12(2):95-107, 1996. Available in:
                   http://compbio.soe.ucsc.edu/html_format_papers/hughkrogh96/cabios.html</description></item>
               </list></para>
             </remarks>
             
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.ITopology"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Forward"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Custom"/>
             
             <example>
              <para>
               In a second example, we will create an Ergodic (fully connected)
               discrete-density hidden Markov model with uniform probabilities.</para>
               
               <code>
               // Create a new Ergodic hidden Markov model with three
               //   fully-connected states and four sequence symbols.
               var model = new HiddenMarkovModel(new Ergodic(3), 4);
            
               // After creation, the state transition matrix for the model
               // should be given by:
               //
               //       { 0.33, 0.33, 0.33 }
               //       { 0.33, 0.33, 0.33 }
               //       { 0.33, 0.33, 0.33 }
               //       
               // in which all state transitions are allowed.
               </code>
             
             </example>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Ergodic.#ctor(System.Int32)">
            <summary>
              Creates a new Ergodic topology for a given number of states.
            </summary>
            
            <param name="states">The number of states to be used in the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Ergodic.#ctor(System.Int32,System.Boolean)">
            <summary>
              Creates a new Ergodic topology for a given number of states.
            </summary>
            
            <param name="states">The number of states to be used in the model.</param>
            <param name="random">Whether to initialize the model with random probabilities
              or uniformly with <c>1 / number of states</c>. Default is false (default is
              to use <c>1/states</c>).</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Ergodic.Create(System.Boolean,System.Double[0:,0:]@,System.Double[]@)">
            <summary>
              Creates the state transitions matrix and the
              initial state probabilities for this topology.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Ergodic.States">
            <summary>
              Gets the number of states in this topology.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Ergodic.Random">
            <summary>
              Gets or sets whether the transition matrix
              should be initialized with random probabilities
              or not. Default is false.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Topology.Forward">
             <summary>
               Forward Topology for Hidden Markov Models.
             </summary>
             
             <remarks>
              <para>
              Forward topologies are commonly used to initialize models in which
              training sequences can be organized in samples, such as in the recognition
              of spoken words. In spoken word recognition, several examples of a single
              word can (and should) be used to train a single model, to achieve the most
              general model able to generalize over a great number of word samples.</para>
              
              <para>
              Forward models can typically have a large number of states.</para>
              
              <para>
               References:
               <list type="bullet">
                 <item><description>
                   Alexander Schliep, "Learning Hidden Markov Model Topology".</description></item>
                 <item><description>
                   Richard Hughey and Anders Krogh, "Hidden Markov models for sequence analysis: 
                   extension and analysis of the basic method", CABIOS 12(2):95-107, 1996. Available in:
                   http://compbio.soe.ucsc.edu/html_format_papers/hughkrogh96/cabios.html</description></item>
               </list></para>
             </remarks>
             
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.ITopology"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Ergodic"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Custom"/>
            
             
             <example>
              <para>
               In the following example, we will create a Forward-only
               discrete-density hidden Markov model.</para>
               
               <code>
               // Create a new Forward-only hidden Markov model with
               // three forward-only states and four sequence symbols.
               var model = new HiddenMarkovModel(new Forward(3), 4);
            
               // After creation, the state transition matrix for the model
               // should be given by:
               //
               //       { 0.33, 0.33, 0.33 }
               //       { 0.00, 0.50, 0.50 }
               //       { 0.00, 0.00, 1.00 }
               //       
               // in which no backward transitions are allowed (have zero probability).
               </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Forward.#ctor(System.Int32)">
            <summary>
              Creates a new Forward topology for a given number of states.
            </summary>
            
            <param name="states">The number of states to be used in the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Forward.#ctor(System.Int32,System.Int32)">
            <summary>
              Creates a new Forward topology for a given number of states.
            </summary>
            
            <param name="states">The number of states to be used in the model.</param>
            <param name="deepness">The maximum number of forward transitions allowed
              for a state. Default is to use the same as the number of states (all forward 
              connections are allowed).</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Forward.#ctor(System.Int32,System.Boolean)">
            <summary>
              Creates a new Forward topology for a given number of states.
            </summary>
            
            <param name="states">The number of states to be used in the model.</param>
            <param name="random">Whether to initialize the model with random probabilities
              or uniformly with <c>1 / number of states</c>. Default is false (default is
              to use <c>1/states</c>).</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Forward.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Creates a new Forward topology for a given number of states.
            </summary>
            
            <param name="states">The number of states to be used in the model.</param>
            <param name="deepness">The maximum number of forward transitions allowed
              for a state. Default is to use the same as the number of states (all forward 
              connections are allowed).</param>
            <param name="random">Whether to initialize the model with random probabilities
              or uniformly with <c>1 / number of states</c>. Default is false (default is
              to use <c>1/states</c>).</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Forward.Create(System.Boolean,System.Double[0:,0:]@,System.Double[]@)">
            <summary>
              Creates the state transitions matrix and the
              initial state probabilities for this topology.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Forward.States">
            <summary>
              Gets the number of states in this topology.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Forward.Deepness">
            <summary>
              Gets or sets the maximum deepness level allowed
              for the forward state transition chains.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Forward.Random">
            <summary>
              Gets or sets whether the transition matrix
              should be initialized with random probabilities
              or not. Default is false.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Forward.Initial">
            <summary>
              Gets the initial state probabilities.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Linear.ILinearRegression">
            <summary>
              Common interface for Linear Regression Models.
            </summary>
            
            <remarks>
            <para>
              This interface specifies a common interface for querying
              a linear regression model.</para>
            <para>
              Since a closed-form solution exists for fitting most linear
              models, each of the models may also implement a Regress method
              for computing actual regression.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.ILinearRegression.Compute(System.Double[])">
            <summary>
              Computes the model output for a given input.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression">
            <summary>
              Multiple Linear Regression.
            </summary>
            
            <remarks>
            <para>
              In multiple linear regression, the model specification is that the dependent
              variable, denoted y_i, is a linear combination of the parameters (but need not
              be linear in the independent x_i variables). As the linear regression has a
              closed form solution, the regression coefficients can be computed by calling
              the <see cref="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Regress(System.Double[][],System.Double[])"/> method only once.</para>
            </remarks>
            
            <example>
             <para>
              The following example shows how to fit a multiple linear regression model
              to model a plane as an equation in the form ax + by + c = z. </para>
              
              <code>
              // We will try to model a plane as an equation in the form
              // "ax + by + c = z". We have two input variables (x and y)
              // and we will be trying to find two parameters a and b and 
              // an intercept term c.
              
              // Create a multiple linear regression for two input and an intercept
              MultipleLinearRegression target = new MultipleLinearRegression(2, true);
              
              // Now suppose we have some points
              double[][] inputs = 
              {
                  new double[] { 1, 1 },
                  new double[] { 0, 1 },
                  new double[] { 1, 0 },
                  new double[] { 0, 0 },
              };
              
              // located in the same Z (z = 1)
              double[] outputs = { 1, 1, 1, 1 };
              
              
              // Now we will try to fit a regression model
              double error = target.Regress(inputs, outputs);
              
              // As result, we will be given the following:
              double a = target.Coefficients[0]; // a = 0
              double b = target.Coefficients[1]; // b = 0
              double c = target.Coefficients[2]; // c = 1
              
              // Now, considering we were trying to find a plane, which could be
              // described by the equation ax + by + c = z, and we have found the
              // aforementioned coefficients, we can conclude the plane we were
              // trying to find is giving by the equation:
              //
              //   ax + by + c = z
              //     -&gt; 0x + 0y + 1 = z
              //     -&gt; 1 = z.
              //
              // The plane containing the aforementioned points is, in fact,
              // the plane given by z = 1.
              </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.#ctor(System.Int32)">
            <summary>
              Creates a new Multiple Linear Regression.
            </summary>
            
            <param name="inputs">The number of inputs for the regression.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.#ctor(System.Int32,System.Boolean)">
            <summary>
              Creates a new Multiple Linear Regression.
            </summary>
            
            <param name="inputs">The number of inputs for the regression.</param>
            <param name="intercept">True to use an intercept term, false otherwise. Default is false.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Regress(System.Double[][],System.Double[],System.Boolean)">
            <summary>
              Performs the regression using the input vectors and output
              data, returning the sum of squared errors of the fit.
            </summary>
            
            <param name="inputs">The input vectors to be used in the regression.</param>
            <param name="outputs">The output values for each input vector.</param>
            <param name="robust">
               Set to <c>true</c> to force the use of the <see cref="T:Accord.Math.Decompositions.SingularValueDecomposition"/>.
               This will avoid any rank exceptions, but might be more computing intensive.</param>
               
            <returns>The Sum-Of-Squares error of the regression.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Regress(System.Double[][],System.Double[])">
            <summary>
              Performs the regression using the input vectors and output
              data, returning the sum of squared errors of the fit.
            </summary>
            
            <param name="inputs">The input vectors to be used in the regression.</param>
            <param name="outputs">The output values for each input vector.</param>
            <returns>The Sum-Of-Squares error of the regression.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Regress(System.Double[][],System.Double[],System.Double[0:,0:]@,System.Boolean)">
            <summary>
              Performs the regression using the input vectors and output
              data, returning the sum of squared errors of the fit.
            </summary>
            
            <param name="inputs">The input vectors to be used in the regression.</param>
            <param name="outputs">The output values for each input vector.</param>
            <param name="informationMatrix">Gets the Fisher's information matrix.</param>
            <param name="robust">
               Set to <c>true</c> to force the use of the <see cref="T:Accord.Math.Decompositions.SingularValueDecomposition"/>.
               This will avoid any rank exceptions, but might be more computing intensive.</param>
            
            <returns>The Sum-Of-Squares error of the regression.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.CoefficientOfDetermination(System.Double[][],System.Double[])">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            
            <returns>The R² (r-squared) coefficient for the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.CoefficientOfDetermination(System.Double[][],System.Double[],System.Boolean)">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            
            <returns>The R² (r-squared) coefficient for the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Compute(System.Double[])">
            <summary>
              Computes the Multiple Linear Regression for an input vector.
            </summary>
            
            <param name="input">The input vector.</param>
            
            <returns>The calculated output.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Compute(System.Double[][])">
            <summary>
              Computes the Multiple Linear Regression for input vectors.
            </summary>
            
            <param name="input">The input vector data.</param>
            
            <returns>The calculated outputs.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.ToString">
            <summary>
              Returns a System.String representing the regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.FromData(System.Double[][],System.Double[])">
            <summary>
              Creates a new linear regression directly from data points.
            </summary>
            
            <param name="x">The input vectors <c>x</c>.</param>
            <param name="y">The output vectors <c>y</c>.</param>
            
            <returns>A linear regression f(x) that most approximates y.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use
                the default format defined for the type of the System.IFormattable implementation. </param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in
                Visual Basic) to obtain the numeric format information from the current locale
                setting of the operating system.</param>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Coefficients">
            <summary>
              Gets the coefficients used by the regression model. If the model
              contains an intercept term, it will be in the end of the vector.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Inputs">
            <summary>
              Gets the number of inputs for the regression model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.HasIntercept">
            <summary>
              Gets whether this model has an additional intercept term.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression">
            <summary>
              Multivariate Linear Regression.
            </summary>
            <remarks>
              Multivariate Linear Regression is a generalization of
              Multiple Linear Regression to allow for multiple outputs.
            </remarks>
            
            <example>
              <code>
              // The multivariate linear regression is a generalization of
              // the multiple linear regression. In the multivariate linear
              // regression, not only the input variables are multivariate,
              // but also are the output dependent variables.
              
              // In the following example, we will perform a regression of
              // a 2-dimensional output variable over a 3-dimensional input
              // variable.
              
              double[][] inputs = 
              {
                  // variables:  x1  x2  x3
                  new double[] {  1,  1,  1 }, // input sample 1
                  new double[] {  2,  1,  1 }, // input sample 2
                  new double[] {  3,  1,  1 }, // input sample 3
              };
              
              double[][] outputs = 
              {
                  // variables:  y1  y2
                  new double[] {  2,  3 }, // corresponding output to sample 1
                  new double[] {  4,  6 }, // corresponding output to sample 2
                  new double[] {  6,  9 }, // corresponding output to sample 3
              };
            
              // With a quick eye inspection, it is possible to see that
              // the first output variable y1 is always the double of the
              // first input variable. The second output variable y2 is
              // always the triple of the first input variable. The other
              // input variables are unused. Nevertheless, we will fit a
              // multivariate regression model and confirm the validity
              // of our impressions:
              
              // Create a new multivariate linear regression with 3 inputs and 2 outputs
              var regression = new MultivariateLinearRegression(3, 2);
              
              // Now, compute the multivariate linear regression:
              double error = regression.Regress(inputs, outputs);
              
              // At this point, the regression error will be 0 (the fit was
              // perfect). The regression coefficients for the first input
              // and first output variables will be 2. The coefficient for
              // the first input and second output variables will be 3. All
              // others will be 0.
              //
              // regression.Coefficients should be the matrix given by
              //
              // double[,] coefficients = {
              //                              { 2, 3 },
              //                              { 0, 0 },
              //                              { 0, 0 },
              //                          };
              //
            
              // The first input variable coefficients will be 2 and 3:
              Assert.AreEqual(2, regression.Coefficients[0, 0], 1e-10);
              Assert.AreEqual(3, regression.Coefficients[0, 1], 1e-10);
            
              // And all other coefficients will be 0:
              Assert.AreEqual(0, regression.Coefficients[1, 0], 1e-10);
              Assert.AreEqual(0, regression.Coefficients[1, 1], 1e-10);
              Assert.AreEqual(0, regression.Coefficients[2, 0], 1e-10);
              Assert.AreEqual(0, regression.Coefficients[2, 1], 1e-10);
            
              // We can also check the r-squared coefficients of determination:
              double[] r2 = regression.CoefficientOfDetermination(inputs, outputs);
            
              // Which should be one for both output variables:
              Assert.AreEqual(1, r2[0]);
              Assert.AreEqual(1, r2[1]);
              </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.#ctor(System.Int32,System.Int32)">
            <summary>
              Creates a new Multivariate Linear Regression.
            </summary>
            
            <param name="inputs">The number of inputs for the regression.</param>
            <param name="outputs">The number of outputs for the regression.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Creates a new Multivariate Linear Regression.
            </summary>
            
            <param name="inputs">The number of inputs for the regression.</param>
            <param name="outputs">The number of outputs for the regression.</param>
            <param name="intercept">True to use an intercept term, false otherwise. Default is false.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.#ctor(System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
              Creates a new Multivariate Linear Regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Regress(System.Double[][],System.Double[][])">
            <summary>
              Performs the regression using the input vectors and output
              vectors, returning the sum of squared errors of the fit.
            </summary>
            
            <param name="inputs">The input vectors to be used in the regression.</param>
            <param name="outputs">The output values for each input vector.</param>
            <returns>The Sum-Of-Squares error of the regression.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.CoefficientOfDetermination(System.Double[][],System.Double[][])">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            
            <returns>The R² (r-squared) coefficient for the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.CoefficientOfDetermination(System.Double[][],System.Double[][],System.Boolean)">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            
            <returns>The R² (r-squared) coefficient for the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Compute(System.Double[])">
            <summary>
              Computes the Multiple Linear Regression output for a given input.
            </summary>
            
            <param name="input">A input vector.</param>
            <returns>The computed output.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Compute(System.Double[][])">
            <summary>
              Computes the Multiple Linear Regression output for a given input.
            </summary>
            
            <param name="input">An array of input vectors.</param>
            <returns>The computed outputs.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.FromData(System.Double[][],System.Double[][])">
            <summary>
              Creates a new linear regression directly from data points.
            </summary>
            
            <param name="x">The input vectors <c>x</c>.</param>
            <param name="y">The output vectors <c>y</c>.</param>
            
            <returns>A linear regression f(x) that most approximates y.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Accord#Statistics#Models#Regression#Linear#ILinearRegression#Compute(System.Double[])">
            <summary>
              Computes the model output for a given input.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Coefficients">
            <summary>
              Gets the coefficient matrix used by the regression model. Each
              column corresponds to the coefficient vector for each of the outputs.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Intercepts">
            <summary>
              Gets the intercept vector used by the multivariate regression model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Inputs">
            <summary>
              Gets the number of inputs in the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Outputs">
            <summary>
              Gets the number of outputs in the model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression">
            <summary>
              Simple Linear Regression of the form y = Ax + B.
            </summary>
            
            <remarks>
              In linear regression, the model specification is that the dependent
              variable, y is a linear combination of the parameters (but need not
              be linear in the independent variables). As the linear regression
              has a closed form solution, the regression coefficients can be
              efficiently computed using the Regress method of this class.
            </remarks>
            
            <example>
             <para>
              Let's say we have some univariate, continuous sets of input data,
              and a corresponding univariate, continuous set of output data, such
              as a set of points in R². A simple linear regression is able to fit
              a line relating the input variables to the output variables in which
              the minimum-squared-error of the line and the actual output points
              is minimum.</para>
              
              <code>
              // Let's say we have some univariate, continuous sets of input data,
              // and a corresponding univariate, continuous set of output data, such
              // as a set of points in R². A simple linear regression is able to fit
              // a line relating the input variables to the output variables in which
              // the minimum-squared-error of the line and the actual output points
              // is minimum.
              
              // Declare some sample test data.
              double[] inputs =  { 80, 60, 10, 20, 30 };
              double[] outputs = { 20, 40, 30, 50, 60 };
              
              // Create a new simple linear regression
              SimpleLinearRegression regression = new SimpleLinearRegression();
              
              // Compute the linear regression
              regression.Regress(inputs, outputs);
              
              // Compute the output for a given input. The
              double y = regression.Compute(85); // The answer will be 28.088
              
              // We can also extract the slope and the intercept term
              // for the line. Those will be -0.26 and 50.5, respectively.
              double s = regression.Slope;
              double c = regression.Intercept;
              </code>
              
            <para>
              Now, let's say we would like to perform a regression using an
              intermediary transformation, such as for example logarithmic
              regression. In this case, all we have to do is to first transform
              the input variables into the desired domain, then apply the
              regression as normal:</para>
              
            <code>
              // This is the same data from the example available at
              // http://mathbits.com/MathBits/TISection/Statistics2/logarithmic.htm
              
              // Declare your inputs and output data
              double[] inputs = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
              double[] outputs = { 6, 9.5, 13, 15, 16.5, 17.5, 18.5, 19, 19.5, 19.7, 19.8 };
              
              // Transform inputs to logarithms
              double[] logx = Matrix.Log(inputs);
              
              // Compute a simple linear regression
              var lr = new SimpleLinearRegression();
              
              // Compute with the log-transformed data
              double error = lr.Regress(logx, outputs);
              
              // Get an expression representing the learned regression model
              // We just have to remember that 'x' will actually mean 'log(x)'
              string result = lr.ToString("N4", CultureInfo.InvariantCulture);
              
              // Result will be "y(x) = 6.1082x + 6.0993"
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.#ctor">
            <summary>
              Creates a new Simple Linear Regression of the form y = Ax + B.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.Regress(System.Double[],System.Double[])">
            <summary>
              Performs the regression using the input and output
              data, returning the sum of squared errors of the fit.
            </summary>
            
            <param name="inputs">The input data.</param>
            <param name="outputs">The output data.</param>
            <returns>The regression Sum-of-Squares error.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.Compute(System.Double[])">
            <summary>
              Computes the regression output for a given input.
            </summary>
            
            <param name="input">An array of input values.</param>
            <returns>The array of calculated output values.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.Compute(System.Double)">
            <summary>
              Computes the regression for a single input.
            </summary>
            
            <param name="input">The input value.</param>
            <returns>The calculated output.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.CoefficientOfDetermination(System.Double[],System.Double[],System.Boolean)">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            
            <returns>The R² (r-squared) coefficient for the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.CoefficientOfDetermination(System.Double[],System.Double[])">
            <summary>
              Gets the coefficient of determination, or R² (r-squared).
            </summary>
            
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            
            <returns>The R² (r-squared) coefficient for the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.ToString">
            <summary>
              Returns a System.String representing the regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.ToString(System.String)">
            <summary>
              Returns a System.String representing the regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.ToString(System.IFormatProvider)">
            <summary>
              Returns a System.String representing the regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a System.String representing the regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.FromData(System.Double[],System.Double[])">
            <summary>
              Creates a new linear regression directly from data points.
            </summary>
            
            <param name="x">The input vectors <c>x</c>.</param>
            <param name="y">The output vectors <c>y</c>.</param>
            
            <returns>A linear regression f(x) that most approximates y.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.Accord#Statistics#Models#Regression#Linear#ILinearRegression#Compute(System.Double[])">
            <summary>
              Computes the model output for a given input.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.Slope">
            <summary>
              Angular coefficient (Slope).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.Intercept">
            <summary>
              Linear coefficient (Intercept).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.LogisticRegression">
             <summary>
               Binary Logistic Regression.
             </summary>
             
             <remarks>
             <para>
               In statistics, logistic regression (sometimes called the logistic model or
               Logit model) is used for prediction of the probability of occurrence of an
               event by fitting data to a logistic curve. It is a generalized linear model
               used for binomial regression.</para>
             <para>
               Like many forms of regression analysis, it makes use of several predictor
               variables that may be either numerical or categorical. For example, the
               probability that a person has a heart attack within a specified time period
               might be predicted from knowledge of the person's age, sex and body mass index.</para>
             <para>
               Logistic regression is used extensively in the medical and social sciences
               as well as marketing applications such as prediction of a customer's
               propensity to purchase a product or cease a subscription.</para>  
             
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Bishop, Christopher M.; Pattern Recognition and Machine Learning. 
                   Springer; 1st ed. 2006.</description></item>
                 <item><description>
                   Amos Storkey. (2005). Learning from Data: Learning Logistic Regressors. School of Informatics.
                   Available on: http://www.inf.ed.ac.uk/teaching/courses/lfd/lectures/logisticlearn-print.pdf </description></item>
                 <item><description>
                   Cosma Shalizi. (2009). Logistic Regression and Newton's Method. Available on:
                   http://www.stat.cmu.edu/~cshalizi/350/lectures/26/lecture-26.pdf </description></item>
                 <item><description>
                   Edward F. Conor. Logistic Regression. Website. Available on: 
                   http://userwww.sfsu.edu/~efc/classes/biol710/logistic/logisticreg.htm </description></item>
               </list></para>  
             </remarks>
             
             <example>
               <code>
                // Suppose we have the following data about some patients.
                // The first variable is continuous and represent patient
                // age. The second variable is dichotomic and give whether
                // they smoke or not (This is completely fictional data).
                double[][] input =
                {
                    new double[] { 55, 0 }, // 0 - no cancer
                    new double[] { 28, 0 }, // 0
                    new double[] { 65, 1 }, // 0
                    new double[] { 46, 0 }, // 1 - have cancer
                    new double[] { 86, 1 }, // 1
                    new double[] { 56, 1 }, // 1
                    new double[] { 85, 0 }, // 0
                    new double[] { 33, 0 }, // 0
                    new double[] { 21, 1 }, // 0
                    new double[] { 42, 1 }, // 1
                };
            
                // We also know if they have had lung cancer or not, and 
                // we would like to know whether smoking has any connection
                // with lung cancer (This is completely fictional data).
                double[] output =
                {
                    0, 0, 0, 1, 1, 1, 0, 0, 0, 1
                };
            
            
                // To verify this hypothesis, we are going to create a logistic
                // regression model for those two inputs (age and smoking).
                LogisticRegression regression = new LogisticRegression(inputs: 2);
            
                // Next, we are going to estimate this model. For this, we
                // will use the Iteratively Reweighted Least Squares method.
                var teacher = new IterativeReweightedLeastSquares(regression);
            
                // Now, we will iteratively estimate our model. The Run method returns
                // the maximum relative change in the model parameters and we will use
                // it as the convergence criteria.
            
                double delta = 0;
                do
                {
                    // Perform an iteration
                    delta = teacher.Run(input, output);
            
                } while (delta > 0.001);
            
                // At this point, we can compute the odds ratio of our variables.
                // In the model, the variable at 0 is always the intercept term, 
                // with the other following in the sequence. Index 1 is the age
                // and index 2 is whether the patient smokes or not.
            
                // For the age variable, we have that individuals with
                //   higher age have 1.021 greater odds of getting lung
                //   cancer controlling for cigarette smoking.
                double ageOdds = regression.GetOddsRatio(1); // 1.0208597028836701
            
                // For the smoking/non smoking category variable, however, we
                //   have that individuals who smoke have 5.858 greater odds
                //   of developing lung cancer compared to those who do not 
                //   smoke, controlling for age (remember, this is completely
                //   fictional and for demonstration purposes only).
                double smokeOdds = regression.GetOddsRatio(2); // 5.8584748789881331
               </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.#ctor(System.Int32)">
            <summary>
              Creates a new Logistic Regression Model.
            </summary>
            
            <param name="inputs">The number of input variables for the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.#ctor(System.Int32,System.Double)">
            <summary>
              Creates a new Logistic Regression Model.
            </summary>
            
            <param name="inputs">The number of input variables for the model.</param>
            <param name="intercept">The starting intercept value. Default is 0.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.GetConfidenceInterval(System.Int32)">
            <summary>
              Gets the 95% confidence interval for the
              Odds Ratio for a given coefficient.
            </summary>
            
            <param name="index">
              The coefficient's index. The first value
              (at zero index) is the intercept value.
            </param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.GetOddsRatio(System.Int32)">
            <summary>
              Gets the Odds Ratio for a given coefficient.
            </summary>
            
            <remarks>
              The odds ratio can be computed raising Euler's number
              (e ~~ 2.71) to the power of the associated coefficient.
            </remarks>
            
            <param name="index">
              The coefficient's index. The first value
              (at zero index) is the intercept value.
            </param>
            
            <returns>
              The Odds Ratio for the given coefficient.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.FromWeights(System.Double[])">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Models.Regression.LogisticRegression"/> from
              an array of weights (linear coefficients). The first
              weight is interpreted as the intercept value.
            </summary>
            
            <param name="weights">An array of linear coefficients.</param>
            
            <returns>
              A <see cref="T:Accord.Statistics.Models.Regression.LogisticRegression"/> whose 
              <see cref="P:Accord.Statistics.Models.Regression.GeneralizedLinearRegression.Coefficients"/> are
              the same as in the given <paramref name="weights"/> array.
            </returns>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Linear.PolynomialRegression">
            <summary>
              Polynomial Linear Regression.
            </summary>
            
            <remarks>
              In linear regression, the model specification is that the dependent
              variable, y is a linear combination of the parameters (but need not
              be linear in the independent variables). As the linear regression
              has a closed form solution, the regression coefficients can be
              efficiently computed using the Regress method of this class.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.#ctor(System.Int32)">
            <summary>
              Creates a new Polynomial Linear Regression.
            </summary>
            
            <param name="degree">The degree of the polynomial used by the model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.Regress(System.Double[],System.Double[])">
            <summary>
              Performs the regression using the input and output
              data, returning the sum of squared errors of the fit.
            </summary>
            
            <param name="inputs">The input data.</param>
            <param name="outputs">The output data.</param>
            
            <returns>The regression Sum-of-Squares error.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.Compute(System.Double[])">
            <summary>
              Computes the regressed model output for the given inputs.
            </summary>
            
            <param name="input">The input data.</param>
            <returns>The computed outputs.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.Compute(System.Double)">
            <summary>
              Computes the regressed model output for the given input.
            </summary>
            
            <param name="input">The input value.</param>
            <returns>The computed output.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.CoefficientOfDetermination(System.Double[],System.Double[])">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            
            <returns>The R² (r-squared) coefficient for the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.CoefficientOfDetermination(System.Double[],System.Double[],System.Boolean)">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            
            <returns>The R² (r-squared) coefficient for the given data.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.ToString">
            <summary>
              Returns a System.String representing the regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.ToString(System.String)">
            <summary>
              Returns a System.String representing the regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.ToString(System.IFormatProvider)">
            <summary>
              Returns a System.String representing the regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a System.String representing the regression.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.FromData(System.Int32,System.Double[],System.Double[])">
            <summary>
              Creates a new polynomial regression directly from data points.
            </summary>
            
            <param name="degree">The polynomial degree to use.</param>
            <param name="x">The input vectors <c>x</c>.</param>
            <param name="y">The output vectors <c>y</c>.</param>
            
            <returns>A polynomial regression f(x) that most approximates y.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.Accord#Statistics#Models#Regression#Linear#ILinearRegression#Compute(System.Double[])">
            <summary>
              Computes the model output for a given input.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.Degree">
            <summary>
              Gets the degree of the polynomial used by the regression.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.Coefficients">
            <summary>
              Gets the coefficients of the polynomial regression,
              with the first being the higher-order term and the last
              the intercept term.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson">
            <summary>
              Newton-Raphson learning updates for Cox's Proportional Hazards models.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.#ctor(Accord.Statistics.Models.Regression.ProportionalHazards)">
            <summary>
              Constructs a new Newton-Raphson learning algorithm
              for Cox's Proportional Hazards models.
            </summary>
            
            <param name="hazards">The model to estimate.</param>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Run(System.Double[][],System.Double[])">
            <summary>
              Runs the Newton-Raphson update for Cox's hazards learning until convergence.
            </summary>
            
            <param name="inputs">The input data.</param>
            <param name="time">The time-to-event for the training samples.</param>
            
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Run(System.Double[][],System.Double[],System.Int32[])">
            <summary>
              Runs the Newton-Raphson update for Cox's hazards learning until convergence.
            </summary>
            
            <param name="inputs">The input data.</param>
            <param name="censor">The output (event) associated with each input vector.</param>
            <param name="time">The time-to-event for the non-censored training samples.</param>
            
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Run(System.Double[][],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])">
            <summary>
              Runs the Newton-Raphson update for Cox's hazards learning until convergence.
            </summary>
            
            <param name="inputs">The input data.</param>
            <param name="censor">The output (event) associated with each input vector.</param>
            <param name="time">The time-to-event for the non-censored training samples.</param>
            
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Run(System.Double[],System.Int32[])">
            <summary>
              Runs the Newton-Raphson update for Cox's hazards learning until convergence.
            </summary>
            
            <param name="censor">The output (event) associated with each input vector.</param>
            <param name="time">The time-to-event for the non-censored training samples.</param>
            
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Run(System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])">
            <summary>
              Runs the Newton-Raphson update for Cox's hazards learning until convergence.
            </summary>
            
            <param name="censor">The output (event) associated with each input vector.</param>
            <param name="time">The time-to-event for the non-censored training samples.</param>
            
            <returns>The maximum relative change in the parameters after the iteration.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Tolerance">
            <summary>
              Gets or sets the maximum absolute parameter change detectable
              after an iteration of the algorithm used to detect convergence.
              Default is 1e-5.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Iterations">
            <summary>
              Gets or sets the maximum number of iterations
              performed by the learning algorithm.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.CurrentIteration">
            <summary>
              Gets or sets the number of performed iterations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Estimator">
            <summary>
              Gets or sets the hazard estimator that should be used by the
              proportional hazards learning algorithm. Default is to use
              <see cref="F:Accord.Statistics.Distributions.Univariate.HazardEstimator.BreslowNelsonAalen"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Ties">
            <summary>
              Gets or sets the ties handling method to be used by the
              proportional hazards learning algorithm. Default is to use
              <see cref="F:Accord.Statistics.Distributions.Univariate.HazardTiesMethod.Efron"/>'s method.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Previous">
            <summary>
              Gets the previous values for the coefficients which were
              in place before the last learning iteration was performed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Solution">
            <summary>
              Gets the current values for the coefficients.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Hessian">
            <summary>
              Gets the Hessian matrix computed in 
              the last Newton-Raphson iteration.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Gradient">
            <summary>
              Gets the Gradient vector computed in
              the last Newton-Raphson iteration.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Parameters">
            <summary>
              Gets the total number of parameters in the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.ComputeStandardErrors">
            <summary>
              Gets or sets a value indicating whether standard
              errors should be computed at the end of the next 
              iterations.
            </summary>
            <value>
            	<c>true</c> to compute standard errors; otherwise, <c>false</c>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.ComputeBaselineFunction">
            <summary>
              Gets or sets a value indicating whether an estimate
              of the baseline hazard function should be computed
              at the end of the next iterations.
            </summary>
            <value>
            	<c>true</c> to compute the baseline function; otherwise, <c>false</c>.
            </value>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Normalize">
            <summary>
              Gets or sets a value indicating whether the Cox model should
              be computed using the mean-centered version of the covariates.
              Default is true.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Fitting.ProportionalHazardsNewtonRaphson.Lambda">
            <summary>
              Gets or sets the smoothing factor used to avoid numerical
              problems in the beginning of the training. Default is 0.1.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Running.KalmanFilter2D">
            <summary>
              Kalman filter for 2D coordinate systems.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://studentdavestutorials.weebly.com/object-tracking-2d-kalman-filter.html">
                  Student Dave's tutorial on Object Tracking in Images Using 2D Kalman Filters.
                  Available on: http://studentdavestutorials.weebly.com/object-tracking-2d-kalman-filter.html
                  </a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Running.KalmanFilter2D.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Running.KalmanFilter2D"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Running.KalmanFilter2D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Running.KalmanFilter2D"/> class.
            </summary>
            
            <param name="samplingRate">The sampling rate.</param>
            <param name="acceleration">The acceleration.</param>
            <param name="accelerationStdDev">The acceleration standard deviation.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.KalmanFilter2D.Push(AForge.DoublePoint)">
            <summary>
              Registers the occurrence of a value.
            </summary>
            
            <param name="value">The value to be registered.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.KalmanFilter2D.Clear">
            <summary>
              Clears all measures previously computed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.KalmanFilter2D.X">
            <summary>
              Gets or sets the current X position of the object.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.KalmanFilter2D.Y">
            <summary>
              Gets or sets the current Y position of the object.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.KalmanFilter2D.XAxisVelocity">
            <summary>
              Gets or sets the current object's velocity in the X axis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.KalmanFilter2D.YAxisVelocity">
            <summary>
              Gets or sets the current object's velocity in the Y axis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.KalmanFilter2D.NoiseX">
            <summary>
              Gets or sets the observational noise 
              of the current object's in the X axis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.KalmanFilter2D.NoiseY">
            <summary>
              Gets or sets the observational noise 
              of the current object's in the Y axis.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Running.IRunningMarkovStatistics">
            <summary>
              Common interface for running Markov filters.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Running.IRunningMarkovStatistics.Clear">
            <summary>
              Clears all measures previously computed
              and indicate the sequence has ended.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.IRunningMarkovStatistics.Started">
            <summary>
              Gets whether the model has been initialized or not.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.IRunningMarkovStatistics.Current">
            <summary>
              Gets the current vector of probabilities of being in each state.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.IRunningMarkovStatistics.CurrentState">
            <summary>
              Gets the current most likely state (in the Viterbi path).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.IRunningMarkovStatistics.LogViterbi">
            <summary>
              Gets the current Viterbi probability
              (along the most likely path).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.IRunningMarkovStatistics.LogForward">
            <summary>
              Gets the current Forward probability
              (along all possible paths).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Running.BaseRunningMarkovStatistics">
            <summary>
              Base class for running hidden Markov filters.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Running.BaseRunningMarkovStatistics.#ctor(Accord.Statistics.Models.Markov.IHiddenMarkovModel)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Running.BaseRunningMarkovStatistics"/> class.
            </summary>
            
            <param name="model">The Markov model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.BaseRunningMarkovStatistics.Clear">
            <summary>
              Clears all measures previously computed
              and indicate the sequence has ended.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Running.BaseRunningMarkovStatistics.Invalidate">
            <summary>
              Clears all measures previously computed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.BaseRunningMarkovStatistics.Started">
            <summary>
              Gets whether the model has been initialized or not.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.BaseRunningMarkovStatistics.Current">
            <summary>
              Gets the current vector of probabilities of being in each state.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.BaseRunningMarkovStatistics.CurrentState">
            <summary>
              Gets the current most likely state (in the Viterbi path).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.BaseRunningMarkovStatistics.LogViterbi">
            <summary>
              Gets the current Viterbi probability
              (along the most likely path).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.BaseRunningMarkovStatistics.LogForward">
            <summary>
              Gets the current Forward probability
              (along all possible paths).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Running.RunningMarkovClassifier">
            <summary>
              Hidden Markov Classifier filter.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier"/>
            <seealso cref="T:Accord.Statistics.Running.RunningMarkovClassifier`1"/>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovClassifier.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovClassifier)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Running.RunningMarkovClassifier"/>.
            </summary>
            
            <param name="model">The hidden Markov classifier model.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovClassifier.Push(System.Int32)">
            <summary>
              Registers the occurrence of a value.
            </summary>
            
            <param name="value">The value to be registered.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovClassifier.Peek(System.Int32,System.Double@)">
            <summary>
              Checks the classification after the insertion
              of a new value without registering this value.
            </summary>
            
            <param name="logLikelihood">
              The next log-likelihood if the occurrence of 
              <paramref name="value"/> is registered.
            </param>
            <param name="value">The value to be checked.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovClassifier.Clear">
            <summary>
              Clears all measures previously computed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovClassifier.Classifier">
            <summary>
              Gets the <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier"/> used in this filter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovClassifier.Responses">
            <summary>
              Gets the class response probabilities measuring
              the likelihood of the current sequence belonging
              to each of the classes.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovClassifier.Classification">
            <summary>
              Gets the current classification label for
              the sequence up to the current observation.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovClassifier.Threshold">
            <summary>
              Gets the current rejection threshold level 
              generated by classifier's threshold model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Running.RunningMarkovClassifier`1">
            <summary>
              Hidden Markov Classifier filter for general state distributions.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1"/>
            <seealso cref="T:Accord.Statistics.Running.RunningMarkovClassifier"/>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovClassifier`1.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovClassifier{`0})">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Running.RunningMarkovClassifier`1"/>.
            </summary>
            
            <param name="model">The hidden Markov classifier model.</param>
                    
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovClassifier`1.Push(System.Double)">
            <summary>
              Registers the occurrence of a value.
            </summary>
            
            <param name="value">The value to be registered.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovClassifier`1.Push(System.Double[])">
            <summary>
              Registers the occurrence of a value.
            </summary>
            
            <param name="value">The value to be registered.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovClassifier`1.Peek(System.Double,System.Double@)">
            <summary>
              Checks the classification after the insertion
              of a new value without registering this value.
            </summary>
            
            <param name="logLikelihood">
              The next log-likelihood if the occurrence of 
              <paramref name="value"/> is registered.
            </param>
            <param name="value">The value to be checked.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovClassifier`1.Peek(System.Double[],System.Double@)">
            <summary>
              Checks the classification after the insertion
              of a new value without registering this value.
            </summary>
            
            <param name="logLikelihood">
              The next log-likelihood if the occurrence of 
              <paramref name="value"/> is registered.
            </param>
            <param name="value">The value to be checked.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovClassifier`1.Clear">
            <summary>
              Clears all measures previously computed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovClassifier`1.Classifier">
            <summary>
              Gets the <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovClassifier`1"/> used in this filter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovClassifier`1.Responses">
            <summary>
              Gets the class response probabilities measuring
              the likelihood of the current sequence belonging
              to each of the classes.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovClassifier`1.Classification">
            <summary>
              Gets the current classification label for
              the sequence up to the current observation.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovClassifier`1.Threshold">
            <summary>
              Gets the current rejection threshold level 
              generated by classifier's threshold model.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Running.RunningMarkovStatistics`1">
            <summary>
              Hidden Markov Model filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovStatistics`1.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel{`0})">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Running.RunningMarkovStatistics`1"/>.
            </summary>
            
            <param name="model">The hidden Markov model to use in this filter.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovStatistics`1.Push(System.Double[])">
            <summary>
              Registers the occurrence of a value.
            </summary>
            
            <param name="value">The value to be registered.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovStatistics`1.Peek(System.Double[])">
            <summary>
              Checks the classification after the insertion
              of a new value without registering this value.
            </summary>
            
            <param name="value">The value to be checked.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovStatistics`1.Clear">
            <summary>
              Clears this instance.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovStatistics`1.Model">
            <summary>
              Gets the <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel`1"/> used in this filter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovStatistics`1.Started">
            <summary>
              Gets whether the model has been initialized or not.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovStatistics`1.Current">
            <summary>
              Gets the current vector of probabilities of being in each state.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovStatistics`1.CurrentState">
            <summary>
              Gets the current most likely state (in the Viterbi path).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovStatistics`1.LogViterbi">
            <summary>
              Gets the current Viterbi probability
              (along the most likely path).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovStatistics`1.LogForward">
            <summary>
              Gets the current Forward probability
              (along all possible paths).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Running.IRunningStatistics">
            <summary>
              Common interface for running statistics.
            </summary>
            <remarks>
              Running statistics are measures computed as data becomes available.
              When using running statistics, there is no need to know the number of
              samples a priori, such as in the case of the direct <see cref="M:Accord.Statistics.Tools.Mean(System.Double[])"/>.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Running.IRunningStatistics.Mean">
            <summary>
              Gets the current mean of the gathered values.
            </summary>
            
            <value>The mean of the values.</value>
            
        </member>
        <member name="P:Accord.Statistics.Running.IRunningStatistics.Variance">
            <summary>
              Gets the current variance of the gathered values.
            </summary>
            
            <value>The variance of the values.</value>
            
        </member>
        <member name="P:Accord.Statistics.Running.IRunningStatistics.StandardDeviation">
            <summary>
              Gets the current standard deviation of the gathered values.
            </summary>
            
            <value>The standard deviation of the values.</value>
            
        </member>
        <member name="T:Accord.Statistics.Moving.IMovingStatistics">
            <summary>
              Common interface for moving-window statistics.
            </summary>
            
            <remarks>
              Moving-window statistics such as moving average and moving variance,
              are a type of finite impulse response filters used to analyze a set
              of data points by creating a series of averages of different subsets
              of the full data set.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Moving.IMovingStatistics.Window">
            <summary>
              Gets the size of the window.
            </summary>
            
            <value>The window's size.</value>
            
        </member>
        <member name="P:Accord.Statistics.Moving.IMovingStatistics.Count">
            <summary>
              Gets the number of samples within the window.
            </summary>
            
            <value>The number of samples within the window.</value>
            
        </member>
        <member name="T:Accord.Statistics.Moving.MovingCircularStatistics">
            <summary>
              Moving-window circular statistics.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Moving.MovingCircularStatistics.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Moving.MovingCircularStatistics"/> class.
            </summary>
            
            <param name="windowSize">The size of the moving window.</param>
            
        </member>
        <member name="M:Accord.Statistics.Moving.MovingCircularStatistics.Push(System.Double)">
            <summary>
              Registers the occurrence of a value.
            </summary>
            
            <param name="value">The value to be registered.</param>
            
        </member>
        <member name="M:Accord.Statistics.Moving.MovingCircularStatistics.Clear">
            <summary>
              Clears all measures previously computed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.SumOfSines">
            <summary>
              Gets the sum of the sines of the angles within the window.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.SumOfCosines">
            <summary>
              Gets the sum of the cosines of the angles within the window.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.Window">
            <summary>
              Gets the size of the window.
            </summary>
            
            <value>The window's size.</value>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.Count">
            <summary>
              Gets the number of samples within the window.
            </summary>
            
            <value>The number of samples within the window.</value>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.Mean">
            <summary>
              Gets the mean of the angles within the window.
            </summary>
            
            <value>The mean.</value>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.Variance">
            <summary>
              Gets the variance of the angles within the window.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.StandardDeviation">
            <summary>
              Gets the standard deviation of the angles within the window.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Running.RunningMarkovStatistics">
            <summary>
              Hidden Markov Model filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovStatistics.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Running.RunningMarkovStatistics"/>.
            </summary>
            
            <param name="model">The hidden Markov model to use in this filter.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovStatistics.Push(System.Int32)">
            <summary>
              Registers the occurrence of a value.
            </summary>
            
            <param name="value">The value to be registered.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovStatistics.Peek(System.Int32)">
            <summary>
              Checks the classification after the insertion
              of a new value without registering this value.
            </summary>
            
            <param name="value">The value to be checked.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningMarkovStatistics.Clear">
            <summary>
              Clears this instance.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovStatistics.Model">
            <summary>
              Gets the <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/> used in this filter.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovStatistics.Started">
            <summary>
              Gets whether the model has been initialized or not.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovStatistics.Current">
            <summary>
              Gets the current vector of probabilities of being in each state.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovStatistics.CurrentState">
            <summary>
              Gets the current most likely state (in the Viterbi path).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovStatistics.LogViterbi">
            <summary>
              Gets the current Viterbi probability
              (along the most likely path).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningMarkovStatistics.LogForward">
            <summary>
              Gets the current Forward probability
              (along all possible paths).
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Running.RunningNormalStatistics">
            <summary>
              Running (normal) statistics.
            </summary>
            
            <remarks>
            
            <para>
              This class computes the running variance using Welford’s method. Running statistics 
              need only one pass over the data, and do not require all data to be available prior
              to computing.
            </para>
            
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://www.johndcook.com/standard_deviation.html">
                  John D. Cook. Accurately computing running variance. Available on:
                  http://www.johndcook.com/standard_deviation.html</a></description></item>
                <item><description>
                  Chan, Tony F.; Golub, Gene H.; LeVeque, Randall J. (1983). Algorithms for 
                  Computing the Sample Variance: Analysis and Recommendations. The American
                  Statistician 37, 242-247.</description></item>
                <item><description>
                  Ling, Robert F. (1974). Comparison of Several Algorithms for Computing Sample
                  Means and Variances. Journal of the American Statistical Association, Vol. 69,
                  No. 348, 859-866.</description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningNormalStatistics.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Running.RunningNormalStatistics"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningNormalStatistics.Push(System.Double)">
            <summary>
              Registers the occurrence of a value.
            </summary>
            
            <param name="value">The value to be registered.</param> 
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningNormalStatistics.Clear">
            <summary>
              Clears all measures previously computed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningNormalStatistics.Mean">
            <summary>
            Gets the current mean of the gathered values.
            </summary>
            
            <value>The mean of the values.</value>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningNormalStatistics.Variance">
            <summary>
            Gets the current variance of the gathered values.
            </summary>
            
            <value>The variance of the values.</value>
            
        </member>
        <member name="P:Accord.Statistics.Running.RunningNormalStatistics.StandardDeviation">
            <summary>
            Gets the current standard deviation of the gathered values.
            </summary>
            
            <value>The standard deviation of the values.</value>
            
        </member>
        <member name="T:Accord.Statistics.Moving.MovingNormalStatistics">
            <summary>
              Moving-window statistics.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Moving.MovingNormalStatistics.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Moving.MovingNormalStatistics"/> class.
            </summary>
            
            <param name="windowSize">The size of the moving window.</param>
            
        </member>
        <member name="M:Accord.Statistics.Moving.MovingNormalStatistics.Push(System.Double)">
            <summary>
              Pushes a value into the window.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Moving.MovingNormalStatistics.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Moving.MovingNormalStatistics.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Moving.MovingNormalStatistics.Clear">
            <summary>
              Removes all elements from the window and resets statistics.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.Sum">
            <summary>
              Gets the sum the values within the window.
            </summary>
            
            <value>The sum of values within the window.</value>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.SumOfSquares">
            <summary>
              Gets the sum of squared values within the window.
            </summary>
            
            <value>The sum of squared values.</value>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.Window">
            <summary>
              Gets the size of the window.
            </summary>
            
            <value>The window's size.</value>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.Count">
            <summary>
              Gets the number of samples within the window.
            </summary>
            
            <value>The number of samples within the window.</value>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.Mean">
            <summary>
              Gets the mean of the values within the window.
            </summary>
            
            <value>The mean of the values.</value>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.Variance">
            <summary>
              Gets the variance of the values within the window.
            </summary>
            
            <value>The variance of the values.</value>
            
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.StandardDeviation">
            <summary>
              Gets the standard deviation of the values within the window.
            </summary>
            
            <value>The standard deviation of the values.</value>
            
        </member>
        <member name="T:Accord.Statistics.Testing.NamespaceDoc">
            <summary>
             Contains 34+ statistical hypothesis tests, including <see cref="T:Accord.Statistics.Testing.OneWayAnova">one way</see>
             and <see cref="T:Accord.Statistics.Testing.TwoWayAnova">two-way ANOVA tests</see>, non-parametric tests such as the 
             <see cref="T:Accord.Statistics.Testing.KolmogorovSmirnovTest">Kolmogorov-Smirnov test</see> and the <see cref="T:Accord.Statistics.Testing.SignTest">
             Sign Test for the Median</see>, <see cref="T:Accord.Statistics.Analysis.GeneralConfusionMatrix">contingency table</see>
             tests such as the <see cref="T:Accord.Statistics.Testing.KappaTest">Kappa test</see>, including variations for 
             <see cref="T:Accord.Statistics.Testing.AverageKappaTest">multiple tables</see>, as well as the <see cref="T:Accord.Statistics.Testing.BhapkarTest">
             Bhapkar</see> and <see cref="T:Accord.Statistics.Testing.BowkerTest">Bowker</see> tests; and the more traditional
             <see cref="T:Accord.Statistics.Testing.ChiSquareTest">Chi-Square</see>, <see cref="T:Accord.Statistics.Testing.ZTest">Z</see>, <see cref="T:Accord.Statistics.Testing.FTest">F
             </see>, <see cref="T:Accord.Statistics.Testing.TTest">T</see> and <see cref="T:Accord.Statistics.Testing.WaldTest">Wald tests</see>.
            </summary>
            
            <remarks>
            <para>
              This namespace contains a suite of parametric and non-parametric hypothesis tests. Every
              test in this library implements the <see cref="T:Accord.Statistics.Testing.IHypothesisTest"/> interface, which defines
              a few <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant">key methods and properties to assert whether
              an statistical hypothesis can be supported or not</see>. Every hypothesis test is associated
              with an <see cref="P:Accord.Statistics.Testing.HypothesisTest`1.StatisticDistribution">statistic distribution</see>
              which can in turn be queried, inspected and computed as any other distribution in the 
              <see cref="N:Accord.Statistics.Distributions"/>namespace.</para>
              
            <para>
              By default, tests are created using a 0.05 <see cref="P:Accord.Statistics.Testing.HypothesisTest`1.Size">significance level
              </see>, which in the framework is referred as the test's size. P-Values are also ready to be
              inspected by checking a test's <see cref="P:Accord.Statistics.Testing.HypothesisTest`1.PValue">P-Value</see> property.</para>
              
            <para>
              Furthermore, several tests in this namespace also support <see cref="N:Accord.Statistics.Testing.Power">
              power analysis</see>. The power analysis of a test can be used to suggest an optimal number of samples
              which have to be obtained in order to achieve a more interpretable or useful result while doing hypothesis
              testing. Power analyses implement the <see cref="T:Accord.Statistics.Testing.Power.IPowerAnalysis"/> interface, and analyses are available 
              for the one sample <see cref="T:Accord.Statistics.Testing.Power.ZTestPowerAnalysis">Z</see>, and <see cref="T:Accord.Statistics.Testing.Power.TTestPowerAnalysis">T</see> tests,
              as well as their two sample versions.</para>
              
            <para>
              Some useful parametric tests are the <see cref="T:Accord.Statistics.Testing.BinomialTest"/>, <see cref="T:Accord.Statistics.Testing.ChiSquareTest"/>,
              <see cref="T:Accord.Statistics.Testing.FTest"/>, <see cref="T:Accord.Statistics.Testing.MultinomialTest"/>, <see cref="T:Accord.Statistics.Testing.TTest"/>, <see cref="T:Accord.Statistics.Testing.WaldTest"/>
              and <see cref="T:Accord.Statistics.Testing.ZTest"/>. Useful non-parametric tests include the <see cref="T:Accord.Statistics.Testing.KolmogorovSmirnovTest"/>,
              <see cref="T:Accord.Statistics.Testing.SignTest"/>, <see cref="T:Accord.Statistics.Testing.WilcoxonSignedRankTest"/> and the <see cref="T:Accord.Statistics.Testing.WilcoxonTest"/>.</para>
              
            <para>
              Tests are also available for two or more samples. In this case, we can find two sample variants for the
              <see cref="T:Accord.Statistics.Testing.PairedTTest"/>, <see cref="T:Accord.Statistics.Testing.TwoProportionZTest"/>, <see cref="T:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTest"/>, 
              <see cref="T:Accord.Statistics.Testing.TwoSampleSignTest"/>, <see cref="T:Accord.Statistics.Testing.TwoSampleTTest"/>, <see cref="T:Accord.Statistics.Testing.TwoSampleWilcoxonSignedRankTest"/>,
              <see cref="T:Accord.Statistics.Testing.TwoSampleZTest"/>, as well as the <see cref="T:Accord.Statistics.Testing.MannWhitneyWilcoxonTest"/> for unpaired samples. For
              multiple samples we can find the <see cref="T:Accord.Statistics.Testing.OneWayAnova"/> and <see cref="T:Accord.Statistics.Testing.TwoWayAnova"/>, as well as the
              <see cref="T:Accord.Statistics.Testing.LeveneTest"/> and <see cref="T:Accord.Statistics.Testing.BartlettTest"/>.</para>
              
            <para>
              Finally, the namespace also includes several tests for <see cref="T:Accord.Statistics.Analysis.ConfusionMatrix">contingency tables</see>.
              Those tests include <see cref="T:Accord.Statistics.Testing.KappaTest">Kappa test for inter-rater agreement</see> and its variants, such
              as the <see cref="T:Accord.Statistics.Testing.AverageKappaTest"/>, <see cref="T:Accord.Statistics.Testing.TwoAverageKappaTest"/> and <see cref="T:Accord.Statistics.Testing.TwoMatrixKappaTest"/>.
              Other tests include <see cref="T:Accord.Statistics.Testing.BhapkarTest"/>, <see cref="T:Accord.Statistics.Testing.McNemarTest"/>, <see cref="T:Accord.Statistics.Testing.ReceiverOperatingCurveTest"/>,
              <see cref="T:Accord.Statistics.Testing.StuartMaxwellTest"/>, and the <see cref="T:Accord.Statistics.Testing.TwoReceiverOperatingCurveTest"/>.</para>
              
            <para>
              The namespace class diagram is shown below. </para>
              <img src="..\diagrams\classes\Accord.Statistics.Testing.png"/>
              
            <para>
              Please note that class diagrams for each of the inner namespaces are 
              also available within their own documentation pages.</para>
            </remarks>
            
            <seealso cref="N:Accord.Statistics.Distributions"/>
            <seealso cref="N:Accord.Statistics.Testing.Power"/>
            
        </member>
        <member name="T:Accord.Statistics.Testing.ReceiverOperatingCurveTest">
            <summary>
              Hypothesis test for a single ROC curve.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Testing.ZTest"/>
            
        </member>
        <member name="T:Accord.Statistics.Testing.ZTest">
            <summary>
              One-sample Z-Test (location test).
            </summary>
            
            <remarks>
            <para>
              The term Z-test is often used to refer specifically to the one-sample
              location test comparing the mean of a set of measurements to a given
              constant. Due to the central limit theorem, many test statistics are 
              approximately normally distributed for large samples. Therefore, many
              statistical tests can be performed as approximate Z-tests if the sample
              size is large.</para>
              
            <para>
              If the test is <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis 
              can be rejected in favor of the <see cref="P:Accord.Statistics.Testing.ZTest.Hypothesis">alternate hypothesis</see>
              specified at the creation of the test.</para>
              
            <para>
              This test supports creating <see cref="T:Accord.Statistics.Testing.Power.ZTestPowerAnalysis">power analyses</see>
              through its <see cref="P:Accord.Statistics.Testing.ZTest.Analysis"/> property.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Z-test">
                   Wikipedia, The Free Encyclopedia. Z-Test. Available on:
                   http://en.wikipedia.org/wiki/Z-test </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <para>
              This example has been gathered from the Wikipedia's page about
              the Z-Test, available from: http://en.wikipedia.org/wiki/Z-test </para>
              
            <para>
              Suppose there is a text comprehension test being run across
              a given demographic region. The mean score of the population
              from this entire region are around 100 points, with a standard
              deviation of 12 points.</para>
              
            <para>There is a local school, however, whose 55 students attained
              an average score in the test of only about 96 points. Would 
              their scores be surprisingly that low, or could this event
              have happened due to chance?</para>
              
            <code>
            // So we would like to check that a sample of
            // 55 students with a mean score of 96 points:
            
            int sampleSize = 55;
            double sampleMean = 96;
            
            // Was expected to have happened by chance in a population with
            // an hypothesized mean of 100 points and standard deviation of
            // about 12 points:
            
            double standardDeviation = 12;
            double hypothesizedMean = 100;
            
            
            // So we start by creating the test:
            ZTest test = new ZTest(sampleMean, standardDeviation, sampleSize,
                hypothesizedMean, OneSampleHypothesis.ValueIsSmallerThanHypothesis);
            
            // Now, we can check whether this result would be
            // unlikely under a standard significance level:
            
            bool significant  = test.Significant;
            
            // We can also check the test statistic and its P-Value
            double statistic = test.Statistic;
            double pvalue = test.PValue;
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Testing.TTest"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            <seealso cref="T:Accord.Statistics.Testing.TwoSampleTTest"/>
            <seealso cref="T:Accord.Statistics.Testing.TwoSampleZTest"/>
            <seealso cref="T:Accord.Statistics.Testing.TwoProportionZTest"/>
            
            <seealso cref="T:Accord.Statistics.Testing.Power.ZTestPowerAnalysis"/>
            
        </member>
        <member name="T:Accord.Statistics.Testing.HypothesisTest`1">
            <summary>
              Base class for Hypothesis Tests.
            </summary>
            
            <remarks>
              A statistical hypothesis test is a method of making decisions using data, whether from
              a controlled experiment or an observational study (not controlled). In statistics, a 
              result is called statistically significant if it is unlikely to have occurred by chance
              alone, according to a pre-determined threshold probability, the significance level.
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Statistical_hypothesis_testing">
                  Wikipedia, The Free Encyclopedia. Statistical Hypothesis Testing. </a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Testing.IHypothesisTest`1">
            <summary>
              Common interface for Hypothesis tests depending on a statistical distribution.
            </summary>
            
            <typeparam name="TDistribution">The test statistic distribution.</typeparam>
            
        </member>
        <member name="T:Accord.Statistics.Testing.IHypothesisTest">
            <summary>
              Common interface for Hypothesis tests depending on a statistical distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.IHypothesisTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.IHypothesisTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.IHypothesisTest.Tail">
            <summary>
              Gets the test type.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.IHypothesisTest.Significant">
            <summary>
              Gets whether the null hypothesis should be rejected.
            </summary>
            
            <remarks>
              A test result is said to be statistically significant when the
              result would be very unlikely to have occurred by chance alone.
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Testing.IHypothesisTest`1.StatisticDistribution">
            <summary>
              Gets the distribution associated
              with the test statistic.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.HypothesisTest`1.#ctor">
            <summary>
              Initializes a new instance of the class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.HypothesisTest`1.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.HypothesisTest`1.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.HypothesisTest`1.OnSizeChanged">
            <summary>
              Called whenever the test <see cref="P:Accord.Statistics.Testing.HypothesisTest`1.Size">significance level</see> changes.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.HypothesisTest`1.ToString(System.String,System.IFormatProvider)">
            <summary>
              Converts the numeric P-Value of this test to its equivalent string representation.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.HypothesisTest`1.ToString">
            <summary>
              Converts the numeric P-Value of this test to its equivalent string representation.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.HypothesisTest`1.StatisticDistribution">
            <summary>
              Gets the distribution associated
              with the test statistic.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.HypothesisTest`1.PValue">
            <summary>
              Gets the P-value associated with this test.
            </summary>
            
            <remarks>
            <para>
              In statistical hypothesis testing, the p-value is the probability of
              obtaining a test statistic at least as extreme as the one that was
              actually observed, assuming that the null hypothesis is true.</para>
            <para>
              The lower the p-value, the less likely the result can be explained
              by chance alone, assuming the null hypothesis is true.</para>  
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Testing.HypothesisTest`1.Statistic">
            <summary>
              Gets the test statistic.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.HypothesisTest`1.Tail">
            <summary>
              Gets the test type.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.HypothesisTest`1.Size">
            <summary>
              Gets the significance level for the
              test. Default value is 0.05 (5%).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.HypothesisTest`1.Significant">
            <summary>
              Gets whether the null hypothesis should be rejected.
            </summary>
            
            <remarks>
              A test result is said to be statistically significant when the
              result would be very unlikely to have occurred by chance alone.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.GetConfidenceInterval(System.Double)">
            <summary>
              Gets a confidence interval for the <see cref="P:Accord.Statistics.Testing.ZTest.EstimatedValue"/>
              statistic within the given confidence level percentage.
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.#ctor(System.Double[],System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Constructs a Z test.
            </summary>
            
            <param name="samples">The data samples from which the test will be performed.</param>
            <param name="hypothesizedMean">The constant to be compared with the samples.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.#ctor(System.Double,System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Constructs a Z test.
            </summary>
            
            <param name="sampleMean">The sample's mean.</param>
            <param name="standardError">The sample's standard error.</param>
            <param name="hypothesizedMean">The hypothesized value for the distribution's mean.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.#ctor(System.Double,System.Double,System.Int32,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Constructs a Z test.
            </summary>
            
            <param name="sampleMean">The sample's mean.</param>
            <param name="sampleStdDev">The sample's standard deviation.</param>
            <param name="hypothesizedMean">The hypothesized value for the distribution's mean.</param>
            <param name="samples">The sample's size.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.#ctor(System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Constructs a Z test.
            </summary>
            
            <param name="statistic">The test statistic, as given by (x-μ)/SE.</param>
            <param name="alternate">The alternate hypothesis to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.Compute(System.Double,System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Computes the Z test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.Compute(System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Computes the Z test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.#ctor">
            <summary>
              Constructs a T-Test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.OnSizeChanged">
            <summary>Update event.</summary>
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.StatisticToPValue(System.Double,Accord.Statistics.Testing.DistributionTail)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="z">The value of the test statistic.</param>
            <param name="type">The tail of the test distribution.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.PValueToStatistic(System.Double,Accord.Statistics.Testing.DistributionTail)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            <param name="type">The tail of the test distribution.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.ZTest.Analysis">
            <summary>
              Gets the power analysis for the test, if available.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.ZTest.StandardError">
            <summary>
              Gets the standard error of the estimated value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.ZTest.EstimatedValue">
            <summary>
              Gets the estimated value, such as the mean estimated from a sample.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.ZTest.HypothesizedValue">
            <summary>
              Gets the hypothesized value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.ZTest.Confidence">
            <summary>
              Gets the 95% confidence interval for the <see cref="P:Accord.Statistics.Testing.ZTest.EstimatedValue"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.ZTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis can be rejected
              in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ReceiverOperatingCurveTest.#ctor(Accord.Statistics.Analysis.ReceiverOperatingCharacteristic,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
             <summary>
               Creates a new <see cref="T:Accord.Statistics.Testing.ReceiverOperatingCurveTest"/>.
             </summary>
             
             <param name="curve">The curve to be tested.</param>
             <param name="hypothesizedValue">The hypothesized value for the ROC area.</param>
             <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ReceiverOperatingCurveTest.HanleyMcNealVariance(System.Double,System.Int32,System.Int32)">
            <summary>
              Calculates the standard error of an area calculation for a
              curve with the given number of positive and negatives instances
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ReceiverOperatingCurveTest.DeLongVariance(System.Double[],System.Double[])">
            <summary>
              Calculates the standard error of an area calculation for a
              curve with the given number of positive and negatives instances
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.ReceiverOperatingCurveTest.Curve">
            <summary>
              Gets the ROC curve being tested.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoAverageKappaTest">
             <summary>
               Kappa test for the average of two groups of contingency tables.
             </summary>
            
             <remarks>
             <para>
               The two-matrix Kappa test tries to assert whether the Kappa measure 
               of two groups of contingency tables, each group created by a different
               rater or classification model and measured repeatedly, differs significantly. </para>
               
             <para>
               This is a <see cref="T:Accord.Statistics.Testing.TwoSampleTTest">two sample t-test kind of test</see>.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>J. L. Fleiss. Statistical methods for rates and proportions.
                 Wiley-Interscience; 3rd edition (September 5, 2003) </description></item>
                </list></para>
             </remarks>
             
             <seealso cref="T:Accord.Statistics.Testing.TwoSampleTTest"/>
             <seealso cref="T:Accord.Statistics.Testing.TTest"/>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoSampleTTest">
            <summary>
              Two-sample Student's T test.
            </summary>
            
            <remarks>
             <para>
              The two-sample t-test assesses whether the means of two groups are statistically 
              different from each other.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Student's_t-test">
                  Wikipedia, The Free Encyclopedia. Student's T-Test. </a></description></item>
                <item><description><a href="http://www.le.ac.uk/bl/gat/virtualfc/Stats/ttest.html">
                  William M.K. Trochim. The T-Test. Research methods Knowledge Base, 2009. 
                  Available on: http://www.le.ac.uk/bl/gat/virtualfc/Stats/ttest.html </a></description></item>
                <item><description><a href="http://en.wikipedia.org/wiki/One-way_ANOVA">
                  Graeme D. Ruxton. The unequal variance t-test is an underused alternative to Student's
                  t-test and the Mann–Whitney U test. Oxford Journals, Behavioral Ecology Volume 17, Issue 4, pp.
                  688-690. 2006. Available on: http://beheco.oxfordjournals.org/content/17/4/688.full </a></description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Testing.TTest"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.TDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleTTest.GetConfidenceInterval(System.Double)">
            <summary>
              Gets a confidence interval for the <see cref="P:Accord.Statistics.Testing.TwoSampleTTest.ObservedDifference"/>
              statistic within the given confidence level percentage.
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleTTest.#ctor(System.Double[],System.Double[],System.Boolean,System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Tests whether the means of two samples are different.
            </summary>
            
            <param name="sample1">The first sample.</param>
            <param name="sample2">The second sample.</param>
            <param name="hypothesizedDifference">The hypothesized sample difference.</param>
            <param name="assumeEqualVariances">True to assume equal variances, false otherwise. Default is true.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleTTest.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32,System.Boolean,System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Tests whether the means of two samples are different.
            </summary>
            
            <param name="mean1">The first sample's mean.</param>
            <param name="mean2">The second sample's mean.</param>
            <param name="var1">The first sample's variance.</param>
            <param name="var2">The second sample's variance.</param>
            <param name="samples1">The number of observations in the first sample.</param>
            <param name="samples2">The number of observations in the second sample.</param>
            <param name="assumeEqualVariances">True assume equal variances, false otherwise. Default is true.</param>
            <param name="hypothesizedDifference">The hypothesized sample difference.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleTTest.#ctor">
            <summary>
              Creates a new two-sample T-Test.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleTTest.Compute(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Boolean,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Computes the T Test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleTTest.OnSizeChanged">
            <summary>Update event.</summary>
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleTTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleTTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleTTest.Analysis">
            <summary>
              Gets the power analysis for the test, if available.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleTTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis can be rejected
              in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleTTest.AssumeEqualVariance">
            <summary>
              Gets whether the test assumes equal sample variance.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleTTest.StandardError">
            <summary>
              Gets the standard error for the difference.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleTTest.Variance">
            <summary>
              Gets the combined sample variance.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleTTest.EstimatedValue1">
            <summary>
              Gets the estimated value for the first sample.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleTTest.EstimatedValue2">
            <summary>
              Gets the estimated value for the second sample.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleTTest.HypothesizedDifference">
            <summary>
              Gets the hypothesized difference between the two estimated values.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleTTest.ObservedDifference">
            <summary>
              Gets the actual difference between the two estimated values.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleTTest.DegreesOfFreedom">
            <summary>
              Gets the degrees of freedom for the test statistic.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleTTest.Confidence">
            <summary>
              Gets the 95% confidence interval for the
              <see cref="P:Accord.Statistics.Testing.TwoSampleTTest.ObservedDifference"/> statistic.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoAverageKappaTest.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Boolean,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new Two-Table Mean Kappa test.
            </summary>
            
            <param name="meanKappa1">The average kappa value for the first group of contingency tables.</param>
            <param name="meanKappa2">The average kappa value for the second group of contingency tables.</param>
            <param name="varKappa1">The kappa's variance in the first group of tables.</param>
            <param name="varKappa2">The kappa's variance in the first group of tables.</param>
            <param name="kappaSamples1">The number of contingency tables averaged in the first group.</param>
            <param name="kappaSamples2">The number of contingency tables averaged in the second group.</param>
            <param name="assumeEqualVariances">True to assume equal variances, false otherwise. Default is true.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            <param name="hypothesizedDifference">The hypothesized difference between the two Kappa values.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoAverageKappaTest.#ctor(Accord.Statistics.Analysis.GeneralConfusionMatrix[],Accord.Statistics.Analysis.GeneralConfusionMatrix[],System.Double,System.Boolean,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new Two-Table Mean Kappa test.
            </summary>
            
            <param name="matrices1">The first group of contingency tables.</param>
            <param name="matrices2">The second  group of contingency tables.</param>
            <param name="assumeEqualVariances">True to assume equal variances, false otherwise. Default is true.</param>
            <param name="hypothesizedDifference">The hypothesized difference between the two average Kappa values.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoAverageKappaTest.Variance1">
            <summary>
              Gets the variance for the first Kappa value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoAverageKappaTest.Variance2">
            <summary>
              Gets the variance for the second Kappa value.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.AverageKappaTest">
             <summary>
               Kappa Test for multiple contingency tables.
             </summary>
            
             <remarks>
               <para>
               The multiple-matrix Kappa test tries to assert whether the Kappa measure 
               of many contingency tables, each of which created by a different rater
               or classification model, differs significantly. The computations are
               based on the pages 607, 608 of  (Fleiss, 2003).</para>
               
             <para>
               This is a <see cref="T:Accord.Statistics.Testing.ChiSquareTest">Chi-square kind of test</see>.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>J. L. Fleiss. Statistical methods for rates and proportions.
                 Wiley-Interscience; 3rd edition (September 5, 2003) </description></item>
               </list></para>
             </remarks>
             
             <seealso cref="T:Accord.Statistics.Testing.ChiSquareTest"/>
            
        </member>
        <member name="T:Accord.Statistics.Testing.ChiSquareTest">
            <summary>
              Two-Sample (Goodness-of-fit) Chi-Square Test (Upper Tail)
            </summary>
            
            <remarks>
            <para>
              A chi-square test (also chi-squared or χ² test) is any statistical
              hypothesis test in which the sampling distribution of the test statistic
              is a <see cref="T:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution">chi-square distribution</see> when
              the null hypothesis is true, or any in which this is asymptotically true,
              meaning that the sampling distribution (if the null hypothesis is true) 
              can be made to approximate a chi-square distribution as closely as desired
              by making the sample size large enough.</para>
            <para>
              The chi-square test is used whenever one would like to test whether the
              actual data differs from a random distribution. </para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Chi-square_test">
                   Wikipedia, The Free Encyclopedia. Chi-Square Test. Available on:
                   http://en.wikipedia.org/wiki/Chi-square_test </a></description></item>
              
                <item><description><a href="http://www2.lv.psu.edu/jxm57/irp/chisquar.html">
                   J. S. McLaughlin. Chi-Square Test. Available on:
                   http://www2.lv.psu.edu/jxm57/irp/chisquar.html </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <para>
              The following example has been based on the example section
              of the <a href="http://en.wikipedia.org/wiki/Pearson's_chi-squared_test#Goodness_of_fit">
              Pearson's chi-squared test</a> article on Wikipedia.</para>
              
            <code>
            // Suppose we would like to test the hypothesis that a random sample of 
            // 100 people has been drawn from a population in which men and women are
            // equal in frequency. 
            
            // Under this hypothesis, the observed number of men and women would be 
            // compared to the theoretical frequencies of 50 men and 50 women. So,
            // after drawing our sample, we found out that there were 44 men and 56
            // women in the sample:
            
            //                     man  woman
            double[] observed = {  44,   56  };
            double[] expected = {  50,   50  };
            
            // If the null hypothesis is true (i.e., men and women are chosen with 
            // equal probability), the test statistic will be drawn from a chi-squared
            // distribution with one degree of freedom. If the male frequency is known, 
            // then the female frequency is determined.
            //
            int degreesOfFreedom = 1;
            
            // So now we have:
            //
            var chi = new ChiSquareTest(expected, observed, degreesOfFreedom);
            
            
            // The chi-squared distribution for 1 degree of freedom shows that the 
            // probability of observing this difference (or a more extreme difference 
            // than this) if men and women are equally numerous in the population is 
            // approximately 0.23. 
                        
            double pvalue = chi.PValue; // 0.23
                        
            // This probability is higher than conventional criteria for statistical
            // significance (0.001 or 0.05), so normally we would not reject the null
            // hypothesis that the number of men in the population is the same as the
            // number of women.
            
            bool significant = chi.Significant; // false
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ChiSquareTest.#ctor(System.Double,System.Int32)">
            <summary>
              Constructs a Chi-Square Test.
            </summary>
            
            <param name="statistic">The test statistic.</param>
            <param name="degreesOfFreedom">The chi-square distribution degrees of freedom.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ChiSquareTest.#ctor(System.Double[],System.Double[],System.Int32)">
            <summary>
              Constructs a Chi-Square Test.
            </summary>
            
            <param name="expected">The expected variable values.</param>
            <param name="observed">The observed variable values.</param>
            <param name="degreesOfFreedom">The chi-square distribution degrees of freedom.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ChiSquareTest.#ctor(Accord.Statistics.Analysis.ConfusionMatrix,System.Boolean)">
            <summary>
              Constructs a Chi-Square Test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ChiSquareTest.#ctor(Accord.Statistics.Analysis.GeneralConfusionMatrix,System.Boolean)">
            <summary>
              Constructs a Chi-Square Test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ChiSquareTest.#ctor(System.Double[],Accord.Statistics.Distributions.IUnivariateDistribution)">
            <summary>
              Constructs a Chi-Square Test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ChiSquareTest.#ctor">
            <summary>
              Constructs a Chi-Square Test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ChiSquareTest.Compute(System.Double,System.Int32)">
            <summary>
              Computes the Chi-Square Test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ChiSquareTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ChiSquareTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.ChiSquareTest.DegreesOfFreedom">
            <summary>
              Gets the degrees of freedom for the Chi-Square distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.AverageKappaTest.#ctor(System.Double[],System.Double[])">
            <summary>
              Creates a new multiple table Kappa test.
            </summary>
            
            <param name="kappas">The kappa values.</param>
            <param name="variances">The variance for each kappa value.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.AverageKappaTest.#ctor(Accord.Statistics.Analysis.GeneralConfusionMatrix[])">
            <summary>
              Creates a new multiple table Kappa test.
            </summary>
            
            <param name="matrices">The contingency tables.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.AverageKappaTest.Compute(System.Double[],System.Double[])">
            <summary>
              Computes the multiple matrix Kappa test.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.AverageKappaTest.OverallKappa">
            <summary>
              Gets the overall Kappa value
              for the many contingency tables.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.AverageKappaTest.OverallVariance">
            <summary>
              Gets the overall Kappa variance
              for the many contingency tables.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.AverageKappaTest.Variances">
            <summary>
              Gets the variance for each kappa value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.AverageKappaTest.EstimatedValues">
            <summary>
              Gets the kappa for each contingency table.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.FisherExactTest">
            <summary>
              Fisher's exact test for contingency tables.
            </summary>
            
            <remarks>
            <para>
              This test statistic distribution is the <see cref="T:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution">
              Hypergeometric</see>.</para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.HypergeometricDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.FisherExactTest.#ctor(Accord.Statistics.Analysis.ConfusionMatrix,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Constructs a new Fisher's exact test.
            </summary>
            
            <param name="matrix">The matrix to be tested.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.FisherExactTest.Compute(System.Double,System.Int32,System.Int32,System.Int32,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Computes the Fisher's exact test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.FisherExactTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.FisherExactTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.FisherExactTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis
              can be rejected in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.AndersonDarlingTest">
            <summary>
              One-sample Anderson-Darling (AD) test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.AndersonDarlingTest.#ctor(System.Double[],Accord.Statistics.Distributions.IUnivariateDistribution)">
            <summary>
              Creates a new Anderson-Darling test.
            </summary>
            
            <param name="sample">The sample we would like to test as belonging to the <paramref name="hypothesizedDistribution"/>.</param>
            <param name="hypothesizedDistribution">A fully specified distribution.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.AndersonDarlingTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.AndersonDarlingTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.AndersonDarlingTest.TheoreticalDistribution">
            <summary>
              Gets the theoretical, hypothesized distribution for the samples,
              which should have been stated <i>before</i> any measurements.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.ShapiroWilkTest">
            <summary>
              Shapiro-Wilk test for normality.
            </summary>
            
            <remarks>
            <para>
              The Shapiro–Wilk test is a test of normality in frequentist statistics. It was published in 1965 by Samuel Sanford Shapiro and Martin Wilk.
            </para>
            
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test">
                  Wikipedia, The Free Encyclopedia. Shapiro-Wilk test. Available on:
                  http://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test </a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ShapiroWilkTest.#ctor(System.Double[])">
            <summary>
              Creates a new Shapiro-Wilk test.
            </summary>
            
            <param name="sample">The sample we would like to test.</param>
            
            <exception cref="T:System.ArgumentException">
              The sample must contain at least 4 observations.</exception>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ShapiroWilkTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ShapiroWilkTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Testing.MultinomialTest">
             <summary>
               Multinomial test (approximated).
             </summary>
             
             <remarks>
             <para>
               In statistics, the multinomial test is the test of the null hypothesis that the
               parameters of a multinomial distribution equal specified values. The test can be
               approximated using a <see cref="T:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution">chi-square distribution</see>.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Multinomial_test">
                    Wikipedia, The Free Encyclopedia. Multinomial Test. Available on:
                    http://en.wikipedia.org/wiki/Multinomial_test </a></description></item>
               </list></para>
             </remarks>
             
             <example>
             
             <para>
             The following example is based on the example available on About.com Statistics,
             <a href="http://statistics.about.com/od/Inferential-Statistics/a/An-Example-Of-Chi-Square-Test-For-A-Multinomial-Experiment.htm">An Example of Chi-Square Test for a Multinomial Experiment</a> By Courtney Taylor.</para>
             <para>
             In this example, we would like to test if a die is fair. For this, we
             will be rolling the die 600 times, annotating the result every time 
             the die falls. In the end, we got a one 106 times, a two 90 times, a 
             three 98 times, a four 102 times, a five 100 times and a six 104 times:</para>
             
             <code>
             int[] sample = { 106, 90, 98, 102, 100, 104 };
             
             // If the die was fair, we should note that we would be expecting the
             // probabilities to be all equal to 1 / 6:
             
             double[] hypothesizedProportion = 
             { 
                //   1        2           3          4          5         6
                1 / 6.0,   1 / 6.0,   1 / 6.0,   1 / 6.0,   1 / 6.0,   1 / 6.0, 
             };
             
             // Now, we create our test using the samples and the expected proportion
             MultinomialTest test = new MultinomialTest(sample, hypothesizedProportion);
             
             double chiSquare = test.Statistic; // 1.6
             bool significant = test.Significant; // false
             </code>
             
             <para>
             Since the test didn't come up significant, it means that we
             don't have enough evidence to to reject the null hypothesis 
             that the die is fair.</para>
             </example>
            
             <seealso cref="T:Accord.Statistics.Testing.ChiSquareTest"/>
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution"/>
             
        </member>
        <member name="M:Accord.Statistics.Testing.MultinomialTest.#ctor(System.Double[],System.Int32)">
            <summary>
              Creates a new Multinomial test.
            </summary>
            
            <param name="sampleProportions">The proportions for each category in the sample.</param>
            <param name="sampleSize">The number of observations in the sample.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.MultinomialTest.#ctor(System.Int32[])">
            <summary>
              Creates a new Multinomial test.
            </summary>
            
            <param name="sampleCounts">The number of occurrences for each category in the sample.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.MultinomialTest.#ctor(System.Int32[],System.Double[])">
            <summary>
              Creates a new Multinomial test.
            </summary>
            
            <param name="sampleCounts">The number of occurrences for each category in the sample.</param>
            <param name="hypothesizedProportions">The hypothesized category proportions. Default is
              to assume uniformly equal proportions.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.MultinomialTest.#ctor(System.Double[],System.Int32,System.Double[])">
            <summary>
              Creates a new Multinomial test.
            </summary>
            
            <param name="sampleProportions">The proportions for each category in the sample.</param>
            <param name="sampleSize">The number of observations in the sample.</param>
            <param name="hypothesizedProportions">The hypothesized category proportions. Default is
              to assume uniformly equal proportions.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.MultinomialTest.#ctor(System.Int32[],System.Int32)">
            <summary>
              Creates a new Multinomial test.
            </summary>
            
            <param name="sample">The categories for each observation in the sample.</param>
            <param name="categories">The number of possible categories.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.MultinomialTest.#ctor(System.Int32[],System.Int32,System.Double[])">
            <summary>
              Creates a new Multinomial test.
            </summary>
            
            <param name="sample">The categories for each observation in the sample.</param>
            <param name="categories">The number of possible categories.</param>
            <param name="hypothesizedProportions">The hypothesized category proportions. Default is
              to assume uniformly equal proportions.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.MultinomialTest.Compute(System.Int32,System.Double[],System.Double[])">
            <summary>
              Computes the Multinomial test.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.MultinomialTest.ObservedProportions">
            <summary>
              Gets the observed sample proportions.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.MultinomialTest.HypothesizedProportions">
            <summary>
              Gets the hypothesized population proportions.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.BartlettTest">
            <summary>
              Bartlett's test for equality of variances.
            </summary>
            
            <remarks>
            <para>
              In statistics, Bartlett's test is used to test if k samples are from populations
              with equal variances. Equal variances across samples is called homoscedasticity 
              or homogeneity of variances. Some statistical tests, for example the <see cref="T:Accord.Statistics.Testing.IAnova">
              analysis of variance</see>, assume that variances are equal across groups or samples. 
              The Bartlett test can be used to verify that assumption.</para>
            <para>
              Bartlett's test is sensitive to departures from normality. That is, if the samples 
              come from non-normal distributions, then Bartlett's test may simply be testing for 
              non-normality. <see cref="T:Accord.Statistics.Testing.LeveneTest">Levene's test</see> and the Brown–Forsythe test
              are alternatives to the Bartlett test that are less sensitive to departures from 
              normality. </para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia, The Free Encyclopedia. Bartlett's test. Available on:
                  http://en.wikipedia.org/wiki/Bartlett's_test </description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Testing.LeveneTest"/>
            
            <seealso cref="T:Accord.Statistics.Testing.ChiSquareTest"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.BartlettTest.#ctor(System.Double[][])">
            <summary>
              Tests the null hypothesis that all group variances are equal.
            </summary>
            
            <param name="samples">The grouped samples.</param>
            
        </member>
        <member name="T:Accord.Statistics.Testing.LeveneTestMethod">
            <summary>
              Levene test computation methods.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.LeveneTestMethod.Mean">
            <summary>
              The test has been computed using the Mean.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.LeveneTestMethod.Median">
            <summary>
              The test has been computed using the Median
              (which is known as the Brown-Forsythe test).
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.LeveneTestMethod.TruncatedMean">
            <summary>
              The test has been computed using the trimmed mean.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.LeveneTest">
            <summary>
              Levene's test for equality of variances.
            </summary>
            
            <remarks>
            <para>
              In statistics, Levene's test is an inferential statistic used to assess the 
              equality of variances for a variable calculated for two or more groups. Some 
              common statistical procedures assume that variances of the populations from 
              which different samples are drawn are equal. Levene's test assesses this 
              assumption. It tests the null hypothesis that the population variances are 
              equal (called homogeneity of variance or homoscedasticity). If the resulting 
              P-value of Levene's test is less than some significance level (typically 0.05), 
              the obtained differences in sample variances are unlikely to have occurred based 
              on random sampling from a population with equal variances. Thus, the null hypothesis
              of equal variances is rejected and it is concluded that there is a difference 
              between the variances in the population.</para>
              
            <para>
              Some of the procedures typically assuming homoscedasticity, for which one can use 
              Levene's tests, include <see cref="T:Accord.Statistics.Testing.IAnova">analysis of variance</see> and <see cref="T:Accord.Statistics.Testing.TTest">
              t-tests</see>. Levene's test is often used before a comparison of means. When Levene's
              test shows significance, one should switch to generalized tests, free from homoscedasticity 
              assumptions. Levene's test may also be used as a main test for answering a stand-alone 
              question of whether two sub-samples in a given population have equal or different variances.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia, The Free Encyclopedia. Levene's test. Available on:
                  http://en.wikipedia.org/wiki/Levene's_test </description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Testing.BartlettTest"/>
            
            <seealso cref="T:Accord.Statistics.Testing.FTest"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.FDistribution"/>
            
        </member>
        <member name="T:Accord.Statistics.Testing.FTest">
            <summary>
              Snedecor's F-Test.
            </summary>
            
            <remarks>
            <para>
              A F-test is any statistical test in which the test statistic has an
              <see cref="T:Accord.Statistics.Distributions.Univariate.FDistribution">F-distribution</see> under the null hypothesis.
              It is most often used when comparing statistical models that have been fit
              to a data set, in order to identify the model that best fits the population
              from which the data were sampled.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/F-test">
                   Wikipedia, The Free Encyclopedia. F-Test. Available on:
                   http://en.wikipedia.org/wiki/F-test </a></description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Testing.OneWayAnova"/>
            <seealso cref="T:Accord.Statistics.Testing.TwoWayAnova"/>
            
            <example>
            <code>
            // The following example has been based on the page "F-Test for Equality 
            // of Two Variances", from NIST/SEMATECH e-Handbook of Statistical Methods:
            //
            //  http://www.itl.nist.gov/div898/handbook/eda/section3/eda359.htm
            //
            
            // Consider a data set containing 480 ceramic strength 
            // measurements for two batches of material. The summary
            // statistics for each batch are shown below:
            
            // Batch 1:
            int numberOfObservations1 = 240;
            // double mean1 = 688.9987;
            double stdDev1 = 65.54909;
            double var1 = stdDev1 * stdDev1;
            
            // Batch 2:
            int numberOfObservations2 = 240;
            // double mean2 = 611.1559;
            double stdDev2 = 61.85425;
            double var2 = stdDev2 * stdDev2;
            
            // Here, we will be testing the null hypothesis that
            // the variances for the two batches are equal.
            
            int degreesOfFreedom1 = numberOfObservations1 - 1;
            int degreesOfFreedom2 = numberOfObservations2 - 1;
            
            // Now we can create a F-Test to test the difference between variances
            var ftest = new FTest(var1, var2, degreesOfFreedom1, degreesOfFreedom2);
            
            double statistic = ftest.Statistic; // 1.123037
            double pvalue = ftest.PValue;       // 0.185191
            bool significant = ftest.Significant; // false
            
            // The F test indicates that there is not enough evidence 
            // to reject the null hypothesis that the two batch variances
            // are equal at the 0.05 significance level.
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.FDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.FTest.#ctor(System.Double,System.Double,System.Int32,System.Int32,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new F-Test for a given statistic with given degrees of freedom.
            </summary>
            
            <param name="var1">The variance of the first sample.</param>
            <param name="var2">The variance of the second sample.</param>
            <param name="d1">The degrees of freedom for the first sample.</param>
            <param name="d2">The degrees of freedom for the second sample.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.FTest.#ctor(System.Double,System.Int32,System.Int32,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new F-Test for a given statistic with given degrees of freedom.
            </summary>
            
            <param name="statistic">The test statistic.</param>
            <param name="d1">The degrees of freedom for the numerator.</param>
            <param name="d2">The degrees of freedom for the denominator.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.FTest.Compute(System.Double,System.Int32,System.Int32,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Computes the F-test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.FTest.#ctor">
            <summary>
              Creates a new F-Test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.FTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.FTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.FTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis can be rejected
              in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.FTest.DegreesOfFreedom1">
            <summary>
              Gets the degrees of freedom for the
              numerator in the test distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.FTest.DegreesOfFreedom2">
            <summary>
              Gets the degrees of freedom for the
              denominator in the test distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.LeveneTest.#ctor(System.Double[][],System.Boolean)">
            <summary>
              Tests the null hypothesis that all group variances are equal.
            </summary>
            
            <param name="samples">The grouped samples.</param>
            <param name="median"><c>True</c> to use the median in the Levene calculation.
            <c>False</c> to use the mean. Default is false (use the mean). </param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.LeveneTest.#ctor(System.Double[][],System.Double)">
            <summary>
              Tests the null hypothesis that all group variances are equal.
            </summary>
            
            <param name="samples">The grouped samples.</param>
            <param name="percent">The percentage of observations to discard
            from the sample when computing the test with the truncated mean.</param>
            
        </member>
        <member name="P:Accord.Statistics.Testing.LeveneTest.Method">
            <summary>
              Gets the method used to compute the Levene's test.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.Power.NamespaceDoc">
            <summary>
             Contains methods for power analysis of several related hypothesis tests, 
             including support for automatic sample size estimation.
            </summary>
            
            <remarks>
            <para>
              The namespace class diagram is shown below. </para>
              <img src="..\diagrams\classes\Accord.Statistics.Testing.png"/>
              
            <para>
              Please note that class diagrams for each of the inner namespaces are 
              also available within their own documentation pages.</para>
            </remarks>
            
            <seealso cref="N:Accord.Statistics.Testing"/>
            <seealso cref="N:Accord.Statistics.Distributions"/>
            
        </member>
        <member name="T:Accord.Statistics.Testing.PairedTTest">
            <summary>
              T-Test for two paired samples.
            </summary>
            
            <remarks>
            <para>
              The Paired T-test can be used when the samples are dependent; that is, when there
              is only one sample that has been tested twice (repeated measures) or when there are
              two samples that have been matched or "paired". This is an example of a paired difference
              test.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Student%27s_t-test#Dependent_t-test_for_paired_samples">
                  Wikipedia, The Free Encyclopedia. Student's t-test. 
                  Available from: http://en.wikipedia.org/wiki/Student%27s_t-test#Dependent_t-test_for_paired_samples </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <para>
              Suppose we would like to know the effect of a treatment (such
              as a new drug) in improving the well-being of 9 patients. The
              well-being is measured in a discrete scale, going from 0 to 10.</para>
            <code>
            // To do so, we need to register the initial state of each patient
            // and then register their state after a given time under treatment.
            
            double[,] patients =
            {
                    //                 before      after
                    //                treatment  treatment
                    /* Patient 1.*/ {     0,         1     },
                    /* Patient 2.*/ {     6,         5     },
                    /* Patient 3.*/ {     4,         9     },
                    /* Patient 4.*/ {     8,         6     },
                    /* Patient 5.*/ {     1,         6     },
                    /* Patient 6.*/ {     6,         7     },
                    /* Patient 7.*/ {     3,         4     },
                    /* Patient 8.*/ {     8,         7     },
                    /* Patient 9.*/ {     6,         5     },
            };
            
            // Extract the before and after columns
            double[] before = patients.GetColumn(0);
            double[] after = patients.GetColumn(1);
            
            // Create the paired-sample T-test. Our research hypothesis is
            // that the treatment does improve the patient's well-being. So
            // we will be testing the hypothesis that the well-being of the
            // "before" sample, the first sample, is "smaller" in comparison
            // to the "after" treatment group.
            
            PairedTTest test = new PairedTTest(before, after,
                TwoSampleHypothesis.FirstValueIsSmallerThanSecond);
            
            bool significant = test.Significant; //   not significant
            double pvalue = test.PValue;         //  p-value =  0.1650
            double tstat  = test.Statistic;      //  t-stat  = -1.0371
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.TDistribution"/>
            <seealso cref="T:Accord.Statistics.Testing.TTest"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.PairedTTest.GetConfidenceInterval(System.Double)">
            <summary>
              Gets a confidence interval for the <see cref="P:Accord.Statistics.Testing.PairedTTest.ObservedDifference"/>
              statistic within the given confidence level percentage.
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.PairedTTest.#ctor(System.Double[],System.Double[],Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new paired t-test.
            </summary>
            
            <param name="sample1">The observations in the first sample.</param>
            <param name="sample2">The observations in the second sample.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.PairedTTest.OnSizeChanged">
            <summary>Update event.</summary>
        </member>
        <member name="M:Accord.Statistics.Testing.PairedTTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.PairedTTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.PairedTTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis can be rejected
              in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.PairedTTest.Mean1">
            <summary>
              Gets the first sample's mean.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.PairedTTest.Mean2">
            <summary>
              Gets the second sample's mean.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.PairedTTest.ObservedDifference">
            <summary>
              Gets the observed mean difference between the two samples.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.PairedTTest.StandardError">
            <summary>
              Gets the standard error of the difference.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.PairedTTest.SampleSize">
            <summary>
              Gets the size of a sample. 
              Both samples have equal size.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.PairedTTest.Confidence">
            <summary>
              Gets the 95% confidence interval for the
              <see cref="P:Accord.Statistics.Testing.PairedTTest.ObservedDifference"/> statistic.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoProportionZTest">
            <summary>
              Z-Test for two sample proportions.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Testing.TwoSampleZTest"/>
            <seealso cref="T:Accord.Statistics.Testing.ZTest"/>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoSampleZTest">
            <summary>
              Two sample Z-Test.
            </summary>
            
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Z-test">
                   Wikipedia, The Free Encyclopedia. Z-Test. Available on:
                   http://en.wikipedia.org/wiki/Z-test </a></description></item>
                </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Testing.ZTest"/>
            <seealso cref="T:Accord.Statistics.Testing.TwoSampleTTest"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleZTest.GetConfidenceInterval(System.Double)">
            <summary>
              Gets a confidence interval for the <see cref="P:Accord.Statistics.Testing.TwoSampleZTest.ObservedDifference"/>
              statistic within the given confidence level percentage.
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleZTest.#ctor(System.Double[],System.Double[],System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Constructs a Z test.
            </summary>
            
            <param name="sample1">The first data sample.</param>
            <param name="sample2">The second data sample.</param>
            <param name="hypothesizedDifference">The hypothesized sample difference.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleZTest.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32,System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Constructs a Z test.
            </summary>
            
            <param name="mean1">The first sample's mean.</param>
            <param name="mean2">The second sample's mean.</param>
            <param name="var1">The first sample's variance.</param>
            <param name="var2">The second sample's variance.</param>
            <param name="samples1">The number of observations in the first sample.</param>
            <param name="samples2">The number of observations in the second sample.</param>
            <param name="hypothesizedDifference">The hypothesized sample difference.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleZTest.#ctor">
            <summary>
              Constructs a Z test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleZTest.Compute(System.Double,System.Double,System.Double,System.Double,System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
             <summary>
               Computes the Z test.
             </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleZTest.Compute(System.Double,System.Double,System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
             <summary>
               Computes the Z test.
             </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleZTest.Compute(System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
             <summary>
               Computes the Z test.
             </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleZTest.OnSizeChanged">
            <summary>Update event.</summary>
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleZTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleZTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleZTest.Analysis">
            <summary>
              Gets the power analysis for the test, if available.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleZTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis can be rejected
              in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleZTest.StandardError">
            <summary>
              Gets the standard error for the difference.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleZTest.EstimatedValue1">
            <summary>
              Gets the estimated value for the first sample.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleZTest.EstimatedValue2">
            <summary>
              Gets the estimated value for the second sample.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleZTest.HypothesizedDifference">
            <summary>
              Gets the hypothesized difference between the two estimated values.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleZTest.ObservedDifference">
            <summary>
              Gets the actual difference between the two estimated values.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleZTest.Confidence">
            <summary>
              Gets the 95% confidence interval for the
              <see cref="P:Accord.Statistics.Testing.TwoSampleZTest.ObservedDifference"/> statistic.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoProportionZTest.#ctor(System.Double,System.Int32,System.Double,System.Int32,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new Z-Test for two sample proportions.
            </summary>
            
            <param name="proportion1">The proportion of success observations in the first sample.</param>
            <param name="sampleSize1">The total number of observations in the first sample.</param>
            <param name="proportion2">The proportion of success observations in the second sample.</param>
            <param name="sampleSize2">The total number of observations in the second sample.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoProportionZTest.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new Z-Test for two sample proportions.
            </summary>
            
            <param name="successes1">The number of successes in the first sample.</param>
            <param name="trials1">The total number of trials (observations) in the first sample.</param>
            <param name="successes2">The number of successes in the second sample.</param>
            <param name="trials2">The total number of trials (observations) in the second sample.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoProportionZTest.Compute(System.Int32,System.Int32,System.Int32,System.Int32,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Computes the Z-test for two sample proportions.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoReceiverOperatingCurveTest">
            <summary>
              Hypothesis test for two Receiver-Operating 
              Characteristic (ROC) curve areas (ROC-AUC).
            </summary>
            
            <seealso cref="T:Accord.Statistics.Testing.TwoSampleZTest"/>
            <seealso cref="T:Accord.Statistics.Testing.ZTest"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoReceiverOperatingCurveTest.#ctor(Accord.Statistics.Analysis.ReceiverOperatingCharacteristic,Accord.Statistics.Analysis.ReceiverOperatingCharacteristic,System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
             <summary>
               Creates a new test for two ROC curves.
             </summary>
             
             <param name="curve1">The first ROC curve.</param>
             <param name="curve2">The second ROC curve.</param>
             <param name="hypothesizedDifference">The hypothesized difference between the two areas.</param>
             <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoReceiverOperatingCurveTest.Curve1">
            <summary>
              First Receiver-Operating Characteristic curve.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoReceiverOperatingCurveTest.Curve2">
            <summary>
              First Receiver-Operating Characteristic curve.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoReceiverOperatingCurveTest.OverallVariance">
            <summary>
              Gets the summed Kappa variance
              for the two contingency tables.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoReceiverOperatingCurveTest.Variance1">
            <summary>
              Gets the variance for the first Kappa value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoReceiverOperatingCurveTest.Variance2">
            <summary>
              Gets the variance for the second Kappa value.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.WilcoxonTest">
            <summary>
              Base class for Wilcoxon's W tests.
            </summary>
            
            <remarks>
              This is a base class which doesn't need to be used directly.
              Instead, you may wish to call <see cref="T:Accord.Statistics.Testing.WilcoxonSignedRankTest"/>
              and <see cref="T:Accord.Statistics.Testing.TwoSampleWilcoxonSignedRankTest"/>.
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Testing.WilcoxonSignedRankTest"/>
            <seealso cref="T:Accord.Statistics.Testing.TwoSampleWilcoxonSignedRankTest"/>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.WilcoxonTest.#ctor(System.Int32[],System.Double[],Accord.Statistics.Testing.DistributionTail)">
            <summary>
              Creates a new Wilcoxon's W+ test.
            </summary>
            
            <param name="signs">The signs for the sample differences.</param>
            <param name="diffs">The differences between samples.</param>
            <param name="tail">The distribution tail to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.WilcoxonTest.#ctor">
            <summary>
              Creates a new Wilcoxon's W+ test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.WilcoxonTest.Compute(System.Int32[],System.Double[],Accord.Statistics.Testing.DistributionTail)">
            <summary>
              Computes the Wilcoxon Signed-Rank test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.WilcoxonTest.Compute(System.Double,System.Double[],Accord.Statistics.Testing.DistributionTail)">
            <summary>
              Computes the Wilcoxon Signed-Rank test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.WilcoxonTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.WilcoxonTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.WilcoxonTest.Samples">
            <summary>
              Gets the number of samples being tested.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.WilcoxonTest.Signs">
            <summary>
              Gets the signs for each of the <see cref="P:Accord.Statistics.Testing.WilcoxonTest.Delta"/> differences.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.WilcoxonTest.Delta">
            <summary>
              Gets the differences between the samples.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.WilcoxonTest.Ranks">
            <summary>
              Gets the rank statistics for the differences.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.MannWhitneyWilcoxonTest">
            <summary>
              Mann-Whitney-Wilcoxon test for unpaired samples.
            </summary>
            
            <remarks>
            <para>
              The Mann–Whitney U test (also called the Mann–Whitney–Wilcoxon (MWW), 
              Wilcoxon rank-sum test, or Wilcoxon–Mann–Whitney test) is a non-parametric 
              test of the null hypothesis that two populations are the same against 
              an alternative hypothesis, especially that a particular population tends
              to have larger values than the other.</para>
              
            <para>
              It has greater efficiency than the <see cref="T:Accord.Statistics.Testing.TTest">t-test</see> on 
              non-normal distributions, such as a <see cref="T:Accord.Statistics.Distributions.Univariate.Mixture`1">mixture</see>
              of <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution">normal distributions</see>, and it is
              nearly as efficient as the <see cref="T:Accord.Statistics.Testing.TTest">t-test</see> on normal
              distributions.</para>
            </remarks>
            
            <example>
            <para>
              The following example comes from Richard Lowry's page at
              http://vassarstats.net/textbook/ch11a.html. As stated by
              Richard, this example deals with persons seeking treatment
              by claustrophobia. Those persons are randomly divided into
              two groups, and each group receive a different treatment
              for the disorder.</para>
              
            <para>
              The hypothesis would be that treatment A would more effective
              than B. To check this hypothesis, we can use Mann-Whitney's Test
              to compare the medians of both groups.</para>
            
            <code>
              // Claustrophobia test scores for people treated with treatment A
              double[] sample1 = { 4.6, 4.7, 4.9, 5.1, 5.2, 5.5, 5.8, 6.1, 6.5, 6.5, 7.2 };
              
              // Claustrophobia test scores for people treated with treatment B
              double[] sample2 = { 5.2, 5.3, 5.4, 5.6, 6.2, 6.3, 6.8, 7.7, 8.0, 8.1 };
              
              // Create a new Mann-Whitney-Wilcoxon's test to compare the two samples
              MannWhitneyWilcoxonTest test = new MannWhitneyWilcoxonTest(sample1, sample2,
                TwoSampleHypothesis.FirstValueIsSmallerThanSecond);
              
              double sum1 = test.RankSum1; //  96.5
              double sum2 = test.RankSum2; // 134.5
              
              double statistic1 = test.Statistic1; // 79.5
              double statistic2 = test.Statistic2; // 30.5
              
              double pvalue = test.PValue; // 0.043834132843420748
              
              // Check if the test was significant
              bool significant = test.Significant; // true
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Testing.TwoSampleTTest"/>
            <seealso cref="T:Accord.Statistics.Testing.TwoSampleWilcoxonSignedRankTest"/>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.MannWhitneyDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.#ctor(System.Double[],System.Double[],Accord.Statistics.Testing.TwoSampleHypothesis)">
             <summary>
               Tests whether two samples comes from the 
               same distribution without assuming normality.
             </summary>
             
             <param name="sample1">The first sample.</param>
             <param name="sample2">The second sample.</param>
             <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.Compute(System.Double,System.Double[],System.Int32,System.Int32,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Computes the Mann-Whitney-Wilcoxon test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis can be rejected
              in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.Samples1">
            <summary>
              Gets the number of samples in the first sample.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.Samples2">
            <summary>
              Gets the number of samples in the second sample.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.Rank1">
            <summary>
              Gets the rank statistics for the first sample.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.Rank2">
            <summary>
              Gets the rank statistics for the second sample.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.RankSum1">
            <summary>
              Gets the sum of ranks for the first sample. Often known as Ta.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.RankSum2">
            <summary>
              Gets the sum of ranks for the second sample. Often known as Tb.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.Statistic1">
            <summary>
              Gets the difference between the expected value for
              the observed value of <see cref="P:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.RankSum1"/> and its
              expected value under the null hypothesis. Often known as Ua.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.Statistic2">
            <summary>
              Gets the difference between the expected value for
              the observed value of <see cref="P:Accord.Statistics.Testing.MannWhitneyWilcoxonTest.RankSum2"/> and its
              expected value under the null hypothesis. Often known as Ub.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.Power.IPowerAnalysis">
            <summary>
              Common interface for power analysis objects.
            </summary>
            
            <remarks>
            <para> 
              The power of a statistical test is the probability that it correctly rejects 
              the null hypothesis when the null hypothesis is false. That is, </para>
              
            <para>
              <c>power = P(reject null hypothesis | null hypothesis is false)</c>
            </para>
            
            <para>
              It can be equivalently thought of as the probability of correctly accepting the
              alternative hypothesis when the alternative hypothesis is true - that is, the ability 
              of a test to detect an effect, if the effect actually exists. The power is in general 
              a function of the possible distributions, often determined by a parameter, under the 
              alternative hypothesis. As the power increases, the chances of a Type II error occurring 
              decrease. The probability of a Type II error occurring is referred to as the false 
              negative rate (β) and the power is equal to 1−β. The power is also known as the sensitivity.
            </para>
            
            <para>
              Power analysis can be used to calculate the minimum sample size required so that 
              one can be reasonably likely to detect an effect of a given size. Power analysis 
              can also be used to calculate the minimum effect size that is likely to be detected 
              in a study using a given sample size. In addition, the concept of power is used to 
              make comparisons between different statistical testing procedures: for example, 
              between a parametric and a nonparametric test of the same hypothesis. There is also 
              the concept of a power function of a test, which is the probability of rejecting the 
              null when the null is true.</para>
            
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia, The Free Encyclopedia. Statistical power. Available on:
                  http://en.wikipedia.org/wiki/Statistical_power </description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Testing.Power.TTestPowerAnalysis"/>
            <seealso cref="T:Accord.Statistics.Testing.Power.ZTestPowerAnalysis"/>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Tail">
            <summary>
              Gets the test type.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Power">
            <summary>
              Gets the power of the test, also known as the 
              (1-Beta error rate) or the test's sensitivity.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Size">
            <summary>
              Gets the significance level
              for the test. Also known as alpha.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Samples">
            <summary>
              Gets the number of samples 
              considered in the test.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Effect">
            <summary>
              Gets the effect size of the test.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.Power.ITwoSamplePowerAnalysis">
            <summary>
              Common interface for two-sample power analysis objects.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.ITwoSamplePowerAnalysis.Samples1">
            <summary>
              Gets the number of observations 
              contained in the first sample.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.ITwoSamplePowerAnalysis.Samples2">
            <summary>
              Gets the number of observations 
              contained in the second sample.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis">
            <summary>
              Base class for two sample power analysis methods. 
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.#ctor(Accord.Statistics.Testing.DistributionTail)">
            <summary>
              Constructs a new power analysis for a two-sample test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.ComputePower">
            <summary>
              Computes the power for a test with givens values of 
              <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Effect">effect size</see> and <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.TotalSamples">
              number of samples</see> under <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Size"/>.
            </summary>
            
            <returns>The power for the test under the given conditions.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.ComputeEffect">
            <summary>
              Computes the minimum detectable effect size for the test
              considering the power given in <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Power"/>, the
              number of samples in <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.TotalSamples"/> and the 
              significance level <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Size"/>.
            </summary>
            
            <returns>The minimum detectable <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Effect">effect
            size</see> for the test under the given conditions.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.ComputeSize">
            <summary>
              Computes the minimum significance level for the test
              considering the power given in <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Power"/>, the
              number of samples in <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.TotalSamples"/> and the 
              effect size <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Effect"/>.
            </summary>
            
            <returns>The minimum detectable <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Effect">effect
            size</see> for the test under the given conditions.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.ComputeSamples(System.Double)">
            <summary>
              Computes the recommended sample size for the test to attain
              the power indicated in <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Power"/> considering
              values of <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Effect"/> and <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Size"/>.
            </summary>
            
            <returns>Recommended sample size for attaining the given
            <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Power"/> for size effect <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Effect"/>
            under the given <see cref="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Size"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.ToString(System.String,System.IFormatProvider)">
            <summary>
              Converts the numeric power of this test to its equivalent string representation.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.ToString">
            <summary>
              Converts the numeric power of this test to its equivalent string representation.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.GetDiferentiableUnits(System.Double)">
            <summary>
              Gets the minimum difference in the experiment units
              to which it is possible to detect a difference.
            </summary>
            
            <param name="standardDeviation">The common standard deviation for the samples.</param>
            
            <returns>The minimum difference in means which can be detected by the test.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.GetDiferentiableUnits(System.Double,System.Double)">
            <summary>
              Gets the minimum difference in the experiment units
              to which it is possible to detect a difference.
            </summary>
            
            <param name="var1">The variance for the first sample.</param>
            <param name="var2">The variance for the second sample.</param>
            
            <returns>The minimum difference in means which can be detected by the test.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Tail">
            <summary>
              Gets the test type.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Power">
            <summary>
              Gets or sets the power of the test, also
              known as the (1-Beta error rate).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Size">
            <summary>
              Gets or sets the significance level
              for the test. Also known as alpha.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Samples1">
            <summary>
              Gets or sets the number of observations
              in the first sample considered in the test.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Samples2">
            <summary>
              Gets or sets the number of observations
              in the second sample considered in the test.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Accord#Statistics#Testing#Power#IPowerAnalysis#Samples">
            <summary>
              Gets the total number of observations
              in both samples considered in the test.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.TotalSamples">
            <summary>
              Gets the total number of observations
              in both samples considered in the test.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseTwoSamplePowerAnalysis.Effect">
            <summary>
              Gets or sets the effect size of the test.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.Power.TwoSampleZTestPowerAnalysis">
            <summary>
              Power analysis for two-sample Z-Tests.
            </summary>
            
            <example>
              <para>
              Please take a look at the <see cref="T:Accord.Statistics.Testing.TwoSampleTTest"/> example section.</para>
            </example>
            
            <seealso cref="T:Accord.Statistics.Testing.Power.IPowerAnalysis"/>
            <seealso cref="T:Accord.Statistics.Testing.Power.ZTestPowerAnalysis"/>
            <seealso cref="T:Accord.Statistics.Testing.Power.TwoSampleTTestPowerAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TwoSampleZTestPowerAnalysis.#ctor(Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Testing.Power.ZTestPowerAnalysis"/>.
            </summary>
            
            <param name="hypothesis">The hypothesis tested.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TwoSampleZTestPowerAnalysis.#ctor(Accord.Statistics.Testing.TwoSampleZTest)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Testing.Power.ZTestPowerAnalysis"/>.
            </summary>
            
            <param name="test">The test to create the analysis for.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TwoSampleZTestPowerAnalysis.ComputePower">
            <summary>
             Computes the power for a test with givens values of
             <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Effect">effect size</see> and <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Samples">
             number of samples</see> under <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Size"/>.
            </summary>
            
            <returns>
             The power for the test under the given conditions.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TwoSampleZTestPowerAnalysis.ComputeSamples(System.Double)">
            <summary>
              Gets the recommended sample size for the test to attain
              the power indicating in <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Power"/> considering
              values of <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Effect"/> and <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Size"/>.
            </summary>
            
            <returns>
              Recommended sample size for attaining the given
              <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Power"/> for size effect <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Effect"/>
              under the given <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Size"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TwoSampleZTestPowerAnalysis.ComputeEffect">
            <summary>
              Computes the minimum detectable effect size for the test
              considering the power given in <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Power"/>, the
              number of samples in <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Samples"/> and the significance
              level <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Size"/>.
            </summary>
            
            <returns>
              The minimum detectable <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Effect">effect
              size</see> for the test under the given conditions.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TwoSampleZTestPowerAnalysis.GetSampleSize(System.Double,System.Double,System.Double,System.Double,System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Estimates the number of samples necessary to attain the
              required power level for the given effect size.
            </summary>
            
            <param name="delta">The minimum detectable difference.</param>
            <param name="standardDeviation">The difference standard deviation.</param>
            <param name="power">The desired power level. Default is 0.8.</param>
            <param name="alpha">The desired significance level. Default is 0.05.</param>
            <param name="hypothesis">The alternative hypothesis (research hypothesis) to be tested.</param>
            <param name="proportion">The proportion of observations in the second group
            when compared to the first group. A proportion of 2:1 results in twice more
            samples in the second group than in the first. Default is 1.</param>
            
            <returns>The required number of samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TwoSampleZTestPowerAnalysis.GetEffectSize(System.Int32,System.Int32,System.Double,System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Estimates the number of samples necessary to attain the
              required power level for the given effect size.
            </summary>
            
            <param name="sampleSize1">The number of observations in the first sample.</param>
            <param name="sampleSize2">The number of observations in the second sample.</param>
            <param name="power">The desired power level. Default is 0.8.</param>
            <param name="alpha">The desired significance level. Default is 0.05.</param>
            <param name="hypothesis">The alternative hypothesis (research hypothesis) to be tested.</param>
            
            <returns>The required number of samples.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Testing.Power.TwoSampleTTestPowerAnalysis">
             <summary>
               Power analysis for two-sample T-Tests.
             </summary>
             
             <example>
             <para>
               There are different ways a power analysis test can be conducted.</para>
               
             <code>
             // Let's say we have two samples, and we would like to know whether those
             // samples have the same mean. For this, we can perform a two sample T-Test:
             double[] A = { 5.0, 6.0, 7.9, 6.95, 5.3, 10.0, 7.48, 9.4, 7.6, 8.0, 6.22 };
             double[] B = { 5.0, 1.6, 5.75, 5.80, 2.9, 8.88, 4.56, 2.4, 5.0, 10.0 };
             
             // Perform the test, assuming the samples have unequal variances
             var test = new TwoSampleTTest(A, B, assumeEqualVariances: false);
             
             double df = test.DegreesOfFreedom;   // d.f. = 14.351
             double t = test.Statistic;           // t    = 2.14
             double p = test.PValue;              // p    = 0.04999
             bool significant = test.Significant; // true
             
             // The test gave us an indication that the samples may
             // indeed have come from different distributions (whose
             // mean value is actually distinct from each other).
             
             // Now, we would like to perform an _a posteriori_ analysis of the 
             // test. When doing an a posteriori analysis, we can not change some
             // characteristics of the test (because it has been already done), 
             // but we can measure some important features that may indicate 
             // whether the test is trustworthy or not.
            
             // One of the first things would be to check for the test's power.
             // A test's power is 1 minus the probability of rejecting the null
             // hypothesis when the null hypothesis is actually false. It is
             // the other side of the coin when we consider that the P-value
             // is the probability of rejecting the null hypothesis when the
             // null hypothesis is actually true.
             
             // Ideally, this should be a high value:
             double power = test.Analysis.Power; // 0.5376260
             
             // Check how much effect we are trying to detect
             double effect = test.Analysis.Effect; // 0.94566
             
             // With this power, that is the minimal difference we can spot?
             double sigma = Math.Sqrt(test.Variance);
             double thres = test.Analysis.Effect * sigma; // 2.0700909090909
             
             // This means that, using our test, the smallest difference that
             // we could detect with some confidence would be something around
             // 2 standard deviations. If we would like to say the samples are
             // different when they are less than 2 std. dev. apart, we would
             // need to do repeat our experiment differently.
             </code>
             
             <para>
               Another way to create the power analysis is to pass the
               hypothesis test to the t-test power analysis constructor.</para>
               
             <code>
             // Create an a posteriori analysis of the experiment
             var analysis = new TwoSampleTTestPowerAnalysis(test);
             
             // When creating a power analysis, we have three things we can
             // change. We can always freely configure two of those things
             // and then ask the analysis to give us the third.
             
             // Those are:
             double e = analysis.Effect;       // the test's minimum detectable effect size (0.94566)
             double n = analysis.TotalSamples; // the number of samples in the test (21 or (11 + 10))
             double b = analysis.Power;        // the probability of committing a type-2 error (0.53)
             
             // Let's say we would like to create a test with 80% power.
             analysis.Power = 0.8;
             analysis.ComputeEffect(); // what effect could we detect?
             
             double detectableEffect = analysis.Effect; // we would detect a difference of 1.290514
             </code>
             
             <para>
               However, to achieve this 80%, we would need to redo our experiment
               more carefully. Assuming we are going to redo our experiment, we will
               have more freedom about what we can change and what we can not. For 
               better addressing those points, we will create an a priori analysis 
               of the experiment:</para>
               
             <code>
             // We would like to know how many samples we would need to gather in
             // order to achieve a 80% power test which can detect an effect size
             // of one standard deviation:
             //
             analysis = TwoSampleTTestPowerAnalysis.GetSampleSize
             (
                 variance1: A.Variance(),
                 variance2: B.Variance(),     
                 delta: 1.0, // the minimum detectable difference we want
                 power: 0.8  // the test power that we want
             );
             
             // How many samples would we need in order to see the effect we need?
             int n1 = (int)Math.Ceiling(analysis.Samples1); // 77
             int n2 = (int)Math.Ceiling(analysis.Samples2); // 77
             
             // According to our power analysis, we would need at least 77 
             // observations in each sample in order to see the effect we
             // need with the required 80% power.
             </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Testing.Power.IPowerAnalysis"/>
             <seealso cref="T:Accord.Statistics.Testing.Power.TTestPowerAnalysis"/>
             <seealso cref="T:Accord.Statistics.Testing.Power.TwoSampleZTestPowerAnalysis"/>
             
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TwoSampleTTestPowerAnalysis.#ctor(Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Testing.Power.TTestPowerAnalysis"/>.
            </summary>
            
            <param name="hypothesis">The hypothesis tested.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TwoSampleTTestPowerAnalysis.#ctor(Accord.Statistics.Testing.TwoSampleTTest)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Testing.Power.TTestPowerAnalysis"/>.
            </summary>
            
            <param name="test">The test to create the analysis for.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TwoSampleTTestPowerAnalysis.ComputePower">
            <summary>
             Computes the power for a test with givens values of
             <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Effect">effect size</see> and <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Samples">
             number of samples</see> under <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Size"/>.
            </summary>
            
            <returns>
             The power for the test under the given conditions.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TwoSampleTTestPowerAnalysis.GetSampleSize(System.Double,System.Double,System.Double,System.Double,System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Estimates the number of samples necessary to attain the
              required power level for the given effect size.
            </summary>
            
            <param name="delta">The minimum detectable difference.</param>
            <param name="standardDeviation">The difference standard deviation.</param>
            <param name="power">The desired power level. Default is 0.8.</param>
            <param name="alpha">The desired significance level. Default is 0.05.</param>
            <param name="proportion">The proportion of observations in the second group
            when compared to the first group. A proportion of 2:1 results in twice more
            samples in the second group than in the first. Default is 1.</param>
            <param name="hypothesis">The alternative hypothesis (research hypothesis) to be tested.</param>
            
            <returns>The required number of samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TwoSampleTTestPowerAnalysis.GetSampleSize(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Estimates the number of samples necessary to attain the
              required power level for the given effect size.
            </summary>
            
            <param name="delta">The minimum detectable difference.</param>
            <param name="variance1">The first sample variance.</param>
            <param name="variance2">The second sample variance.</param>
            <param name="power">The desired power level. Default is 0.8.</param>
            <param name="alpha">The desired significance level. Default is 0.05.</param>
            <param name="proportion">The proportion of observations in the second group
            when compared to the first group. A proportion of 2:1 results in twice more
            samples in the second group than in the first. Default is 1.</param>
            <param name="hypothesis">The alternative hypothesis (research hypothesis) to be tested.</param>
            
            <returns>The required number of samples.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis">
            <summary>
              Base class for one sample power analysis methods. 
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.#ctor(Accord.Statistics.Testing.DistributionTail)">
            <summary>
              Constructs a new power analysis for a one-sample test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.ComputePower">
            <summary>
              Computes the power for a test with givens values of 
              <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Effect">effect size</see> and <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Samples">
              number of samples</see> under <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Size"/>.
            </summary>
            
            <returns>The power for the test under the given conditions.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.ComputeEffect">
            <summary>
              Computes the minimum detectable effect size for the test
              considering the power given in <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Power"/>, the
              number of samples in <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Samples"/> and the significance
              level <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Size"/>.
            </summary>
            
            <returns>The minimum detectable <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Effect">effect
            size</see> for the test under the given conditions.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.ComputeSamples">
            <summary>
              Computes recommended sample size for the test to attain
              the power indicated in <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Power"/> considering
              values of <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Effect"/> and <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Size"/>.
            </summary>
            
            <returns>Recommended sample size for attaining the given
            <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Power"/> for size effect <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Effect"/>
            under the given <see cref="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Size"/>.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.ToString(System.String,System.IFormatProvider)">
            <summary>
              Converts the numeric power of this test to its equivalent string representation.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.ToString">
            <summary>
              Converts the numeric power of this test to its equivalent string representation.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.GetDiferentiableUnits(System.Double)">
            <summary>
              Gets the minimum difference in the experiment units
              to which it is possible to detect a difference.
            </summary>
            
            <param name="standardDeviation">The standard deviation for the samples.</param>
            
            <returns>The minimum difference in means which can be detected by the test.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Tail">
            <summary>
              Gets the test type.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Power">
            <summary>
              Gets or sets the power of the test, also
              known as the (1-Beta error rate).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Size">
            <summary>
              Gets or sets the significance level
              for the test. Also known as alpha.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Samples">
            <summary>
              Gets or sets the number of samples 
              considered in the test.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.Power.BaseOneSamplePowerAnalysis.Effect">
            <summary>
              Gets or sets the effect size of the test.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.BhapkarTest">
             <summary>
               Bhapkar test of homogeneity for contingency tables.
             </summary>
             
             <remarks>
               The Bhapkar test is a more powerful alternative to the
               <see cref="T:Accord.Statistics.Testing.StuartMaxwellTest">Stuart-Maxwell test</see>.
               
             <para>
               This is a <see cref="T:Accord.Statistics.Testing.ChiSquareTest">Chi-square kind of test</see>.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                  Bhapkar, V.P. (1966). A note on the equivalence of two test criteria
                  for hypotheses in categorical data. Journal of the American Statistical
                  Association, 61, 228-235.</description></item>
                </list></para>
             </remarks>
             
             <seealso cref="T:Accord.Statistics.Testing.ChiSquareTest"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.BhapkarTest.#ctor(Accord.Statistics.Analysis.GeneralConfusionMatrix)">
            <summary>
              Creates a new Bhapkar test.
            </summary>
            
            <param name="matrix">The contingency table to test.</param>
            
        </member>
        <member name="P:Accord.Statistics.Testing.BhapkarTest.Delta">
            <summary>
              Gets the delta vector <c>d</c> used
              in the test calculations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.BhapkarTest.Covariance">
            <summary>
              Gets the covariance matrix <c>S</c>
              used in the test calculations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.BhapkarTest.Precision">
            <summary>
              Gets the inverse covariance matrix
              <c>S^-1</c> used in the calculations.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.BowkerTest">
            <summary>
              Bowker test of symmetry for contingency tables.
            </summary>
            
            <remarks>
            <para>
              This is a <see cref="T:Accord.Statistics.Testing.ChiSquareTest">Chi-square kind of test</see>.</para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Testing.ChiSquareTest"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.BowkerTest.#ctor(Accord.Statistics.Analysis.GeneralConfusionMatrix)">
            <summary>
              Creates a new Bowker test.
            </summary>
            
            <param name="matrix">The contingency table to test.</param>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoMatrixKappaTest">
             <summary>
               Kappa Test for two contingency tables.
             </summary>
            
             <remarks>
             <para>
               The two-matrix Kappa test tries to assert whether the Kappa measure 
               of two contingency tables, each of which created by a different rater
               or classification model, differs significantly. </para>
               
             <para>
               This is a <see cref="T:Accord.Statistics.Testing.TwoSampleZTest">two sample z-test kind of test</see>.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>J. L. Fleiss. Statistical methods for rates and proportions.
                 Wiley-Interscience; 3rd edition (September 5, 2003) </description></item>
                 <item><description>
                 Ientilucci, Emmett (2006). "On Using and Computing the Kappa Statistic".
                 Available on: http://www.cis.rit.edu/~ejipci/Reports/On_Using_and_Computing_the_Kappa_Statistic.pdf </description></item>
               </list></para>
             </remarks>
             
             <seealso cref="T:Accord.Statistics.Testing.TwoSampleZTest"/>
             <seealso cref="T:Accord.Statistics.Testing.ZTest"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoMatrixKappaTest.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new Two-Table Kappa test.
            </summary>
            
            <param name="kappa1">The kappa value for the first contingency table to test.</param>
            <param name="kappa2">The kappa value for the second contingency table to test.</param>
            <param name="var1">The variance of the kappa value for the first contingency table to test.</param>
            <param name="var2">The variance of the kappa value for the second contingency table to test.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            <param name="hypothesizedDifference">The hypothesized difference between the two Kappa values.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoMatrixKappaTest.#ctor(Accord.Statistics.Analysis.GeneralConfusionMatrix,Accord.Statistics.Analysis.GeneralConfusionMatrix,System.Double,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new Two-Table Kappa test.
            </summary>
            
            <param name="matrix1">The first contingency table to test.</param>
            <param name="matrix2">The second contingency table to test.</param>
            <param name="hypothesizedDifference">The hypothesized difference between the two Kappa values.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoMatrixKappaTest.OverallVariance">
            <summary>
              Gets the summed Kappa variance
              for the two contingency tables.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoMatrixKappaTest.Variance1">
            <summary>
              Gets the variance for the first Kappa value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoMatrixKappaTest.Variance2">
            <summary>
              Gets the variance for the second Kappa value.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.KappaTest">
             <summary>
               Kappa Test for agreement in contingency tables.
             </summary>
            
             <remarks>
             <para>
               The Kappa test tries to assert whether the Kappa measure of a
               a contingency table, is significantly different from another 
               hypothesized value. </para>
               
             <para>
               The computations used by the test are the same found in the 1969 paper by
               J. L. Fleiss, J. Cohen, B. S. Everitt, in which they presented the finally
               corrected version of the Kappa's variance formulae. This is contrast to the
               computations traditionally found in the remote sensing literature. For those
               variance computations, see the <see cref="M:Accord.Statistics.Testing.KappaTest.DeltaMethodKappaVariance(Accord.Statistics.Analysis.GeneralConfusionMatrix)"/> method.
             </para>
               
             <para>
               This is a <see cref="T:Accord.Statistics.Testing.ZTest">z-test kind of test</see>.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>J. L. Fleiss. Statistical methods for rates and proportions.
                 Wiley-Interscience; 3rd edition (September 5, 2003) </description></item>
                 <item><description>J. L. Fleiss, J. Cohen, B. S. Everitt. Large sample standard errors of
                 kappa and weighted kappa. Psychological Bulletin, Volume: 72, Issue: 5. Washington,
                 DC: American Psychological Association, Pages: 323-327, 1969.</description></item>
                </list></para>
             </remarks>
            
             <seealso cref="T:Accord.Statistics.Testing.ZTest"/>
             
        </member>
        <member name="M:Accord.Statistics.Testing.KappaTest.#ctor(System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Creates a new Kappa test.
            </summary>
            
            <param name="sampleKappa">The estimated Kappa statistic.</param>
            <param name="standardError">The standard error of the kappa statistic. If the test is
            being used to assert independency between two raters (i.e. testing the null hypothesis
            that the underlying Kappa is zero), then the <see cref="M:Accord.Statistics.Testing.KappaTest.AsymptoticKappaVariance(Accord.Statistics.Analysis.GeneralConfusionMatrix)">
            standard error should be computed with the null hypothesis parameter set to true</see>.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test. If the
            hypothesized kappa is left unspecified, a one-tailed test will be used. Otherwise, the 
            default is to use a two-sided test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KappaTest.#ctor(System.Double,System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Creates a new Kappa test.
            </summary>
            
            <param name="sampleKappa">The estimated Kappa statistic.</param>
            <param name="standardError">The standard error of the kappa statistic. If the test is
            being used to assert independency between two raters (i.e. testing the null hypothesis
            that the underlying Kappa is zero), then the <see cref="M:Accord.Statistics.Testing.KappaTest.AsymptoticKappaVariance(Accord.Statistics.Analysis.GeneralConfusionMatrix)">
            standard error should be computed with the null hypothesis parameter set to true</see>.</param>
            <param name="hypothesizedKappa">The hypothesized value for the Kappa statistic.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test. If the
            hypothesized kappa is left unspecified, a one-tailed test will be used. Otherwise, the 
            default is to use a two-sided test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KappaTest.#ctor(Accord.Statistics.Analysis.GeneralConfusionMatrix,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Creates a new Kappa test.
            </summary>
            
            <param name="matrix">The contingency table to test.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test. If the
            hypothesized kappa is left unspecified, a one-tailed test will be used. Otherwise, the 
            default is to use a two-sided test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KappaTest.#ctor(Accord.Statistics.Analysis.GeneralConfusionMatrix,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Creates a new Kappa test.
            </summary>
            
            <param name="matrix">The contingency table to test.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test. If the
            hypothesized kappa is left unspecified, a one-tailed test will be used. Otherwise, the 
            default is to use a two-sided test.</param>
            <param name="hypothesizedKappa">The hypothesized value for the Kappa statistic. If the test
            is being used to assert independency between two raters (i.e. testing the null hypothesis
            that the underlying Kappa is zero), then the <see cref="M:Accord.Statistics.Testing.KappaTest.AsymptoticKappaVariance(Accord.Statistics.Analysis.GeneralConfusionMatrix)">
            standard error will be computed with the null hypothesis parameter set to true</see>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KappaTest.#ctor(Accord.Statistics.Analysis.WeightedConfusionMatrix,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Creates a new Kappa test.
            </summary>
            
            <param name="matrix">The contingency table to test.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test. If the
            hypothesized kappa is left unspecified, a one-tailed test will be used. Otherwise, the 
            default is to use a two-sided test.</param>
            <param name="hypothesizedWeightedKappa">The hypothesized value for the Kappa statistic. If the test
            is being used to assert independency between two raters (i.e. testing the null hypothesis
            that the underlying Kappa is zero), then the <see cref="M:Accord.Statistics.Testing.KappaTest.AsymptoticKappaVariance(Accord.Statistics.Analysis.GeneralConfusionMatrix)">
            standard error will be computed with the null hypothesis parameter set to true</see>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KappaTest.DeltaMethodKappaVariance(Accord.Statistics.Analysis.GeneralConfusionMatrix)">
            <summary>
              Compute Cohen's Kappa variance using the large sample approximation
              given by Congalton, which is common in the remote sensing literature.
            </summary>
            
            <param name="matrix">A <see cref="T:Accord.Statistics.Analysis.GeneralConfusionMatrix"/> representing the ratings.</param>
            
            <returns>Kappa's variance.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KappaTest.DeltaMethodKappaVariance(Accord.Statistics.Analysis.GeneralConfusionMatrix,System.Double@)">
            <summary>
              Compute Cohen's Kappa variance using the large sample approximation
              given by Congalton, which is common in the remote sensing literature.
            </summary>
            
            <param name="matrix">A <see cref="T:Accord.Statistics.Analysis.GeneralConfusionMatrix"/> representing the ratings.</param>
            <param name="stdDev">Kappa's standard deviation.</param>
            
            <returns>Kappa's variance.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KappaTest.AsymptoticKappaVariance(Accord.Statistics.Analysis.GeneralConfusionMatrix)">
            <summary>
              Computes the asymptotic variance for Fleiss's Kappa variance using the formulae
              by (Fleiss et al, 1969) when the underlying Kappa is assumed different from zero.
            </summary>
            
            <param name="matrix">A <see cref="T:Accord.Statistics.Analysis.GeneralConfusionMatrix"/> representing the ratings.</param>
            
            <returns>Kappa's variance.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KappaTest.AsymptoticKappaVariance(Accord.Statistics.Analysis.GeneralConfusionMatrix,System.Double@,System.Boolean)">
            <summary>
              Computes the asymptotic variance for Fleiss's Kappa variance using the formulae
              by (Fleiss et al, 1969). If <paramref name="nullHypothesis"/> is set to true, the
              method will return the variance under the null hypothesis.
            </summary>
            
            <param name="matrix">A <see cref="T:Accord.Statistics.Analysis.GeneralConfusionMatrix"/> representing the ratings.</param>
            <param name="stdDev">Kappa's standard deviation.</param>
            <param name="nullHypothesis">True to compute Kappa's variance when the null hypothesis
            is true (i.e. that the underlying kappa is zer). False otherwise. Default is false.</param>
            
            <returns>Kappa's variance.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KappaTest.AsymptoticKappaVariance(Accord.Statistics.Analysis.WeightedConfusionMatrix,System.Double@,System.Boolean)">
            <summary>
              Computes the asymptotic variance for Fleiss's Kappa variance using the formulae
              by (Fleiss et al, 1969). If <paramref name="nullHypothesis"/> is set to true, the
              method will return the variance under the null hypothesis.
            </summary>
            
            <param name="matrix">A <see cref="T:Accord.Statistics.Analysis.GeneralConfusionMatrix"/> representing the ratings.</param>
            <param name="stdDev">Kappa's standard deviation.</param>
            <param name="nullHypothesis">True to compute Kappa's variance when the null hypothesis
            is true (i.e. that the underlying kappa is zer). False otherwise. Default is false.</param>
            
            <returns>Kappa's variance.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.KappaTest.Variance">
            <summary>
              Gets the variance of the Kappa statistic.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.McNemarTest">
             <summary>
               McNemar test of homogeneity for <c>2 x 2</c> contingency tables.
             </summary>
             
             <remarks>
             <para>
               McNemar's test is a non-parametric method used on nominal data. It is applied to 
               2 × 2 contingency tables with a dichotomous trait, with matched pairs of subjects,
               to determine whether the row and column marginal frequencies are equal, i.e. if
               the contingency table presents marginal homogeneity.</para>
            
             <para>
               This is a <see cref="T:Accord.Statistics.Testing.ChiSquareTest">Chi-square kind of test</see>.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Wikipedia contributors, "McNemar's test," Wikipedia, The Free Encyclopedia,
                   Available on: http://http://en.wikipedia.org/wiki/McNemar's_test. </description></item>
                </list></para>
             </remarks>
             
             <seealso cref="T:Accord.Statistics.Testing.ChiSquareTest"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.McNemarTest.#ctor(Accord.Statistics.Analysis.ConfusionMatrix,System.Boolean)">
            <summary>
              Creates a new McNemar test.
            </summary>
            
            <param name="matrix">The contingency table to test.</param>
            <param name="yatesCorrection">True to use Yate's correction of
              continuity, falser otherwise. Default is false.</param>
            
        </member>
        <member name="T:Accord.Statistics.Testing.KolmogorovSmirnovTest">
            <summary>
              One-sample Kolmogorov-Smirnov (KS) test.
            </summary>
            
            <remarks>
            <para>
              The Kolmogorov-Smirnov test tries to determine if a sample differs significantly
              from an hypothesized theoretical probability distribution. The Kolmogorov-Smirnov
              test has an interesting advantage in which it does not requires any assumptions
              about the data. The distribution of the K-S test statistic does not depend on
              which distribution is being tested.</para>
            <para>
              The K-S test has also the advantage of being an exact test (other tests, such as the
              chi-square goodness-of-fit test depends on an adequate sample size). One disadvantage
              is that it requires a fully defined distribution which should not have been estimated
              from the data. If the parameters of the theoretical distribution have been estimated
              from the data, the critical region of the K-S test will be no longer valid.</para>
            <para>
              This class uses an efficient and high-accuracy algorithm based on work by Richard
              Simard (2010). Please see <see cref="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution"/> for more details.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test">
                  Wikipedia, The Free Encyclopedia. Kolmogorov-Smirnov Test. 
                  Available on: http://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test </a></description></item>
                <item><description><a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm">
                  NIST/SEMATECH e-Handbook of Statistical Methods. Kolmogorov-Smirnov Goodness-of-Fit Test.
                  Available on: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm </a></description></item>
                <item><description><a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/ksdist.pdf">
                  Richard Simard, Pierre L’Ecuyer. Computing the Two-Sided Kolmogorov-Smirnov Distribution.
                  Journal of Statistical Software. Volume VV, Issue II. Available on:
                  http://www.iro.umontreal.ca/~lecuyer/myftp/papers/ksdist.pdf </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <para>
              In this first example, suppose we got a new sample, and we would 
              like to test whether this sample has been originated from a uniform
              continuous distribution.</para>
            
            <code>
            double[] sample = 
            { 
                0.621, 0.503, 0.203, 0.477, 0.710, 0.581, 0.329, 0.480, 0.554, 0.382
            };
            
            // First, we create the distribution we would like to test against:
            //
            var distribution = UniformContinuousDistribution.Standard;
            
            // Now we can define our hypothesis. The null hypothesis is that the sample
            // comes from a standard uniform distribution, while the alternate is that
            // the sample is not from a standard uniform distribution.
            //
            var kstest = new KolmogorovSmirnovTest(sample, distribution);
            
            double statistic = kstest.Statistic; // 0.29
            double pvalue = kstest.PValue;       // 0.3067
            
            bool significant = kstest.Significant; // false
            </code>
            <para>
              Since the null hypothesis could not be rejected, then the sample
              can perhaps be from a uniform distribution. However, please note
              that this doesn't means that the sample *is* from the uniform, it
              only means that we could not rule out the possibility.</para>
              
            <para>
             Before we could not rule out the possibility that the sample came from
             a uniform distribution, which means the sample was not very far from
             uniform. This would be an indicative that it would be far from what
             would be expected from a Normal distribution:</para>
             
            <code>
            // First, we create the distribution we would like to test against:
            //
            NormalDistribution distribution = NormalDistribution.Standard;
            
            // Now we can define our hypothesis. The null hypothesis is that the sample
            // comes from a standard Normal distribution, while the alternate is that
            // the sample is not from a standard Normal distribution.
            //
            var kstest = new KolmogorovSmirnovTest(sample, distribution);
            
            double statistic = kstest.Statistic; // 0.580432
            double pvalue = kstest.PValue;       // 0.000999
            
            bool significant = kstest.Significant; // true
            </code>
            
            <para>
              Since the test says that the null hypothesis should be rejected, then
              this can be regarded as a strong indicative that the sample does not
              comes from a Normal distribution, just as we expected.</para>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KolmogorovSmirnovTest.#ctor(System.Double[],Accord.Statistics.Distributions.IUnivariateDistribution)">
            <summary>
              Creates a new One-Sample Kolmogorov test.
            </summary>
            
            <param name="sample">The sample we would like to test as belonging to the <paramref name="hypothesizedDistribution"/>.</param>
            <param name="hypothesizedDistribution">A fully specified distribution (which must NOT have been estimated from the data).</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KolmogorovSmirnovTest.#ctor(System.Double[],Accord.Statistics.Distributions.IUnivariateDistribution,Accord.Statistics.Testing.KolmogorovSmirnovTestHypothesis)">
            <summary>
              Creates a new One-Sample Kolmogorov test.
            </summary>
            
            <param name="sample">The sample we would like to test as belonging to the <paramref name="hypothesizedDistribution"/>.</param>
            <param name="hypothesizedDistribution">A fully specified distribution (which must NOT have been estimated from the data).</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KolmogorovSmirnovTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.KolmogorovSmirnovTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.KolmogorovSmirnovTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis can be rejected
              in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.KolmogorovSmirnovTest.TheoreticalDistribution">
            <summary>
              Gets the theoretical, hypothesized distribution for the samples,
              which should have been stated <i>before</i> any measurements.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.KolmogorovSmirnovTest.EmpiricalDistribution">
            <summary>
              Gets the empirical distribution measured from the sample.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.AnovaSourceCollection">
             <summary>
               ANOVA's result table.
             </summary>
            
             <remarks>
               This class represents the results obtained from an <see cref="T:Accord.Statistics.Testing.IAnova">ANOVA experiment</see>.
             </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Testing.AnovaVariationSource">
            <summary>
              Source of variation in an <see cref="T:Accord.Statistics.Testing.IAnova">ANOVA experiment</see>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.AnovaVariationSource.#ctor(Accord.Statistics.Testing.IAnova,System.String)">
            <summary>
              Creates a new object representation of a variation source in an ANOVA experiment.
            </summary>
            
            <param name="anova">The associated ANOVA analysis.</param>
            <param name="source">The name of the variation source.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.AnovaVariationSource.#ctor(Accord.Statistics.Testing.IAnova,System.String,System.Double,System.Int32)">
            <summary>
              Creates a new object representation of a variation source in an ANOVA experiment.
            </summary>
            
            <param name="anova">The associated ANOVA analysis.</param>
            <param name="source">The name of the variation source.</param>
            <param name="degreesOfFreedom">The degrees of freedom for the source.</param>
            <param name="sumOfSquares">The sum of squares of the source.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.AnovaVariationSource.#ctor(Accord.Statistics.Testing.IAnova,System.String,System.Double,System.Int32,System.Double)">
            <summary>
              Creates a new object representation of a variation source in an ANOVA experiment.
            </summary>
            
            <param name="anova">The associated ANOVA analysis.</param>
            <param name="source">The name of the variation source.</param>
            <param name="degreesOfFreedom">The degrees of freedom for the source.</param>
            <param name="meanSquares">The mean sum of squares of the source.</param>
            <param name="sumOfSquares">The sum of squares of the source.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.AnovaVariationSource.#ctor(Accord.Statistics.Testing.IAnova,System.String,System.Double,System.Int32,Accord.Statistics.Testing.FTest)">
            <summary>
              Creates a new object representation of a variation source in an ANOVA experiment.
            </summary>
            
            <param name="anova">The associated ANOVA analysis.</param>
            <param name="source">The name of the variation source.</param>
            <param name="degreesOfFreedom">The degrees of freedom for the source.</param>
            <param name="sumOfSquares">The sum of squares of the source.</param>
            <param name="test">The F-Test containing the F-Statistic for the source.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.AnovaVariationSource.#ctor(Accord.Statistics.Testing.IAnova,System.String,System.Double,System.Int32,System.Double,Accord.Statistics.Testing.FTest)">
            <summary>
              Creates a new object representation of a variation source in an ANOVA experiment.
            </summary>
            
            <param name="anova">The associated ANOVA analysis.</param>
            <param name="source">The name of the variation source.</param>
            <param name="degreesOfFreedom">The degrees of freedom for the source.</param>
            <param name="sumOfSquares">The sum of squares of the source.</param>
            <param name="meanSquares">The mean sum of squares of the source.</param>
            <param name="test">The F-Test containing the F-Statistic for the source.</param>
            
        </member>
        <member name="P:Accord.Statistics.Testing.AnovaVariationSource.Anova">
            <summary>
              Gets the ANOVA associated with this source.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.AnovaVariationSource.Source">
            <summary>
              Gets the name of the variation source.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.AnovaVariationSource.SumOfSquares">
            <summary>
              Gets the sum of squares associated with the variation source.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.AnovaVariationSource.DegreesOfFreedom">
            <summary>
              Gets the degrees of freedom associated with the variation source.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.AnovaVariationSource.MeanSquares">
            <summary>
              Get the mean squares, or the variance, associated with the source.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.AnovaVariationSource.Significance">
            <summary>
              Gets the significance of the source.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.AnovaVariationSource.Statistic">
            <summary>
              Gets the F-Statistic associated with the source's significance.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.OneWayAnova">
            <summary>
              One-way Analysis of Variance (ANOVA).
            </summary>
            <remarks>
            <para>
              The one-way ANOVA is a way to test for the equality of three or more means at the same
              time by using variances. In its simplest form ANOVA provides a statistical test of whether
              or not the means of several groups are all equal, and therefore generalizes t-test to more 
              than two groups.</para>
            
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Analysis_of_variance">
                  Wikipedia, The Free Encyclopedia. Analysis of variance. </a></description></item>
                <item><description><a href="http://en.wikipedia.org/wiki/F_test">
                  Wikipedia, The Free Encyclopedia. F-Test. </a></description></item>
                <item><description><a href="http://en.wikipedia.org/wiki/One-way_ANOVA">
                  Wikipedia, The Free Encyclopedia. One-way ANOVA. </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <para>
            The following is the same example given in Wikipedia's page for the
            F-Test [1]. Suppose one would like to test the effect of three levels
            of a fertilizer on plant growth. </para>
            
            <para>
            To achieve this goal, an experimenter has divided a set of 18 plants on
            three groups, 6 plants each. Each group has received different levels of
            the fertilizer under question.</para>
            
            <para>
            After some months, the experimenter registers the growth for each plant: </para>
            
            <code>
            double[][] samples =
            {
                new double[] {  6,  8,  4,  5,  3,  4 }, // records for the first group
                new double[] {  8, 12,  9, 11,  6,  8 }, // records for the second group
                new double[] { 13,  9, 11,  8,  7, 12 }, // records for the third group
            };
            </code>
            
            <para>
            Now, he would like to test whether the different fertilizer levels has
            indeed caused any effect in plant growth. In other words, he would like
            to test if the three groups are indeed significantly different.</para>
            
            <code>
            // To do it, he runs an ANOVA test:
            OneWayAnova anova = new OneWayAnova(samples);
            </code>
            
            <para>
            After the Anova object has been created, one can display its findings
            in the form of a standard ANOVA table by binding anova.Table to a 
            DataGridView or any other display object supporting data binding. To
            illustrate, we could use Accord.NET's DataGridBox to inspect the
            table's contents.</para>
            
            <code>
              DataGridBox.Show(anova.Table);
            </code>
            
            <para>Result in:</para>
            
            <img src="../images/one-way-anova.png"/>
            
            <para>
             The p-level for the analysis is about 0.002, meaning the test is
             significant at the 5% significance level. The experimenter would
             thus reject the null hypothesis, concluding there is a strong
             evidence that the three groups are indeed different. Assuming the
             experiment was correctly controlled, this would be an indication
             that the fertilizer does indeed affect plant growth.</para>
            
            <para>
              [1] http://en.wikipedia.org/wiki/F_test </para>
              
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Testing.OneWayAnova.#ctor(System.Double[],System.Int32[])">
            <summary>
              Creates a new one-way ANOVA test.
            </summary>
            
            <param name="samples">The sampled values.</param>
            <param name="labels">The independent, nominal variables.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.OneWayAnova.#ctor(System.Double[][])">
             <summary>
               Creates a new one-way ANOVA test.
             </summary>
             
             <param name="samples">The grouped sampled values.</param>
            
        </member>
        <member name="P:Accord.Statistics.Testing.OneWayAnova.FTest">
            <summary>
              Gets the F-Test produced by this one-way ANOVA.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.OneWayAnova.Table">
            <summary>
              Gets the ANOVA results in the form of a table.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoWayAnovaModel">
            <summary>
              Two-way ANOVA model types.
            </summary>
            <remarks>
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Analysis_of_variance">
                  Wikipedia, The Free Encyclopedia. Analysis of variance. </a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="F:Accord.Statistics.Testing.TwoWayAnovaModel.Fixed">
            <summary>
              Fixed-effects model (Model 1).
            </summary>
            <remarks>
             <para>
              The fixed-effects model of analysis of variance, as known as model 1, applies
              to situations in which the experimenter applies one or more treatments to the
              subjects of the experiment to see if the response variable values change.</para>
             <para>
              This allows the experimenter to estimate the ranges of response variable values
              that the treatment would generate in the population as a whole.</para>  
              
             <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Analysis_of_variance">
                  Wikipedia, The Free Encyclopedia. Analysis of variance. </a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="F:Accord.Statistics.Testing.TwoWayAnovaModel.Random">
            <summary>
              Random-effects model (Model 2).
            </summary>
            <remarks>
             <para>
              Random effects models are used when the treatments are not fixed. This occurs when
              the various factor levels are sampled from a larger population. Because the levels 
              themselves are random variables, some assumptions and the method of contrasting the
              treatments differ from ANOVA model 1.</para>
              
             <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Analysis_of_variance">
                  Wikipedia, The Free Encyclopedia. Analysis of variance. </a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="F:Accord.Statistics.Testing.TwoWayAnovaModel.Mixed">
            <summary>
              Mixed-effects models (Model 3).
            </summary>
            <remarks>
             <para>
              A mixed-effects model contains experimental factors of both fixed and random-effects 
              types, with appropriately different interpretations and analysis for the two types.</para>
              
             <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Analysis_of_variance">
                  Wikipedia, The Free Encyclopedia. Analysis of variance. </a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoWayAnova">
            <summary>
              Two-way Analysis of Variance.
            </summary>
            
            <remarks>
             <para>
              The two-way ANOVA is an extension of the one-way ANOVA for two independent
              variables. There are three classes of models which can also be used in the
              analysis, each of which determining the interpretation of the independent
              variables in the analysis.</para>
            
             <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Analysis_of_variance">
                  Wikipedia, The Free Encyclopedia. Analysis of variance. </a></description></item>
                <item><description><a href="http://www.smi.hst.aau.dk/~cdahl/BiostatPhD/ANOVA.pdf">
                  Carsten Dahl Mørch, ANOVA. Aalborg Universitet. Available on:
                  http://www.smi.hst.aau.dk/~cdahl/BiostatPhD/ANOVA.pdf </a></description></item>
              </list></para>
            </remarks>
            
            <see cref="T:Accord.Statistics.Testing.TwoWayAnovaModel"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoWayAnova.#ctor(System.Double[],System.Int32[],System.Int32[],Accord.Statistics.Testing.TwoWayAnovaModel)">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Testing.TwoWayAnova"/>.
            </summary>
            
            <param name="samples">The samples.</param>
            <param name="firstFactorLabels">The first factor labels.</param>
            <param name="secondFactorLabels">The second factor labels.</param>
            <param name="type">The type of the analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoWayAnova.#ctor(System.Double[][][],Accord.Statistics.Testing.TwoWayAnovaModel)">
            <summary>
              Constructs a new <see cref="T:Accord.Statistics.Testing.TwoWayAnova"/>.
            </summary>
            
            <param name="samples">The samples in grouped form.</param>
            <param name="type">The type of the analysis.</param>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnova.Observations">
            <summary>
              Gets the number of observations in the sample.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnova.FirstFactorSamples">
            <summary>
              Gets the number of samples presenting the first factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnova.SecondFactorSamples">
            <summary>
              Gets the number of samples presenting the second factor.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnova.Replications">
            <summary>
              Gets the number of replications of each factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnova.Sources">
            <summary>
              Gets or sets the variation sources obtained in the analysis.
            </summary>
            <value>The variation sources for the data.</value>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnova.Table">
            <summary>
              Gets the ANOVA results in the form of a table.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnova.ModelType">
            <summary>
              Gets or sets the type of the model.
            </summary>
            <value>The type of the model.</value>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoWayAnovaVariationSources">
            <summary>
              Variation sources associated with two-way ANOVA.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnovaVariationSources.FactorA">
            <summary>
              Gets information about the first factor (A).
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnovaVariationSources.FactorB">
            <summary>
              Gets information about the second factor (B) source.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnovaVariationSources.Interaction">
            <summary>
              Gets information about the interaction factor (AxB) source.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnovaVariationSources.Error">
            <summary>
              Gets information about the error (within-variance) source.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnovaVariationSources.Cells">
            <summary>
              Gets information about the grouped (cells) variance source.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoWayAnovaVariationSources.Total">
            <summary>
              Gets information about the total source of variance.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.StuartMaxwellTest">
            <summary>
              Stuart-Maxwell test of homogeneity for <c>K x K</c> contingency tables.
            </summary>
            
            <remarks>
            <para>
              The Stuart-Maxwell test is a generalization of <see cref="T:Accord.Statistics.Testing.McNemarTest">
              McNemar's test</see> for multiple categories. </para>
              
            <para>
              This is a <see cref="T:Accord.Statistics.Testing.ChiSquareTest">Chi-square kind of test</see>.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Uebersax, John (2006). "McNemar Tests of Marginal Homogeneity".
                  Available on: http://www.john-uebersax.com/stat/mcnemar.htm </description></item>
                <item><description>
                  Sun, Xuezheng; Yang, Zhao (2008). "Generalized McNemar's Test for Homogeneity of the Marginal
                  Distributions". Available on: http://www2.sas.com/proceedings/forum2008/382-2008.pdf  </description></item>
               </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Testing.ChiSquareTest"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.StuartMaxwellTest.#ctor(Accord.Statistics.Analysis.GeneralConfusionMatrix)">
            <summary>
              Creates a new Stuart-Maxwell test.
            </summary>
            
            <param name="matrix">The contingency table to test.</param>
            
        </member>
        <member name="P:Accord.Statistics.Testing.StuartMaxwellTest.Delta">
            <summary>
              Gets the delta vector <c>d</c> used
              in the test calculations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.StuartMaxwellTest.Covariance">
            <summary>
              Gets the covariance matrix <c>S</c>
              used in the test calculations.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.StuartMaxwellTest.Precision">
            <summary>
              Gets the inverse covariance matrix
              <c>S^-1</c> used in the calculations.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.Power.TTestPowerAnalysis">
            <summary>
              Power analysis for one-sample T-Tests.
            </summary>
            
            <example>
            <code>
            // When creating a power analysis, we have three things we can
            // change. We can always freely configure two of those things
            // and then ask the analysis to give us the third.
            
            var analysis = new TTestPowerAnalysis(OneSampleHypothesis.ValueIsDifferentFromHypothesis);
            
            // Those are:
            double e = analysis.Effect;   // the test's minimum detectable effect size
            double n = analysis.Samples;  // the number of samples in the test
            double p = analysis.Power;    // the probability of committing a type-2 error
            
            // Let's set the desired effect size and the 
            // number of samples so we can get the power
            
            analysis.Effect = 0.2; // we would like to detect at least 0.2 std. dev. apart
            analysis.Samples = 60; // we would like to use at most 60 samples
            analysis.ComputePower(); // what will be the power of this test?
            
            double power = analysis.Power; // The power is going to be 0.33 (or 33%)
            
            // Let's set the desired power and the number 
            // of samples so we can get the effect size
            
            analysis.Power = 0.8;  // we would like to create a test with 80% power
            analysis.Samples = 60; // we would like to use at most 60 samples
            analysis.ComputeEffect(); // what would be the minimum effect size we can detect?
            
            double effect = analysis.Effect; // The effect will be 0.36 standard deviations.
            
            // Let's set the desired power and the effect
            // size so we can get the number of samples
            
            analysis.Power = 0.8;  // we would like to create a test with 80% power
            analysis.Effect = 0.2; // we would like to detect at least 0.2 std. dev. apart
            analysis.ComputeSamples(); 
            
            double samples = analysis.Samples; // We would need around 199 samples.
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Testing.TTest"/>
            <seealso cref="T:Accord.Statistics.Testing.Power.TwoSampleTTestPowerAnalysis"/>
            <seealso cref="T:Accord.Statistics.Testing.Power.ZTestPowerAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TTestPowerAnalysis.#ctor(Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Testing.Power.TTestPowerAnalysis"/>.
            </summary>
            
            <param name="hypothesis">The hypothesis tested.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TTestPowerAnalysis.#ctor(Accord.Statistics.Testing.TwoSampleTTest)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Testing.Power.TTestPowerAnalysis"/>.
            </summary>
            
            <param name="test">The test to create the analysis for.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TTestPowerAnalysis.ComputePower">
            <summary>
             Computes the power for a test with givens values of
             <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Effect">effect size</see> and <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Samples">
             number of samples</see> under <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Size"/>.
            </summary>
            
            <returns>
             The power for the test under the given conditions.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TTestPowerAnalysis.GetSampleSize(System.Double,System.Double,System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Estimates the number of samples necessary to attain the
              required power level for the given effect size.
            </summary>
            
            <param name="delta">The minimum detectable difference.</param>
            <param name="standardDeviation">The difference standard deviation.</param>
            <param name="power">The desired power level. Default is 0.8.</param>
            <param name="alpha">The desired significance level. Default is 0.05.</param>
            <param name="hypothesis">The alternative hypothesis (research hypothesis) to be tested.</param>
            
            <returns>The required number of samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.TTestPowerAnalysis.GetEffectSize(System.Int32,System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Estimates the number of samples necessary to attain the
              required power level for the given effect size.
            </summary>
            
            <param name="sampleSize">The number of observations in the sample.</param>
            <param name="power">The desired power level. Default is 0.8.</param>
            <param name="alpha">The desired significance level. Default is 0.05.</param>
            <param name="hypothesis">The alternative hypothesis (research hypothesis) to be tested.</param>
            
            <returns>The required number of samples.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Testing.Power.ZTestPowerAnalysis">
            <summary>
              Power analysis for one-sample Z-Tests.
            </summary>
            
            <example>
            // When creating a power analysis, we have three things we can
            // change. We can always freely configure two of those things
            // and then ask the analysis to give us the third.
            
            var analysis = new ZTestPowerAnalysis(OneSampleHypothesis.ValueIsDifferentFromHypothesis);
            
            // Those are:
            double e = analysis.Effect;   // the test's minimum detectable effect size
            double n = analysis.Samples;  // the number of samples in the test
            double p = analysis.Power;    // the probability of committing a type-2 error
            
            // Let's set the desired effect size and the 
            // number of samples so we can get the power
            
            analysis.Effect = 0.2; // we would like to detect at least 0.2 std. dev. apart
            analysis.Samples = 60; // we would like to use at most 60 samples
            analysis.ComputePower(); // what will be the power of this test?
            
            double power = analysis.Power; // The power is going to be 0.34 (or 34%)
            
            // Let's set the desired power and the number 
            // of samples so we can get the effect size
            
            analysis.Power = 0.8;  // we would like to create a test with 80% power
            analysis.Samples = 60; // we would like to use at most 60 samples
            analysis.ComputeEffect(); // what would be the minimum effect size we can detect?
            
            double effect = analysis.Effect; // The effect will be 0.36 standard deviations.
            
            // Let's set the desired power and the effect
            // size so we can get the number of samples
            
            analysis.Power = 0.8;  // we would like to create a test with 80% power
            analysis.Effect = 0.2; // we would like to detect at least 0.2 std. dev. apart
            analysis.ComputeSamples();
            
            double samples = analysis.Samples; // We would need around 197 samples.
            </example>
            
            <seealso cref="T:Accord.Statistics.Testing.ZTest"/>
            <seealso cref="T:Accord.Statistics.Testing.Power.TwoSampleZTestPowerAnalysis"/>
            <seealso cref="T:Accord.Statistics.Testing.Power.TTestPowerAnalysis"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.ZTestPowerAnalysis.#ctor(Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Testing.Power.ZTestPowerAnalysis"/>.
            </summary>
            
            <param name="hypothesis">The hypothesis tested.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.ZTestPowerAnalysis.#ctor(Accord.Statistics.Testing.TwoSampleZTest)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Testing.Power.ZTestPowerAnalysis"/>.
            </summary>
            
            <param name="test">The test to create the analysis for.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.ZTestPowerAnalysis.ComputePower">
            <summary>
             Computes the power for a test with givens values of
             <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Effect">effect size</see> and <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Samples">
             number of samples</see> under <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Size"/>.
            </summary>
            
            <returns>
             The power for the test under the given conditions.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.ZTestPowerAnalysis.ComputeSamples">
            <summary>
              Gets the recommended sample size for the test to attain
              the power indicating in <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Power"/> considering
              values of <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Effect"/> and <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Size"/>.
            </summary>
            
            <returns>
              Recommended sample size for attaining the given
              <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Power"/> for size effect <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Effect"/>
              under the given <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Size"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.ZTestPowerAnalysis.ComputeEffect">
            <summary>
              Computes the minimum detectable effect size for the test
              considering the power given in <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Power"/>, the
              number of samples in <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Samples"/> and the significance
              level <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Size"/>.
            </summary>
            
            <returns>
              The minimum detectable <see cref="P:Accord.Statistics.Testing.Power.IPowerAnalysis.Effect">effect
              size</see> for the test under the given conditions.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.ZTestPowerAnalysis.GetSampleSize(System.Double,System.Double,System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Estimates the number of samples necessary to attain the
              required power level for the given effect size.
            </summary>
            
            <param name="delta">The minimum detectable difference.</param>
            <param name="standardDeviation">The difference standard deviation.</param>
            <param name="power">The desired power level. Default is 0.8.</param>
            <param name="alpha">The desired significance level. Default is 0.05.</param>
            <param name="hypothesis">The alternative hypothesis (research hypothesis) to be tested.</param>
            
            <returns>The required number of samples.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.Power.ZTestPowerAnalysis.GetEffectSize(System.Int32,System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Estimates the number of samples necessary to attain the
              required power level for the given effect size.
            </summary>
            
            <param name="sampleSize">The number of observations in the sample.</param>
            <param name="power">The desired power level. Default is 0.8.</param>
            <param name="alpha">The desired significance level. Default is 0.05.</param>
            <param name="hypothesis">The alternative hypothesis (research hypothesis) to be tested.</param>
            
            <returns>The required number of samples.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Testing.SignTest">
             <summary>
               Sign test for the median.
             </summary>
             
             <remarks>
             <para>
               In statistics, the sign test can be used to test the hypothesis that the difference
               median is zero between the continuous distributions of two random variables X and Y,
               in the situation when we can draw paired samples from X and Y. It is a non-parametric
               test which makes very few assumptions about the nature of the distributions under test
               - this means that it has very general applicability but may lack the <see cref="N:Accord.Statistics.Testing.Power">
               statistical power</see> of other tests such as the <see cref="T:Accord.Statistics.Testing.PairedTTest">paired-samples
               t-test</see> or the <see cref="T:Accord.Statistics.Testing.WilcoxonSignedRankTest">Wilcoxon signed-rank test</see>.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Wikipedia, The Free Encyclopedia. Sign test. Available on:
                   http://en.wikipedia.org/wiki/Sign_test </description></item>
               </list></para>
             </remarks>
             
             <example>
             <code>
             // This example has been adapted from the Wikipedia's page about
             // the Z-Test, available from: http://en.wikipedia.org/wiki/Z-test
             
             // We would like to check whether a sample of 20
             // students with a median score of 96 points ...
             
             double[] sample = 
             { 
                 106, 115, 96, 88, 91, 88, 81, 104, 99, 68,
                 104, 100, 77, 98, 96, 104, 82, 94, 72, 96
             };
            
             // ... could have happened just by chance inside a 
             // population with an hypothesized median of 100 points.
             
             double hypothesizedMedian = 100;
             
             // So we start by creating the test:
             SignTest test = new SignTest(sample, hypothesizedMedian,
                             OneSampleHypothesis.ValueIsSmallerThanHypothesis);
             
             // Now, we can check whether this result would be
             // unlikely under a standard significance level:
             
             bool significant = test.Significant; // false (so the event was likely)
             
             // We can also check the test statistic and its P-Value
             double statistic = test.Statistic; // 5
             double pvalue = test.PValue; // 0.99039
             </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Testing.WilcoxonSignedRankTest"/>
             
             <seealso cref="T:Accord.Statistics.Testing.BinomialTest"/>
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.BinomialDistribution"/>
             
        </member>
        <member name="T:Accord.Statistics.Testing.BinomialTest">
            <summary>
              Binomial test.
            </summary>
            
            <remarks>
            <para>
              In statistics, the binomial test is an exact test of the statistical significance
              of deviations from a theoretically expected distribution of observations into two
              categories. The most common use of the binomial test is in the case where the null
              hypothesis is that two categories are equally likely to occur (such as a coin toss).</para>
            <para>
              When there are more than two categories, and an exact test is required, the
              <see cref="T:Accord.Statistics.Testing.MultinomialTest"> multinomial test</see>, based on the multinomial
              distribution, must be used instead of the binomial test.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Binomial_test">
                   Wikipedia, The Free Encyclopedia. Binomial-Test. Available from:
                   http://en.wikipedia.org/wiki/Binomial_test </a></description></item>
              </list></para>
            </remarks>
            
            <example>
              <para>
                This is the second example from Wikipedia's page on hypothesis testing. In this example, 
                a person is tested for clairvoyance (ability of gaining information about something through
                extra sensory perception; detecting something without using the known human senses.</para>
                
            <code>
            // A person is shown the reverse of a playing card 25 times and is
            // asked which of the four suits the card belongs to. Every time
            // the person correctly guesses the suit of the card, we count this
            // result as a correct answer. Let's suppose the person obtained 13
            // correctly answers out of the 25 cards.
            
            // Since each suit appears 1/4 of the time in the card deck, we 
            // would assume the probability of producing a correct answer by
            // chance alone would be of 1/4.
            
            // And finally, we must consider we are interested in which the
            // subject performs better than what would expected by chance. 
            // In other words, that the person's probability of predicting
            // a card is higher than the chance hypothesized value of 1/4.
            
            BinomialTest test = new BinomialTest(
                successes: 13, trials: 25,
                hypothesizedProbability: 1.0 / 4.0,
                alternate: OneSampleHypothesis.ValueIsGreaterThanHypothesis);
            
            Console.WriteLine("Test p-Value: " + test.PValue);     // ~ 0.003
            Console.WriteLine("Significant? " + test.Significant); // True.
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.BinomialDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.BinomialTest.#ctor(System.Boolean[],System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Tests the probability of two outcomes in a series of experiments.
            </summary>
            
            <param name="trials">The experimental trials.</param>
            <param name="hypothesizedProbability">The hypothesized occurrence probability.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.BinomialTest.#ctor(System.Int32,System.Int32,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Tests the probability of two outcomes in a series of experiments.
            </summary>
            
            <param name="successes">The number of successes in the trials.</param>
            <param name="trials">The total number of experimental trials.</param>
            <param name="hypothesizedProbability">The hypothesized occurrence probability.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.BinomialTest.#ctor">
            <summary>
              Creates a Binomial test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.BinomialTest.Compute(System.Double,System.Int32,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Computes the Binomial test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.BinomialTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.BinomialTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.BinomialTest.wilsonSterne(System.Double)">
            <summary>
              Computes the two-tail probability using the Wilson-Sterne rule,
              which defines the tail of the distribution based on a ordering
              of the null probabilities of X. (Smirnoff, 2003)
            </summary>
            
            <remarks>
              References: Jeffrey S. Simonoff, Analyzing 
              Categorical Data, Springer, 2003 (pg 64).
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Testing.BinomialTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis can be rejected
              in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.SignTest.#ctor(System.Int32,System.Int32,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Tests the null hypothesis that the sample median is equal to a hypothesized value.
            </summary>
            
            <param name="positiveSamples">The number of positive samples.</param>
            <param name="totalSamples">The total number of samples.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.SignTest.#ctor(System.Double[],System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Tests the null hypothesis that the sample median is equal to a hypothesized value.
            </summary>
            
            <param name="sample">The data samples from which the test will be performed.</param>
            <param name="hypothesizedMedian">The constant to be compared with the samples.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.SignTest.Compute(System.Int32,System.Int32,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Computes the one sample sign test.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.SignTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis
              can be rejected in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.WilcoxonSignedRankTest">
            <summary>
              Wilcoxon signed-rank test for the median.
            </summary>
            
            <remarks>
            <para>
              The Wilcoxon signed-rank test is a non-parametric statistical hypothesis test
              used when comparing two related samples, matched samples, or repeated measurements 
              on a single sample to assess whether their population mean ranks differ (i.e. it is
              a paired difference test). It can be used as an alternative to the paired <see cref="T:Accord.Statistics.Testing.TTest">
              Student's t-test</see>, <see cref="T:Accord.Statistics.Testing.PairedTTest">t-test for matched pairs</see>, or the t-test
              for dependent samples when the population cannot be assumed to be normally distributed.</para>
              
            <para>
              The Wilcoxon signed-rank test is not the same as the <see cref="T:Accord.Statistics.Testing.WilcoxonTest">Wilcoxon rank-sum
              test</see>, although both are nonparametric and involve summation of ranks.</para>
              
            <para>
              This test uses the positive W statistic, as explained in 
              https://onlinecourses.science.psu.edu/stat414/node/319 </para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia, The Free Encyclopedia. Wilcoxon signed-rank test. Available on:
                  http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test </description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
            // This example has been adapted from the Wikipedia's page about
            // the Z-Test, available from: http://en.wikipedia.org/wiki/Z-test
            
            // We would like to check whether a sample of 20
            // students with a median score of 96 points ...
            
            double[] sample = 
            { 
                106, 115, 96, 88, 91, 88, 81, 104, 99, 68,
                104, 100, 77, 98, 96, 104, 82, 94, 72, 96
            };
            
            // ... could have happened just by chance inside a 
            // population with an hypothesized median of 100 points.
            
            double hypothesizedMedian = 100;
            
            // So we start by creating the test:
            WilcoxonSignedRankTest test = new WilcoxonSignedRankTest(sample,
              hypothesizedMedian, OneSampleHypothesis.ValueIsSmallerThanHypothesis);
            
            // Now, we can check whether this result would be
            // unlikely under a standard significance level:
            
            bool significant = test.Significant; // false (so the event was likely)
            
            // We can also check the test statistic and its P-Value
            double statistic = test.Statistic; // 40.0
            double pvalue = test.PValue; // 0.98585347446367344
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Testing.TTest"/>
            
            <seealso cref="T:Accord.Statistics.Testing.SignTest"/>
            <seealso cref="T:Accord.Statistics.Testing.WilcoxonTest"/>
            <seealso cref="T:Accord.Statistics.Testing.TwoSampleWilcoxonSignedRankTest"/>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.WilcoxonSignedRankTest.#ctor(System.Double[],System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Tests the null hypothesis that the sample median is equal to a hypothesized value.
            </summary>
            
            <param name="sample">The data samples from which the test will be performed.</param>
            <param name="hypothesizedMedian">The constant to be compared with the samples.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="P:Accord.Statistics.Testing.WilcoxonSignedRankTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis can be rejected
              in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoSampleSignTest">
            <summary>
              Sign test for two paired samples.
            </summary>
            
            <remarks>
            <para>
              This is a <see cref="T:Accord.Statistics.Testing.BinomialTest">Binomial kind of test</see>.</para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Testing.SignTest"/>
            <seealso cref="T:Accord.Statistics.Testing.BinomialTest"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.BinomialDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleSignTest.#ctor(System.Int32,System.Int32,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new sign test for two samples.
            </summary>
            
            <param name="positiveSamples">The number of positive samples (successes).</param>
            <param name="totalSamples">The total number of samples (trials).</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleSignTest.#ctor(System.Double[],System.Double[],Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Creates a new sign test for two samples.
            </summary>
            
            <param name="sample1">The first sample of observations.</param>
            <param name="sample2">The second sample of observations.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleSignTest.Compute(System.Int32,System.Int32,Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Computes the two sample sign test.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleSignTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis
              can be rejected in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoSampleWilcoxonSignedRankTest">
            <summary>
              Wilcoxon signed-rank test for paired samples.
            </summary>
            
            <seealso cref="T:Accord.Statistics.Testing.WilcoxonSignedRankTest"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.WilcoxonDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleWilcoxonSignedRankTest.#ctor(System.Double[],System.Double[],Accord.Statistics.Testing.TwoSampleHypothesis)">
            <summary>
              Tests whether the medians of two paired samples are different.
            </summary>
            
            <param name="sample1">The first sample.</param>
            <param name="sample2">The second sample.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleWilcoxonSignedRankTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis can be rejected
              in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TTest">
             <summary>
               One-sample Student's T test.
             </summary>
             
             <remarks>
              <para>
               The one-sample t-test assesses whether the mean of a sample is
               statistically different from a hypothesized value.</para>
               
             <para>
               This test supports creating <see cref="T:Accord.Statistics.Testing.Power.TTestPowerAnalysis">power analyses</see>
               through its <see cref="P:Accord.Statistics.Testing.TTest.Analysis"/> property.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description><a href="http://en.wikipedia.org/wiki/Student's_t-test">
                   Wikipedia, The Free Encyclopedia. Student's T-Test. </a></description></item>
                 <item><description><a href="http://www.le.ac.uk/bl/gat/virtualfc/Stats/ttest.html">
                   William M.K. Trochim. The T-Test. Research methods Knowledge Base, 2009. 
                   Available on: http://www.le.ac.uk/bl/gat/virtualfc/Stats/ttest.html </a></description></item>
                 <item><description><a href="http://en.wikipedia.org/wiki/One-way_ANOVA">
                   Graeme D. Ruxton. The unequal variance t-test is an underused alternative to Student's
                   t-test and the Mann–Whitney U test. Oxford Journals, Behavioral Ecology Volume 17, Issue 4, pp.
                   688-690. 2006. Available on: http://beheco.oxfordjournals.org/content/17/4/688.full </a></description></item>
               </list></para>
             </remarks>
             
             <example>
               <code>
               // Consider a sample generated from a Gaussian
               // distribution with mean 0.5 and unit variance.
               
               double[] sample = 
               { 
                   -0.849886940156521,	3.53492346633185,  1.22540422494611, 0.436945126810344, 1.21474290382610,
                    0.295033941700225, 0.375855651783688, 1.98969760778547, 1.90903448980048,	1.91719241342961
               };
            
               // One may rise the hypothesis that the mean of the sample is not
               // significantly different from zero. In other words, the fact that
               // this particular sample has mean 0.5 may be attributed to chance.
            
               double hypothesizedMean = 0;
            
               // Create a T-Test to check this hypothesis
               TTest test = new TTest(sample, hypothesizedMean,
                      OneSampleHypothesis.ValueIsDifferentFromHypothesis);
            
               // Check if the mean is significantly different
               test.Significant should be true
            
               // Now, we would like to test if the sample mean is
               // significantly greater than the hypothesized zero.
            
               // Create a T-Test to check this hypothesis
               TTest greater = new TTest(sample, hypothesizedMean,
                      OneSampleHypothesis.ValueIsGreaterThanHypothesis);
            
               // Check if the mean is significantly larger
               greater.Significant should be true
            
               // Now, we would like to test if the sample mean is
               // significantly smaller than the hypothesized zero.
            
               // Create a T-Test to check this hypothesis
               TTest smaller = new TTest(sample, hypothesizedMean,
                      OneSampleHypothesis.ValueIsSmallerThanHypothesis);
            
               // Check if the mean is significantly smaller
               smaller.Significant should be false
               </code>
             </example>
             
             <seealso cref="T:Accord.Statistics.Testing.ZTest"/>
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
             <seealso cref="T:Accord.Statistics.Testing.TwoSampleTTest"/>
             <seealso cref="T:Accord.Statistics.Testing.TwoSampleZTest"/>
             <seealso cref="T:Accord.Statistics.Testing.PairedTTest"/>
             
             <seealso cref="T:Accord.Statistics.Distributions.Univariate.TDistribution"/>
             
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.GetConfidenceInterval(System.Double)">
            <summary>
              Gets a confidence interval for the estimated value
              within the given confidence level percentage.
            </summary>
            
            <param name="percent">The confidence level. Default is 0.95.</param>
            
            <returns>A confidence interval for the estimated value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.#ctor(System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Tests the null hypothesis that the population mean is equal to a specified value.
            </summary>
            
            <param name="statistic">The test statistic.</param>
            <param name="degreesOfFreedom">The degrees of freedom for the test distribution.</param>
            <param name="hypothesis">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.#ctor(System.Double,System.Double,System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Tests the null hypothesis that the population mean is equal to a specified value.
            </summary>
            
            <param name="estimatedValue">The estimated value (θ).</param>
            <param name="standardError">The standard error of the estimation (SE).</param>
            <param name="hypothesizedValue">The hypothesized value (θ').</param>
            <param name="degreesOfFreedom">The degrees of freedom for the test distribution.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.#ctor(System.Double[],System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Tests the null hypothesis that the population mean is equal to a specified value.
            </summary>
            
            <param name="sample">The data samples from which the test will be performed.</param>
            <param name="hypothesizedMean">The constant to be compared with the samples.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.#ctor">
            <summary>
              Creates a T-Test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.#ctor(System.Double,System.Double,System.Int32,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Tests the null hypothesis that the population mean is equal to a specified value.
            </summary>
            
            <param name="mean">The sample's mean value.</param>
            <param name="stdDev">The standard deviation for the samples.</param>
            <param name="samples">The number of observations in the sample.</param>
            <param name="hypothesizedMean">The constant to be compared with the samples.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.Compute(System.Int32,System.Double,System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Computes the T-Test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.Compute(System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Computes the T-test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.Compute(System.Double,System.Double,System.Double,System.Double,Accord.Statistics.Testing.OneSampleHypothesis)">
            <summary>
              Computes the T-test.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.OnSizeChanged">
            <summary>Update event.</summary>
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.StatisticToPValue(System.Double,Accord.Statistics.Distributions.Univariate.TDistribution,Accord.Statistics.Testing.DistributionTail)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="t">The value of the test statistic.</param>
            <param name="type">The tail of the test distribution.</param>
            <param name="distribution">The test distribution.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TTest.PValueToStatistic(System.Double,Accord.Statistics.Distributions.Univariate.TDistribution,Accord.Statistics.Testing.DistributionTail)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            <param name="type">The tail of the test distribution.</param>
            <param name="distribution">The test distribution.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TTest.Analysis">
            <summary>
              Gets the power analysis for the test, if available.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TTest.StandardError">
            <summary>
              Gets the standard error of the estimated value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TTest.EstimatedValue">
            <summary>
              Gets the estimated parameter value, such as the sample's mean value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TTest.HypothesizedValue">
            <summary>
              Gets the hypothesized parameter value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TTest.Confidence">
            <summary>
              Gets the 95% confidence interval for the <see cref="P:Accord.Statistics.Testing.TTest.EstimatedValue"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis can be rejected
              in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTest">
            <summary>
              Two-sample Kolmogorov-Smirnov (KS) test.
            </summary>
            
            <remarks>
            <para>
              The Kolmogorov-Smirnov test tries to determine if two samples have been 
              drawn from the same probability distribution. The Kolmogorov-Smirnov test
              has an interesting advantage in which it does not requires any assumptions
              about the data. The distribution of the K-S test statistic does not depend
              on which distribution is being tested.</para>
            <para>
              The K-S test has also the advantage of being an exact test (other tests, such as the
              chi-square goodness-of-fit test depends on an adequate sample size). One disadvantage
              is that it requires a fully defined distribution which should not have been estimated
              from the data. If the parameters of the theoretical distribution have been estimated
              from the data, the critical region of the K-S test will be no longer valid.</para>
            <para>
              The two-sample KS test is one of the most useful and general nonparametric methods for
              comparing two samples, as it is sensitive to differences in both location and shape of
              the empirical cumulative distribution functions of the two samples.</para>
            <para>
              This class uses an efficient and high-accuracy algorithm based on work by Richard
              Simard (2010). Please see <see cref="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution"/> for more details.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test">
                  Wikipedia, The Free Encyclopedia. Kolmogorov-Smirnov Test. 
                  Available at: http://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test </a></description></item>
                <item><description><a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm">
                  NIST/SEMATECH e-Handbook of Statistical Methods. Kolmogorov-Smirnov Goodness-of-Fit Test.
                  Available at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm </a></description></item>
                <item><description><a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/ksdist.pdf">
                  Richard Simard, Pierre L’Ecuyer. Computing the Two-Sided Kolmogorov-Smirnov Distribution.
                  Journal of Statistical Software. Volume VV, Issue II. Available at:
                  http://www.iro.umontreal.ca/~lecuyer/myftp/papers/ksdist.pdf </a></description></item>
                <item><description><a href="http://www.physics.csbsju.edu/stats/">
                  Kirkman, T.W. (1996) Statistics to Use. Available at:
                  http://www.physics.csbsju.edu/stats/ </a></description></item>
              </list></para>
            </remarks>
            
            <example>
            <para>
              In the following example, we will be creating a K-S test to verify
              if two samples have been drawn from different populations. In this
              example, we will first generate a number of samples from two different
              distributions and then check if the K-S can indeed see the difference
              between them:</para>
            <code>
            // Generate 15 points from a Normal distribution with mean 5 and sigma 2
            double[] sample1 = new NormalDistribution(mean: 5, stdDev: 1).Generate(25);
            
            // Generate 15 points from an uniform distribution from 0 to 10
            double[] sample2 = new UniformContinuousDistribution(a: 0, b: 10).Generate(25);
            
            // Now we can create a K-S test and test the unequal hypothesis:
            var test = new TwoSampleKolmogorovSmirnovTest(sample1, sample2,
                TwoSampleKolmogorovSmirnovTestHypothesis.SamplesDistributionsAreUnequal);
            
            bool significant = test.Significant; // outputs true
            </code>
            
            <para>
              The following example comes from the stats page of the College of Saint Benedict and Saint John's
              University (Kirkman, 1996). It is a very interesting example as it shows a case in which a t-test
              fails to see a difference between the samples because of the non-normality of the sample's
              distributions. The Kolmogorov-Smirnov nonparametric test, on the other hand, succeeds.</para>
            <para>
              The example deals with the preference of bees between two nearby blooming trees in an empty field.
              The experimenter has collected data measuring how much time does a bee spent near a particular
              tree. The time starts to be measured when a bee first touches the tree, and is stopped when the bee
              moves more than 1 meter far from it. The samples below represents the measured time, in seconds, of
              the observed bees for each of the trees.</para>
              
            <code>
            double[] redwell = 
            {
                23.4, 30.9, 18.8, 23.0, 21.4, 1, 24.6, 23.8, 24.1, 18.7, 16.3, 20.3,
                14.9, 35.4, 21.6, 21.2, 21.0, 15.0, 15.6, 24.0, 34.6, 40.9, 30.7, 
                24.5, 16.6, 1, 21.7, 1, 23.6, 1, 25.7, 19.3, 46.9, 23.3, 21.8, 33.3, 
                24.9, 24.4, 1, 19.8, 17.2, 21.5, 25.5, 23.3, 18.6, 22.0, 29.8, 33.3,
                1, 21.3, 18.6, 26.8, 19.4, 21.1, 21.2, 20.5, 19.8, 26.3, 39.3, 21.4, 
                22.6, 1, 35.3, 7.0, 19.3, 21.3, 10.1, 20.2, 1, 36.2, 16.7, 21.1, 39.1,
                19.9, 32.1, 23.1, 21.8, 30.4, 19.62, 15.5 
            };
            
            double[] whitney = 
            {
                16.5, 1, 22.6, 25.3, 23.7, 1, 23.3, 23.9, 16.2, 23.0, 21.6, 10.8, 12.2,
                23.6, 10.1, 24.4, 16.4, 11.7, 17.7, 34.3, 24.3, 18.7, 27.5, 25.8, 22.5,
                14.2, 21.7, 1, 31.2, 13.8, 29.7, 23.1, 26.1, 25.1, 23.4, 21.7, 24.4, 13.2,
                22.1, 26.7, 22.7, 1, 18.2, 28.7, 29.1, 27.4, 22.3, 13.2, 22.5, 25.0, 1,
                6.6, 23.7, 23.5, 17.3, 24.6, 27.8, 29.7, 25.3, 19.9, 18.2, 26.2, 20.4,
                23.3, 26.7, 26.0, 1, 25.1, 33.1, 35.0, 25.3, 23.6, 23.2, 20.2, 24.7, 22.6,
                39.1, 26.5, 22.7
            };
            
            // Create a t-test as a first attempt.
            var t = new TwoSampleTTest(redwell, whitney);
            
            Console.WriteLine("T-Test");
            Console.WriteLine("Test p-value: " + t.PValue);    // ~0.837
            Console.WriteLine("Significant? " + t.Significant); // false
            
            // Create a non-parametric Kolmogorov-Smirnov test
            var ks = new TwoSampleKolmogorovSmirnovTest(redwell, whitney);
            
            Console.WriteLine("KS-Test");
            Console.WriteLine("Test p-value: " + ks.PValue);    // ~0.038
            Console.WriteLine("Significant? " + ks.Significant); // true
            </code>
            </example>
            
            <seealso cref="T:Accord.Statistics.Testing.KolmogorovSmirnovTest"/>
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.KolmogorovSmirnovDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTest.#ctor(System.Double[],System.Double[])">
            <summary>
              Creates a new Two-Sample Kolmogorov test.
            </summary>
            
            <param name="sample1">The first sample.</param>
            <param name="sample2">The second sample.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTest.#ctor(System.Double[],System.Double[],Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTestHypothesis)">
            <summary>
              Creates a new Two-Sample Kolmogorov test.
            </summary>
            
            <param name="sample1">The first sample.</param>
            <param name="sample2">The second sample.</param>
            <param name="alternate">The alternative hypothesis (research hypothesis) to test.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTest.PValueToStatistic(System.Double)">
            <summary>
              Converts a given p-value to a test statistic.
            </summary>
            
            <param name="p">The p-value.</param>
            
            <returns>The test statistic which would generate the given p-value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTest.StatisticToPValue(System.Double)">
            <summary>
              Converts a given test statistic to a p-value.
            </summary>
            
            <param name="x">The value of the test statistic.</param>
            
            <returns>The p-value for the given statistic.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTest.Hypothesis">
            <summary>
              Gets the alternative hypothesis under test. If the test is
              <see cref="P:Accord.Statistics.Testing.IHypothesisTest.Significant"/>, the null hypothesis can be rejected
              in favor of this alternative hypothesis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTest.EmpiricalDistribution1">
            <summary>
              Gets the first empirical distribution being tested.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTest.EmpiricalDistribution2">
            <summary>
              Gets the second empirical distribution being tested.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.WaldTest">
            <summary>
              Wald's Test using the Normal distribution.
            </summary>
            
            <remarks>
             <para>
              The Wald test is a parametric statistical test named after Abraham Wald
              with a great variety of uses. Whenever a relationship within or between
              data items can be expressed as a statistical model with parameters to be
              estimated from a sample, the Wald test can be used to test the true value
              of the parameter based on the sample estimate.</para>
              
            <para>
              Under the Wald statistical test, the maximum likelihood estimate of the
              parameter(s) of interest θ is compared with the proposed value θ', with
              the assumption that the difference between the two will be approximately
              normal.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Wald_test">
                   Wikipedia, The Free Encyclopedia. Wald Test. Available on:
                   http://en.wikipedia.org/wiki/Wald_test </a></description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Testing.ZTest"/>
            
            <seealso cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution"/>
            
        </member>
        <member name="M:Accord.Statistics.Testing.WaldTest.#ctor(System.Double)">
            <summary>
              Constructs a Wald's test.
            </summary>
            
            <param name="statistic">The test statistic, as given by (θ-θ')/SE.</param>
            
        </member>
        <member name="M:Accord.Statistics.Testing.WaldTest.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Constructs a Wald's test.
            </summary>
            
            <param name="estimatedValue">The estimated value (θ).</param>
            <param name="hypothesizedValue">The hypothesized value (θ').</param>
            <param name="standardError">The standard error of the estimation (SE).</param>
            
        </member>
        <member name="T:Accord.Statistics.Testing.DistributionTail">
            <summary>
              Hypothesis type
            </summary>
            
            <remarks>
              The type of the hypothesis being made expresses the way in
              which a value of a parameter may deviate from that assumed
              in the null hypothesis. It can either state that a value is
              higher, lower or simply different than the one assumed under
              the null hypothesis.
            </remarks>
            
        </member>
        <member name="F:Accord.Statistics.Testing.DistributionTail.TwoTail">
            <summary>
              The test considers the two tails from a probability distribution.
            </summary>
            
            <remarks>
              The two-tailed test is a statistical test in which a given statistical
              hypothesis, H0 (the null hypothesis), will be rejected when the value of
              the test statistic is either sufficiently small or sufficiently large. 
            </remarks>
            
        </member>
        <member name="F:Accord.Statistics.Testing.DistributionTail.OneUpper">
            <summary>
              The test considers the upper tail from a probability distribution.
            </summary>
            
            <remarks>
              The one-tailed, upper tail test is a statistical test in which a given
              statistical hypothesis, H0 (the null hypothesis), will be rejected when
              the value of the test statistic is sufficiently large. 
            </remarks>
            
        </member>
        <member name="F:Accord.Statistics.Testing.DistributionTail.OneLower">
            <summary>
              The test considers the lower tail from a probability distribution.
            </summary>
            
            <remarks>
              The one-tailed, lower tail test is a statistical test in which a given
              statistical hypothesis, H0 (the null hypothesis), will be rejected when
              the value of the test statistic is sufficiently small. 
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Testing.OneSampleHypothesis">
            <summary>
              Common test Hypothesis for one sample tests, such
              as <see cref="T:Accord.Statistics.Testing.ZTest"/> and <see cref="T:Accord.Statistics.Testing.TTest"/>.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.OneSampleHypothesis.ValueIsDifferentFromHypothesis">
            <summary>
              Tests if the mean (or the parameter under test)
              is significantly different from the hypothesized
              value, without considering the direction for this
              difference.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.OneSampleHypothesis.ValueIsGreaterThanHypothesis">
            <summary>
              Tests if the mean (or the parameter under test)
              is significantly greater (larger, bigger) than
              the hypothesized value.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.OneSampleHypothesis.ValueIsSmallerThanHypothesis">
            <summary>
              Tests if the mean (or the parameter under test)
              is significantly smaller (lesser) than the
              hypothesized value.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoSampleHypothesis">
            <summary>
              Common test Hypothesis for two sample tests, such as
              <see cref="T:Accord.Statistics.Testing.TwoSampleZTest"/> and <see cref="T:Accord.Statistics.Testing.TwoSampleTTest"/>.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.TwoSampleHypothesis.ValuesAreDifferent">
            <summary>
              Tests if the mean (or the parameter under test) of
              the first sample is different from the mean of the 
              second sample, without considering any particular
              direction for the difference.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.TwoSampleHypothesis.FirstValueIsGreaterThanSecond">
            <summary>
              Tests if the mean (or the parameter under test) of
              the first sample is greater (larger, bigger) than
              the mean of the second sample.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.TwoSampleHypothesis.FirstValueIsSmallerThanSecond">
            <summary>
              Tests if the mean (or the parameter under test) of
              the first sample is smaller (lesser) than the mean 
              of the second sample.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.KolmogorovSmirnovTestHypothesis">
            <summary>
              Hypothesis for the one-sample Kolmogorov-Smirnov test.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.KolmogorovSmirnovTestHypothesis.SampleIsDifferent">
            <summary>
              Tests whether the sample's distribution is
              different from the reference distribution.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.KolmogorovSmirnovTestHypothesis.SampleIsGreater">
            <summary>
              Tests whether the distribution of one sample is greater
              than the reference distribution, in a statistical sense.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.KolmogorovSmirnovTestHypothesis.SampleIsSmaller">
            <summary>
              Tests whether the distribution of one sample is smaller
              than the reference distribution, in a statistical sense.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTestHypothesis">
            <summary>
              Test hypothesis for the two-sample Kolmogorov-Smirnov tests.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTestHypothesis.SamplesDistributionsAreUnequal">
            <summary>
              Tests whether samples have been drawn 
              from significantly unequal distributions.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTestHypothesis.FirstSampleIsLargerThanSecond">
            <summary>
              Tests whether the distribution of one sample is
              greater than the other, in a statistical sense.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.TwoSampleKolmogorovSmirnovTestHypothesis.FirstSampleIsSmallerThanSecond">
            <summary>
              Tests whether the distribution of one sample is
              smaller than the other, in a statistical sense.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.WeightType">
            <summary>
              Sample weight types.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.WeightType.None">
            <summary>
              Weights should be ignored.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.WeightType.Repetition">
            <summary>
              Weights are integers representing how many times a sample should repeat itself.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.WeightType.Fraction">
            <summary>
              Weights are fractional numbers that sum up to one.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.WeightType.Automatic">
            <summary>
              If weights sum up to one, they are handled as <see cref="F:Accord.Statistics.WeightType.Fraction">fractional
              weights</see>. If they sum to a whole number, they are handled as <see cref="F:Accord.Statistics.WeightType.Repetition">
              integer repetition counts</see>.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Visualizations.ScatterplotClassValueCollection">
            <summary>
              Scatter Plot class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.ScatterplotClassValueCollection.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.ScatterplotClassValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.ScatterplotClassValueCollection.Label">
            <summary>
              Gets the integer label associated with this class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.ScatterplotClassValueCollection.Indices">
            <summary>
              Gets the indices of all points of this class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.ScatterplotClassValueCollection.XAxis">
            <summary>
              Gets all X values of this class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.ScatterplotClassValueCollection.YAxis">
            <summary>
              Gets all Y values of this class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.ScatterplotClassValueCollection.Text">
            <summary>
              Gets or sets the class' text label.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Visualizations.HistogramBinCollection">
            <summary>
              Collection of Histogram bins. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.HistogramBinCollection.Search(System.Double)">
            <summary>
              Searches for a bin containing the specified value.
            </summary>
            
            <param name="value">The value to search for.</param>
            
            <returns>The histogram bin containing the searched value.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.HistogramBinCollection.SearchIndex(System.Double)">
            <summary>
              Attempts to find the index of the bin containing the specified value.
            </summary>
            
            <param name="value">The value to search for.</param>
            
            <returns>The index of the bin containing the specified value.</returns>
            
        </member>
        <member name="T:Accord.Statistics.Visualizations.HistogramBin">
            <summary>
              Histogram Bin
            </summary>
            
            <remarks>
            <para>
              A "bin" is a container, where each element stores the total number of observations of a sample
              whose values lie within a given range. A histogram of a sample consists of a list of such bins
              whose range does not overlap with each other; or in other words, bins that are mutually exclusive.</para>
            <para>
              Unless <see cref="P:Accord.Statistics.Visualizations.Histogram.InclusiveUpperBound"/> is true, the ranges of all bins <c>i</c> are
              defined as Edge[i] &lt;= x &lt; Edge[i+1]. Otherwise, the last bin will have an inclusive upper
              bound (i.e. will be defined as Edge[i] &lt;= x &lt;= Edge[i+1].</para>  
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.HistogramBin.Contains(System.Double)">
            <summary>
              Gets whether the Histogram Bin contains the given value.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.HistogramBin.Range">
            <summary>
              Gets the actual range of data this bin represents.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.HistogramBin.Width">
            <summary>
              Gets the Width (range) for this histogram bin.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.HistogramBin.Value">
            <summary>
              Gets the Value (number of occurrences of a variable in a range)
              for this histogram bin.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Visualizations.BinAdjustmentRule">
            <summary>
              Optimum histogram bin size adjustment rule.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Visualizations.BinAdjustmentRule.None">
            <summary>
              Does not attempts to automatically calculate 
              an optimum bin width and preserves the current
              histogram organization.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Visualizations.BinAdjustmentRule.Scott">
            <summary>
              Calculates the optimum bin width as 3.49σN, where σ 
              is the sample standard deviation and N is the number
              of samples.
            </summary>
            <remarks>
              Scott, D. 1979. On optimal and data-based histograms. Biometrika, 66:605-610.
            </remarks>
            
        </member>
        <member name="F:Accord.Statistics.Visualizations.BinAdjustmentRule.Sturges">
            <summary>
              Calculates the optimum bin width as ceiling( log2(N) + 1 )m
              where N is the number of samples. The rule implicitly bases
              the bin sizes on the range of the data, and can perform poorly
              if n &lt; 30.
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Visualizations.BinAdjustmentRule.SquareRoot">
            <summary>
              Calculates the optimum bin width as the square root of the
              number of samples. This is the same rule used by Microsoft (c)
              Excel and many others.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Visualizations.Histogram">
            <summary>
              Histogram.
            </summary>
            
            <remarks>
             <para>
              In a more general mathematical sense, a histogram is a mapping Mi
              that counts the number of observations that fall into various 
              disjoint categories (known as bins).</para>
             <para>
              This class represents a Histogram mapping of Discrete or Continuous
              data. To use it as a discrete mapping, pass a bin size (length) of 1.
              To use it as a continuous mapping, pass any real number instead.</para>
             <para>
              Currently, only a constant bin width is supported.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.#ctor">
            <summary>
              Constructs an empty histogram
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.#ctor(System.String)">
            <summary>
              Constructs an empty histogram
            </summary>
            
            <param name="title">The title of this histogram.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.#ctor(System.Double[])">
            <summary>
              Constructs an empty histogram
            </summary>
            
            <param name="values">The values to be binned in the histogram.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.#ctor(System.String,System.Double[])">
            <summary>
              Constructs an empty histogram
            </summary>
            
            <param name="title">The title of this histogram.</param>
            <param name="values">The values to be binned in the histogram.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Compute(System.Double[],System.Double)">
            <summary>
              Computes (populates) an Histogram mapping with values from a sample. 
            </summary>
            
            <param name="values">The values to be binned in the histogram.</param>
            <param name="binWidth">The desired width for the histogram's bins.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Compute(System.Double[],System.Int32)">
            <summary>
              Computes (populates) an Histogram mapping with values from a sample. 
            </summary>
            
            <param name="values">The values to be binned in the histogram.</param>
            <param name="numberOfBins">The desired number of histogram's bins.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Compute(System.Double[],System.Int32,System.Boolean)">
            <summary>
              Computes (populates) an Histogram mapping with values from a sample. 
            </summary>
            
            <param name="values">The values to be binned in the histogram.</param>
            <param name="numberOfBins">The desired number of histogram's bins.</param>
            <param name="extraUpperBin">Whether to include an extra upper bin going to infinity.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Compute(System.Double[],System.Int32,System.Double)">
            <summary>
              Computes (populates) an Histogram mapping with values from a sample. 
            </summary>
            
            <param name="values">The values to be binned in the histogram.</param>
            <param name="numberOfBins">The desired number of histogram's bins.</param>
            <param name="binWidth">The desired width for the histogram's bins.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Compute(System.Double[])">
            <summary>
              Computes (populates) an Histogram mapping with values from a sample. 
            </summary>
            
            <param name="values">The values to be binned in the histogram.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.initialize(System.Int32)">
            <summary>
              Initializes the histogram's bins.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.initialize(System.Double,System.Double)">
            <summary>
              Sets the histogram's bin ranges (edges).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.compute(System.Double[])">
            <summary>
              Actually computes the histogram.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.computeNumberOfBins(System.Double[],AForge.DoubleRange,Accord.Statistics.Visualizations.BinAdjustmentRule)">
            <summary>
              Computes the optimum number of bins based on a <see cref="T:Accord.Statistics.Visualizations.BinAdjustmentRule"/>.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.op_Implicit(Accord.Statistics.Visualizations.Histogram)~System.Int32[]">
            <summary>
              Integer array implicit conversion.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.ToArray">
            <summary>
              Converts this histogram into an integer array representation.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Subtract(Accord.Statistics.Visualizations.Histogram)">
            <summary>
              Subtracts one histogram from the other, storing
              results in a new histogram, without changing the
              current instance.
            </summary>
            
            <param name="histogram">The histogram whose bin values will be subtracted.</param>
            
            <returns>A new <see cref="T:Accord.Statistics.Visualizations.Histogram"/> containing the result of this operation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Subtract(System.Int32[])">
            <summary>
              Subtracts one histogram from the other, storing
              results in a new histogram, without changing the
              current instance.
            </summary>
            
            <param name="histogram">The histogram whose bin values will be subtracted.</param>
            
            <returns>A new <see cref="T:Accord.Statistics.Visualizations.Histogram"/> containing the result of this operation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Add(Accord.Statistics.Visualizations.Histogram)">
            <summary>
              Adds one histogram from the other, storing
              results in a new histogram, without changing the
              current instance.
            </summary>
            
            <param name="histogram">The histogram whose bin values will be added.</param>
            
            <returns>A new <see cref="T:Accord.Statistics.Visualizations.Histogram"/> containing the result of this operation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Add(System.Int32[])">
            <summary>
              Adds one histogram from the other, storing
              results in a new histogram, without changing the
              current instance.
            </summary>
            
            <param name="histogram">The histogram whose bin values will be added.</param>
            
            <returns>A new <see cref="T:Accord.Statistics.Visualizations.Histogram"/> containing the result of this operation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Multiply(System.Int32[])">
            <summary>
              Multiplies one histogram from the other, storing
              results in a new histogram, without changing the
              current instance.
            </summary>
            
            <param name="histogram">The histogram whose bin values will be multiplied.</param>
            
            <returns>A new <see cref="T:Accord.Statistics.Visualizations.Histogram"/> containing the result of this operation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Multiply(System.Int32)">
            <summary>
              Multiplies one histogram from the other, storing
              results in a new histogram, without changing the
              current instance.
            </summary>
            
            <param name="value">The value to be multiplied.</param>
            
            <returns>A new <see cref="T:Accord.Statistics.Visualizations.Histogram"/> containing the result of this operation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Add(System.Int32)">
            <summary>
              Adds a value to each histogram bin.
            </summary>
            
            <param name="value">The value to be added.</param>
            
            <returns>A new <see cref="T:Accord.Statistics.Visualizations.Histogram"/> containing the result of this operation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Subtract(System.Int32)">
            <summary>
              Subtracts a value to each histogram bin.
            </summary>
            
            <param name="value">The value to be subtracted.</param>
            
            <returns>A new <see cref="T:Accord.Statistics.Visualizations.Histogram"/> containing the result of this operation.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Item(System.Int32)">
            <summary>
              Gets the Bin values of this Histogram.
            </summary>
            
            <param name="index">Bin index.</param>
            
            <returns>The number of hits of the selected bin.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Title">
            <summary>
              Gets the name for this Histogram.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Values">
            <summary>
              Gets the Bin values for this Histogram.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Range">
            <summary>
              Gets the Range of the values in this Histogram.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Edges">
            <summary>
              Gets the edges of each bin in this Histogram.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Bins">
            <summary>
              Gets the collection of bins of this Histogram.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Cumulative">
            <summary>
              Gets or sets whether this histogram represents a cumulative distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.AutoAdjustmentRule">
            <summary>
              Gets or sets the bin size auto adjustment rule
              to be used when computing this histogram from
              new data. Default is <see cref="F:Accord.Statistics.Visualizations.BinAdjustmentRule.SquareRoot"/>.
            </summary>
            
            <value>The bin size auto adjustment rule.</value>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.InclusiveUpperBound">
            <summary>
              Gets or sets a value indicating whether the last bin
              should have an inclusive upper bound. Default is <c>true</c>.
            </summary>
            
            <remarks>
              If set to <c>false</c>, the last bin's range will be defined
              as Edge[i] &lt;= x &lt; Edge[i+1]. If set to <c>true</c>, the
              last bin will have an inclusive upper bound and be defined as
              Edge[i] &lt;= x &lt;= Edge[i+1] instead.
            </remarks>
            
            <value>
              <c>true</c> if the last bin should have an inclusive upper bound;
              <c>false</c> otherwise.
            </value>
            
        </member>
        <member name="T:Accord.Statistics.Visualizations.Scatterplot">
            <summary>
              Scatter Plot.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Scatterplot.#ctor">
            <summary>
              Constructs an empty Scatter plot.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Scatterplot.#ctor(System.String)">
            <summary>
              Constructs an empty Scatter plot with given title. 
            </summary>
            
            <param name="title">Scatter plot title.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Scatterplot.#ctor(System.String,System.String,System.String)">
            <summary>
              Constructs an empty scatter plot with
              given title and axis names.
            </summary>
            
            <param name="title">Scatter Plot title.</param>
            <param name="xAxisTitle">Title for the x-axis.</param>
            <param name="yAxisTitle">Title for the y-axis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Scatterplot.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
              Constructs an empty Scatter Plot with
              given title and axis names.
            </summary>
            
            <param name="title">Scatter Plot title.</param>
            <param name="xAxisTitle">Title for the x-axis.</param>
            <param name="yAxisTitle">Title for the y-axis.</param>
            <param name="labelTitle">Title for the labels.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Scatterplot.Compute(System.Double[])">
            <summary>
              Computes the scatter plot.
            </summary>
            
            <param name="values">Array of values.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Scatterplot.Compute(System.Double[],System.Double[])">
            <summary>
              Computes the scatter plot.
            </summary>
            
            <param name="x">Array of X values.</param>
            <param name="y">Array of corresponding Y values.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Scatterplot.Compute(System.Double[],System.Double[],System.Int32[])">
            <summary>
              Computes the scatter plot.
            </summary>
            
            <param name="x">Array of X values.</param>
            <param name="y">Array of corresponding Y values.</param>
            <param name="labels">Array of integer labels defining a class for each (x,y) pair.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Scatterplot.Compute(System.Double[][])">
            <summary>
              Computes the scatter plot.
            </summary>
            
            <param name="data">Array of { x,y } values.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Scatterplot.Compute(System.Double[][],System.Int32[])">
            <summary>
              Computes the scatter plot.
            </summary>
            
            <param name="data">Array of { x,y } values.</param>
            <param name="labels">Array of integer labels defining a class for each (x,y) pair.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Scatterplot.Compute(System.Double[0:,0:])">
            <summary>
              Computes the scatter plot.
            </summary>
            
            <param name="data">Array of { x,y } values.</param>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Scatterplot.Compute(System.Double[0:,0:],System.Int32[])">
            <summary>
              Computes the scatter plot.
            </summary>
            
            <param name="data">Array of { x,y } values.</param>
            <param name="labels">Array of integer labels defining a class for each (x,y) pair.</param>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Scatterplot.Title">
            <summary>
              Gets the title of the scatter plot.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Scatterplot.XAxisTitle">
            <summary>
              Gets the name of the X-axis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Scatterplot.YAxisTitle">
            <summary>
              Gets the name of the Y-axis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Scatterplot.LabelAxisTitle">
            <summary>
              Gets the name of the label axis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Scatterplot.XAxis">
            <summary>
              Gets the values associated with the X-axis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Scatterplot.YAxis">
            <summary>
              Gets the corresponding Y values associated with each X.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Scatterplot.LabelAxis">
            <summary>
              Gets the label of each (x,y) pair.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Scatterplot.LabelValues">
            <summary>
              Gets an integer array containing the integer labels
              associated with each of the classes in the scatter plot.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Scatterplot.LabelNames">
            <summary>
              Gets the class labels for each of the classes in the plot.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Visualizations.Scatterplot.Classes">
            <summary>
              Gets a collection containing information about
              each of the classes presented in the scatter plot.
            </summary>
            
        </member>
    </members>
</doc>
