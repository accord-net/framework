<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Accord</name>
    </assembly>
    <members>
        <member name="T:AForge.MessageTransferHandler">
             <summary>
             A delegate which is used by events notifying abount sent/received message.
             </summary>
             
             <param name="sender">Event sender.</param>
             <param name="eventArgs">Event arguments containing details about the transferred message.</param>
            
        </member>
        <member name="T:AForge.DoublePoint">
            <summary>
            Structure for representing a pair of coordinates of double type.
            </summary>
            
            <remarks><para>The structure is used to store a pair of floating point
            coordinates with double precision.</para>
            
            <para>Sample usage:</para>
            <code>
            // assigning coordinates in the constructor
            DoublePoint p1 = new DoublePoint( 10, 20 );
            // creating a point and assigning coordinates later
            DoublePoint p2;
            p2.X = 30;
            p2.Y = 40;
            // calculating distance between two points
            double distance = p1.DistanceTo( p2 );
            </code>
            </remarks>
            
        </member>
        <member name="F:AForge.DoublePoint.X">
            <summary> 
            X coordinate.
            </summary> 
            
        </member>
        <member name="F:AForge.DoublePoint.Y">
            <summary> 
            Y coordinate.
            </summary> 
            
        </member>
        <member name="M:AForge.DoublePoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.DoublePoint"/> structure.
            </summary>
            
            <param name="x">X axis coordinate.</param>
            <param name="y">Y axis coordinate.</param>
            
        </member>
        <member name="M:AForge.DoublePoint.DistanceTo(AForge.DoublePoint)">
            <summary>
            Calculate Euclidean distance between two points.
            </summary>
            
            <param name="anotherPoint">Point to calculate distance to.</param>
            
            <returns>Returns Euclidean distance between this point and
            <paramref name="anotherPoint"/> points.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.SquaredDistanceTo(AForge.DoublePoint)">
            <summary>
            Calculate squared Euclidean distance between two points.
            </summary>
            
            <param name="anotherPoint">Point to calculate distance to.</param>
            
            <returns>Returns squared Euclidean distance between this point and
            <paramref name="anotherPoint"/> points.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Addition(AForge.DoublePoint,AForge.DoublePoint)">
            <summary>
            Addition operator - adds values of two points.
            </summary>
            
            <param name="point1">First point for addition.</param>
            <param name="point2">Second point for addition.</param>
            
            <returns>Returns new point which coordinates equal to sum of corresponding
            coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Add(AForge.DoublePoint,AForge.DoublePoint)">
            <summary>
            Addition operator - adds values of two points.
            </summary>
            
            <param name="point1">First point for addition.</param>
            <param name="point2">Second point for addition.</param>
            
            <returns>Returns new point which coordinates equal to sum of corresponding
            coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Subtraction(AForge.DoublePoint,AForge.DoublePoint)">
             <summary>
             Subtraction operator - subtracts values of two points.
             </summary>
             
             <param name="point1">Point to subtract from.</param>
             <param name="point2">Point to subtract.</param>
             
             <returns>Returns new point which coordinates equal to difference of corresponding
             coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Subtract(AForge.DoublePoint,AForge.DoublePoint)">
             <summary>
             Subtraction operator - subtracts values of two points.
             </summary>
             
             <param name="point1">Point to subtract from.</param>
             <param name="point2">Point to subtract.</param>
             
             <returns>Returns new point which coordinates equal to difference of corresponding
             coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Addition(AForge.DoublePoint,System.Double)">
            <summary>
            Addition operator - adds scalar to the specified point.
            </summary>
            
            <param name="point">Point to increase coordinates of.</param>
            <param name="valueToAdd">Value to add to coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point increased by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Add(AForge.DoublePoint,System.Double)">
            <summary>
            Addition operator - adds scalar to the specified point.
            </summary>
            
            <param name="point">Point to increase coordinates of.</param>
            <param name="valueToAdd">Value to add to coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point increased by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Subtraction(AForge.DoublePoint,System.Double)">
            <summary>
            Subtraction operator - subtracts scalar from the specified point.
            </summary>
            
            <param name="point">Point to decrease coordinates of.</param>
            <param name="valueToSubtract">Value to subtract from coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point decreased by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Subtract(AForge.DoublePoint,System.Double)">
            <summary>
            Subtraction operator - subtracts scalar from the specified point.
            </summary>
            
            <param name="point">Point to decrease coordinates of.</param>
            <param name="valueToSubtract">Value to subtract from coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point decreased by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Multiply(AForge.DoublePoint,System.Double)">
             <summary>
             Multiplication operator - multiplies coordinates of the specified point by scalar value.
             </summary>
             
             <param name="point">Point to multiply coordinates of.</param>
             <param name="factor">Multiplication factor.</param>
             
             <returns>Returns new point which coordinates equal to coordinates of
             the specified point multiplied by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Multiply(AForge.DoublePoint,System.Double)">
             <summary>
             Multiplication operator - multiplies coordinates of the specified point by scalar value.
             </summary>
             
             <param name="point">Point to multiply coordinates of.</param>
             <param name="factor">Multiplication factor.</param>
             
             <returns>Returns new point which coordinates equal to coordinates of
             the specified point multiplied by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Division(AForge.DoublePoint,System.Double)">
            <summary>
            Division operator - divides coordinates of the specified point by scalar value.
            </summary>
            
            <param name="point">Point to divide coordinates of.</param>
            <param name="factor">Division factor.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point divided by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Divide(AForge.DoublePoint,System.Double)">
            <summary>
            Division operator - divides coordinates of the specified point by scalar value.
            </summary>
            
            <param name="point">Point to divide coordinates of.</param>
            <param name="factor">Division factor.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point divided by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Equality(AForge.DoublePoint,AForge.DoublePoint)">
             <summary>
             Equality operator - checks if two points have equal coordinates.
             </summary>
             
             <param name="point1">First point to check.</param>
             <param name="point2">Second point to check.</param>
             
             <returns>Returns <see langword="true"/> if coordinates of specified
             points are equal.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Inequality(AForge.DoublePoint,AForge.DoublePoint)">
             <summary>
             Inequality operator - checks if two points have different coordinates.
             </summary>
             
             <param name="point1">First point to check.</param>
             <param name="point2">Second point to check.</param>
             
             <returns>Returns <see langword="true"/> if coordinates of specified
             points are not equal.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.DoublePoint"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another point to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Explicit(AForge.DoublePoint)~AForge.IntPoint">
            <summary>
            Explicit conversion to <see cref="T:AForge.IntPoint"/>.
            </summary>
            
            <param name="point">Double precision point to convert to integer point.</param>
            
            <returns>Returns new integer point which coordinates are explicitly converted
            to integers from coordinates of the specified double precision point by
            casting double values to integers value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Explicit(AForge.DoublePoint)~AForge.Point">
            <summary>
            Explicit conversion to <see cref="T:AForge.Point"/>.
            </summary>
            
            <param name="point">Double precision point to convert to single precision point.</param>
            
            <returns>Returns new single precision point which coordinates are explicitly converted
            to floats from coordinates of the specified double precision point by
            casting double values to float value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Round">
            <summary>
            Rounds the double precision point.
            </summary>
            
            <returns>Returns new integer point, which coordinates equal to whole numbers
            nearest to the corresponding coordinates of the double precision point.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains values of the point in readable form.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.EuclideanNorm">
            <summary>
            Calculate Euclidean norm of the vector comprised of the point's 
            coordinates - distance from (0, 0) in other words.
            </summary>
            
            <returns>Returns point's distance from (0, 0) point.</returns>
            
        </member>
        <member name="T:AForge.DoubleRange">
            <summary>
            Represents a double range with minimum and maximum values.
            </summary>
            
            <remarks>
            <para>The class represents a double range with inclusive limits -
            both minimum and maximum values of the range are included into it.
            Mathematical notation of such range is <b>[min, max]</b>.</para>
            
            <para>Sample usage:</para>
            <code>
            // create [0.25, 1.5] range
            DoubleRange range1 = new DoubleRange( 0.25, 1.5 );
            // create [1.00, 2.25] range
            DoubleRange range2 = new DoubleRange( 1.00, 2.25 );
            // check if values is inside of the first range
            if ( range1.IsInside( 0.75 ) )
            {
                // ...
            }
            // check if the second range is inside of the first range
            if ( range1.IsInside( range2 ) )
            {
                // ...
            }
            // check if two ranges overlap
            if ( range1.IsOverlapping( range2 ) )
            {
                // ...
            }
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.DoubleRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.DoubleRange"/> class.
            </summary>
            
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            
        </member>
        <member name="M:AForge.DoubleRange.IsInside(System.Double)">
            <summary>
            Check if the specified value is inside of the range.
            </summary>
            
            <param name="x">Value to check.</param>
            
            <returns><b>True</b> if the specified value is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.IsInside(AForge.DoubleRange)">
            <summary>
            Check if the specified range is inside of the range.
            </summary>
            
            <param name="range">Range to check.</param>
            
            <returns><b>True</b> if the specified range is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.IsOverlapping(AForge.DoubleRange)">
            <summary>
            Check if the specified range overlaps with the range.
            </summary>
            
            <param name="range">Range to check for overlapping.</param>
            
            <returns><b>True</b> if the specified range overlaps with the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.ToIntRange(System.Boolean)">
             <summary>
             Convert the signle precision range to integer range.
             </summary>
             
             <param name="provideInnerRange">Specifies if inner integer range must be returned or outer range.</param>
             
             <returns>Returns integer version of the range.</returns>
             
             <remarks>If <paramref name="provideInnerRange"/> is set to <see langword="true"/>, then the
             returned integer range will always fit inside of the current single precision range.
             If it is set to <see langword="false"/>, then current single precision range will always
             fit into the returned integer range.</remarks>
            
        </member>
        <member name="M:AForge.DoubleRange.op_Equality(AForge.DoubleRange,AForge.DoubleRange)">
             <summary>
             Equality operator - checks if two ranges have equal min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are equal.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.op_Inequality(AForge.DoubleRange,AForge.DoubleRange)">
             <summary>
             Inequality operator - checks if two ranges have different min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are not equal.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.Range"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another range to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains min/max values of the range in readable form.</returns>
            
        </member>
        <member name="P:AForge.DoubleRange.Min">
            <summary>
            Minimum value of the range.
            </summary>
            
            <remarks><para>The property represents minimum value (left side limit) or the range -
            [<b>min</b>, max].</para></remarks>
            
        </member>
        <member name="P:AForge.DoubleRange.Max">
            <summary>
            Maximum value of the range.
            </summary>
            
            <remarks><para>The property represents maximum value (right side limit) or the range -
            [min, <b>max</b>].</para></remarks>
            
        </member>
        <member name="P:AForge.DoubleRange.Length">
            <summary>
            Length of the range (deffirence between maximum and minimum values).
            </summary>
        </member>
        <member name="T:AForge.CommunicationBufferEventArgs">
            <summary>
            Event arguments holding a buffer sent or received during some communication process.
            </summary>
        </member>
        <member name="M:AForge.CommunicationBufferEventArgs.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.CommunicationBufferEventArgs"/> class.
            </summary>
            
            <param name="message">Message being transfered during communication process.</param>
            
        </member>
        <member name="M:AForge.CommunicationBufferEventArgs.#ctor(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.CommunicationBufferEventArgs"/> class.
             </summary>
            
             <param name="buffer">Buffer containing the message being transferred during communication process.</param>
             <param name="index">Starting index of the message within the buffer.</param>
             <param name="length">Length of the message within the buffer.</param>
            
        </member>
        <member name="M:AForge.CommunicationBufferEventArgs.GetMessage">
            <summary>
            Get the transfered message.
            </summary>
            
            <returns>Returns copy of the transfered message.</returns>
            
        </member>
        <member name="M:AForge.CommunicationBufferEventArgs.GetMessageString">
             <summary>
             Get the transferred message as string.
             </summary>
             
             <returns>Returns string encoding the transferred message.</returns>
            
        </member>
        <member name="P:AForge.CommunicationBufferEventArgs.MessageLength">
            <summary>
            Length of the transfered message.
            </summary>
        </member>
        <member name="T:AForge.ConnectionFailedException">
            <summary>
            Connection failed exception.
            </summary>
            
            <remarks><para>The exception is thrown in the case if connection to device
            has failed.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.ConnectionFailedException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:AForge.ConnectionFailedException"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.ConnectionFailedException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:AForge.ConnectionFailedException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="M:AForge.ConnectionFailedException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:AForge.ConnectionFailedException"/> class.
            </summary>
            
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
            
        </member>
        <member name="T:AForge.ConnectionLostException">
            <summary>
            Connection lost exception.
            </summary>
            
            <remarks><para>The exception is thrown in the case if connection to device
            is lost. When the exception is caught, user may need to reconnect to the device.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.ConnectionLostException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.ConnectionLostException"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.ConnectionLostException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.ConnectionLostException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="M:AForge.ConnectionLostException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:AForge.ConnectionLostException"/> class.
            </summary>
            
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
            
        </member>
        <member name="M:AForge.ConnectionLostException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:AForge.ConnectionLostException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            
        </member>
        <member name="T:AForge.NotConnectedException">
            <summary>
            Not connected exception.
            </summary>
            
            <remarks><para>The exception is thrown in the case if connection to device
            is not established, but user requests for its services.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.NotConnectedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.NotConnectedException"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.NotConnectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.NotConnectedException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="M:AForge.NotConnectedException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:AForge.NotConnectedException"/> class.
            </summary>
            
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
            
        </member>
        <member name="M:AForge.NotConnectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:AForge.NotConnectedException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            
        </member>
        <member name="T:AForge.DeviceBusyException">
            <summary>
            Device busy exception.
            </summary>
            
            <remarks><para>The exception is thrown in the case if access to certain device
            is not available due to the fact that it is currently busy handling other request/connection.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.DeviceBusyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.DeviceBusyException"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.DeviceBusyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.DeviceBusyException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="M:AForge.DeviceBusyException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:AForge.DeviceBusyException"/> class.
            </summary>
            
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
            
        </member>
        <member name="M:AForge.DeviceBusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:AForge.DeviceBusyException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            
        </member>
        <member name="T:AForge.DeviceErrorException">
             <summary>
             Device error exception.
             </summary>
             
             <remarks><para>The exception is thrown in the case if some error happens with a device, which
             may need to be reported to user.</para></remarks>
            
        </member>
        <member name="M:AForge.DeviceErrorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.DeviceErrorException"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.DeviceErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.DeviceErrorException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="M:AForge.DeviceErrorException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:AForge.DeviceErrorException"/> class.
            </summary>
            
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
            
        </member>
        <member name="M:AForge.DeviceErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:AForge.DeviceErrorException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            
        </member>
        <member name="T:AForge.IntPoint">
            <summary>
            Structure for representing a pair of coordinates of integer type.
            </summary>
            
            <remarks><para>The structure is used to store a pair of integer coordinates.</para>
            
            <para>Sample usage:</para>
            <code>
            // assigning coordinates in the constructor
            IntPoint p1 = new IntPoint( 10, 20 );
            // creating a point and assigning coordinates later
            IntPoint p2;
            p2.X = 30;
            p2.Y = 40;
            // calculating distance between two points
            float distance = p1.DistanceTo( p2 );
            </code>
            </remarks>
            
        </member>
        <member name="F:AForge.IntPoint.X">
            <summary> 
            X coordinate.
            </summary> 
            
        </member>
        <member name="F:AForge.IntPoint.Y">
            <summary> 
            Y coordinate.
            </summary> 
            
        </member>
        <member name="M:AForge.IntPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.IntPoint"/> structure.
            </summary>
            
            <param name="x">X axis coordinate.</param>
            <param name="y">Y axis coordinate.</param>
            
        </member>
        <member name="M:AForge.IntPoint.DistanceTo(AForge.IntPoint)">
            <summary>
            Calculate Euclidean distance between two points.
            </summary>
            
            <param name="anotherPoint">Point to calculate distance to.</param>
            
            <returns>Returns Euclidean distance between this point and
            <paramref name="anotherPoint"/> points.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.SquaredDistanceTo(AForge.Point)">
            <summary>
            Calculate squared Euclidean distance between two points.
            </summary>
            
            <param name="anotherPoint">Point to calculate distance to.</param>
            
            <returns>Returns squared Euclidean distance between this point and
            <paramref name="anotherPoint"/> points.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Addition(AForge.IntPoint,AForge.IntPoint)">
            <summary>
            Addition operator - adds values of two points.
            </summary>
            
            <param name="point1">First point for addition.</param>
            <param name="point2">Second point for addition.</param>
            
            <returns>Returns new point which coordinates equal to sum of corresponding
            coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Add(AForge.IntPoint,AForge.IntPoint)">
            <summary>
            Addition operator - adds values of two points.
            </summary>
            
            <param name="point1">First point for addition.</param>
            <param name="point2">Second point for addition.</param>
            
            <returns>Returns new point which coordinates equal to sum of corresponding
            coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Subtraction(AForge.IntPoint,AForge.IntPoint)">
             <summary>
             Subtraction operator - subtracts values of two points.
             </summary>
             
             <param name="point1">Point to subtract from.</param>
             <param name="point2">Point to subtract.</param>
             
             <returns>Returns new point which coordinates equal to difference of corresponding
             coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Subtract(AForge.IntPoint,AForge.IntPoint)">
             <summary>
             Subtraction operator - subtracts values of two points.
             </summary>
             
             <param name="point1">Point to subtract from.</param>
             <param name="point2">Point to subtract.</param>
             
             <returns>Returns new point which coordinates equal to difference of corresponding
             coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Addition(AForge.IntPoint,System.Int32)">
            <summary>
            Addition operator - adds scalar to the specified point.
            </summary>
            
            <param name="point">Point to increase coordinates of.</param>
            <param name="valueToAdd">Value to add to coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point increased by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Add(AForge.IntPoint,System.Int32)">
            <summary>
            Addition operator - adds scalar to the specified point.
            </summary>
            
            <param name="point">Point to increase coordinates of.</param>
            <param name="valueToAdd">Value to add to coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point increased by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Subtraction(AForge.IntPoint,System.Int32)">
            <summary>
            Subtraction operator - subtracts scalar from the specified point.
            </summary>
            
            <param name="point">Point to decrease coordinates of.</param>
            <param name="valueToSubtract">Value to subtract from coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point decreased by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Subtract(AForge.IntPoint,System.Int32)">
            <summary>
            Subtraction operator - subtracts scalar from the specified point.
            </summary>
            
            <param name="point">Point to decrease coordinates of.</param>
            <param name="valueToSubtract">Value to subtract from coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point decreased by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Multiply(AForge.IntPoint,System.Int32)">
             <summary>
             Multiplication operator - multiplies coordinates of the specified point by scalar value.
             </summary>
             
             <param name="point">Point to multiply coordinates of.</param>
             <param name="factor">Multiplication factor.</param>
             
             <returns>Returns new point which coordinates equal to coordinates of
             the specified point multiplied by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Multiply(AForge.IntPoint,System.Int32)">
             <summary>
             Multiplication operator - multiplies coordinates of the specified point by scalar value.
             </summary>
             
             <param name="point">Point to multiply coordinates of.</param>
             <param name="factor">Multiplication factor.</param>
             
             <returns>Returns new point which coordinates equal to coordinates of
             the specified point multiplied by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Division(AForge.IntPoint,System.Int32)">
            <summary>
            Division operator - divides coordinates of the specified point by scalar value.
            </summary>
            
            <param name="point">Point to divide coordinates of.</param>
            <param name="factor">Division factor.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point divided by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Divide(AForge.IntPoint,System.Int32)">
            <summary>
            Division operator - divides coordinates of the specified point by scalar value.
            </summary>
            
            <param name="point">Point to divide coordinates of.</param>
            <param name="factor">Division factor.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point divided by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Equality(AForge.IntPoint,AForge.IntPoint)">
             <summary>
             Equality operator - checks if two points have equal coordinates.
             </summary>
             
             <param name="point1">First point to check.</param>
             <param name="point2">Second point to check.</param>
             
             <returns>Returns <see langword="true"/> if coordinates of specified
             points are equal.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Inequality(AForge.IntPoint,AForge.IntPoint)">
             <summary>
             Inequality operator - checks if two points have different coordinates.
             </summary>
             
             <param name="point1">First point to check.</param>
             <param name="point2">Second point to check.</param>
             
             <returns>Returns <see langword="true"/> if coordinates of specified
             points are not equal.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.IntPoint"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another point to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Implicit(AForge.IntPoint)~AForge.Point">
            <summary>
            Implicit conversion to <see cref="T:AForge.Point"/>.
            </summary>
            
            <param name="point">Integer point to convert to single precision point.</param>
            
            <returns>Returns new single precision point which coordinates are implicitly converted
            to floats from coordinates of the specified integer point.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Implicit(AForge.IntPoint)~AForge.DoublePoint">
            <summary>
            Implicit conversion to <see cref="T:AForge.DoublePoint"/>.
            </summary>
            
            <param name="point">Integer point to convert to double precision point.</param>
            
            <returns>Returns new double precision point which coordinates are implicitly converted
            to doubles from coordinates of the specified integer point.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains values of the point in readable form.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.EuclideanNorm">
            <summary>
            Calculate Euclidean norm of the vector comprised of the point's 
            coordinates - distance from (0, 0) in other words.
            </summary>
            
            <returns>Returns point's distance from (0, 0) point.</returns>
            
        </member>
        <member name="T:AForge.IntRange">
             <summary>
             Represents an integer range with minimum and maximum values.
             </summary>
             
             <remarks>
             <para>The class represents an integer range with inclusive limits -
             both minimum and maximum values of the range are included into it.
             Mathematical notation of such range is <b>[min, max]</b>.</para>
             
             <para>Sample usage:</para>
             <code>
             // create [1, 10] range
             IntRange range1 = new IntRange( 1, 10 );
             // create [5, 15] range
             IntRange range2 = new IntRange( 5, 15 );
             // check if values is inside of the first range
             if ( range1.IsInside( 7 ) )
             {
                 // ...
             }
             // check if the second range is inside of the first range
             if ( range1.IsInside( range2 ) )
             {
                 // ...
             }
             // check if two ranges overlap
             if ( range1.IsOverlapping( range2 ) )
             {
                 // ...
             }
             </code>
             </remarks>
            
        </member>
        <member name="M:AForge.IntRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.IntRange"/> structure.
            </summary>
            
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            
        </member>
        <member name="M:AForge.IntRange.IsInside(System.Int32)">
            <summary>
            Check if the specified value is inside of the range.
            </summary>
            
            <param name="x">Value to check.</param>
            
            <returns><b>True</b> if the specified value is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.IntRange.IsInside(AForge.IntRange)">
            <summary>
            Check if the specified range is inside of the range.
            </summary>
            
            <param name="range">Range to check.</param>
            
            <returns><b>True</b> if the specified range is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.IntRange.IsOverlapping(AForge.IntRange)">
            <summary>
            Check if the specified range overlaps with the range.
            </summary>
            
            <param name="range">Range to check for overlapping.</param>
            
            <returns><b>True</b> if the specified range overlaps with the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.IntRange.op_Implicit(AForge.IntRange)~AForge.Range">
            <summary>
            Implicit conversion to <see cref="T:AForge.Range"/>.
            </summary>
            
            <param name="range">Integer range to convert to single precision range.</param>
            
            <returns>Returns new single precision range which min/max values are implicitly converted
            to floats from min/max values of the specified integer range.</returns>
            
        </member>
        <member name="M:AForge.IntRange.op_Equality(AForge.IntRange,AForge.IntRange)">
             <summary>
             Equality operator - checks if two ranges have equal min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are equal.</returns>
            
        </member>
        <member name="M:AForge.IntRange.op_Inequality(AForge.IntRange,AForge.IntRange)">
             <summary>
             Inequality operator - checks if two ranges have different min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are not equal.</returns>
            
        </member>
        <member name="M:AForge.IntRange.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.Range"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another range to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.IntRange.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.IntRange.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains min/max values of the range in readable form.</returns>
            
        </member>
        <member name="P:AForge.IntRange.Min">
            <summary>
            Minimum value of the range.
            </summary>
            
            <remarks><para>The property represents minimum value (left side limit) or the range -
            [<b>min</b>, max].</para></remarks>
            
        </member>
        <member name="P:AForge.IntRange.Max">
            <summary>
            Maximum value of the range.
            </summary>
            
            <remarks><para>The property represents maximum value (right side limit) or the range -
            [min, <b>max</b>].</para></remarks>
            
        </member>
        <member name="P:AForge.IntRange.Length">
            <summary>
            Length of the range (deffirence between maximum and minimum values).
            </summary>
        </member>
        <member name="T:AForge.Parallel">
             <summary>
             The class provides support for parallel computations, paralleling loop's iterations.
             </summary>
             
             <remarks><para>The class allows to parallel loop's iteration computing them in separate threads,
             what allows their simultaneous execution on multiple CPUs/cores.
             </para></remarks>
            
        </member>
        <member name="M:AForge.Parallel.For(System.Int32,System.Int32,AForge.Parallel.ForLoopBody)">
            <summary>
            Executes a for-loop in which iterations may run in parallel. 
            </summary>
            
            <param name="start">Loop's start index.</param>
            <param name="stop">Loop's stop index.</param>
            <param name="loopBody">Loop's body.</param>
            
            <remarks><para>The method is used to parallel for-loop running its iterations in
            different threads. The <b>start</b> and <b>stop</b> parameters define loop's
            starting and ending loop's indexes. The number of iterations is equal to <b>stop - start</b>.
            </para>
            
            <para>Sample usage:</para>
            <code>
            Parallel.For( 0, 20, delegate( int i )
            // which is equivalent to
            // for ( int i = 0; i &lt; 20; i++ )
            {
                System.Diagnostics.Debug.WriteLine( "Iteration: " + i );
                // ...
            } );
            </code>
            </remarks>
            
        </member>
        <member name="P:AForge.Parallel.ThreadsCount">
            <summary>
            Number of threads used for parallel computations.
            </summary>
            
            <remarks><para>The property sets how many worker threads are created for paralleling
            loops' computations.</para>
            
            <para>By default the property is set to number of CPU's in the system
            (see <see cref="P:System.Environment.ProcessorCount"/>).</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Parallel.ForLoopBody">
            <summary>
            Delegate defining for-loop's body.
            </summary>
            
            <param name="index">Loop's index.</param>
            
        </member>
        <member name="T:AForge.Point">
            <summary>
            Structure for representing a pair of coordinates of float type.
            </summary>
            
            <remarks><para>The structure is used to store a pair of floating point
            coordinates with single precision.</para>
            
            <para>Sample usage:</para>
            <code>
            // assigning coordinates in the constructor
            Point p1 = new Point( 10, 20 );
            // creating a point and assigning coordinates later
            Point p2;
            p2.X = 30;
            p2.Y = 40;
            // calculating distance between two points
            float distance = p1.DistanceTo( p2 );
            </code>
            </remarks>
            
        </member>
        <member name="F:AForge.Point.X">
            <summary> 
            X coordinate.
            </summary> 
            
        </member>
        <member name="F:AForge.Point.Y">
            <summary> 
            Y coordinate.
            </summary> 
            
        </member>
        <member name="M:AForge.Point.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Point"/> structure.
            </summary>
            
            <param name="x">X axis coordinate.</param>
            <param name="y">Y axis coordinate.</param>
            
        </member>
        <member name="M:AForge.Point.DistanceTo(AForge.Point)">
            <summary>
            Calculate Euclidean distance between two points.
            </summary>
            
            <param name="anotherPoint">Point to calculate distance to.</param>
            
            <returns>Returns Euclidean distance between this point and
            <paramref name="anotherPoint"/> points.</returns>
            
        </member>
        <member name="M:AForge.Point.SquaredDistanceTo(AForge.Point)">
            <summary>
            Calculate squared Euclidean distance between two points.
            </summary>
            
            <param name="anotherPoint">Point to calculate distance to.</param>
            
            <returns>Returns squared Euclidean distance between this point and
            <paramref name="anotherPoint"/> points.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Addition(AForge.Point,AForge.Point)">
            <summary>
            Addition operator - adds values of two points.
            </summary>
            
            <param name="point1">First point for addition.</param>
            <param name="point2">Second point for addition.</param>
            
            <returns>Returns new point which coordinates equal to sum of corresponding
            coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.Point.Add(AForge.Point,AForge.Point)">
            <summary>
            Addition operator - adds values of two points.
            </summary>
            
            <param name="point1">First point for addition.</param>
            <param name="point2">Second point for addition.</param>
            
            <returns>Returns new point which coordinates equal to sum of corresponding
            coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Subtraction(AForge.Point,AForge.Point)">
             <summary>
             Subtraction operator - subtracts values of two points.
             </summary>
             
             <param name="point1">Point to subtract from.</param>
             <param name="point2">Point to subtract.</param>
             
             <returns>Returns new point which coordinates equal to difference of corresponding
             coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.Point.Subtract(AForge.Point,AForge.Point)">
             <summary>
             Subtraction operator - subtracts values of two points.
             </summary>
             
             <param name="point1">Point to subtract from.</param>
             <param name="point2">Point to subtract.</param>
             
             <returns>Returns new point which coordinates equal to difference of corresponding
             coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Addition(AForge.Point,System.Single)">
            <summary>
            Addition operator - adds scalar to the specified point.
            </summary>
            
            <param name="point">Point to increase coordinates of.</param>
            <param name="valueToAdd">Value to add to coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point increased by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.Add(AForge.Point,System.Single)">
            <summary>
            Addition operator - adds scalar to the specified point.
            </summary>
            
            <param name="point">Point to increase coordinates of.</param>
            <param name="valueToAdd">Value to add to coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point increased by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Subtraction(AForge.Point,System.Single)">
            <summary>
            Subtraction operator - subtracts scalar from the specified point.
            </summary>
            
            <param name="point">Point to decrease coordinates of.</param>
            <param name="valueToSubtract">Value to subtract from coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point decreased by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.Subtract(AForge.Point,System.Single)">
            <summary>
            Subtraction operator - subtracts scalar from the specified point.
            </summary>
            
            <param name="point">Point to decrease coordinates of.</param>
            <param name="valueToSubtract">Value to subtract from coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point decreased by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Multiply(AForge.Point,System.Single)">
             <summary>
             Multiplication operator - multiplies coordinates of the specified point by scalar value.
             </summary>
             
             <param name="point">Point to multiply coordinates of.</param>
             <param name="factor">Multiplication factor.</param>
             
             <returns>Returns new point which coordinates equal to coordinates of
             the specified point multiplied by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.Multiply(AForge.Point,System.Single)">
             <summary>
             Multiplication operator - multiplies coordinates of the specified point by scalar value.
             </summary>
             
             <param name="point">Point to multiply coordinates of.</param>
             <param name="factor">Multiplication factor.</param>
             
             <returns>Returns new point which coordinates equal to coordinates of
             the specified point multiplied by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Division(AForge.Point,System.Single)">
            <summary>
            Division operator - divides coordinates of the specified point by scalar value.
            </summary>
            
            <param name="point">Point to divide coordinates of.</param>
            <param name="factor">Division factor.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point divided by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.Divide(AForge.Point,System.Single)">
            <summary>
            Division operator - divides coordinates of the specified point by scalar value.
            </summary>
            
            <param name="point">Point to divide coordinates of.</param>
            <param name="factor">Division factor.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point divided by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Equality(AForge.Point,AForge.Point)">
             <summary>
             Equality operator - checks if two points have equal coordinates.
             </summary>
             
             <param name="point1">First point to check.</param>
             <param name="point2">Second point to check.</param>
             
             <returns>Returns <see langword="true"/> if coordinates of specified
             points are equal.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Inequality(AForge.Point,AForge.Point)">
             <summary>
             Inequality operator - checks if two points have different coordinates.
             </summary>
             
             <param name="point1">First point to check.</param>
             <param name="point2">Second point to check.</param>
             
             <returns>Returns <see langword="true"/> if coordinates of specified
             points are not equal.</returns>
            
        </member>
        <member name="M:AForge.Point.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.Point"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another point to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.Point.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Explicit(AForge.Point)~AForge.IntPoint">
            <summary>
            Explicit conversion to <see cref="T:AForge.IntPoint"/>.
            </summary>
            
            <param name="point">Single precision point to convert to integer point.</param>
            
            <returns>Returns new integer point which coordinates are explicitly converted
            to integers from coordinates of the specified single precision point by
            casting float values to integers value.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Implicit(AForge.Point)~AForge.DoublePoint">
            <summary>
            Implicit conversion to <see cref="T:AForge.DoublePoint"/>.
            </summary>
            
            <param name="point">Single precision point to convert to double precision point.</param>
            
            <returns>Returns new double precision point which coordinates are implicitly converted
            to doubles from coordinates of the specified single precision point.</returns>
            
        </member>
        <member name="M:AForge.Point.Round">
            <summary>
            Rounds the single precision point.
            </summary>
            
            <returns>Returns new integer point, which coordinates equal to whole numbers
            nearest to the corresponding coordinates of the single precision point.</returns>
            
        </member>
        <member name="M:AForge.Point.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains values of the point in readable form.</returns>
            
        </member>
        <member name="M:AForge.Point.EuclideanNorm">
            <summary>
            Calculate Euclidean norm of the vector comprised of the point's 
            coordinates - distance from (0, 0) in other words.
            </summary>
            
            <returns>Returns point's distance from (0, 0) point.</returns>
            
        </member>
        <member name="T:AForge.PolishExpression">
            <summary>
            Evaluator of expressions written in reverse polish notation.
            </summary>
            
            <remarks><para>The class evaluates expressions writen in reverse postfix polish notation.</para>
            
            <para>The list of supported functuins is:</para>
            <list type="bullet">
            <item><b>Arithmetic functions</b>: +, -, *, /;</item>
            <item><b>sin</b> - sine;</item>
            <item><b>cos</b> - cosine;</item>
            <item><b>ln</b> - natural logarithm;</item>
            <item><b>exp</b> - exponent;</item>
            <item><b>sqrt</b> - square root.</item>
            </list>
            
            <para>Arguments for these functions could be as usual constants, written as numbers, as variables,
            writen as $&lt;var_number&gt; (<b>$2</b>, for example). The variable number is zero based index
            of variables array.</para>
            
            <para>Sample usage:</para>
            <code>
            // expression written in polish notation
            string expression = "2 $0 / 3 $1 * +";
            // variables for the expression
            double[] vars = new double[] { 3, 4 };
            // expression evaluation
            double result = PolishExpression.Evaluate( expression, vars );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.PolishExpression.Evaluate(System.String,System.Double[])">
             <summary>
             Evaluates specified expression.
             </summary>
            
             <param name="expression">Expression written in postfix polish notation.</param>
             <param name="variables">Variables for the expression.</param>
             
             <returns>Evaluated value of the expression.</returns>
             
             <exception cref="T:System.ArgumentException">Unsupported function is used in the expression.</exception>
             <exception cref="T:System.ArgumentException">Incorrect postfix polish expression.</exception>
            
        </member>
        <member name="T:AForge.Range">
             <summary>
             Represents a range with minimum and maximum values, which are single precision numbers (floats).
             </summary>
             
             <remarks>
             <para>The class represents a single precision range with inclusive limits -
             both minimum and maximum values of the range are included into it.
             Mathematical notation of such range is <b>[min, max]</b>.</para>
             
             <para>Sample usage:</para>
             <code>
             // create [0.25, 1.5] range
             Range range1 = new Range( 0.25f, 1.5f );
             // create [1.00, 2.25] range
             Range range2 = new Range( 1.00f, 2.25f );
             // check if values is inside of the first range
             if ( range1.IsInside( 0.75f ) )
             {
                 // ...
             }
             // check if the second range is inside of the first range
             if ( range1.IsInside( range2 ) )
             {
                 // ...
             }
             // check if two ranges overlap
             if ( range1.IsOverlapping( range2 ) )
             {
                 // ...
             }
             </code>
             </remarks>
            
        </member>
        <member name="M:AForge.Range.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Range"/> structure.
            </summary>
            
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            
        </member>
        <member name="M:AForge.Range.IsInside(System.Single)">
            <summary>
            Check if the specified value is inside of the range.
            </summary>
            
            <param name="x">Value to check.</param>
            
            <returns><b>True</b> if the specified value is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Range.IsInside(AForge.Range)">
            <summary>
            Check if the specified range is inside of the range.
            </summary>
            
            <param name="range">Range to check.</param>
            
            <returns><b>True</b> if the specified range is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Range.IsOverlapping(AForge.Range)">
            <summary>
            Check if the specified range overlaps with the range.
            </summary>
            
            <param name="range">Range to check for overlapping.</param>
            
            <returns><b>True</b> if the specified range overlaps with the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Range.ToIntRange(System.Boolean)">
             <summary>
             Convert the signle precision range to integer range.
             </summary>
             
             <param name="provideInnerRange">Specifies if inner integer range must be returned or outer range.</param>
             
             <returns>Returns integer version of the range.</returns>
             
             <remarks>If <paramref name="provideInnerRange"/> is set to <see langword="true"/>, then the
             returned integer range will always fit inside of the current single precision range.
             If it is set to <see langword="false"/>, then current single precision range will always
             fit into the returned integer range.</remarks>
            
        </member>
        <member name="M:AForge.Range.op_Equality(AForge.Range,AForge.Range)">
             <summary>
             Equality operator - checks if two ranges have equal min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are equal.</returns>
            
        </member>
        <member name="M:AForge.Range.op_Inequality(AForge.Range,AForge.Range)">
             <summary>
             Inequality operator - checks if two ranges have different min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are not equal.</returns>
            
        </member>
        <member name="M:AForge.Range.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.Range"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another range to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.Range.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.Range.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains min/max values of the range in readable form.</returns>
            
        </member>
        <member name="P:AForge.Range.Min">
            <summary>
            Minimum value of the range.
            </summary>
            
            <remarks><para>The property represents minimum value (left side limit) or the range -
            [<b>min</b>, max].</para></remarks>
            
        </member>
        <member name="P:AForge.Range.Max">
            <summary>
            Maximum value of the range.
            </summary>
            
            <remarks><para>The property represents maximum value (right side limit) or the range -
            [min, <b>max</b>].</para></remarks>
            
        </member>
        <member name="P:AForge.Range.Length">
            <summary>
            Length of the range (deffirence between maximum and minimum values).
            </summary>
        </member>
        <member name="T:AForge.SystemTools">
            <summary>
            Set of systems tools.
            </summary>
            
            <remarks><para>The class is a container of different system tools, which are used
            across the framework. Some of these tools are platform specific, so their
            implementation is different on different platform, like .NET and Mono.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.SystemTools.CopyUnmanagedMemory(System.IntPtr,System.IntPtr,System.Int32)">
             <summary>
             Copy block of unmanaged memory.
             </summary>
             
             <param name="dst">Destination pointer.</param>
             <param name="src">Source pointer.</param>
             <param name="count">Memory block's length to copy.</param>
             
             <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
             
             <remarks><para>This function is required because of the fact that .NET does
             not provide any way to copy unmanaged blocks, but provides only methods to
             copy from unmanaged memory to managed memory and vise versa.</para></remarks>
            
        </member>
        <member name="M:AForge.SystemTools.CopyUnmanagedMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Copy block of unmanaged memory.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="src">Source pointer.</param>
            <param name="count">Memory block's length to copy.</param>
            
            <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
            
            <remarks><para>This function is required because of the fact that .NET does
            not provide any way to copy unmanaged blocks, but provides only methods to
            copy from unmanaged memory to managed memory and vise versa.</para></remarks>
            
        </member>
        <member name="M:AForge.SystemTools.SetUnmanagedMemory(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Fill memory region with specified value.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="filler">Filler byte's value.</param>
            <param name="count">Memory block's length to fill.</param>
            
            <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
            
        </member>
        <member name="M:AForge.SystemTools.SetUnmanagedMemory(System.Byte*,System.Int32,System.Int32)">
            <summary>
            Fill memory region with specified value.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="filler">Filler byte's value.</param>
            <param name="count">Memory block's length to fill.</param>
            
            <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
            
        </member>
        <member name="T:AForge.ThreadSafeRandom">
            <summary>
            Thread safe version of the <see cref="T:System.Random"/> class.
            </summary>
            
            <remarks><para>The class inherits the <see cref="T:System.Random"/> and overrides
            its random numbers generation methods providing thread safety by guarding call
            to the base class with a lock. See documentation to <see cref="T:System.Random"/> for
            additional information about the base class.</para></remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.ThreadSafeRandom"/> class.
            </summary>
            
            <remarks>See <see cref="M:System.Random.Next"/> for more information.</remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.ThreadSafeRandom"/> class.
            </summary>
            
            <remarks>A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used.</remarks>
            
            
            <remarks>See <see cref="M:System.Random.Next"/> for more information.</remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            
            <returns>Returns a 32-bit signed integer greater than or equal to zero and less than
            <see cref="F:System.Int32.MaxValue"/>.</returns>
            
            <remarks>See <see cref="M:System.Random.Next"/> for more information.</remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to zero.</param>
            
            <returns>Returns a 32-bit signed integer greater than or equal to zero, and less than <paramref name="maxValue"/>;
            that is, the range of return values ordinarily includes zero but not <paramref name="maxValue"/>.</returns>
            
            <remarks>See <see cref="M:System.Random.Next(System.Int32)"/> for more information.</remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.Next(System.Int32,System.Int32)">
             <summary>
             Returns a random number within a specified range.
             </summary>
             
             <param name="minValue">The inclusive lower bound of the random number returned.</param>
             <param name="maxValue">The exclusive upper bound of the random number returned.
             <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
             
             <returns>Returns a 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less
             than <paramref name="maxValue"/>; that is, the range of return values includes
             <paramref name="minValue"/> but not <paramref name="maxValue"/>.</returns>
             
             <remarks>See <see cref="M:System.Random.Next(System.Int32,System.Int32)"/> for more information.</remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.NextBytes(System.Byte[])">
             <summary>
             Fills the elements of a specified array of bytes with random numbers.
             </summary>
             
             <param name="buffer">An array of bytes to contain random numbers.</param>
             
             <remarks>See <see cref="M:System.Random.NextBytes(System.Byte[])"/> for more information.</remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.NextDouble">
             <summary>
             Returns a random number between 0.0 and 1.0.
             </summary>
             
             <returns>Returns a double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
             
             <remarks>See <see cref="M:System.Random.NextDouble"/> for more information.</remarks>
            
        </member>
        <member name="T:Accord.PositiveAttribute">
            <summary>
              Specifies that an argument, in a method or function,
              must be greater than zero.
            </summary>
            
        </member>
        <member name="T:Accord.RealAttribute">
            <summary>
              Specifies that an argument, in a method or function,
              must be real (double).
            </summary>
            
        </member>
        <member name="M:Accord.RealAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.RealAttribute"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.RealAttribute.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.RealAttribute"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.RealAttribute.Minimum">
            <summary>
              Gets the minimum allowed field value.
            </summary>
            
        </member>
        <member name="P:Accord.RealAttribute.Maximum">
            <summary>
              Gets the maximum allowed field value.
            </summary>
            
        </member>
        <member name="M:Accord.PositiveAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.PositiveAttribute"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.PositiveAttribute.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.PositiveAttribute"/> class.
            </summary>
            
        </member>
        <member name="T:Accord.NegativeAttribute">
            <summary>
              Specifies that an argument, in a method or function,
              must be lesser than zero.
            </summary>
            
        </member>
        <member name="M:Accord.NegativeAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.NegativeAttribute"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.NegativeAttribute.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.NegativeAttribute"/> class.
            </summary>
            
        </member>
        <member name="T:Accord.NonpositiveAttribute">
            <summary>
              Specifies that an argument, in a method or function,
              must be lesser than or equal to zero.
            </summary>
            
        </member>
        <member name="M:Accord.NonpositiveAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.NonpositiveAttribute"/> class.
            </summary>
            
        </member>
        <member name="T:Accord.NonnegativeAttribute">
            <summary>
              Specifies that an argument, in a method or function,
              must be greater than or equal to zero.
            </summary>
            
        </member>
        <member name="M:Accord.NonnegativeAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.NonnegativeAttribute"/> class.
            </summary>
            
        </member>
        <member name="T:Accord.UnitAttribute">
            <summary>
              Specifies that an argument, in a method or function,
              must be real between 0 and 1.
            </summary>
            
        </member>
        <member name="M:Accord.UnitAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.UnitAttribute"/> class.
            </summary>
            
        </member>
        <member name="T:Accord.PositiveIntegerAttribute">
            <summary>
              Specifies that an argument, in a method or function,
              must be an integer bigger than zero.
            </summary>
            
        </member>
        <member name="T:Accord.IntegerAttribute">
            <summary>
              Specifies that an argument, in a method or function,
              must be an integer.
            </summary>
            
        </member>
        <member name="M:Accord.IntegerAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.IntegerAttribute"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.IntegerAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.IntegerAttribute"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.IntegerAttribute.Minimum">
            <summary>
              Gets the minimum allowed field value.
            </summary>
            
        </member>
        <member name="P:Accord.IntegerAttribute.Maximum">
            <summary>
              Gets the maximum allowed field value.
            </summary>
            
        </member>
        <member name="M:Accord.PositiveIntegerAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.PositiveIntegerAttribute"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.PositiveIntegerAttribute.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.PositiveIntegerAttribute"/> class.
            </summary>
            
        </member>
        <member name="T:Accord.NegativeIntegerAttribute">
            <summary>
              Specifies that an argument, in a method or function,
              must be an integer less than zero.
            </summary>
            
        </member>
        <member name="M:Accord.NegativeIntegerAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.NegativeIntegerAttribute"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.NegativeIntegerAttribute.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.NegativeIntegerAttribute"/> class.
            </summary>
            
        </member>
        <member name="T:Accord.NonpositiveIntegerAttribute">
            <summary>
              Specifies that an argument, in a method or function,
              must be an integer smaller than or equal to zero.
            </summary>
            
        </member>
        <member name="M:Accord.NonpositiveIntegerAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.NonpositiveIntegerAttribute"/> class.
            </summary>
            
        </member>
        <member name="T:Accord.NonnegativeIntegerAttribute">
            <summary>
              Specifies that an argument, in a method or function,
              must be an integer bigger than or equal to zero.
            </summary>
            
        </member>
        <member name="M:Accord.NonnegativeIntegerAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.NonnegativeIntegerAttribute"/> class.
            </summary>
            
        </member>
        <member name="T:Accord.cast`2">
            <summary>
              Runtime cast.
            </summary>
            
            <typeparam name="T">The target type.</typeparam>
            <typeparam name="U">The source type.</typeparam>
            
        </member>
        <member name="M:Accord.cast`2.#ctor(`1)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.cast`2"/> struct.
            </summary>
            
        </member>
        <member name="M:Accord.cast`2.op_Implicit(`1)~Accord.cast{`0,`1}">
            <summary>
            Performs an implicit conversion from <typeparamref name="U"/> to <see cref="T:Accord.cast`2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Accord.cast`2.op_Implicit(Accord.cast{`0,`1})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Accord.cast`2"/> to <typeparamref name="T"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:Accord.cast`2.Value">
            <summary>
              Gets the value being casted.
            </summary>
            
        </member>
        <member name="T:Accord.cast`1">
            <summary>
              Runtime cast.
            </summary>
            
            <typeparam name="T">The target type.</typeparam>
            
        </member>
        <member name="M:Accord.cast`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.cast`1"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Accord.cast`1.op_Implicit(System.Double)~Accord.cast{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Accord.cast`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Accord.cast`1.op_Implicit(System.Single)~Accord.cast{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Accord.cast`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Accord.cast`1.op_Implicit(System.Decimal)~Accord.cast{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Accord.cast`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Accord.cast`1.op_Implicit(System.Byte)~Accord.cast{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:Accord.cast`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Accord.cast`1.op_Implicit(System.SByte)~Accord.cast{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte"/> to <see cref="T:Accord.cast`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Accord.cast`1.op_Implicit(System.Int16)~Accord.cast{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:Accord.cast`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Accord.cast`1.op_Implicit(System.UInt16)~Accord.cast{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Accord.cast`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Accord.cast`1.op_Implicit(System.Int32)~Accord.cast{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Accord.cast`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Accord.cast`1.op_Implicit(System.UInt32)~Accord.cast{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Accord.cast`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Accord.cast`1.op_Implicit(System.Int64)~Accord.cast{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:Accord.cast`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Accord.cast`1.op_Implicit(System.UInt64)~Accord.cast{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Accord.cast`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Accord.cast`1.op_Implicit(Accord.cast{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Accord.cast`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:Accord.cast`1.Value">
            <summary>
              Gets the value being casted.
            </summary>
            
        </member>
        <member name="T:Accord.Collections.RedBlackTree`2">
            <summary>
              Red-black tree specialized for key-based value retrieval.
            </summary>
            
            <remarks>
              See <see cref="T:Accord.Collections.RedBlackTree`1"/>.
            </remarks>
            
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            
        </member>
        <member name="T:Accord.Collections.RedBlackTree`1">
            <summary>
              Red-black tree.
            </summary>
            
            <remarks>
            <para>
              A red–black tree is a data structure which is a type of self-balancing binary 
              search tree. Balance is preserved by painting each node of the tree with one of
              two colors (typically called 'red' and 'black') in a way that satisfies certain 
              properties, which collectively constrain how unbalanced the tree can become in 
              the worst case. When the tree is modified, the new tree is subsequently rearranged
              and repainted to restore the coloring properties. The properties are designed in 
              such a way that this rearranging and recoloring can be performed efficiently.</para>
              
            <para>
              The balancing of the tree is not perfect but it is good enough to allow it to 
              guarantee searching in O(log n) time, where n is the total number of elements 
              in the tree. The insertion and deletion operations, along with the tree rearrangement 
              and recoloring, are also performed in O(log n) time. </para>
              
            <para>
              Tracking the color of each node requires only 1 bit of information per node because
              there are only two colors. The tree does not contain any other data specific to its
              being a red–black tree so its memory footprint is almost identical to a classic 
              (uncolored) binary search tree. </para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://ab-initio.mit.edu/nlopt">
                  Steven G. Johnson, The NLopt nonlinear-optimization package, 
                  http://ab-initio.mit.edu/nlopt </a></description></item>
                <item><description><a href="http://en.wikipedia.org/wiki/Red%E2%80%93black_tree">
                  Wikipedia, The Free Encyclopedia. Red-black tree. Available on:
                  http://en.wikipedia.org/wiki/Red%E2%80%93black_tree </a></description></item>
               </list></para>
            </remarks>
            
            <typeparam name="T">The type of the value to be stored.</typeparam>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.#ctor">
            <summary>
              Constructs a new <see cref="T:Accord.Collections.RedBlackTree`1"/> using the
              default <see cref="T:System.Collections.Generic.IComparer`1"/> for type <typeparamref name="T"/>.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
              Constructs a new <see cref="T:Accord.Collections.RedBlackTree`1"/> using 
              the provided <see cref="T:System.Collections.Generic.IComparer`1"/> implementation.
            </summary>
            
            <param name="comparer">
              The element comparer to be used to order elements in the tree.</param>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.#ctor(System.Boolean)">
            <summary>
              Constructs a new <see cref="T:Accord.Collections.RedBlackTree`1"/> using the
              default <see cref="T:System.Collections.Generic.IComparer`1"/> for type <typeparamref name="T"/>.
            </summary>
            
            <param name="allowDuplicates">
              Pass <c>true</c> to allow duplicate elements 
              in the tree; <c>false</c> otherwise.</param>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.#ctor(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
              Constructs a new <see cref="T:Accord.Collections.RedBlackTree`1"/> using 
              the provided <see cref="T:System.Collections.Generic.IComparer`1"/> implementation.
            </summary>
            
            <param name="comparer">
              The element comparer to be used to order elements in the tree.</param>
            <param name="allowDuplicates">
              Pass <c>true</c> to allow duplicate elements 
              in the tree; <c>false</c> otherwise.</param>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.Clear">
            <summary>
              Removes all nodes from the tree.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.Add(`0)">
            <summary>
              Adds a new item to the tree. If the element already
              belongs to this tree, no new element will be added.
            </summary>
            
            <param name="item">The item to be added.</param>
            
            <returns>The node containing the added item.</returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.Add(Accord.Collections.RedBlackTreeNode{`0})">
            <summary>
              Adds a new item to the tree. If the element already
              belongs to this tree, no new element will be added.
            </summary>
            
            <param name="item">The node to be added to the tree.</param>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
              Attempts to remove an element from the tree.
            </summary>
            
            <param name="item">The item to be removed.</param>
            
            <returns>
              <c>True</c> if the element was in the tree and was removed; false otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.System#Collections#Generic#ICollection{Accord#Collections#RedBlackTreeNode{T}}#Remove(Accord.Collections.RedBlackTreeNode{`0})">
            <summary>
              Removes a node from the tree.
            </summary>
            
            <param name="item">The node to be removed.</param>
            
            <returns>
              <c>True</c> if the element was in the tree and was removed; false otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.Remove(`0)">
            <summary>
              Removes a node from the tree.
            </summary>
            
            <param name="item">The key of the node to be removed.</param>
            
            <returns>
              A reference to the removed node, if the item was in the tree; otherwise, <c>null</c>.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.Remove(Accord.Collections.RedBlackTreeNode{`0})">
            <summary>
              Removes a node from the tree.
            </summary>
            
            <param name="node">The node to be removed.</param>
            
            <returns>
              A reference to the removed node.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.CopyTo(Accord.Collections.RedBlackTreeNode{`0}[],System.Int32)">
            <summary>
              Copies the nodes of this tree to an array, starting at a
              particular <paramref name="arrayIndex">array index</paramref>.
            </summary>
            
            <param name="array">
              The one-dimensional array that is the destination of the elements
              copied from this tree. The array must have zero-based indexing.
            </param>
            
            <param name="arrayIndex">
              The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of this tree to an array, starting at a
              particular <paramref name="arrayIndex">array index</paramref>.
            </summary>
            
            <param name="array">
              The one-dimensional array that is the destination of the elements
              copied from this tree. The array must have zero-based indexing.
            </param>
            
            <param name="arrayIndex">
              The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through this tree in-order.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can
              be used to traverse through this tree using in-order traversal.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through this tree in-order.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can
              be used to traverse through this tree using in-order traversal.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.Contains(`0)">
            <summary>
              Determines whether this tree contains the specified item.
            </summary>
            
            <param name="item">The item to be looked for.</param>
            
            <returns>
              <c>true</c> if the element was found inside the tree; otherwise, <c>false</c>.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.Contains(Accord.Collections.RedBlackTreeNode{`0})">
            <summary>
              Determines whether this tree contains the specified item.
            </summary>
            
            <param name="item">The item to be looked for.</param>
            
            <returns>
              <c>true</c> if the element was found inside the tree; otherwise, <c>false</c>.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.Find(`0)">
            <summary>
              Attempts to find a node that contains the specified key.
            </summary>
            
            <param name="item">The key whose node is to be found.</param>
            
            <returns>
              A <see cref="T:Accord.Collections.RedBlackTreeNode`1"/> containing the desired <paramref name="item"/>
              if it is present in the dictionary; otherwise, returns <c>null</c>.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.FindLessThanOrEqualTo(Accord.Collections.RedBlackTreeNode{`0},`0)">
            <summary>
             Finds the greatest point in the subtree rooted at <paramref name="node"/>
             that is less than or equal to (&lt;=) <c>k</c>. In other words, finds either
             <c>k</c> or a number immediately below it.
            </summary>
            
            <param name="node">The subtree where search will take place.</param>
            <param name="value">A reference value to be found.</param>
            
            <returns>
              The node containing the given value <paramref name="value"/> or 
              its immediately smaller neighboring number present in the tree.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.FindLessThanOrEqualTo(`0)">
            <summary>
             Finds the greatest point in the <see cref="T:Accord.Collections.RedBlackTree`1">
             tree</see> that is less than or equal to (&lt;=) <c>k</c>.
             In other words, finds either <c>k</c> or a number immediately
             below it.
            </summary>
            
            <param name="value">A reference for the value to be found.</param>
            
            <returns>
              The node containing the given value <paramref name="value"/> or 
              its immediately smaller neighboring number present in the tree.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.FindLessThan(Accord.Collections.RedBlackTreeNode{`0},`0)">
            <summary>
             Finds the greatest point in the subtree rooted at <paramref name="node"/>
             that is less than (&lt;) <c>k</c>. In other words, finds a number stored in
             the tree that is immediately below <c>k</c>.
            </summary>
            
            <param name="node">The subtree where search will take place.</param>
            <param name="value">A reference value to be found.</param>
            
            <returns>
              The node containing an element that is immediately below <paramref name="value"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.FindLessThan(`0)">
            <summary>
             Finds the greatest point in the <see cref="T:Accord.Collections.RedBlackTree`1">
             tree</see> that is less than (&lt;) <c>k</c>. In other words, finds
             a number stored in the tree that is immediately below <c>k</c>.
            </summary>
            
            <param name="value">A reference value to be found.</param>
            
            <returns>
              The node containing an element that is immediately below <paramref name="value"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.FindGreaterThan(Accord.Collections.RedBlackTreeNode{`0},`0)">
            <summary>
             Finds the smallest point in the subtree rooted at <paramref name="node"/>
             that is greater than (>) <c>k</c>. In other words, finds a number stored in
             the tree that is immediately above <c>k</c>.
            </summary>
            
            <param name="node">The subtree where search will take place.</param>
            <param name="value">A reference value to be found.</param>
            
            <returns>
              The node containing an element that is immediately below <paramref name="value"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.FindGreaterThan(`0)">
            <summary>
             Finds the smallest point in the in the <see cref="T:Accord.Collections.RedBlackTree`1">
             tree</see> that is greater than (&gt;) <c>k</c>. In other words, finds a
             number stored in the tree that is immediately above <c>k</c>.
            </summary>
            
            <param name="value">A reference value to be found.</param>
            
            <returns>
              The node containing an element that is immediately below <paramref name="value"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.Min">
            <summary>
              Finds the minimum element stored in the tree.
            </summary>
            
            <returns>
              The <see cref="T:Accord.Collections.RedBlackTreeNode`1"/> that 
              holds the minimum element in the tree.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.Max">
            <summary>
              Finds the maximum element stored in the tree.
            </summary>
            
            <returns>
              The <see cref="T:Accord.Collections.RedBlackTreeNode`1"/> that
              holds the maximum element in the tree.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.GetNextNode(Accord.Collections.RedBlackTreeNode{`0})">
            <summary>
              Gets the node that contains the next in-order value coming 
              after the value contained in the given <paramref name="node"/>.
            </summary>
            
            <param name="node">The current node.</param>
            
            <returns>
              The node that contains a value that is immediately greater than
              the current value contained in the given <paramref name="node"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.GetPreviousNode(Accord.Collections.RedBlackTreeNode{`0})">
            <summary>
              Gets the node that contains the previous in-order value coming
              before the value contained in the given <paramref name="node"/>.
            </summary>
            
            <param name="node">The current node.</param>
            
            <returns>
              The node that contains a value that is immediately less than
              the current value contained in the given <paramref name="node"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`1.Resort(Accord.Collections.RedBlackTreeNode{`0})">
            <summary>
              Forces a re-balance of the tree by removing and inserting the same node.
            </summary>
            
            <param name="node">The node to be re-balanced.</param>
            
            <returns>The same node, or a new one if it had to be recreated.</returns>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTree`1.Count">
            <summary>
              Gets the number of nodes contained in this red-black tree.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTree`1.Root">
            <summary>
              Gets the <see cref="T:Accord.Collections.RedBlackTreeNode`1">
              root node</see> of this red-black tree.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTree`1.Comparer">
            <summary>
              Gets the <see cref="T:System.Collections.Generic.IComparer`1"/> for this red black tree.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTree`1.IsReadOnly">
            <summary>
              Gets a value indicating whether this instance is read only. 
              In a <see cref="T:Accord.Collections.RedBlackTree`1"/>, this returns false.
            </summary>
            
            <value>
               Returns <c>false</c>.
            </value>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`2.#ctor">
            <summary>
              Constructs a new <see cref="T:Accord.Collections.RedBlackTree`1"/> using the default
              <see cref="T:System.Collections.Generic.IComparer`1"/> for the key type <typeparamref name="TKey"/>.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`2.#ctor(System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
              Constructs a new <see cref="T:Accord.Collections.RedBlackTree`1"/> using 
              the provided <see cref="T:System.Collections.Generic.IComparer`1"/> implementation.
            </summary>
            
            <param name="comparer">
              The element comparer to be used to order elements in the tree.</param>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`2.#ctor(System.Boolean)">
            <summary>
              Constructs a new <see cref="T:Accord.Collections.RedBlackTree`1"/> using the default
              <see cref="T:System.Collections.Generic.IComparer`1"/> for the key type <typeparamref name="TKey"/>.
            </summary>
            
            <param name="allowDuplicates">
              Pass <c>true</c> to allow duplicate elements 
              in the tree; <c>false</c> otherwise.</param>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTree`2.#ctor(System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)">
            <summary>
              Constructs a new <see cref="T:Accord.Collections.RedBlackTree`1"/> using 
              the provided <see cref="T:System.Collections.Generic.IComparer`1"/> implementation.
            </summary>
            
            <param name="comparer">
              The element comparer to be used to order elements in the tree.</param>
            <param name="allowDuplicates">
              Pass <c>true</c> to allow duplicate elements 
              in the tree; <c>false</c> otherwise.</param>
            
        </member>
        <member name="T:Accord.Collections.KeyValuePairComparer`2">
            <summary>
              Vanilla key-based comparer for <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            
            <typeparam name="TKey">The key type in the key-value pair.</typeparam>
            <typeparam name="TValue">The value type in the key-value pair.</typeparam>
            
        </member>
        <member name="M:Accord.Collections.KeyValuePairComparer`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Collections.KeyValuePairComparer`2"/> class.
            </summary>
            
            <param name="keyComparer">The comparer to be used to compare keys.</param>
            
        </member>
        <member name="M:Accord.Collections.KeyValuePairComparer`2.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Collections.KeyValuePairComparer`2"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.KeyValuePairComparer`2.Compare(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Compares two objects and returns a value indicating whether 
              one is less than, equal to, or greater than the other.
            </summary>
            
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            
        </member>
        <member name="M:Accord.Collections.KeyValuePairComparer`2.Compare(`0,`0)">
            <summary>
              Compares two objects and returns a value indicating whether 
              one is less than, equal to, or greater than the other.
            </summary>
            
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            
        </member>
        <member name="P:Accord.Collections.KeyValuePairComparer`2.Default">
            <summary>
               Returns a default sort order comparer for the
               key-value pair specified by the generic argument.
            </summary>
            
        </member>
        <member name="T:Accord.Collections.TwoWayDictionary`2">
            <summary>
              Two-way dictionary for efficient lookups by both key and value. This
              can be used to represent a one-to-one relation among two object types.
            </summary>
            
            <typeparam name="TFirst">The type of right keys in the dictionary.</typeparam>
            <typeparam name="TSecond">The type of left keys in the dictionary.</typeparam>
            
        </member>
        <member name="T:Accord.IReadOnlyDictionary`2">
            <summary>
              Minimum IReadOnlyDictionary implementation for .NET 3.5 to
              make Accord.NET work. This is not a complete implementation.
            </summary>
            
        </member>
        <member name="T:Accord.IReadOnlyCollection`1">
            <summary>
              Minimum IReadOnlyCollection implementation for .NET 3.5 to
              make Accord.NET work. This is not a complete implementation.
            </summary>
            
        </member>
        <member name="M:Accord.IReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
              Determines whether the dictionary contains the specified key.
            </summary>
            
        </member>
        <member name="M:Accord.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
              Tries to get a value.
            </summary>
            
        </member>
        <member name="P:Accord.IReadOnlyDictionary`2.Keys">
            <summary>
              Gets the keys.
            </summary>
            
        </member>
        <member name="P:Accord.IReadOnlyDictionary`2.Values">
            <summary>
              Gets the values.
            </summary>
            
        </member>
        <member name="P:Accord.IReadOnlyDictionary`2.Item(`0)">
            <summary>
              Gets the value associated with the specified key.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Collections.TwoWayDictionary`2"/> class
              that is empty, has the default initial capacity, and uses the default equality comparer
              for the key type.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Collections.TwoWayDictionary`2"/> class
              that is empty, has the specified initial capacity, and uses the default equality comparer
              for the key type.
            </summary>
            
            <param name="capacity">The initial number of elements that this dictionary can contain.</param>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary> 
              Initializes a new instance of the <see cref="T:Accord.Collections.TwoWayDictionary`2"/> class
              that contains elements copied from the specified dictionary and uses the default equality
              comparer for the key type.
            </summary>
            
            <param name="dictionary">The dictionary whose elements are copied to the new <see cref="T:Accord.Collections.TwoWayDictionary`2"/>.</param>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
              Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.Add(`0,`1)">
            <summary>
              Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
              Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TFirst@TSecond}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.ContainsKey(`0)">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            
            <returns>
              true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TFirst@TSecond}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            
            <returns>
              true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.TryGetValue(`0,`1@)">
            <summary>
              Gets the value associated with the specified key.
            </summary>
            
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            
            <returns>
              true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.Remove(`0)">
            <summary>
              Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            
            <param name="key">The key of the element to remove.</param>
            
            <returns>
              true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
              Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            
            <param name="key">The key of the element to remove.</param>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TFirst@TSecond}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            
            <returns>
              true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
              Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.
            </summary>
            
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
            
            <returns>
             true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.TwoWayDictionary`2.Clear">
            <summary>
              Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.Reverse">
            <summary>
              Gets the reverse dictionary that maps values back to keys.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.Count">
            <summary>
              Gets the number of elements contained in this <see cref="T:Accord.Collections.TwoWayDictionary`2"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
              Gets an object that can be used to synchronize access to the <see cref="T:Accord.Collections.TwoWayDictionary`2"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
              Gets a value indicating whether access to the <see cref="T:Accord.Collections.TwoWayDictionary`2"/> is synchronized (thread safe).
            </summary>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
              Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.IsReadOnly">
            <summary>
              Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.Item(`0)">
            <summary>
              Gets or sets the element with the specified key.
            </summary>
            
            <param name="key">The left key.</param>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
              Gets or sets the element with the specified key.
            </summary>
            
            <param name="key">The left key.</param>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.Keys">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.Accord#IReadOnlyDictionary{TFirst@TSecond}#Keys">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.Values">
            <summary>
             Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.System#Collections#IDictionary#Values">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.TwoWayDictionary`2.Accord#IReadOnlyDictionary{TFirst@TSecond}#Values">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            
        </member>
        <member name="T:Accord.ExtensionMethods">
            <summary>
              Static class for utility extension methods.
            </summary>
            
        </member>
        <member name="M:Accord.ExtensionMethods.DeepClone``1(``0)">
            <summary>
              Copies a collection by calling the ICloneable.Clone method for each element inside it.
            </summary>
            
            <typeparam name="T"></typeparam>
            <param name="list">The collection to be cloned.</param>
            
            <returns>A copy of the collection where each element has also been copied.</returns>
            
        </member>
        <member name="M:Accord.ExtensionMethods.Add(System.Data.DataColumnCollection,System.String[])">
            <summary>
              Creates and adds multiple <see cref="T:System.Data.DataColumn"/>
              objects with the given names at once.
            </summary>
            
            <param name="collection">The <see cref="T:System.Data.DataColumnCollection"/>
            to add in.</param>
            <param name="columnNames">The names of the <see cref="T:System.Data.DataColumn"/> to
            be created and added.</param>
            
            <example>
              <code>
              DataTable table = new DataTable();
              
              // Add multiple columns at once:
              table.Columns.Add("columnName1", "columnName2");
              </code>
            </example>
            
        </member>
        <member name="M:Accord.ExtensionMethods.GetDescription``1(``0)">
            <summary>
              Gets a the value of a <see cref="T:System.ComponentModel.DescriptionAttribute"/>
              associated with a particular enumeration value.
            </summary>
            
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="source">The enumeration value.</param>
            
            <returns>The string value stored in the value's description attribute.</returns>
            
        </member>
        <member name="M:Accord.ExtensionMethods.Read``1(System.IO.BinaryReader,``0@)">
            <summary>
              Reads a <c>struct</c> from a stream.
            </summary>
            
        </member>
        <member name="M:Accord.ExtensionMethods.GetPosition(System.IO.StreamReader)">
            <summary>
              Gets the underlying buffer position for a StreamReader.
            </summary>
            
            <param name="reader">A StreamReader whose position will be retrieved.</param>
            
            <returns>The current offset from the beginning of the 
              file that the StreamReader is currently located into.</returns>
            
        </member>
        <member name="M:Accord.ExtensionMethods.DeserializeAnyVersion(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter,System.IO.Stream)">
            <summary>
              Deserializes the specified stream into an object graph, but locates
              types by searching all loaded assemblies and ignoring their versions.
            </summary>
            
            <param name="formatter">The binary formatter.</param>
            <param name="stream">The stream from which to deserialize the object graph.</param>
            
            <returns>The top (root) of the object graph.</returns>
            
        </member>
        <member name="T:Accord.ConvergenceException">
            <summary>
              Algorithm Convergence Exception.
            </summary>
            
            <remarks><para>The algorithm convergence exception is thrown in cases where a iterative
            algorithm could not converge to a finite solution.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.ConvergenceException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.ConvergenceException"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.ConvergenceException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.ConvergenceException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:Accord.ConvergenceException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.ConvergenceException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:Accord.ConvergenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.ConvergenceException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            
        </member>
        <member name="T:Accord.DimensionMismatchException">
             <summary>
               Dimension Mismatch Exception.
             </summary>
            
             <remarks><para>The dimension mismatch exception is thrown in cases where a method expects 
             a matrix or array object having specific or compatible dimensions, such as the inner matrix
             dimensions in matrix multiplication.</para>
             </remarks>
            
        </member>
        <member name="M:Accord.DimensionMismatchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.DimensionMismatchException"/> class.
            </summary>
        </member>
        <member name="M:Accord.DimensionMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.DimensionMismatchException"/> class.
            </summary>
            
            <param name="paramName">The name of the parameter that caused the current exception.</param>
            
        </member>
        <member name="M:Accord.DimensionMismatchException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.DimensionMismatchException"/> class.
            </summary>
            
            <param name="paramName">The name of the parameter that caused the current exception.</param>
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:Accord.DimensionMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.DimensionMismatchException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:Accord.DimensionMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.DimensionMismatchException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            
        </member>
        <member name="T:Accord.NonPositiveDefiniteMatrixException">
            <summary>
              Non-Positive Definite Matrix Exception.
            </summary>
            
            <remarks><para>The non-positive definite matrix exception is thrown in cases where a method 
            expects a matrix to have only positive eigenvalues, such when dealing with covariance matrices.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.NonPositiveDefiniteMatrixException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonPositiveDefiniteMatrixException"/> class.
            </summary>
        </member>
        <member name="M:Accord.NonPositiveDefiniteMatrixException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonPositiveDefiniteMatrixException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:Accord.NonPositiveDefiniteMatrixException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonPositiveDefiniteMatrixException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:Accord.NonPositiveDefiniteMatrixException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonPositiveDefiniteMatrixException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            
        </member>
        <member name="T:Accord.NonSymmetricMatrixException">
            <summary>
              Non-Symmetric Matrix Exception.
            </summary>
            
            <remarks><para>The not symmetric matrix exception is thrown in cases where a method 
            expects a matrix to be symmetric but it is not.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.NonSymmetricMatrixException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonSymmetricMatrixException"/> class.
            </summary>
        </member>
        <member name="M:Accord.NonSymmetricMatrixException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonSymmetricMatrixException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:Accord.NonSymmetricMatrixException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonSymmetricMatrixException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:Accord.NonSymmetricMatrixException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonSymmetricMatrixException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            
        </member>
        <member name="T:Accord.SingularMatrixException">
            <summary>
              Singular Matrix Exception.
            </summary>
            
            <remarks><para>The singular matrix exception is thrown in cases where a method which
            performs matrix inversions has encountered a non-invertible matrix during the process.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.SingularMatrixException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.SingularMatrixException"/> class.
            </summary>
        </member>
        <member name="M:Accord.SingularMatrixException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.SingularMatrixException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:Accord.SingularMatrixException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.SingularMatrixException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:Accord.SingularMatrixException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.SingularMatrixException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            
        </member>
        <member name="T:Accord.Collections.ReadOnlyKeyedCollection`2">
            <summary>
              Read-only keyed collection wrapper.
            </summary>
            
            <remarks>
              This collection implements a read-only keyed collection. Read-only collections
              can not be changed once they are created and are useful for presenting information
              to the user without allowing alteration. A keyed collection is a collection whose 
              elements can be retrieved by key or by index.
            </remarks>
            
            <typeparam name="TKey">The types of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.#ctor(System.Collections.Generic.IList{`1})">
            <summary>
              Initializes a new instance of the 
              <see cref="T:Accord.Collections.ReadOnlyKeyedCollection`2"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.GetKeyForItem(`1)">
            <summary>
              When implemented in a derived class, extracts the key from the specified element.
            </summary>
            
            <param name="item">The element from which to extract the key.</param>
            
            <returns>The key for the specified element.</returns>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.ContainsKey(`0)">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            
            <returns>
              true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.TryGetValue(`0,`1@)">
            <summary>
              Gets the value associated with the specified key.
            </summary>
            
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            
            <returns>
              true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            
            <returns>
              true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
              Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.Add(`0,`1)">
            <summary>
              This method is not supported, as this is a read-only collection.
            </summary>
            
            <exception cref="T:System.NotSupportedException">This collection is read-only</exception>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.Add(System.Collections.Generic.KeyValuePair{`1,`0})">
            <summary>
              This method is not supported, as this is a read-only collection.
            </summary>
            
            <exception cref="T:System.NotSupportedException">This collection is read-only</exception>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.Remove(`0)">
            <summary>
              This method is not supported, as this is a read-only collection.
            </summary>
            
            <exception cref="T:System.NotSupportedException">This collection is read-only</exception>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              This method is not supported, as this is a read-only collection.
            </summary>
            
            <exception cref="T:System.NotSupportedException">This collection is read-only</exception>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              This method is not supported, as this is a read-only collection.
            </summary>
            
            <exception cref="T:System.NotSupportedException">This collection is read-only</exception>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.Insert(System.Int32,`1)">
            <summary>
              This method is not supported, as this is a read-only collection.
            </summary>
            
            <exception cref="T:System.NotSupportedException">This collection is read-only</exception>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.RemoveAt(System.Int32)">
            <summary>
              This method is not supported, as this is a read-only collection.
            </summary>
            
            <exception cref="T:System.NotSupportedException">This collection is read-only</exception>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyKeyedCollection`2.Clear">
            <summary>
              Not supported.
            </summary>
            
            <exception cref="T:System.NotSupportedException">This collection is read-only</exception>
            
        </member>
        <member name="P:Accord.Collections.ReadOnlyKeyedCollection`2.Keys">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
            
        </member>
        <member name="P:Accord.Collections.ReadOnlyKeyedCollection`2.Values">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
            
        </member>
        <member name="P:Accord.Collections.ReadOnlyKeyedCollection`2.Item(`0)">
            <summary>
              Gets or sets the element with the specified key.
            </summary>
            
            <param name="key">The key.</param>
            
            <exception cref="T:System.NotSupportedException">This collection is read-only</exception>
            
        </member>
        <member name="P:Accord.Collections.ReadOnlyKeyedCollection`2.IsReadOnly">
            <summary>
              Returns true.
            </summary>
            
        </member>
        <member name="T:Accord.Collections.ReadOnlyDictionary`2">
            <summary>
              Read-only dictionary wrapper.
            </summary>
            
            <remarks>
              This collection implements a read-only dictionary. Read-only collections
              can not be changed once they are created and are useful for presenting
              information to the user without allowing alteration.
            </remarks>
            
            <typeparam name="TKey">The types of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
              Constructs a new read-only wrapper around a <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/>.
            </summary>
            
            <param name="dictionary">The dictionary to wrap.</param>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
              Does nothing, as this collection is read-only.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
              Determines whether the <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/>
              contains an element with the specified key.
            </summary>
            
            <param name="key">The key to locate in the <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/>.</param>
            
            <returns>
               <c>true</c> if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains
                an element with the key; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
              Does nothing, as this collection is read-only.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
               Gets the value associated with the specified key.
            </summary>
            
            <param name="key">The key whose value to get.</param>
            
            <param name="value">
               When this method returns, the value associated with the specified key, if
               the key is found; otherwise, the default value for the type of the value
               parameter. This parameter is passed uninitialized.</param>
               
            <returns>
                true if the <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/>
                contains an element with the specified key; otherwise, false.</returns>
                
        </member>
        <member name="M:Accord.Collections.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Does nothing, as this collection is read-only.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyDictionary`2.Clear">
            <summary>
              Does nothing, as this collection is read-only.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Determines whether the <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/>
              contains an element with the specified key.
            </summary>
            
            <param name="item">The key to locate in the <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/>.</param>
            
            <returns>
              <c>true</c> if the <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/>
              contains an element with the key; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
              Copies the entire <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/> to a 
              compatible one-dimensional Array, starting at the specified index of 
              the target array.
            </summary>
            
            <param name="array">
              The one-dimensional Array that is the destination
              of the elements copied from <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/>. The 
              Array must have zero-based indexing.</param>
            
            <param name="arrayIndex">
              The zero-based index in array at which copying begins. </param>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Does nothing, as this collection is read-only.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="P:Accord.Collections.ReadOnlyDictionary`2.Keys">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of
              the <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/>.
            </summary>
            
            <value>The keys.</value>
            
        </member>
        <member name="P:Accord.Collections.ReadOnlyDictionary`2.Values">
            <summary>
             Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in
             the <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/>.
            </summary>
            
            <value>
              An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the
              values in the <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/>.
             </value>
             
        </member>
        <member name="P:Accord.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
              Gets the element with the specified key. Set is not supported.
            </summary>
            
            <value>The element with the specified key.</value>
            
        </member>
        <member name="P:Accord.Collections.ReadOnlyDictionary`2.Count">
            <summary>
              Gets the number of elements contained in this
              <see cref="T:Accord.Collections.ReadOnlyDictionary`2"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
              Always returns true.
            </summary>
            
        </member>
        <member name="T:Accord.Collections.RedBlackTreeDictionary`2">
            <summary>
              Sorted dictionary based on a <see cref="T:Accord.Collections.RedBlackTree`1">red-black tree</see>.
            </summary>
            
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TValue">The type of the values in the collection</typeparam>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.#ctor">
            <summary>
              Creates a new <see cref="T:Accord.Collections.RedBlackTreeDictionary`2"/> 
              using the default comparer for the <typeparamref name="TKey">key
              type</typeparamref>.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
              Creates a new <see cref="T:Accord.Collections.RedBlackTreeDictionary`2"/>.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.Add(`0,`1)">
            <summary>
              Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Adds an element with the provided key and value to the dictionary.
            </summary>
            
            <param name="item">
              The <see cref="T:System.Collections.Generic.KeyValuePair`2">key-value pair</see> 
              containing the desired key and the value to be added.
            </param>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.Remove(`0)">
            <summary>
              Removes the element with the specified key from the dictionary.
            </summary>
            
            <param name="key">The key of the element to remove.</param>
            
            <returns>
              <c>true</c> if the element is successfully removed; otherwise, false. 
              This method also returns false if <paramref name="key" /> was not found 
              in the original dictionary.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Removes the first occurrence of a specific object from the dictionary.
            </summary>
            
            <param name="item">The object to remove from the dictionary.</param>
            
            <returns>
              <c>true</c> if <paramref name="item" /> was successfully removed from 
              the dictionary; otherwise, false. This method also returns false if 
              <paramref name="item" /> is not found in the original dictionary.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.ContainsKey(`0)">
            <summary>
              Determines whether the dictionary contains an element with the specified key.
            </summary>
            
            <param name="key">The key to locate in the dictionary.</param>
            
            <returns>
              <c>true</c> if the dictionary contains an element with the key; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Determines whether the dictionary contains a specific value.
            </summary>
            
            <param name="item">The object to locate in the dictionary.</param>
            
            <returns>
              <c>true</c> if <paramref name="item" /> is found in the dictionary; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
              Gets the value associated with the specified key.
            </summary>
            
            <param name="key">The key whose value to get.</param>
            <param name="value">
              When this method returns, the value associated with the specified key, 
              if the key is found; otherwise, the default value for the type of the 
              <paramref name="value" /> parameter. This parameter is passed 
              uninitialized.
            </param>
            
            <returns>
              <c>true</c> if the dictionary contains an element with the specified key; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.Clear">
            <summary>
              Removes all elements from the dictionary.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
              Copies the elements of this dictionary to an array, starting at a particular array index.
            </summary>
            
            <param name="array">
              The one-dimensional Array that is the destination of the elements
              copied from ICollection. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the dictionary.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.Generic.IEnumerator{T}"/>
              object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the dictionary.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.Min">
            <summary>
              Gets the pair with the minimum <c>key</c> stored in the dictionary.
            </summary>
            
            <returns>
              The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> with
              the minimum key present in the dictionary.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.Max">
            <summary>
              Gets the pair with the maximum <c>key</c> stored in the dictionary.
            </summary>
            
            <returns>
              The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> with
              the minimum key present in the dictionary.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.GetPrevious(`0)">
            <summary>
              Gets the next key-value pair in the dictionary whose key is
              the immediate ancestor of the given <paramref name="key"/>.
            </summary>
            
            <param name="key">The key whose ancestor must be found.</param>
            
            <returns>
              The key-value pair whose key is the immediate ancestor of <paramref name="key"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.TryGetPrevious(`0,System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
              Gets the next key-value pair in the dictionary whose key is
              the immediate ancestor of the given <paramref name="key"/>.
            </summary>
            
            <param name="key">The key whose ancestor must be found.</param>
            <param name="prev">
              The key-value pair whose key is the immediate ancestor of
              <paramref name="key"/>, returned as an out parameter.
            </param>
            
            <returns>
              True if there was an ancestor in the dictionary; false otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.GetNext(`0)">
            <summary>
              Gets the next key-value pair in the dictionary whose key is
              the immediate successor to the given <paramref name="key"/>.
            </summary>
            
            <param name="key">The key whose successor must be found.</param>
            
            <returns>
              The key-value pair whose key is the immediate successor of <paramref name="key"/>.
            </returns>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeDictionary`2.TryGetNext(`0,System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
              Gets the next key-value pair in the dictionary whose key is
              the immediate successor to the given <paramref name="key"/>.
            </summary>
            
            <param name="key">The key whose successor must be found.</param>
            <param name="next">
              The key-value pair whose key is the immediate sucessor of
              <paramref name="key"/>, returned as an out parameter.
            </param>
            
            <returns>
              True if there was a successor in the dictionary; false otherwise.
            </returns>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTreeDictionary`2.Keys">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection{T}"/> 
              containing the keys of the <see cref="T:Accord.Collections.RedBlackTreeDictionary`2"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTreeDictionary`2.Values">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection{T}"/> 
              containing the values of the <see cref="T:Accord.Collections.RedBlackTreeDictionary`2"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTreeDictionary`2.Item(`0)">
            <summary>
              Gets or sets the element with the specified key.
            </summary>
            
            <param name="key">The key.</param>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The requested key was not found in the present tree.</exception>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTreeDictionary`2.Count">
            <summary>
              Gets the number of elements on this dictionary.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTreeDictionary`2.IsReadOnly">
            <summary>
              Gets a value indicating whether this instance is read only.
            </summary>
            
            <value>
              Returns <c>false</c>.
            </value>
            
        </member>
        <member name="T:Accord.Collections.RedBlackTreeNodeType">
            <summary>
              Possible node colors for <see cref="T:Accord.Collections.RedBlackTree`1"/>s.
            </summary>
            
        </member>
        <member name="F:Accord.Collections.RedBlackTreeNodeType.Red">
            <summary>
              Red node.
            </summary>
            
        </member>
        <member name="F:Accord.Collections.RedBlackTreeNodeType.Black">
            <summary>
              Black node.
            </summary>
            
        </member>
        <member name="T:Accord.Collections.RedBlackTreeNode`1">
            <summary>
              <see cref="T:Accord.Collections.RedBlackTree`1"/> node.
            </summary>
            
            <typeparam name="T">The type of the value to be stored.</typeparam>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeNode`1.#ctor">
            <summary>
              Constructs a new empty node.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeNode`1.#ctor(`0)">
            <summary>
              Constructs a node containing the given <param name="value"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTreeNode`1.Parent">
            <summary>
              Gets or sets a reference to this node's parent node.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTreeNode`1.Right">
            <summary>
              Gets or sets a reference to this node's right child.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTreeNode`1.Left">
            <summary>
              Gets or sets a reference to this node's left child.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTreeNode`1.Color">
            <summary>
              Gets or sets this node's color.
            </summary>
            
        </member>
        <member name="P:Accord.Collections.RedBlackTreeNode`1.Value">
            <summary>
              Gets or sets the value associated with this node.
            </summary>
            
        </member>
        <member name="T:Accord.Collections.RedBlackTreeNode`2">
            <summary>
              <see cref="T:Accord.Collections.RedBlackTree`1"/> node.
            </summary>
            
            <typeparam name="TKey">The type of the key that identifies the value.</typeparam>
            <typeparam name="TValue">The type of the values stored in this node.</typeparam>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeNode`2.#ctor">
            <summary>
              Constructs a new empty node.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeNode`2.#ctor(`0,`1)">
            <summary>
              Constructs a new node containing the given <param name="key">
              key</param> and <param name="value">value</param> pair.
            </summary>
            
        </member>
        <member name="M:Accord.Collections.RedBlackTreeNode`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Constructs a new node containing the given
              <param name="item">key and value pair</param>.
            </summary>
            
        </member>
    </members>
</doc>
