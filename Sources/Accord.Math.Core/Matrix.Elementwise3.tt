<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".txt"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="T4Toolbox.tt"#>
<#
    new MatrixOperationTemplate() .RenderToFile("Matrix.MultiplyAndAdd.Generated.cs");
#>
<#+
public class MatrixOperationTemplate : Template
{

    public MatrixOperationTemplate() 
    { 
    }

    public override string TransformText()
    {
        string[] types =
        { 
            "int", 
            "float", 
            "double", 
            "byte", 
            //"sbyte", 
            "decimal",
            // "short",
            // "long",
            // "uint", "ulong", "ushort"
        };
#>
// Accord Math Library
// The Accord.NET Framework
// http://accord-framework.net
//
// Copyright © César Souza, 2009-2017
// cesarsouza at gmail.com
//
//    This library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    This library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with this library; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// ======================================================================
// This code has been generated by a tool; do not edit manually. Instead,
// edit the T4 template Matrix.Elementwise2.tt so this file can be regenerated. 
// ======================================================================

namespace Accord.Math
{
    using System;
    using Accord.Math;
    using System.Runtime.CompilerServices;

    public static partial class Elementwise
    {
#pragma warning disable 1591


<#+
        foreach (string a in types)
        {
            string b = a;
            string c = a;
            string r = a;
#>

        #region Matrix matrix

        /// <summary>
        ///   Multiplies a matrix <c>A</c> with a scalar <c>b</c> and accumulates with <c>c</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="c">The matrix <c>c</c>.</param>
        /// <param name="result">The matrix where the result should be stored. Pass the same
        ///   matrix as one of the arguments to perform the operation in place.</param>
        /// 
#if NET45 || NET46 || NET462 || NETSTANDARD2_0
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
        public static <#=r#>[][] MultiplyAndAdd(this <#=a#>[][] a, <#=b#> b, <#=c#>[][] c, <#=r#>[][] result)
        {
            check<<#=a#>, <#=b#>, <#=c#>, <#=r#>>(a: a, b: b, c: c, result: result);
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (<#=r#>)((<#=r#>)(a[i][j]) * b + (<#=r#>)(c[i][j]));

            return result;
        }

        /// <summary>
        ///   Multiplies a matrix <c>A</c> with a scalar <c>b</c> and accumulates with <c>c</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="c">The matrix <c>c</c>.</param>
        /// <param name="result">The matrix where the result should be stored. Pass the same
        ///   matrix as one of the arguments to perform the operation in place.</param>
        /// 
#if NET45 || NET46 || NET462 || NETSTANDARD2_0
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
        public static <#=r#>[,] MultiplyAndAdd(this <#=a#>[,] a, <#=b#> b, <#=c#>[,] c, <#=r#>[,] result)
        {
            check<<#=a#>, <#=b#>, <#=c#>, <#=r#>>(a: a, b: b, c: c, result: result);
            for (int i = 0; i < result.GetLength(0); i++)
                for (int j = 0; j < result.GetLength(1); j++)
                    result[i, j] = (<#=r#>)((<#=r#>)(a[i, j]) * b + (<#=r#>)(c[i, j]));

            return result;
        }

        #endregion


<#+
        }
#>
#pragma warning restore 1591
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>