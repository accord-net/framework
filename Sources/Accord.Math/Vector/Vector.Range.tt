<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension="Generated.cs" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="T4Toolbox.tt" #>
// Accord Math Library
// The Accord.NET Framework
// http://accord-framework.net
//
// Copyright © César Souza, 2009-2015
// cesarsouza at gmail.com
//
//    This library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    This library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with this library; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// ======================================================================
// This code has been generated by a tool; do not edit manually. Instead,
// edit the T4 template Vector.Range.tt so this file can be regenerated. 
// ======================================================================


namespace Accord.Math
{
    using System;
    using Accord.Math;

    public static partial class Vector
    {
<# 
    string[] types = { "int", "float", "double", "short", "byte", "sbyte", "long", "decimal", "ulong", "ushort" };

    foreach (string i in types)
    {
        var s = i == "int" ? "double" : i;
        var c = i != "decimal" ? "double" : i;
#>

        /// <summary>
        ///   Creates a range vector.
        /// </summary>
        /// 
        public static <#=i#>[] Range(<#=i#> n)
        {
            <#=i#>[] r = new <#=i#>[(int)n]; 
            for (int i = 0; i < r.Length; i++)
                r[i] = (<#=i#>)i;
            return r;
        }

        /// <summary>
        ///   Creates a range vector.
        /// </summary>
        /// 
        public static <#=i#>[] Range(<#=i#> a, <#=i#> b)
        {
            if (a == b)
                return new [] { a };

            <#=i#>[] r;

            if (b > a)
            {
                r = new <#=i#>[(int)(b - a)];
                for (int i = 0; i < r.Length; i++)
                    r[i] = (<#=i#>)(a++);
            }
            else
            {
                r = new <#=i#>[(int)(a - b)];
                for (int i = 0; i < r.Length; i++)
                    r[i] = (<#=i#>)(a-- - 1);
            }

            return r;
        }

        /// <summary>
        ///   Creates an interval vector.
        /// </summary>
        /// 
        public static <#=i#>[] Range(<#=i#> a, <#=i#> b, <#=s#> stepSize)
        {
            if (a == b)
                return new [] { a };

            <#=i#>[] r;

            if (b > a)
            {
                int steps = (int)System.Math.Ceiling((b - a) / (<#=c#>)stepSize);
                r = new <#=i#>[steps];
                for (uint i = 0; i < r.Length; i++)
                    r[i] = (<#=i#>)(a +  i * stepSize);
                r[steps - 1] = (<#=i#>)(b);
            }
            else
            {
                int steps = (int)System.Math.Ceiling((a - b) / (<#=c#>)stepSize);
                r = new <#=i#>[steps];
                for (uint i = 0; i < r.Length; i++)
                    r[i] = (<#=i#>)(a - i * stepSize);
                r[steps - 1] = (<#=i#>)(b);
            }

            return r;
        }
<#
    }

    string[] ranges = { "DoubleRange", "Range", "ByteRange", "IntRange" };
    string[] rtypes = { "double", "float", "byte", "int" }; 

    for (int i = 0; i < ranges.Length; i++)
    {
        var ri = ranges[i];
        var ti = rtypes[i];

        var s = ti == "int" ? "double" : ti;
        var c = ti != "decimal" ? "double" : ti;
#>

        /// <summary>
        ///   Creates an interval vector.
        /// </summary>
        /// 
        public static <#=ti#>[] Range(this <#=ri#> range)
        {
            return Range(range.Min, range.Max);
        }

        /// <summary>
        ///   Creates an interval vector.
        /// </summary>
        /// 
        public static <#=ti#>[] Range(this <#=ri#> range, <#=s#> stepSize)
        {
            return Range(range.Min, range.Max, stepSize);
        }
<#
    }
#>
    }
}