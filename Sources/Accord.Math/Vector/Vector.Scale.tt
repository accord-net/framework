<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension="Generated.cs" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="T4Toolbox.tt" #>
// Accord Math Library
// The Accord.NET Framework
// http://accord-framework.net
//
// Copyright © César Souza, 2009-2015
// cesarsouza at gmail.com
//
//    This library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    This library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with this library; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// ======================================================================
// This code has been generated by a tool; do not edit manually. Instead,
// edit the T4 template Vector.Scale.tt so this file can be regenerated. 
// ======================================================================

namespace Accord.Math
{
    using System;
    using Accord.Math;

    public static partial class Vector
    {
<# 
    string[] types = { "int", "float", "double", "short", "byte", "sbyte", "long" };

    foreach (string i in types)
    {
        foreach (string o in types)
        {
#>
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static <#=o#> Scale(this <#=i#> value, <#=i#> fromMin, <#=i#> fromMax, <#=o#> toMin, <#=o#> toMax)
        {
            if (fromMin == fromMax && fromMin == toMin && fromMin == toMax)
                return (<#=o#>)value;
            return (<#=o#>)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static <#=o#>[] Scale(this <#=i#>[] values, <#=i#> fromMin, <#=i#> fromMax, <#=o#> toMin, <#=o#> toMax, <#=o#>[] result)
        {
            if (fromMin == fromMax && fromMin == toMin && fromMin == toMax)
            {
<#      
            if (o == i)
            {
#>
                return values;
<#      
            }
            else                    
            {
#>
                for (int i = 0; i < values.Length; i++)
                    result[i] = (<#=o#>)values[i];                
                return result;
<#
            }
#>
            }

            for (int i = 0; i < values.Length; i++)
                result[i] = (<#=o#>)((toMax - toMin) * (values[i] - fromMin) / (<#=o#>)(fromMax - fromMin) + toMin);
            return result;
        }



        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static <#=o#> Scale(this <#=i#> value, IRange<<#=i#>> fromRange, IRange<<#=o#>> toRange)
        {
            return Scale(value, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static <#=o#>[] Scale(this <#=i#>[] values, <#=i#> fromMin, <#=i#> fromMax, <#=o#> toMin, <#=o#> toMax)
        {
            return Scale(values, fromMin, fromMax, toMin, toMax, new <#=o#>[values.Length]);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static <#=o#>[] Scale(this <#=i#>[] values, <#=o#> toMin, <#=o#> toMax)
        {
            <#=o#>[] result = new <#=o#>[values.Length];
            <#=i#> fromMin, fromMax;
            values.GetRange(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax, result);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static <#=o#>[] Scale(this <#=i#>[] values, <#=o#> toMin, <#=o#> toMax, <#=o#>[] result)
        {
            <#=i#> fromMin, fromMax;
            values.GetRange(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax, result);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static <#=o#>[] Scale(this <#=i#>[] values, IRange<<#=i#>> fromRange, IRange<<#=o#>> toRange, <#=o#>[] result)
        {
            return Scale(values, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max, result);
        }


        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static <#=o#>[] Scale(this <#=i#>[] values, IRange<<#=i#>> fromRange, IRange<<#=o#>> toRange)
        {
            return Scale(values, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max, new <#=o#>[values.Length]);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static <#=o#>[] Scale(this <#=i#>[] values, IRange<<#=o#>> toRange, <#=o#>[] result)
        {
            <#=i#> fromMin, fromMax;
            values.GetRange(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toRange.Min, toRange.Max, result);
        }
<#
        }
    }
#>
    }
}