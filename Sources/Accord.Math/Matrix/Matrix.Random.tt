<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension="Generated.cs" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="T4Toolbox.tt" #>
// Accord Math Library
// The Accord.NET Framework
// http://accord-framework.net
//
// Copyright © César Souza, 2009-2016
// cesarsouza at gmail.com
//
//    This library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    This library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with this library; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// ======================================================================
// This code has been generated by a tool; do not edit manually. Instead,
// edit the T4 template Vector.Random.tt so this file can be regenerated. 
// ======================================================================


namespace Accord.Math
{
    using System;
    using Accord.Math;

    public static partial class Matrix
    {
        /// <summary>
        ///   Creates a matrix with uniformly distributed random data.
        /// </summary>
        /// 
        public static double[,] Random(int rows, int columns)
        {
            return Random(rows, columns, 0.0, 1.0);
        }

        /// <summary>
        ///   Creates a matrix with uniformly distributed random data.
        /// </summary>
        /// 
        public static double[,] Random(int size)
        {
            return Random(size, size, 0.0, 1.0);
        }

<# 
    foreach (string i in new[] { "int", "short", "byte", "sbyte", "long", "ulong", "ushort" })
    {
#>
        /// <summary>
        ///   Creates a matrix with uniformly distributed random data.
        /// </summary>
        /// 
        public static <#=i#>[,] Random(int rows, int columns, <#=i#> min, <#=i#> max, <#=i#>[,] result = null)
        {
            if (result == null)
                result = new <#=i#>[rows, columns];

            var random = Accord.Math.Random.Generator.Random;

            for (int i = 0; i < rows; i++)
                for (int j = 0; j < columns; j++)
                    result[i, j] = (<#=i#>)random.Next((int)min, (int)max);
            return result;
        }

        /// <summary>
        ///   Creates a matrix with uniformly distributed random data.
        /// </summary>
        /// 
        public static <#=i#>[,] Random(int size, <#=i#> min, <#=i#> max, bool symmetric = false, <#=i#>[,] result = null)
        {
            if (result == null)
                result = new <#=i#>[size, size];

            var random = Accord.Math.Random.Generator.Random;

            if (symmetric)
            {
                for (int i = 0; i < size; i++)
                    for (int j = i; j < size; j++)
                        result[i, j] = result[j, i] = (<#=i#>)random.Next((int)min, (int)max);
            }
            else
            {
                for (int i = 0; i < size; i++)
                    for (int j = i; j < size; j++)
                        result[i, j] = (<#=i#>)random.Next((int)min, (int)max);
            }
            return result;
        }
<#
    }

    foreach (string i in new[] { "float", "double", "decimal" })
    {
#>
        /// <summary>
        ///   Creates a matrix with uniformly distributed random data.
        /// </summary>
        /// 
        public static <#=i#>[,] Random(int rows, int columns, <#=i#> min, <#=i#> max, <#=i#>[,] result = null)
        {
            if (result == null)
                result = new <#=i#>[rows, columns];

            var random = Accord.Math.Random.Generator.Random;

            for (int i = 0; i < rows; i++)
                for (int j = 0; j < columns; j++)
                    result[i, j] = (<#=i#>)random.NextDouble() * (max - min) + min;
            return result;
        }

        /// <summary>
        ///   Creates a matrix with uniformly distributed random data.
        /// </summary>
        /// 
        public static <#=i#>[,] Random(int size, <#=i#> min, <#=i#> max, bool symmetric = false, <#=i#>[,] result = null)
        {
            if (result == null)
                result = new <#=i#>[size, size];

            var random = Accord.Math.Random.Generator.Random;

            if (symmetric)
            {
                for (int i = 0; i < size; i++)
                    for (int j = i; j < size; j++)
                        result[i, j] = result[j, i] = (<#=i#>)random.NextDouble() * (max - min) + min;
            }
            else
            {
                for (int i = 0; i < size; i++)
                    for (int j = i; j < size; j++)
                        result[i, j] = (<#=i#>)random.NextDouble() * (max - min) + min;
            }
            return result;
        }

<#
    }
#>
    }
}