// Accord Statistics Library
// The Accord.NET Framework
// http://accord-framework.net
//
// Copyright © César Souza, 2009-2016
// cesarsouza at gmail.com
//
//    This library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    This library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with this library; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

namespace Accord.MachineLearning
{
    using Accord.MachineLearning;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    /// <summary>
    ///   Base class for pipelines of transformations.
    /// </summary>
    /// <typeparam name="TInput">The type of the input.</typeparam>
    /// <typeparam name="TOutput">The type of the output.</typeparam>
    /// <seealso cref="Accord.MachineLearning.ITransform{TInput, TOutput}" />
    [Serializable]
    public abstract class Pipeline<TInput, TOutput> : ITransform<TInput, TOutput>
    {
        /// <summary>
        ///   Gets or sets the steps in the pipeline.
        /// </summary>
        /// 
        public ITransform[] Steps { get; set; }

        /// <summary>
        /// Applies the transformation to an input, producing an associated output.
        /// </summary>
        /// <param name="input">The input data to which the transformation should be applied.</param>
        /// <returns>
        /// The output generated by applying this transformation to the given input.
        /// </returns>
        public TOutput Transform(TInput input)
        {
            return Transform(new[] { input })[0];
        }

        /// <summary>
        /// Applies the transformation to an input, producing an associated output.
        /// </summary>
        /// <param name="input">The input data to which the transformation should be applied.</param>
        /// <returns>
        /// The output generated by applying this transformation to the given input.
        /// </returns>
        public TOutput[] Transform(TInput[] input)
        {
            return Transform(input, new TOutput[input.Length]);
        }

        /// <summary>
        /// Applies the transformation to an input, producing an associated output.
        /// </summary>
        /// <param name="input">The input data to which the transformation should be applied.</param>
        /// <param name="result"></param>
        /// <returns>
        /// The output generated by applying this transformation to the given input.
        /// </returns>
        public abstract TOutput[] Transform(TInput[] input, TOutput[] result);

        /// <summary>
        /// Gets the number of inputs accepted by the model.
        /// </summary>
        public int NumberOfInputs
        {
            get { return Steps[0].NumberOfInputs; }
        }

        /// <summary>
        /// Gets the number of outputs generated by the model.
        /// </summary>
        public int NumberOfOutputs
        {
            get { return Steps[Steps.Length - 1].NumberOfOutputs; }
        }
    }
}
